<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devil的个人博客</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="https://devildyw.github.io/atom.xml" rel="self"/>
  
  <link href="https://devildyw.github.io/"/>
  <updated>2022-07-12T04:17:14.281Z</updated>
  <id>https://devildyw.github.io/</id>
  
  <author>
    <name>Devil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://devildyw.github.io/2022/07/12/SpringCloud/"/>
    <id>https://devildyw.github.io/2022/07/12/SpringCloud/</id>
    <published>2022-07-12T03:17:39.000Z</published>
    <updated>2022-07-12T04:17:14.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab持续集成/持续部署</title>
    <link href="https://devildyw.github.io/2022/07/10/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://devildyw.github.io/2022/07/10/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2022-07-10T05:45:18.000Z</published>
    <updated>2022-07-12T04:09:06.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab持续集成-x2F-持续部署"><a href="#Gitlab持续集成-x2F-持续部署" class="headerlink" title="Gitlab持续集成&#x2F;持续部署"></a><a href="http://www.pymjl.com/articles/67">Gitlab持续集成&#x2F;持续部署</a></h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><code>docker</code>环境下直接执行这条命令，安装 <code>Runner</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name gitlab-runner --restart always \</span><br><span class="line">-v /home/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><pre><code>    2. 注册服务 `url `和 `token `在`gitlab`左边的设置展开`runner`即可看到</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab-runner  gitlab-runner register -n \</span><br><span class="line">  --url https://git.pyhub.club/ \</span><br><span class="line">  --registration-token gsh33g31h2Q1E3szh4Jd \</span><br><span class="line">  --description <span class="string">&quot;docker deploy&quot;</span> \</span><br><span class="line">  --docker-privileged=<span class="literal">true</span> \</span><br><span class="line">  --docker-pull-policy=<span class="string">&quot;if-not-present&quot;</span> \</span><br><span class="line">  --docker-image <span class="string">&quot;docker:latest&quot;</span> \</span><br><span class="line">  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --docker-volumes /root/m2:/root/.m2 \</span><br><span class="line">  --executor docker</span><br></pre></td></tr></table></figure><ol start="3"><li>写配置文件<code> .gitlab-ci.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/root/.m2/settings.xml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;&lt;?xml version=\&quot;&quot;</span><span class="number">1.0</span><span class="string">\&quot;&quot;</span> <span class="string">encoding=\&quot;&quot;UTF-8\&quot;&quot;?&gt;&lt;settings</span> <span class="string">xmlns=\&quot;&quot;http://maven.apache.org/SETTINGS/1.0.0\&quot;&quot;</span> <span class="string">xmlns:xsi=\&quot;&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&quot;</span> <span class="string">xsi:schemaLocation=\&quot;&quot;http://maven.apache.org/SETTINGS/1.0.0</span> <span class="string">http://maven.apache.org/xsd/settings-1.0.0.xsd\&quot;&quot;&gt;&lt;mirrors&gt;&lt;mirror&gt;&lt;id&gt;mirror&lt;/id&gt;&lt;name&gt;mirror&lt;/name&gt;&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;mirrorOf&gt;central,jcenter,!rdc-releases,!rdc-snapshots&lt;/mirrorOf&gt;&lt;/mirror&gt;</span> <span class="string">&lt;/mirrors&gt;</span>     <span class="string">&lt;servers&gt;</span></span><br><span class="line">        <span class="string">&lt;server&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;username&gt;617d503fbc6f250a94c5d6ec&lt;/username&gt;</span></span><br><span class="line">            <span class="string">&lt;password&gt;VDzlsL5jYZot&lt;/password&gt;</span></span><br><span class="line">        <span class="string">&lt;/server&gt;</span></span><br><span class="line">        <span class="string">&lt;server&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;username&gt;617d503fbc6f250a94c5d6ec&lt;/username&gt;</span></span><br><span class="line">            <span class="string">&lt;password&gt;VDzlsL5jYZot&lt;/password&gt;</span></span><br><span class="line">        <span class="string">&lt;/server&gt;</span></span><br><span class="line">    <span class="string">&lt;/servers&gt;</span></span><br><span class="line">    <span class="string">&lt;profiles&gt;</span></span><br><span class="line">        <span class="string">&lt;profile&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;properties&gt;</span></span><br><span class="line">                <span class="string">&lt;altReleaseDeploymentRepository&gt;</span></span><br><span class="line">                    <span class="string">rdc-releases::default::https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/</span></span><br><span class="line">                <span class="string">&lt;/altReleaseDeploymentRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;altSnapshotDeploymentRepository&gt;</span></span><br><span class="line">                    <span class="string">rdc-snapshots::default::https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/</span></span><br><span class="line">                <span class="string">&lt;/altSnapshotDeploymentRepository&gt;</span></span><br><span class="line">            <span class="string">&lt;/properties&gt;</span></span><br><span class="line">            <span class="string">&lt;repositories&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;central&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">            <span class="string">&lt;/repositories&gt;</span></span><br><span class="line">            <span class="string">&lt;pluginRepositories&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;central&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">            <span class="string">&lt;/pluginRepositories&gt;</span></span><br><span class="line">        <span class="string">&lt;/profile&gt;</span></span><br><span class="line">    <span class="string">&lt;/profiles&gt;</span></span><br><span class="line">    <span class="string">&lt;activeProfiles&gt;</span></span><br><span class="line">        <span class="string">&lt;activeProfile&gt;rdc&lt;/activeProfile&gt;</span></span><br><span class="line">    <span class="string">&lt;/activeProfiles&gt;</span></span><br><span class="line">    <span class="string">&lt;/settings&gt;&quot;</span> <span class="string">&gt;</span> <span class="string">/root/.m2/settings.xml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">jar_name:</span> <span class="string">fileservice-0.0.1-SNAPSHOT.jar</span></span><br><span class="line">  <span class="attr">java_path:</span> <span class="string">/usr/local/jdk/jdk1.8.0_321/bin</span></span><br><span class="line">  <span class="attr">TAG:</span> <span class="string">file-service:v1.0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">file-service</span></span><br><span class="line">  <span class="attr">PORT:</span> <span class="number">8900</span></span><br><span class="line">  <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5.0-jdk-8</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">fileservice</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">m2-repo</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fileservice/target/$jar_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span> <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$TAG</span> <span class="string">.</span> <span class="comment"># 构件镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$CONTAINER_NAME</span> <span class="string">||</span> <span class="literal">true</span> <span class="comment"># 删除容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">--net=host</span> <span class="string">$TAG</span> <span class="comment"># 运行容器</span></span><br><span class="line">  <span class="attr">only:</span> <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:  <a href="http://www.pymjl.com/articles/67">pymjl大佬的- gitlab持续集成&#x2F;持续部署</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gitlab持续集成-x2F-持续部署&quot;&gt;&lt;a href=&quot;#Gitlab持续集成-x2F-持续部署&quot; class=&quot;headerlink&quot; title=&quot;Gitlab持续集成&amp;#x2F;持续部署&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.pymjl.co</summary>
      
    
    
    
    <category term="DevOps" scheme="https://devildyw.github.io/categories/DevOps/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>应用上下文工具类</title>
    <link href="https://devildyw.github.io/2022/07/03/%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://devildyw.github.io/2022/07/03/%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-07-03T06:39:42.000Z</published>
    <updated>2022-07-03T06:44:54.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用上下文工具类-ApplicationContextUtil"><a href="#应用上下文工具类-ApplicationContextUtil" class="headerlink" title="应用上下文工具类(ApplicationContextUtil)"></a>应用上下文工具类(ApplicationContextUtil)</h2><p>该类可以帮助我们获取得到Spring容器中的Bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.shirospringboot.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-03-14:24</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该工具类主要是用于那些没有被Spring容器管理的类来使用Spring管理的Bean的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        ApplicationContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name,以及Clazz返回指定的Bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实现了<code>ApplicationContextAware</code>接口，实现<code>void setApplicationContext(ApplicationContext applicationContext) throws BeansException;</code>方法</p><p><code>setApplicationContext</code>方法会在初始化对象的的时候调用，这时Spring会将<code>ApplicationContext</code>（即Spring的<code>IOC</code>容器）注入该对象，通过该方法接收。</p><p>接收到之后我们就可以通过这个容器对象按需取出里面的Bean了。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>当我们正在使用的类并没有被带上加入如<code>@Component</code>、<code>@Service</code>等注解时，我们的类的生命周期是不受Spring容器管理的，这时我们的类中配置的各种以便于Spring注入的注解是不会生效的。所以这时我们需要一个可以帮助我们从Spring容器中手动获取Bean的工具类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;应用上下文工具类-ApplicationContextUtil&quot;&gt;&lt;a href=&quot;#应用上下文工具类-ApplicationContextUtil&quot; class=&quot;headerlink&quot; title=&quot;应用上下文工具类(ApplicationContextUti</summary>
      
    
    
    
    <category term="spring框架" scheme="https://devildyw.github.io/categories/spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>HelloDocker!</title>
    <link href="https://devildyw.github.io/2022/07/02/Hello%20Docker!/"/>
    <id>https://devildyw.github.io/2022/07/02/Hello%20Docker!/</id>
    <published>2022-07-02T15:30:35.000Z</published>
    <updated>2022-07-02T15:34:41.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hello-Docker"><a href="#Hello-Docker" class="headerlink" title="Hello Docker !"></a>Hello Docker !</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox官方镜像，启动容器并执行输出&quot;Hello Docker&quot;</span></span><br><span class="line"><span class="comment">#拉取busybox官方最新镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -it busybox <span class="built_in">echo</span> <span class="string">&quot;Hello Docker&quot;</span></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox:1.27镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker pull busybox:1.27</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建并启动一个容器，容器名为firstContainer，具备busybox的运行环境。并输出hello world</span></span><br><span class="line"><span class="comment">#拉取busybox最新镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --name firstContainer busybox <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以ubuntu镜像为基础，创建并在后台启动了一个名为firstContainer的容器（-d看不懂没关系，下一关会介绍的）</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull ubutun可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker run -itd --name firstContainer ubuntu /bin/bash</span><br><span class="line"><span class="comment">#将firstContainer容器停止！</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker stop firstContainer</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="进入一个容器"><a href="#进入一个容器" class="headerlink" title="进入一个容器"></a>进入一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于ubuntu镜像创建并在后台启动一个名为container2的容器</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull ubutun可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker run -itd --name container2 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#由于测试环境不允许从终端输入，所以请使用docker exec完成任务</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">exec</span> container2 <span class="built_in">touch</span> 1.txt</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"><span class="comment">#拉取ubutun ，busybox最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#创建两个容器</span></span><br><span class="line">docker run -itd ubuntu /bin/bash</span><br><span class="line">docker run busybox <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="基于Commit定制镜像"><a href="#基于Commit定制镜像" class="headerlink" title="基于Commit定制镜像"></a>基于Commit定制镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox镜像创建一个容器，在容器中创建一个hello.txt的文件。</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line">docker run --name container1 busybox <span class="built_in">touch</span> hello.txt</span><br><span class="line"><span class="comment">#将对容器container1做出的修改提交为一个新镜像，镜像名为busybox:v1</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker commit container1 busybox:v1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="基于save保存镜像与基于load加载镜像"><a href="#基于save保存镜像与基于load加载镜像" class="headerlink" title="基于save保存镜像与基于load加载镜像"></a>基于save保存镜像与基于load加载镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先拉取一个busybox镜像</span></span><br><span class="line">docker pull busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.将busybox:latest镜像保存到tar包</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker save busybox:latest &gt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除busybox:latest镜像</span></span><br><span class="line">docker rmi busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.从tar包加载busybox:latest镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker load &lt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox为镜像创建一个容器，容器名为busyboxContainer</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line">docker run --name busyboxContainer busybox <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#1.然后将busyboxContainer导出为容器快照：busybox.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">export</span> busyboxContainer &gt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.最后使用该容器快照导入镜像，镜像名为busybox:v1.0。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="built_in">cat</span> busybox.tar | docker import - busybox:v1.0</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox为基础镜像创建一个容器，容器名为container3</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line">docker run --name container3 busybox:latest <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#然后将busybox:latest镜像删除</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker rmi -f busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="构建私有Registry"><a href="#构建私有Registry" class="headerlink" title="构建私有Registry"></a>构建私有Registry</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建一个私人仓库</span></span><br><span class="line">docker pull registry:2</span><br><span class="line">docker run -d -p 5000:5000 --restart=always --name myregistry registry:2</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.使用docker tag给busybox加上一个标签localhost:5000/my-busybox:latest</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker tag busybox localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.将localhost:5000/my-busybox:latest镜像推送到私人仓库</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker push localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除本地镜像</span></span><br><span class="line">docker rmi localhost:5000/my-busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.从私人仓库拉取localhost:5000/my-busybox:latest镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker pull localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除私人仓库并将私人仓库中的镜像也删除掉</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf myregistry</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir1</span><br><span class="line"><span class="built_in">cd</span> newdir1</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在基础镜像的基础上，创建一个hello.txt文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#使用Dockerfile创建一个新镜像，镜像名为busybox:v1</span></span><br><span class="line">docker build -t busybox:v1 .</span><br></pre></td></tr></table></figure><h3 id="docker-build、COPY和ADD"><a href="#docker-build、COPY和ADD" class="headerlink" title="docker build、COPY和ADD"></a>docker build、COPY和ADD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir2</span><br><span class="line"><span class="built_in">cd</span> newdir2</span><br><span class="line"><span class="comment">#创建一个文件夹dir1，将其压缩，然后删除dir1</span></span><br><span class="line"><span class="built_in">mkdir</span> dir1 &amp;&amp; tar -cvf dir1.tar dir1 &amp;&amp; <span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#并将上下文目录下的dir1.tar“解压提取后”，拷贝到busybox:v3的/</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;RUN mkdir dir1&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ADD ./dir1.tar /&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为busybox:v3的镜像</span></span><br><span class="line">docker build -t busybox:v3 .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="CMD和ENTRYPOINT指令"><a href="#CMD和ENTRYPOINT指令" class="headerlink" title="CMD和ENTRYPOINT指令"></a>CMD和ENTRYPOINT指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir3</span><br><span class="line"><span class="built_in">cd</span> newdir3</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#默认情况下，将启动命令设置为df -Th。要求df命令不能被覆盖，但-Th能够被覆盖。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ENTRYPOINT [&quot;df&quot;]&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CMD [&quot;-Th&quot;]&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为mydisk:latest的镜像</span></span><br><span class="line">docker build -t mydisk:latest .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="ENV、EXPOSE、WORKDIR、ARG指令"><a href="#ENV、EXPOSE、WORKDIR、ARG指令" class="headerlink" title="ENV、EXPOSE、WORKDIR、ARG指令"></a>ENV、EXPOSE、WORKDIR、ARG指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir4</span><br><span class="line"><span class="built_in">cd</span> newdir4</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#声明暴露3000端口</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;EXPOSE 3000&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#将变量var1=test设置为环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ENV var1=test&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#设置工作目录为/tmp</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;WORKDIR /tmp&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#在工作目录下创建一个1.txt文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;RUN touch 1.txt&quot;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为testimage:v1的镜像</span></span><br><span class="line">docker build -t testimage:v1 .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名为vo1的数据卷，并将该数据卷挂载到container1容器的/dir1目录。</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker volume create vo1</span><br><span class="line">docker run -itd --name container1 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="挂载和共享数据卷"><a href="#挂载和共享数据卷" class="headerlink" title="挂载和共享数据卷"></a>挂载和共享数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建一个名为container1的容器，并将本地主机的/dir1目录挂载到容器中的/codir1中。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -d --name container1 -v /dir1:/codir1 ubuntu </span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#2.创建一个名为container2的容器，与container1共享数据卷。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -d --name container2 --volumes-from container1 ubuntu</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看数据卷的信息"><a href="#查看数据卷的信息" class="headerlink" title="查看数据卷的信息"></a>查看数据卷的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个容器，并创建一个随机名字的数据卷挂载到容器的/data目录</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu &amp;&gt; /dev/null </span><br><span class="line">docker <span class="built_in">rm</span> container1 -f &amp;&gt;/dev/null</span><br><span class="line">docker run -v /data --name container1 ubuntu</span><br><span class="line"><span class="comment">#输出容器container1创建的数据卷的名字</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker inspect --<span class="built_in">type</span> container --format=<span class="string">&#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;.Name&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> container1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名为container1的容器，创建一个数据卷挂载到容器的/data目录</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"></span><br><span class="line">docker run -v vo4:/data --name container1 ubuntu</span><br><span class="line"><span class="comment">#删除container1对应的数据卷</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">rm</span> -f -v container1</span><br><span class="line">docker volume <span class="built_in">rm</span> vo4</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="备份、恢复数据卷"><a href="#备份、恢复数据卷" class="headerlink" title="备份、恢复数据卷"></a>备份、恢复数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"><span class="comment"># 创建一个vo1的数据卷，并在数据卷中添加1.txt文件</span></span><br><span class="line">docker run --name vocontainer1 -v vo1:/dir1 ubuntu <span class="built_in">touch</span> /dir1/1.txt</span><br><span class="line"><span class="comment">#1.将vo1数据卷的数据备份到宿主机的/newback中,将容器的/backup路径挂载上去，并将容器内/dir1文件夹打包至/backup/backup.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer1 -v /newback:/backup ubuntu tar -cvf /backup/backup.tar /dir1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#删除所有的容器以及它使用的数据卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf $(docker ps -aq)</span><br><span class="line">docker volume <span class="built_in">rm</span> vo1</span><br><span class="line"><span class="comment">#在次创建一个vo1的数据卷</span></span><br><span class="line">docker run -itd --name vocontainer2 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#2.将保存在宿主机中备份文件的数据恢复到vocontainer2的/中</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer2 -v /newback:/backup ubuntu tar -xvf /backup/backup.tar -C /</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="备份、恢复数据卷-1"><a href="#备份、恢复数据卷-1" class="headerlink" title="备份、恢复数据卷"></a>备份、恢复数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"><span class="comment"># 创建一个vo1的数据卷，并在数据卷中添加1.txt文件</span></span><br><span class="line">docker run --name vocontainer1 -v vo1:/dir1 ubuntu <span class="built_in">touch</span> /dir1/1.txt</span><br><span class="line"><span class="comment">#1.将vo1数据卷的数据备份到宿主机的/newback中,将容器的/backup路径挂载上去，并将容器内/dir1文件夹打包至/backup/backup.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer1 -v /newback:/backup ubuntu tar -cvf /backup/backup.tar /dir1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#删除所有的容器以及它使用的数据卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf $(docker ps -aq)</span><br><span class="line">docker volume <span class="built_in">rm</span> vo1</span><br><span class="line"><span class="comment">#在次创建一个vo1的数据卷</span></span><br><span class="line">docker run -itd --name vocontainer2 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#2.将保存在宿主机中备份文件的数据恢复到vocontainer2的/中</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer2 -v /newback:/backup ubuntu tar -xvf /backup/backup.tar -C /</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hello-Docker&quot;&gt;&lt;a href=&quot;#Hello-Docker&quot; class=&quot;headerlink&quot; title=&quot;Hello Docker !&quot;&gt;&lt;/a&gt;Hello Docker !&lt;/h3&gt;&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    <category term="DevOps" scheme="https://devildyw.github.io/categories/DevOps/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>跑步教程</title>
    <link href="https://devildyw.github.io/2022/07/02/%E8%B7%91%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <id>https://devildyw.github.io/2022/07/02/%E8%B7%91%E6%AD%A5%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-02T15:27:56.000Z</published>
    <updated>2022-07-02T15:29:40.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超详细的新手8周跑步入门训练计划（从走跑开始）"><a href="#超详细的新手8周跑步入门训练计划（从走跑开始）" class="headerlink" title="超详细的新手8周跑步入门训练计划（从走跑开始）"></a><a href="http://www.paobushijie.com/paobujihua/6543-8-zhou-rumen-xunlian">超详细的新手8周跑步入门训练计划（从走跑开始）</a></h1><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/jiayongjie_01.jpg" alt="贾永婕-铁人三项辣妈-女性影星跑步爱好者"></p><h2 id="新手八周跑步训练计划"><a href="#新手八周跑步训练计划" class="headerlink" title="新手八周跑步训练计划~"></a>新手八周跑步训练计划~</h2><p>以缓慢放松的步速完成 30 分钟的跑程<br>开始以步行为主，<br>渐变以跑步为主，<br>简单且循序渐进</p><p><strong>开始的 2 英里是最困难的 2 英里，但如果你达到了这个目标的话，其他的一起都会变得更容易。你只需要安排好的时间，耐心并且按部就班就能轻松达到目标了。</strong></p><p>第一周<br>周一 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周六 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周日 休息</p><p><strong>训练提示：为了给你的训练增加能量，你可以再出门前的两个小时吃点水果或者巧克力，然后再出门前喝适量（约 240g）的运动饮料，这样既能保证你有充足的水分，也能补充钠和钾。</strong></p><p>第二周<br>周一 慢跑和步行：慢跑 2 分钟，步行 1 分钟，重复 10 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 7 次，慢跑 2 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 4 分钟，步行 1 分钟，重复 6 次<br>周六 慢跑和步行：慢跑 4 分钟，步行 1 分钟，重复 6 次<br>周日 休息<br><strong>训练提示：开始训练前可先慢走 2~3 分钟热身，训练结束后再慢走 2-3 分钟放松。不要再跑步前舒展关节，而应该在训练后或晚上看电视的时候进行舒展。</strong></p><p>第三周<br>周一 慢跑和步行：慢跑 5 分钟，步行 1 分钟，重复 5 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 1 分钟，重复 4 次，慢跑 2分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 6 分钟，步行 1 分钟，重复 4 次，慢跑 2 分钟<br>周六 慢跑和步行：慢跑 6 分钟，步行 1 分钟，重复 4 次，慢跑 2 分钟<br>周日 休息<br><strong>训练提示：跑步过程中双臂一定要保持放松。跑步时手肘弯曲 90 度，在腰间前后摆臂。手指弯曲成放松的拳头，不要让手在上身中部胡乱地摇摆。</strong></p><p>第四周<br>周一 慢跑和步行：慢跑 8 分钟，步行 1 分钟，重复 3 次，慢跑 3 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 9 分钟，步行 1 分钟，重复 3 次<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 10 分钟，步行 1 分钟，重复 2 次，慢跑 8 分钟<br>周六 慢跑和步行：慢跑 11 分钟，步行 1 分钟，重复 2 次，慢跑 6 分钟<br>周日 休息<br><strong>训练提示：尽可能在清晨或者傍晚的时候跑步。</strong></p><p>第五周<br>周一 慢跑和步行：慢跑 12 分钟，步行 1 分钟，重复 2 次，慢跑 4 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 13 分钟，步行 1 分钟，重复 2 次，慢跑 4 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 14 分钟，步行 1 分钟，重复 2 次<br>周六 慢跑和步行：慢跑 15 分钟，步行 1 分钟，慢跑 14 分钟<br>周日 休息<br><strong>训练提示：有时你可以跳过行走和跑步的训练，做一些交替运动，如骑车30~40 分钟，上健身房或者参加一些举重训练课程。跑步训练期间的间歇能让你更快地恢复精力，同时还能锻炼到新的肌肉。</strong></p><p>第六周<br>周一 慢跑和步行：慢跑 16 分钟，步行 1 分钟，慢跑 13 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 17 分钟，步行 1 分钟，慢跑 12 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 18 分钟，步行 1 分钟，慢跑 11 分钟<br>周六 慢跑和步行：慢跑 19 分钟，步行 1 分钟，慢跑 10 分钟<br>周日 休息<br><strong>训练提示：跑步是锻炼骨骼的好方法，所以你有必要补充充足的钙质——每天 1000 毫克。如果你在 50 岁以上，则每天需要 1500 毫克。低脂牛奶、低脂酸奶和深绿色叶片蔬菜都是钙质的重要来源。</strong></p><p>第七周<br>周一 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周二 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周三 慢跑和步行：慢跑 22 分钟，步行 1 分钟，慢跑 7 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 24 分钟，步行 1 分钟，慢跑 5 分钟<br>周六 慢跑和步行：慢跑 26 分钟，步行 1 分钟，慢跑 3 分钟<br>周日 休息<br><strong>训练提示：新手跑者通常会觉得胫骨、肋骨或者膝盖酸痛，如果你在训练后能及时进行冰敷，这些痛感很快就会消失，你还可以把豆子装进袋子冷藏后敷在膝盖上 15 分钟。如果疼痛还持续的话，就需要停止几天的训练。</strong></p><p>第八周<br>周一 慢跑和步行：慢跑 27 分钟，步行 1 分钟，慢跑 2 分钟<br>周二 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周三 慢跑和步行：慢跑 28 分钟，步行 1 分钟，慢跑 7 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 29 分钟，步行 1 分钟<br>周六 慢跑和步行：慢跑 30 分钟<br>周日 休息<br><strong>训练提示：要想呼吸新鲜的空气让肺部健康的话，尽量不要到繁忙的街道或者在交通高峰时跑步。找一个车辆比较少的地方，这样废气就可以很快驱散。最好就是找一些绿化带或者公园等。作为一个新手跑者你很快就能够成功了，但锻炼是永远没有止境的，让我们为生活而奔跑喝彩吧！</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/ouyangjing_01.jpg" alt="欧阳靖-跑步书籍作家-女性影星跑步爱好者"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、如果超过 40 岁或者超重 20 斤的话，一定要先咨询医生的意见才可以开始训练计划。但除非这会对身体构成什么危险，一般医生都会鼓励你进行这种走和跑结合的锻炼。<br>2、计划好你的时间。只有你安排出时间才会有锻炼的时间。将运动的计划列入你的行程表中。<br>3、做好出现坏天气的准备。每个人都会遇上不好的天气，但坏天气很快就会过去，而且每一次的训练都会比上一次的要好，所以一定要坚持、坚持、再坚持！<br>4、不要操之过急。欲速则不达，还可能会引起受伤和失落等。所以一定要耐心，循序渐进。你的目标是坚持跑 30 分钟不用停下来，而不是要打破世界纪录。</p><h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><p><a href="http://www.paobushijie.com/running-trainning">跑步训练</a> ： <a href="http://www.paobushijie.com/running-trainning">http://www.paobushijie.com/running-trainning</a><br><a href="http://www.paobushijie.com/running-workouts">跑步体能训练</a> ： <a href="http://www.paobushijie.com/running-workouts">http://www.paobushijie.com/running-workouts</a></p><p><a href="http://www.paobushijie.com/paobuzishi">跑步姿势</a> <a href="http://www.paobushijie.com/paobuzishi">http://www.paobushijie.com/paobuzishi</a><br><a href="http://www.paobushijie.com/running-science">科学跑步</a> <a href="http://www.paobushijie.com/running-science">http://www.paobushijie.com/running-science</a><br><a href="http://www.paobushijie.com/running-technology">跑步技术</a> <a href="http://www.paobushijie.com/running-technology">http://www.paobushijie.com/running-technology</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;超详细的新手8周跑步入门训练计划（从走跑开始）&quot;&gt;&lt;a href=&quot;#超详细的新手8周跑步入门训练计划（从走跑开始）&quot; class=&quot;headerlink&quot; title=&quot;超详细的新手8周跑步入门训练计划（从走跑开始）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://w</summary>
      
    
    
    
    <category term="生活" scheme="https://devildyw.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="锻炼/减肥" scheme="https://devildyw.github.io/tags/%E9%94%BB%E7%82%BC-%E5%87%8F%E8%82%A5/"/>
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="https://devildyw.github.io/2022/06/24/Shiro/"/>
    <id>https://devildyw.github.io/2022/06/24/Shiro/</id>
    <published>2022-06-24T12:14:25.000Z</published>
    <updated>2022-07-02T12:02:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>Apache Shiro</strong>是一个Java的一个安全(权限)框架。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等。</li></ul><h2 id="Shiro的功能"><a href="#Shiro的功能" class="headerlink" title="Shiro的功能"></a>Shiro的功能</h2><p>基本的功能点如下图所示：</p><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroFeatures.png" alt="img"></p><p>Shiro 把 Shiro 开发团队称为“应用程序的四大基石”——身份验证，授权，会话管理和加密作为其目标。</p><ul><li><p><strong>Authentication</strong>：有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。</p></li><li><p><strong>Authorization</strong>：访问控制的过程，也就是绝对“谁”去访问“什么”。</p></li><li><p><strong>Session</strong> <strong>Management</strong>：管理用户特定的会话，即使在非 Web 或 EJB 应用程序。</p></li><li><p><strong>Cryptography</strong>：通过使用加密算法保持数据安全同时易于使用。</p></li></ul><p>也提供了额外的功能来支持和加强在不同环境下所关注的方面，尤其是以下这些：</p><ul><li><p>Web Support：Shiro 的 web 支持的 API 能够轻松地帮助保护 Web 应用程序。</p></li><li><p>Caching：缓存是 Apache Shiro 中的第一层公民，来确保安全操作快速而又高效。</p></li><li><p>Concurrency：Apache Shiro 利用它的并发特性来支持多线程应用程序。</p></li><li><p>Testing：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。</p></li><li><p>“Run As”：一个允许用户假设为另一个用户身份（如果允许）的功能，有时候在管理脚本很有用。</p></li><li><p>“Remember Me”：在会话中记住用户的身份，所以他们只需要在强制时候登录。</p></li></ul><h2 id="Shiro架构"><a href="#Shiro架构" class="headerlink" title="Shiro架构"></a>Shiro架构</h2><p>从外部来看，即从应用程序的角度来观察如何使用Shiro完成工作：</p><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroBasicArchitecture.png" alt="img"></p><ul><li><strong>Subject</strong>：在我们的教程中已经提到，Subject 实质上是一个当前执行用户的特定的安全“视图”。鉴于”User” 一词通常意味着一个人，而一个 Subject 可以是一个人，但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。</li></ul><p>所有 Subject 实例都被绑定到（且这是必须的）一个 SecurityManager 上。当你与一个 Subject 交互时，那些交互作用转化为与 SecurityManager 交互的特定 subject 的交互作用。</p><ul><li><strong>SecurityManager</strong>：SecurityManager 是 Shiro 架构的心脏，并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。然而，一旦 SecurityManager 和它的内置对象图已经配置给一个应用程序，那么它单独留下来，且应用程序开发人员几乎使用他们所有的时间来处理 Subject API。</li></ul><p>我们稍后会更详细地讨论 SecurityManager，但重要的是要认识到，当你正与一个 Subject 进行交互时，实质上是幕后的 SecurityManager 处理所有繁重的 Subject 安全操作。这反映在上面的基本流程图。</p><ul><li><strong>Realms</strong>：Realms 担当 Shiro 和你的应用程序的安全数据之间的“桥梁”或“连接器”。当它实际上与安全相关的数据如用来执行身份验证（登录）及授权（访问控制）的用户帐户交互时，Shiro 从一个或多个为应用程序配置的 Realm 中寻找许多这样的东西。</li></ul><p>在这个意义上说，Realm 本质上是一个特定安全的 DAO：它封装了数据源的连接详细信息，使 Shiro 所需的相关的数据可用。当配置 Shiro 时，你必须指定至少一个 Realm 用来进行身份验证和&#x2F;或授权。SecurityManager 可能配置多个 Realms，但至少有一个是必须的。</p><p>Shiro 提供了立即可用的 Realms 来连接一些安全数据源（即目录），如LDAP，关系数据库（JDBC），文本配置源，像 INI 及属性文件，以及更多。你可以插入你自己的 Realm 实现来代表自定义的数据源，如果默认地Realm 不符合你的需求。</p><p>像其他内置组件一样，Shiro SecurityManager 控制Realms 是如何被用来获取安全和身份数据来代表 Subject 实例的。</p><h3 id="内部架构"><a href="#内部架构" class="headerlink" title="内部架构"></a>内部架构</h3><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroArchitecture.png" alt="img"></p><ul><li><strong>Subject</strong>(org.apache.shiro.subject.Subject)</li></ul><p>​        当前与软件进行交互的实体（用户，第三方服务，cron job，等等）的安全特定“视图”。</p><ul><li><strong>SecurityManager</strong>(org.apache.shiro.mgt.SecurityManager)</li></ul><p>​        如上所述，SecurityManager 是 Shiro 架构的心脏。它基本上是一个“保护伞”对象，协调其管理的组件以确保它们能够一起顺利的工作。它还管理每个应用程序用户的 Shiro 的视图，因此它知道如何执行每个用户的安全操作。</p><ul><li><strong>Authenticator</strong>(org.apache.shiro.authc.Authenticator)</li></ul><p>​        Authenticator 是一个对执行及对用户的身份验证（登录）尝试负责的组件。当一个用户尝试登录时，该逻辑被 Authenticator 执行。Authenticator 知道如何与一个或多个 Realm 协调来存储相关的用户&#x2F;帐户信息。从这些Realm 中获得的数据被用来验证用户的身份来保证用户确实是他们所说的他们是谁。</p><ul><li><strong>Authentication</strong> <strong>Strategy</strong>(org.apache.shiro.authc.pam.AuthenticationStrategy)</li></ul><p>​        如果不止一个 Realm 被配置，则 AuthenticationStrategy 将会协调这些 Realm 来决定身份认证尝试成功或失败下的条件（例如，如果一个 Realm 成功，而其他的均失败，是否该尝试成功？ 是否所有的 Realm 必须成功？或只有第一个成功即可？）。</p><ul><li><strong>Authorizer</strong>(org.apache.shiro.authz.Authorizer)</li></ul><p>​        Authorizer 是负责在应用程序中决定用户的访问控制的组件。它是一种最终判定用户是否被允许做某事的机制。与 Authenticator 相似，Authorizer 也知道如何协调多个后台数据源来访问角色恶化权限信息。Authorizer 使用 该信息来准确地决定用户是否被允许执行给定的动作。</p><ul><li><strong>SessionManager</strong>(org.apache.shiro.session.SessionManager)</li></ul><p>​        SessionManager 知道如何去创建及管理用户 Session 生命周期来为所有环境下的用户提供一个强健的 Session 体验。这在安全框架界是一个独有的特色——Shiro 拥有能够在任何环境下本地化管理用户 Session 的能力， 即使没有可用的 Web&#x2F;Servlet 或 EJB 容器，它将会使用它内置的企业级会话管理来提供同样的编程体验。SessionDAO 的存在允许任何数据源能够在持久会话中使用。</p><ul><li><strong>SessionDAO</strong>(org.apache.shiro.session.mgt.eis.SessionDAO)</li></ul><p>​        SesssionDAO 代表 SessionManager 执行 Session 持久化（CRUD）操作。这允许任何数据存储被插入到会话管理的基础之中。</p><ul><li><strong>CacheManager</strong>(org.apahce.shiro.cache.CacheManager)</li></ul><p>​        CacheManager 创建并管理其他 Shiro 组件使用的 Cache 实例生命周期。因为 Shiro 能够访问许多后台数据源， 由于身份验证，授权和会话管理，缓存在框架中一直是一流的架构功能，用来在同时使用这些数据源时提高 性能。任何现代开源和&#x2F;或企业的缓存产品能够被插入到 Shiro 来提供一个快速及高效的用户体验。</p><ul><li><strong>Cryptography</strong>(org.apache.shiro.crypto.*)</li></ul><p>​        Cryptography 是对企业安全框架的一个很自然的补充。Shiro 的crypto 包包含量易于使用和理解的cryptographic Ciphers，Hasher（又名 digests）以及不同的编码器实现的代表。所有在这个包中的类都被精心地设计以易于使用和易于理解。任何使用 Java 的本地密码支持的人都知道它可以是一个难以驯服的具有挑战性的动物。Shiro 的 cryptoAPI 简化了复杂的 Java 机制，并使加密对于普通人也易于使用。</p><ul><li><strong>Realms</strong>(org.apache.shiro.realm.Realm)</li></ul><p>​        如上所述，Realms 在 Shiro 和你的应用程序的安全数据之间担当“桥梁”或“连接器”。当它实际上与安全相关的数据如用来执行身份验证（登录）及授权（访问控制）的用户帐户交互时，Shiro 从一个或多个为应用程序配置的Realm 中寻找许多这样的东西。你可以按你的需要配置多个 Realm（通常一个数据源一个 Realm），且 Shiro 将为身份验证和授权对它们进行必要的协调。</p><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><p>自定义<code>Realm</code>需要继承<code>AuthorizingRealm</code> 并且重写它的两个方法<code>AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)</code>和<code>AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//通过我们写的方法将数据库关于该用户的信息全部查出</span></span><br><span class="line">        List&lt;String&gt; roles = userService.queryUserRoleByUsername(principal);</span><br><span class="line">        List&lt;String&gt; permissions = userService.queryUserPermissionByUsername(principal);</span><br><span class="line"><span class="comment">//这里添加用户的角色权限信息</span></span><br><span class="line">        authorizationInfo.addRoles(roles);</span><br><span class="line">        authorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过我们配置的数据源查询用户密码</span></span><br><span class="line">        <span class="comment">//这里主要查询用户的验证信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userService.queryUserPasswordByUsername(principal);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密码肯定不能用明文存入数据库，所以我们要告诉后续的验证程序我们用的时什么加密算法。</p><p><code>AuthorizingRealm</code>提供了一个方法让我们指定Shiro框架采用什么加密算法对传入的token中的密码信息进行加密后与数据库中的密文密码进行验证。</p><p>指定的方式有三种</p><ol><li><p>自定Realm的构造方法中指定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用AuthorizingRealm提供的方法</span></span><br><span class="line">        setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略下方重写方法了</span></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们在ShiroConfig中会手动创建Bean在加入到IOC容器中所以在构造方法中调用<code>setCredentialsMatcher</code>是可行的。</p></li><li><p>在ShiroConfig中 创建了自定义Realm后在调用<code>setCredentialsMatcher</code>方法指定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">       userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> userRealm;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>本身就是继承了<code>AuthorizingRealm</code>，所以父类的方法也都拥有。</p></li><li><p>自定手动在自定义Realm的内部编写一个方法 然后在其上添加注解<code>@PostConstruct</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 密码匹配器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initCredentialsMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">HashedCredentialsMatcher</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">       <span class="comment">//设置提交的AuthenticationToken的凭据在与存储在系统中的凭据进行比较之前将被散列的次数。 根据用户注册是密码加密的次数的设置相映</span></span><br><span class="line">       md5.setHashIterations();</span><br><span class="line">       setCredentialsMatcher(md5);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>@PostConstruct</code></p><p>Java中该注解的说明：@PostConstruct该注解被用来修饰一个非静态的void（）方法。被@PostConstruct修饰的方法会在服务器加载<code>Servlet</code>的时候运行，并且只会被服务器执行一次。<code>@PostConstruct</code>在构造函数之后执行，<code>init（）</code>方法之前执行。</p></li></ol><hr><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a><code>Subject</code></h3><table><thead><tr><th>Subject 登录相关方法</th><th>描述</th></tr></thead><tbody><tr><td>isAuthenticated()</td><td>返回true 表示已经登录，否则返回false。</td></tr></tbody></table><table><thead><tr><th>Subject 角色相关方法</th><th>描述</th></tr></thead><tbody><tr><td>hasRole(String roleName)</td><td>返回true 如果Subject 被分配了指定的角色，否则返回false。</td></tr><tr><td>hasRoles(List<String> roleNames)</td><td>返回true 如果Subject 被分配了所有指定的角色，否则返回false。</td></tr><tr><td>hasAllRoles(Collection<String>roleNames)</td><td>返回一个与方法参数中目录一致的hasRole 结果的集合。有性能的提高如果许多角色需要执行检查（例如，当自定义一个复杂的视图）。</td></tr><tr><td>checkRole(String roleName)</td><td>安静地返回，如果Subject 被分配了指定的角色，不然的话就抛出AuthorizationException。</td></tr><tr><td>checkRoles(Collection<String>roleNames)</td><td>安静地返回，如果Subject 被分配了所有的指定的角色，不然的话就抛出AuthorizationException。</td></tr><tr><td>checkRoles(String… roleNames)</td><td>与上面的checkRoles 方法的效果相同，但允许Java5 的var-args 类型的参数</td></tr></tbody></table><table><thead><tr><th>Subject 资源相关方法</th><th>描述</th></tr></thead><tbody><tr><td>isPermitted(Permission p)</td><td>返回true 如果该Subject 被允许执行某动作或访问被权限实例指定的资源，否则返回false</td></tr><tr><td>isPermitted(List<Permission> perms)</td><td>返回一个与方法参数中目录一致的isPermitted 结果的集合。</td></tr><tr><td>isPermittedAll(Collection<Permission>perms)</td><td>返回true 如果该Subject 被允许所有指定的权限，否则返回false有性能的提高如果需要执行许多检查（例如，当自定义一个复杂的视图）</td></tr><tr><td>isPermitted(String perm)</td><td>返回true 如果该Subject 被允许执行某动作或访问被字符串权限指定的资源，否则返回false。</td></tr><tr><td>isPermitted(String…perms)</td><td>返回一个与方法参数中目录一致的isPermitted 结果的数组。有性能的提高如果许多字符串权限检查需要被执行（例如，当自定义一个复杂的视图）。</td></tr><tr><td>isPermittedAll(String…perms)</td><td>返回true 如果该Subject 被允许所有指定的字符串权限，否则返回false。</td></tr><tr><td>checkPermission(Permission p)</td><td>安静地返回，如果Subject 被允许执行某动作或访问被特定的权限实例指定的资源，不然的话就抛出AuthorizationException 异常。</td></tr><tr><td>checkPermission(String perm)</td><td>安静地返回，如果Subject 被允许执行某动作或访问被特定的字符串权限指定的资源，不然的话就抛出AuthorizationException 异常。</td></tr><tr><td>checkPermissions(Collection<Permission> perms)</td><td>安静地返回，如果Subject 被允许所有的权限，不然的话就抛出AuthorizationException 异常。有性能的提高如果需要执行许多检查（例如，当自定义一个复杂的视图）</td></tr><tr><td>checkPermissions(String… perms)</td><td>和上面的checkPermissions 方法效果相同，但是使用的是基于字符串的权限。</td></tr></tbody></table><hr><h2 id="Web项目下Shiro内置的过滤器"><a href="#Web项目下Shiro内置的过滤器" class="headerlink" title="Web项目下Shiro内置的过滤器"></a>Web项目下Shiro内置的过滤器</h2><p>拦截器对应的不同功能。</p><table><thead><tr><th>过滤器</th><th>过滤器类</th><th>说明</th><th>默认</th></tr></thead><tbody><tr><td><strong>authc</strong></td><td><strong>FormAuthenticationFilter</strong></td><td><strong>基于表单的过滤器；如“&#x2F;&#x3D;authc”，如果没有登录会跳到相应的登录页面登录</strong></td><td><strong>无</strong></td></tr><tr><td><strong>logout</strong></td><td><strong>LogoutFilter</strong></td><td><strong>退出过滤器，主要属性：redirectUrl：退出成功后重定向的地址，如“&#x2F;logout&#x3D;logout”</strong></td><td><strong>&#x2F;</strong></td></tr><tr><td><strong>anon</strong></td><td><strong>AnonymousFilter</strong></td><td><strong>匿名过滤器，即不需要登录即可访问；一般用于静态资源过滤；示例“&#x2F;static&#x2F;&#x3D;anon”</strong></td><td><strong>无</strong></td></tr></tbody></table><table><thead><tr><th><strong>过滤器</strong></th><th><strong>过滤器类</strong></th><th><strong>说明</strong></th><th><strong>默认</strong></th></tr></thead><tbody><tr><td><strong>roles</strong></td><td><strong>RolesAuthorizationFilter</strong></td><td><strong>角色授权拦截器，验证用户是否拥有所有角色；主要属性： loginUrl：登录页面地址（&#x2F;login.jsp）；unauthorizedUrl：未授权后重定向的地址；示例“&#x2F;admin&#x2F;&#x3D;roles[admin]”</strong></td><td><strong>无</strong></td></tr><tr><td><strong>perms</strong></td><td><strong>PermissionsAuthorizationFilter</strong></td><td><strong>权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例“&#x2F;user&#x2F;&#x3D;perms[“user:create”]”</strong></td><td><strong>无</strong></td></tr><tr><td><strong>port</strong></td><td><strong>PortFilter</strong></td><td><strong>端口拦截器，主要属性：port（80）：可以通过的端口；示例“&#x2F;test&#x3D; port[80]”，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径&#x2F;参数等都一样</strong></td><td><strong>无</strong></td></tr><tr><td><strong>rest</strong></td><td><strong>HttpMethodPermissionFilter</strong></td><td><strong>rest风格拦截器，自动根据请求方法构建权限字符串（GET&#x3D;read, POST&#x3D;create,PUT&#x3D;update,DELETE&#x3D;delete,HEAD&#x3D;read,TRACE&#x3D;read,OPTIONS&#x3D;read, MKCOL&#x3D;create）构建权限字符串；示例“&#x2F;users&#x3D;rest[user]”，会自动拼出“user:read,user:create,user:update,user:delete”权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</strong></td><td><strong>无</strong></td></tr><tr><td><strong>ssl</strong></td><td><strong>SslFilter</strong></td><td><strong>SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口（443）；其他和port拦截器一样；</strong></td><td><strong>无</strong></td></tr></tbody></table><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>自定义过滤器需要继承<code>AuthorizationFilter</code>并重写它的<code>isAccessAllowed</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolesOrAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取subject 底层调用的同样是SecurityUtils.getSubject()</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> getSubject(request, response);</span><br><span class="line">        String[] rolesArray = (String[]) mappedValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rolesArray.length==<span class="number">0</span>||rolesArray==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//对于角色没有要求直接返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; roles = CollectionUtils.asSet(rolesArray);</span><br><span class="line">        <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">            <span class="comment">//满足一个身份就返回true</span></span><br><span class="line">            <span class="keyword">if</span> (subject.hasRole(role))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加自己的过滤器使其生效"><a href="#添加自己的过滤器使其生效" class="headerlink" title="添加自己的过滤器使其生效"></a>添加自己的过滤器使其生效</h3><p><code>ShiroConfig.java</code> 中添加如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使自定义的过滤器生效 这里添加我们刚刚自定义的过滤器</span></span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters());</span><br><span class="line">       </span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 自定义过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里的key 就是后面用于指定过滤器的字段</span></span><br><span class="line">        map.put(<span class="string">&quot;role-or&quot;</span>,<span class="keyword">new</span> <span class="title class_">RolesOrAuthorizationFilter</span>());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略其他配置</span></span><br><span class="line">    .... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro基础五张表"><a href="#Shiro基础五张表" class="headerlink" title="Shiro基础五张表"></a>Shiro基础五张表</h2><p>Shiro最为重要的5张表分别为t_user（用户表）、t_role（角色表）、t_permissions （权限表）、t_user_role（用户角色对应表）、t_role_permissions（角色权限对应表）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/2021062816011333.png" alt="在这里插入图片描述"></p><h2 id="快速开始（集成SpringBoot-Mybatis-plus）"><a href="#快速开始（集成SpringBoot-Mybatis-plus）" class="headerlink" title="快速开始（集成SpringBoot+Mybatis-plus）"></a>快速开始（集成SpringBoot+Mybatis-plus）</h2><p>整合思路</p><p><strong>这里我使用的是<code>Shiro-Spring来整合</code>后面我会使用Shiro官方推出的与SpringBoot整合的jar包进行整合</strong>.</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20210529132728453.png" alt="在这里插入图片描述"></p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>Shiro最为重要的5张表分别为t_user（用户表）、t_role（角色表）、t_permissions （权限表）、t_user_role（用户角色对应表）、t_role_permissions（角色权限对应表）。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : 阿丁</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50736</span></span><br><span class="line"><span class="comment"> Source Host           : 124.222.35.20:3319</span></span><br><span class="line"><span class="comment"> Source Schema         : shiro</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50736</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 24/06/2022 15:51:46</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permission`  (</span><br><span class="line">  `p_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;权限编号&#x27;</span>,</span><br><span class="line">  `p_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`p_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`  (</span><br><span class="line">  `r_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  `r_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `r_state` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色说明&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`r_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_permission`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624154218271.png" alt="image-20220624154218271"></p><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><p><code>pom.xml</code>添加相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Shiro-SpringBoot-Demo01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://yourip:3306/shiro?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:org/dyw/shiro/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dyw.shiro.entity</span></span><br></pre></td></tr></table></figure><p><code>因为Shiro-Spring</code>对于SpringBoot没有特殊的适配所以application.yml中无需对shiro进行文本配置。但是我们可以再Spring.xml中配置或是使用配置类的方式进行配置</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>这里我们只做演示，所以权限的指定直接在数据库中添加，这里只建用户表（因为无论如何它的信息是要从数据库中获取并且用来验证的）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service类"><a href="#Service类" class="headerlink" title="Service类"></a>Service类</h3><p><code>UserService.java</code> 作用就是从数据库中查询用户相关的验证&#x2F;鉴权信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查找用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">queryUserPasswordByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">queryUserPermissionByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">queryUserRoleByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>UserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserPasswordByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername,username).last(<span class="string">&quot;limit 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(queryWrapper).getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">queryUserPermissionByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectUserPermissionById(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">queryUserRoleByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectRoleById(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT permission.p_name FROM ((`user` inner JOIN user_role on `user`.id = user_role.uid) INNER JOIN role_permission on user_role.rid = role_permission.rid) INNER JOIN permission on role_permission.pid = permission.p_id where user.username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectUserPermissionById</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select role.r_name  from (user inner join user_role on user.id = user_role.uid) inner join role on user_role.rid = role.r_id where user.username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleById</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LoginService.java </code> 用于登录</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">login</span><span class="params">(LoginDTO loginDTO)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>LoginServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">login</span><span class="params">(LoginDTO loginDTO)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> loginDTO.getUsername();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> loginDTO.getPassword();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Realm-1"><a href="#自定义Realm-1" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p>作用就是获取安全数据。</p><p>自定义<code>Realm</code>需要继承<code>AuthorizingRealm</code> 并且重写它的两个方法<code>AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)</code>和<code>AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException</code></p><p>其中的<code>doGetAuthenticationInfo</code>方法shi就是<code>Authenticator</code>交给Realm做验证操作的方法，通过方法名字我们也可得知，我们自定义的重写它主要是将数据库中关于该用户的信息查出做一些简单验证，然后将密码用户名和Realm名封装交给后续的处理做验证。</p><p><code>doGetAuthorizationInfo</code>方法主要是用来获取用户的权限信息的，通过方法名同样可知，我们自定义的重写它主要是将数据库中关于该用户的权限信息和角色信息查出然后进行打包再返回交给后续程序处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//通过我们写的方法将数据库关于该用户的信息全部查出</span></span><br><span class="line">        List&lt;String&gt; roles = userService.queryUserRoleByUsername(principal);</span><br><span class="line">        List&lt;String&gt; permissions = userService.queryUserPermissionByUsername(principal);</span><br><span class="line"></span><br><span class="line">        authorizationInfo.addRoles(roles);</span><br><span class="line">        authorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过我们配置的数据源查询用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userService.queryUserPasswordByUsername(principal);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h3><p><strong>这部分非常重要</strong></p><ol><li><p>将我们刚刚自定义的Realm手动配置加入Spring容器管理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">        <span class="comment">//这里指定了加密算法为MD5</span></span><br><span class="line">        userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们创建UserRealm对象的时候指定了密码匹配器，到时后框架会将前端传入的密码进行指定算法的加密然后与数据库中查出的密码进行对比。</p></li><li><p>创建<code>DefaultWebSecurityManager</code>对象将我们刚刚创建UserRealm注入并且将其添加到securityManager中，然后将<code>DefaultWebSecurityManager</code>以<code>securityManager</code>的实例名称加入IOC容器中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultWebSecurityManager </code>有着许多默认的配置能够满足我们的一般情况下的需求，但是当需要更为灵活的配置时，它也是支持自定义修改的，我们只需要实现它组件的接口或是继承类重写它的方法，再将自定义的组件加入<code>DefaultWebSecurityManager中即可</code>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624162519708.png" alt="image-20220624162519708"></p><p>这里我们就重写了Realm实现了一个自定义的Realm，并且将其加入了其中。</p><p>到这里我们对于SecurityManager就已经结束了，我们的Security会自动地注入到SecurityUtils中。</p></li><li><p>ShiroFilterFactoryBean 创建Shiro的过滤器工厂，在这里面我们可以指定一些restAPI与权限的对应关系，以及其他的配置；</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624163304667.png" alt="image-20220624163304667"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            添加Shiro内置过滤器，常用的有如下过滤器：</span></span><br><span class="line"><span class="comment">            anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc： 必须认证才可以访问</span></span><br><span class="line"><span class="comment">            user： 如果使用了记住我功能就可以直接访问</span></span><br><span class="line"><span class="comment">            perms: 拥有某个资源权限才可以访问</span></span><br><span class="line"><span class="comment">            role： 拥有某个角色权限才可以访问</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    filterMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[insert]&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>拦截器对应的不同功能。</p><table><thead><tr><th>Filter Name</th><th>功能</th></tr></thead><tbody><tr><td><strong>anno</strong></td><td><strong>不需要授权、登录就可以访问。eg:&#x2F;index</strong></td></tr><tr><td><strong>authc</strong></td><td><strong>需要登录授权才能访问。eg：&#x2F;用户中心</strong></td></tr><tr><td><strong>authcBasic</strong></td><td><strong>Basic HTTP身份验证拦截器</strong></td></tr><tr><td><strong>logout</strong></td><td><strong>退出拦截器。退出成功后，会 redirect到设置的&#x2F;URI</strong></td></tr><tr><td><strong>noSessionCreation</strong></td><td><strong>不创建会话连接器</strong></td></tr><tr><td><strong>perms</strong></td><td><strong>授权拦截器:perm[‘user:create’]</strong></td></tr><tr><td><strong>port</strong></td><td><strong>端口拦截器.eg:port[80]</strong></td></tr><tr><td><strong>rest</strong></td><td><strong>rest风格拦截器</strong></td></tr><tr><td><strong>roles</strong></td><td><strong>角色拦截器。eg：role[administrator]</strong></td></tr><tr><td><strong>ssl</strong></td><td><strong>ssl拦截器。通过https协议才能通过</strong></td></tr><tr><td><strong>user</strong></td><td><strong>用户拦截器。eg：登录后（authc），第二次没登陆但是有记住我(remmbner)都可以访问。</strong></td></tr></tbody></table><p>完整的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                添加Shiro内置过滤器，常用的有如下过滤器：</span></span><br><span class="line"><span class="comment">                anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">                authc： 必须认证才可以访问</span></span><br><span class="line"><span class="comment">                user： 如果使用了记住我功能就可以直接访问</span></span><br><span class="line"><span class="comment">                perms: 拥有某个资源权限才可以访问</span></span><br><span class="line"><span class="comment">                role： 拥有某个角色权限才可以访问</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[insert]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 DefaultWebSecurityManager( 步骤二</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 realm 对象( 步骤一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">        userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里就整合完毕了Controller可以自己根据自己想法定义，restfulAPI的过滤操作可以添加到该类中。</p><h3 id="启用Shiro注解进行鉴权"><a href="#启用Shiro注解进行鉴权" class="headerlink" title="启用Shiro注解进行鉴权"></a>启用Shiro注解进行鉴权</h3><p><strong>如果导入的是<code>shiro-spring-boot-web-starter</code>则无需进行如下配置</strong></p><p>针对**<code>shiro-spring</code>**要使用Shiro注解进行鉴权需要在ShiroConfig中加上添加如下的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 保证实现了Shiro内部lifecycle函数的bean执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title function_">getLifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> AOP式方法级权限检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAdvisorAutoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 配合DefaultAdvisorAutoProxyCreator事项注解权限校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">getAuthorizationAttributeSourceAdvisor</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">aasa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    aasa.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上之后可以使用注解了</p><p>以下为常用注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@RequiresAuthentication</td><td>表明当前用户需是经过认证的用户</td></tr><tr><td>@ RequiresGuest</td><td>表明该用户需为”guest”用户</td></tr><tr><td>@RequiresPermissions</td><td>当前用户需拥有指定权限</td></tr><tr><td>@RequiresRoles</td><td>当前用户需拥有指定角色</td></tr><tr><td>@ RequiresUser</td><td>当前用户需为已认证用户或已记住用户</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro整合Spring常用注解"><a href="#Shiro整合Spring常用注解" class="headerlink" title="Shiro整合Spring常用注解"></a>Shiro整合Spring常用注解</h2><p>以下为常用注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><strong>@RequiresAuthentication</strong></td><td><strong>表明当前用户需是经过认证的用户</strong></td></tr><tr><td><strong>@ RequiresGuest</strong></td><td><strong>表明该用户需为”guest”用户</strong></td></tr><tr><td><strong>@RequiresPermissions</strong></td><td><strong>当前用户需拥有指定权限</strong></td></tr><tr><td><strong>@RequiresRoles</strong></td><td><strong>当前用户需拥有指定角色</strong></td></tr><tr><td><strong>@ RequiresUser</strong></td><td><strong>当前用户需为已认证用户或已记住用户</strong></td></tr></tbody></table><h2 id="Realm采用Redis作为缓存"><a href="#Realm采用Redis作为缓存" class="headerlink" title="Realm采用Redis作为缓存"></a>Realm采用Redis作为缓存</h2><h3 id="Spring容器工具类"><a href="#Spring容器工具类" class="headerlink" title="Spring容器工具类"></a>Spring容器工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>&#123;</span><br><span class="line">    <span class="comment">//放置在获取bean的时候提示空指针，将其定义为静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//类初始化完成之后调用setApplicationContext()方法进行操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        ApplicationContextUtils.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">geteContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line">        <span class="comment">//在这一步的时候一定要注意，此时可调用这个方法的时候</span></span><br><span class="line">        <span class="comment">//context可能为空，会提示空指针异常，需要将其定义成静态的，这样类加载的时候</span></span><br><span class="line">        <span class="comment">//context就已经存在了</span></span><br><span class="line">        <span class="keyword">return</span> context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过这个工具类我们可以获取到容器中的Bean 下面我们会用到</strong></p><p>在认证和授权的时候，程序需要频繁的访问数据库，这样对于数据库的压力可想而知，那我们怎么处理呢？</p><p>我们可以使用Redis作为缓存来减轻数据库的压力。</p><p>Redis的配置不多做介绍</p><ol><li>导入<code>spring-boot-starter-data-redis</code></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>RedisConfig</code>Redis配置类配置</li></ol><p>​    这个类里我们实现了设置缓存、获取缓存、移除缓存、情况缓存等方法。<br>其中我们开启缓存后，用户登录成功就会将缓存放入到redis中，使用退出功能，就会清楚当前登录的缓存信息，授权信息也是一样，只要使用退出功能就会清空当前的缓存信息。但是这里并没有设计过期时间的处理。所以真实场景下，我们还需要考虑过期时间的设置。这里显然我们用到了RedisTemplate模板，这个模板我们一般也是自己定义，不过也可以直接使用SpringBoot默认提供的。这里我们采用自己定义RedisTemplate的方式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> StringRedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        <span class="type">StringRedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">JdkSerializationRedisSerializer</span> <span class="variable">jdkSerializationRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializationRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);              <span class="comment">//键值序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);          <span class="comment">//绑定hash的序列化方式</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line"><span class="comment">//redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//redisson配置类</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定编码，默认编码为org.redisson.codec.JsonJacksonCodec</span></span><br><span class="line">        <span class="comment">//config.setCodec(new org.redisson.client.codec.StringCodec());</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://124.222.35.20:6666&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;dyw20020304&quot;</span>)</span><br><span class="line">                .setConnectionPoolSize(<span class="number">50</span>)</span><br><span class="line">                .setIdleConnectionTimeout(<span class="number">10000</span>)</span><br><span class="line">                .setConnectTimeout(<span class="number">3000</span>)</span><br><span class="line">                .setTimeout(<span class="number">3000</span>)</span><br><span class="line">                .setDatabase(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>提供自定义缓存管理器 <code>RedisCacheManager</code></li></ol><p>​    只要加入了缓存管理器，配置了缓存管理类，系统就会默认在查询完认证和授权后将信息放入到缓存中且下次需要认证和授权时，都是优先去查询缓存中的内容，查询不到，才会去查询数据库，这里也验证了这一点，与之前的画的加入缓存后的授权信息的获取图是一样的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheManager</span> <span class="keyword">implements</span> <span class="title class_">CacheManager</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; Cache&lt;K, V&gt; <span class="title function_">getCache</span><span class="params">(String s)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入到了自定义缓存管理器,传入参数cacheName：&quot;</span>+ s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCache</span>&lt;K,V&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设计自己的缓存管理类 实现shiro的Cache&lt;K,V&gt;接口</li></ol><p>​    所有的缓存管理类的实例都应该是Cache的实现类。所以我们自己定义redis的缓存管理类应该也必须去实现这个Cache类。实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span>&lt;k,V&gt; <span class="keyword">implements</span> <span class="title class_">Cache</span>&lt;k,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cacheName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisCache</span> <span class="params">(String cacheName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheName = cacheName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取redis操作对象</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(k k)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(cacheName+<span class="string">&quot;:获取缓存方法，传入参数：&quot;</span> + k+<span class="string">&quot;,此时的redisTemplate:&quot;</span>+getRedisTemplate());</span><br><span class="line">        <span class="keyword">return</span> (V) getRedisTemplate().opsForHash().get(cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(k k, V v)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入缓存方法，传入参数 K:&quot;</span> + k+<span class="string">&quot;,V:&quot;</span>+v);</span><br><span class="line">        <span class="comment">//放入redis中的值，一定要是序列化的对象</span></span><br><span class="line">        getRedisTemplate().opsForHash().put(cacheName.toString(),k.toString(),v);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(k k)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了remove方法,传入参数：&quot;</span>+k.toString());</span><br><span class="line">        getRedisTemplate().opsForHash().delete(cacheName,k.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了clear方法&quot;</span>);</span><br><span class="line">        getRedisTemplate().opsForHash().delete(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().size(cacheName).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;k&gt; <span class="title function_">keys</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().keys(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().values(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5. </p><p>​    开启Realm的缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">       userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">       <span class="comment">//开启缓存</span></span><br><span class="line">       userRealm.setAuthenticationCachingEnabled(<span class="literal">true</span>);</span><br><span class="line">       userRealm.setAuthorizationCacheName(<span class="string">&quot;authenticationCache&quot;</span>); <span class="comment">//设置缓存名称--认证</span></span><br><span class="line">       userRealm.setAuthenticationCacheName(<span class="string">&quot;authorizationCache&quot;</span>); <span class="comment">//设置缓存名称--授权</span></span><br><span class="line">       userRealm.setCacheManager(<span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>());<span class="comment">//设置为我们刚刚自定义的RedisCacheManager</span></span><br><span class="line">       <span class="keyword">return</span> userRealm;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>经过验证发现,在用户登录过后访问需要权限的资源后,确实不再走数据库,而是从Redis缓存中查找信息。</p><h2 id="Shiro共享Session"><a href="#Shiro共享Session" class="headerlink" title="Shiro共享Session"></a>Shiro共享Session</h2><h3 id="会话的问题"><a href="#会话的问题" class="headerlink" title="会话的问题"></a>会话的问题</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1581846589128.png" alt="1581846589128"></p><h3 id="分布式会话实现思路"><a href="#分布式会话实现思路" class="headerlink" title="分布式会话实现思路"></a>分布式会话实现思路</h3><p>所有服务器的session信息都存储到了同一个Redis集群中，即所有的服务都将 Session 的信息存储到 Redis 集群中，无论是对 Session 的注销、更新都会同步到集群中，达到了 Session 共享的目的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1581846769926.png" alt="1581846769926"></p><p>​        Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。</p><p>​        在实际工作中我们建议使用外部的缓存设备(包括Redis)来共享 Session，避免单个服务器节点挂掉而影响服务，共享数据都会放到外部缓存容器中</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><p>编写RedisSessionDao继承AbstractSessionDAO，重写了会话的创建、读取、修改等操作，全部缓存与redis中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisSessionDAO</span> <span class="keyword">extends</span> <span class="title class_">AbstractSessionDAO</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Serializable <span class="title function_">doCreate</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="type">Serializable</span> <span class="variable">sessionId</span> <span class="operator">=</span> generateSessionId(session);</span><br><span class="line">        assignSessionId(session,sessionId);</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(session.getId().toString(),session,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Session <span class="title function_">doReadSession</span><span class="params">(Serializable sessionId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">return</span> <span class="variable">sessionId</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : (Session) redisTemplate.opsForValue().get(sessionId.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException &#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="literal">null</span>&amp;&amp;session.getId()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            session.setTimeout(<span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.opsForValue().set(session.getId().toString(),session,<span class="number">60</span>,TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="literal">null</span>&amp;session.getId()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            redisTemplate.opsForValue().getOperations().delete(session.getId().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Session&gt; <span class="title function_">getActiveSessions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以根据需求做更多灵活性的改动。</p></li><li><p>ShiroConfig将RedisSessionDao注入SessionManager中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> DefaultWebSessionManager <span class="title function_">defaultWebSessionManager</span><span class="params">(RedisSessionDAO redisSessionDAO)</span> &#123;</span><br><span class="line">       <span class="type">DefaultWebSessionManager</span> <span class="variable">defaultWebSessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">       defaultWebSessionManager.setGlobalSessionTimeout(<span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line">       defaultWebSessionManager.setDeleteInvalidSessions(<span class="literal">true</span>);</span><br><span class="line">       defaultWebSessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">       defaultWebSessionManager.setSessionValidationSchedulerEnabled(<span class="literal">true</span>);</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 修改Cookie中的SessionId的key，默认为JSESSIONID，自定义名称</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       defaultWebSessionManager.setSessionIdCookie(<span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> defaultWebSessionManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>将SessionManager注入SecurityManager中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm, RedisSessionDAO redisSessionDao)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 取消Cookie中的RememberMe参数</span></span><br><span class="line">    securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">    securityManager.setSessionManager(defaultWebSessionManager(redisSessionDao));</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>做完上述操作在进行访问我们可以看到我们的session已经存入了redis中</p></li></ol><h2 id="限制密码重试次数"><a href="#限制密码重试次数" class="headerlink" title="限制密码重试次数"></a>限制密码重试次数</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>保证原子性：</p><p>​        单系统：AtomicLong计数</p><p>​        集群系统：使用Redis提供的RAtomicLong计数</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、获取系统中是否已有登录次数缓存,缓存对象结构预期为：&quot;用户名--登录次数&quot;。</span><br><span class="line"></span><br><span class="line">2、如果之前没有登录缓存，则创建一个登录次数缓存。</span><br><span class="line"></span><br><span class="line">3、如果缓存次数已经超过限制，则驳回本次登录请求。</span><br><span class="line"></span><br><span class="line">4、将缓存记录的登录次数加1,设置指定时间内有效</span><br><span class="line"></span><br><span class="line">5、验证用户本次输入的帐号密码，如果登录登录成功，则清除掉登录次数的缓存</span><br></pre></td></tr></table></figure><p>计数缓存的部分主要是在登录验证密码的时候。所以我们需要自定义一个密码比较器。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ol><li>自定义密码比较器RetryLimitCredentialsMatcher继承HashedCredentialsMatcher重写doCredentialsMatch方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryLimitCredentialsMatcher</span> <span class="keyword">extends</span> <span class="title class_">HashedCredentialsMatcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">RETRY_LIMIT_NUM</span> <span class="operator">=</span> <span class="number">4L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetryLimitCredentialsMatcher</span><span class="params">(String hashAlgorithmName)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(hashAlgorithmName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义密码比较器&quot;</span>);</span><br><span class="line">        <span class="comment">//获得用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//获得缓存</span></span><br><span class="line">        log.info(loginName);</span><br><span class="line">        <span class="type">RedisAtomicLong</span> <span class="variable">atomicLong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisAtomicLong</span>(loginName, getRedisTemplate().getConnectionFactory());</span><br><span class="line">        <span class="type">long</span> <span class="variable">retryFlag</span> <span class="operator">=</span> atomicLong.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数</span></span><br><span class="line">        <span class="keyword">if</span> (retryFlag&gt;RETRY_LIMIT_NUM)&#123;</span><br><span class="line">            <span class="comment">//超过次数设计10分钟后重试</span></span><br><span class="line">            atomicLong.expire(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">            log.error(<span class="string">&quot;密码错误5次，请10分钟以后再试&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExcessiveAttemptsException</span>(<span class="string">&quot;密码错误5次，请10分钟以后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有超过</span></span><br><span class="line">        <span class="comment">//累加次数</span></span><br><span class="line">        atomicLong.incrementAndGet();</span><br><span class="line">        atomicLong.expire(<span class="number">10</span>,TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//密码校验</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="built_in">super</span>.doCredentialsMatch(token, info);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,atomicLong.get());</span><br><span class="line">        <span class="comment">//如果登录成功 清除缓存</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            atomicLong.expire(<span class="number">0</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写完成后记得将我们一开始设置的Shiro自带的密码比较器更换为我们自定义的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">RetryLimitCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="在线并发登录人数控制"><a href="#在线并发登录人数控制" class="headerlink" title="在线并发登录人数控制"></a>在线并发登录人数控制</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在实际开发中，我们可能会遇到这样的需求，一个账号只允许同时一个在线，当账号在其他地方登陆的时候，会踢出前面登陆的账号，那我们怎么实现</p><ul><li>自定义过滤器:继承AccessControlFilter</li><li>使用redis队列控制账号在线数目</li></ul><p>实现步骤：</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、只针对登录用户处理，首先判断是否登录</span><br><span class="line">2、使用RedissionClien创建队列</span><br><span class="line">3、判断当前sessionId是否存在于此用户的队列=key:登录名 value：多个sessionId</span><br><span class="line">4、不存在则放入队列尾端==&gt;存入sessionId</span><br><span class="line">5、判断当前队列大小是否超过限定此账号的可在线人数</span><br><span class="line">6、超过：</span><br><span class="line">*从队列头部拿到用户sessionId</span><br><span class="line">*从sessionManger根据sessionId拿到session</span><br><span class="line">*从sessionDao中移除session会话</span><br><span class="line">7、未超过：放过操作</span><br></pre></td></tr></table></figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p><code>AccessControlFilter：</code>控制对资源的访问的任何过滤器的超类，如果用户未通过身份验证，则可以将用户重定向到登录页面。这个超类提供了方法，借助它可以在用户超出登录最大在线人数后将其的session删除并且重定向到登录页面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KickedOutAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title class_">AccessControlFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DefaultWebSessionManager sessionManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisSessionDAO redisSessionDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> getSubject(request, response);</span><br><span class="line">        <span class="keyword">if</span> (!subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果没有登录，直接进行之后的流程</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存放session对象进入队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> (String) subject.getSession().getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">LoginName</span> <span class="operator">=</span> (String) subject.getPrincipal();</span><br><span class="line">        RDeque&lt;String&gt; queue = redissonClient.getDeque(<span class="string">&quot;KickedOutAuthorizationFilter:&quot;</span>+LoginName);</span><br><span class="line">        <span class="comment">//判断sessionId是否存在于此用户的队列中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> queue.contains(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            queue.addLast(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果此时队列大于1，则开始踢人</span></span><br><span class="line">        <span class="keyword">if</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            sessionId = queue.getFirst();</span><br><span class="line">            queue.removeFirst();</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session = sessionManager.getSession(<span class="keyword">new</span> <span class="title class_">DefaultSessionKey</span>(sessionId));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (UnknownSessionException ex)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;session已经失效&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (ExpiredSessionException expiredSessionException)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;session已经过期&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (session!=<span class="literal">null</span>)&#123;</span><br><span class="line">                redisSessionDAO.delete(session);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改ShiroConfig将我们自定义的过滤器添加进ShiroFilterFactoryBean中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> KickedOutAuthorizationFilter kickedOutAuthorizationFilter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 自定义过滤器定义</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;kickedOut&quot;</span>,kickedOutAuthorizationFilter);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截所有需要登录的路径</li></ol></li><li><p>测试有效</p></li></ol><h2 id="SpringBoot-Shiro-Jwt整合"><a href="#SpringBoot-Shiro-Jwt整合" class="headerlink" title="SpringBoot+Shiro+Jwt整合"></a>SpringBoot+Shiro+Jwt整合</h2><h3 id="问题追踪"><a href="#问题追踪" class="headerlink" title="问题追踪"></a>问题追踪</h3><p>​    前面我们实现分布式的会话缓存，但是我们发现此功能的实现是基于浏览的cookie机制，也就是说用户禁用cookie后，我们的系统会就会产生会话不同的问题</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​    我们的前端可能是web、Android、ios等应用，同时我们每一个接口都提供了无状态的应答方式，这里我们提供了基于JWT的token生成方案</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、用户登陆之后，获得此时会话的sessionId,使用JWT根据sessionId颁发签名并设置过期时间(与session过期时间相同)返回token</span><br><span class="line"></span><br><span class="line">2、将token保存到客户端本地，并且每次发送请求时都在header上携带JwtToken</span><br><span class="line"></span><br><span class="line">3、ShiroSessionManager继承DefaultWebSessionManager，重写getSessionId方法，从header上检测是否携带JwtToken，如果携带，则进行解码JwtToken，使用JwtToken中的jti作为SessionId。</span><br><span class="line"></span><br><span class="line">4、重写shiro的默认过滤器，使其支持jwtToken有效期校验、及对JSON的返回支持</span><br><span class="line">JwtAuthcFilter:实现是否需要登录的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br><span class="line">JwtPermsFilter:实现是否有对应资源的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br><span class="line">JwtRolesFilter:实现是否有对应角色的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br></pre></td></tr></table></figure><h3 id="JWT概述"><a href="#JWT概述" class="headerlink" title="JWT概述"></a>JWT概述</h3><p>JWT（JSON WEB TOKEN）：JSON网络令牌，JWT是一个轻便的安全跨平台传输格式，定义了一个紧凑的自包含的方式在不同实体之间安全传输信息（JSON格式）。它是在Web环境下两个实体之间传输数据的一项标准。实际上传输的就是一个字符串。</p><ul><li><p>广义上：JWT是一个标准的名称；</p></li><li><p>狭义上：JWT指的就是用来传递的那个token字符串</p></li></ul><p>JWT由三部分构成：header（头部）、payload（载荷）和signature（签名）。</p><ol><li><p>Header</p><p>存储两个变量</p><ol><li>秘钥（可以用来比对）</li><li>算法（也就是下面将Header和payload加密成Signature）</li></ol></li><li><p>payload</p><p>存储很多东西，基础信息有如下几个</p><ol><li>签发人，也就是这个“令牌”归属于哪个用户。一般是<code>userId</code> </li><li>创建时间，也就是这个令牌是什么时候创建的</li><li>失效时间，也就是这个令牌什么时候失效(session的失效时间)</li><li>唯一标识，一般可以使用算法生成一个唯一标识（jti&#x3D;&#x3D;&gt;sessionId）</li></ol></li><li><p>Signature</p><p>这个是上面两个经过Header中的算法加密生成的，用于比对信息，防止篡改Header和payload</p></li></ol><p>然后将这三个部分的信息经过加密生成一个<code>JwtToken</code>的字符串，发送给客户端，客户端保存在本地。当客户端发起请求的时候携带这个到服务端(可以是在<code>cookie</code>，可以是在<code>header</code>)，在服务端进行验证，我们需要解密对于的payload的内容</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>首先导入Jwt的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Jwt的工具类用于签发令牌,验证令牌等。</p><p>这个可以根据实际项目情况进行自定义更改（例如JWT密钥的指定）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt加密密钥 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_SECRET</span> <span class="operator">=</span> <span class="string">&quot;aPbOBbnH4gnZBzIYEY7mxWNu49kYljNPMeva9Fjrwwqzw0bFlO0kPXZTCGaVcw0j&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 签发令牌</span></span><br><span class="line"><span class="comment">     *      jwt字符串包括三个部分</span></span><br><span class="line"><span class="comment">     *        1. header</span></span><br><span class="line"><span class="comment">     *            -当前字符串的类型，一般都是“JWT”</span></span><br><span class="line"><span class="comment">     *            -哪种算法加密，“HS256”或者其他的加密算法</span></span><br><span class="line"><span class="comment">     *            所以一般都是固定的，没有什么变化</span></span><br><span class="line"><span class="comment">     *        2. payload</span></span><br><span class="line"><span class="comment">     *            一般有四个最常见的标准字段（下面有）</span></span><br><span class="line"><span class="comment">     *            iat：签发时间，也就是这个jwt什么时候生成的</span></span><br><span class="line"><span class="comment">     *            jti：JWT的唯一标识</span></span><br><span class="line"><span class="comment">     *            iss：签发人，一般都是username或者userId</span></span><br><span class="line"><span class="comment">     *            exp：过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iss 签发人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis 有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id jwt中存储的用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> jws</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">IssuedToken</span><span class="params">(String iss, <span class="type">long</span> ttlMillis,String sessionId, Integer id)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">null</span>) &#123;</span><br><span class="line">            claims.put(<span class="string">&quot;userId&quot;</span>,id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line"></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setId(sessionId)<span class="comment">//2. 这个是JWT的唯一标识，一般设置成唯一的，这个方法可以生成唯一标识,此时存储的为sessionId,登录成功后回写</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis))<span class="comment">//1. 这个地方就是以毫秒为单位，换算当前系统时间生成的iat</span></span><br><span class="line">                .setSubject(iss)<span class="comment">//3. 签发人，也就是JWT是给谁的（逻辑上一般都是username或者userId）</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);<span class="comment">//这个地方是生成jwt使用的算法和秘钥</span></span><br><span class="line">        <span class="keyword">if</span> (ttlMillis &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);<span class="comment">//4. 过期时间，这个也是使用毫秒生成的，使用当前时间+前面传入的持续时间生成</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 解析令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">decodeToken</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到 DefaultJwtParser</span></span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                <span class="comment">// 设置需要解析的 jwt</span></span><br><span class="line">                .parseClaimsJws(jwtToken)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> JWT_SECRET;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承<code>DefaultWebSessionManager</code>重写<code>getSessionId</code>方法 </p><p><code>getSessionId()</code>方法就是Shiro用于获取SessionId的方法，默认是从cookie中获取，但是我们采用JWT了，就得从Jwt中获取所以我们对该方法进行了修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroSessionManager</span> <span class="keyword">extends</span> <span class="title class_">DefaultWebSessionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFERENCED_SESSION_ID_SOURCE</span> <span class="operator">=</span> <span class="string">&quot;Stateless request&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShiroSessionManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法主要是让我们自定义获取sessionId的方法 在将sessionId返回让后续的流程去获取session 然后鉴权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Serializable <span class="title function_">getSessionId</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            <span class="comment">//如果没有携带id参数则按照父类的方式在cookie进行获取</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getSessionId(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果请求头中有 authToken 则其值为jwtToken，然后解析出会话id sessionId</span></span><br><span class="line">                                                  request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE,REFERENCED_SESSION_ID_SOURCE);</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">decode</span> <span class="operator">=</span> JwtTokenUtil.decodeToken(jwtToken);</span><br><span class="line">            <span class="comment">//获取我们创建jwt时填入的sessionId</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String) decode.get(<span class="string">&quot;jti&quot;</span>);</span><br><span class="line">            log.info(id); request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID,id);</span><br><span class="line">            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID,Boolean.TRUE);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：我们这里获取到了sessionId后 Shiro框架会将SessionId传入SessionDAO中去获取Session 再通过Session中存储的用户登录权限信息进行鉴权</strong>。</p></li><li><p>自定义重写三类Shiro过滤器</p><p>之所以要重写是为了更好的适配前后端分离的项目，因为Shiro默认过滤器没有通过是会返回一个页面的，但是前后端分离的项目不需要你去返回页面了，所以我们需要重写我们要使用的过滤器使其返回前后端规定好的对象返回。</p><p>重写<code>authc</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthcFilter</span> <span class="keyword">extends</span> <span class="title class_">FormAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 是否允许访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：走jwt校验</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtTokenUtil.decodeToken(jwtToken);</span><br><span class="line">            <span class="keyword">if</span> (!claims.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.isAccessAllowed(request, response, mappedValue);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有携带token：走原始校验</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.isAccessAllowed(request, response, mappedValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有登录&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写<code>perms</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtPermsFilter</span> <span class="keyword">extends</span> <span class="title class_">PermissionsAuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有权限&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写<code>roles</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtRolesFilter</span> <span class="keyword">extends</span> <span class="title class_">RolesAuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有角色&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将新增配置添加进ShiroConfig配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 会话管理器</span></span><br><span class="line"><span class="comment"> * 将刚刚创建好的会话管理器添加进配置类中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;sessionManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ShiroSessionManager <span class="title function_">shiroSessionManager</span><span class="params">(RedisSessionDAO redisSessionDAO)</span>&#123;</span><br><span class="line">    <span class="type">ShiroSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroSessionManager</span>();</span><br><span class="line">    sessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">    sessionManager.setSessionValidationSchedulerEnabled(<span class="literal">false</span>);</span><br><span class="line">    sessionManager.setSessionIdCookieEnabled(<span class="literal">true</span>);</span><br><span class="line">    sessionManager.setSessionIdCookie(simpleCookie());</span><br><span class="line">    <span class="comment">//设置超时</span></span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">3600</span>*<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建cookie对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;sessionIdCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SimpleCookie <span class="title function_">simpleCookie</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">SimpleCookie</span> <span class="variable">simpleCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>();</span><br><span class="line">   simpleCookie.setName(<span class="string">&quot;ShiroSession&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义过滤器定义</span></span><br><span class="line"><span class="comment"> * 将我们重写三个过滤器添加进来 为了后面添加进过滤器工厂做准备</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Filter&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;jwt-authc&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtAuthcFilter</span>());</span><br><span class="line">    map.put(<span class="string">&quot;jwt-perms&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtPermsFilter</span>());</span><br><span class="line">    map.put(<span class="string">&quot;jwt-roles&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtRolesFilter</span>());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将自定义的会话管理器添加进securityManager中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm, RedisSessionDAO redisSessionDAO)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">    securityManager.setSessionManager(shiroSessionManager(redisSessionDAO)); <span class="comment">//这里添加自定义会话管理器</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将刚刚三个自定义的过滤器添加进过滤器工厂中。</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters()); <span class="comment">//将刚刚三个自定义的过滤器添加进过滤器工厂中。</span></span><br><span class="line">        </span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果要使用刚刚三个自定义的过滤器进行过滤器拦截的话 就需要使用那个三个自定义的关键词来配置过滤。</p></li><li><p><code>LoginService</code>中的<code>Login</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">loginForJwt</span><span class="params">(LoginDTO loginDTO)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(loginDTO.getUsername(), loginDTO.getPassword());</span><br><span class="line">            <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">shiroSessionId</span> <span class="operator">=</span> (String) subject.getSession().getId();</span><br><span class="line">            <span class="comment">//登录后颁发的令牌</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            userLambdaQueryWrapper.eq(User::getUsername,loginDTO.getUsername());</span><br><span class="line">            <span class="type">User</span> <span class="variable">shiroUser</span> <span class="operator">=</span> userMapper.selectOne(userLambdaQueryWrapper);</span><br><span class="line">            jwtToken = JwtTokenUtil.IssuedToken(<span class="string">&quot;system&quot;</span>, subject.getSession().getTimeout(),shiroSessionId,shiroUser.getId());</span><br><span class="line">            map.put(<span class="string">&quot;jwtToken&quot;</span>,jwtToken );</span><br><span class="line">            log.info(<span class="string">&quot;jwtToken:&#123;&#125;&quot;</span>,map.toString());</span><br><span class="line">            <span class="comment">//创建缓存</span></span><br><span class="line"><span class="comment">//            this.loadAuthorityToCache();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.fail(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.succeed(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主旨就是使用Shiro的login方法进行登录，登录如果没有抛出异常则说明登录成功，登录成功后将sessionId封装成JWS返回到前端，</p><p>后续的前端通过在请求头部添加token的方式将token发送到后端，后端通过自定义的会话管理器（<code>ShiroSessionManager</code>）的<code>getSessionId</code>的方法解码<code>token</code>获得其中的<code>sessionId</code>， 再由后续的<code>SessionDAO</code>通过<code>SessionId</code>获得<code>Session</code>进行登录鉴权。</p></li></ol><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="盐序列化"><a href="#盐序列化" class="headerlink" title="盐序列化"></a>盐序列化</h3><p>当我们的密码有加密盐的时候若想使用<code>Redis</code>作为<code>Realm</code>的缓存,需要重写实现<code>ByteSource</code>接口，因为<code>Redis</code>存储信息的时候需要对信息进行序列化后才能进行存储，但是<code>ByteSource</code>的实现类<code>SimpleByteSource</code>并没有实现序列化(即没有实现<code>Serializable</code>接口)，同时由于<code>SimpleByteSource</code>没有无参构造导致无法反序列化。</p><p>重写后的<code>MyByteSource</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ： Donald</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ： 2020/10/18 17:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>： 自定义salt的实现 主要巍峨salt的序列化</span></span><br><span class="line"><span class="comment"> * 采用redis缓存shiro的认证信息，并且要对这些信息进行序列化后再存储，但是序列化的时候，SimpleByteSource类没有实现Serializable接口，导致序列化失败</span></span><br><span class="line"><span class="comment"> * SimpleByteSource没有默认构造方法，导致反序列化的时候失败</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyByteSource</span> <span class="keyword">implements</span> <span class="title class_">ByteSource</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*这里将final去掉了,去掉后要在后面用getter和setter赋、取值*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] bytes;</span><br><span class="line">    <span class="keyword">private</span> String cachedHex;</span><br><span class="line">    <span class="keyword">private</span> String cachedBase64;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*添加了一个无参构造方法*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = CodecSupport.toBytes(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(ByteSource source)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = source.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = (<span class="keyword">new</span> <span class="title class_">MyByteSource</span>.BytesHelper()).getBytes(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(InputStream stream)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = (<span class="keyword">new</span> <span class="title class_">MyByteSource</span>.BytesHelper()).getBytes(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCompatible</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> <span class="type">byte</span>[] || o <span class="keyword">instanceof</span> <span class="type">char</span>[] || o <span class="keyword">instanceof</span> String || o <span class="keyword">instanceof</span> ByteSource || o <span class="keyword">instanceof</span> File || o <span class="keyword">instanceof</span> InputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*这里加了getter和setter*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes == <span class="literal">null</span> || <span class="built_in">this</span>.bytes.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toHex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.cachedHex == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedHex = Hex.encodeToString(<span class="built_in">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cachedHex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toBase64</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.cachedBase64 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedBase64 = Base64.encodeToString(<span class="built_in">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cachedBase64;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toBase64();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.bytes.length != <span class="number">0</span> ? Arrays.hashCode(<span class="built_in">this</span>.bytes) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ByteSource) &#123;</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">bs</span> <span class="operator">=</span> (ByteSource)o;</span><br><span class="line">            <span class="keyword">return</span> Arrays.equals(<span class="built_in">this</span>.getBytes(), bs.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BytesHelper</span> <span class="keyword">extends</span> <span class="title class_">CodecSupport</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">BytesHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getBytes(File file) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toBytes(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getBytes(InputStream stream) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toBytes(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*取代原先加盐的工具类*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Util</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ByteSource <span class="title function_">bytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyByteSource</span>(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ByteSource <span class="title function_">bytes</span><span class="params">(String arg0)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyByteSource</span>(arg0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<code>UserRealm</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username, user.getPassword(), MyByteSource.Util.bytes(user.getSalt()), <span class="built_in">this</span>.getName());</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><code>AccessControlFilter</code>过滤器中有两个方法 分别为<code>isAccessAllowed</code>和<code>onAccessDenied</code></p><blockquote><p>isAccessAllowed：表示是否允许访问；mappedValue就是[urls]配置中拦截器参数部分，如果允许访问返回true，否则false；</p><p>onAccessDenied：表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可。</p></blockquote><hr><h2 id="分布式网关"><a href="#分布式网关" class="headerlink" title="分布式网关"></a>分布式网关</h2><p><strong>未完待续。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shiro&quot;&gt;&lt;a href=&quot;#Shiro&quot; class=&quot;headerlink&quot; title=&quot;Shiro&quot;&gt;&lt;/a&gt;Shiro&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简</summary>
      
    
    
    
    <category term="安全框架" scheme="https://devildyw.github.io/categories/%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://devildyw.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--创建型模式之建造者设计模式</title>
    <link href="https://devildyw.github.io/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-20T11:25:48.000Z</published>
    <updated>2022-06-20T11:38:31.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之建造者设计模式"><a href="#设计模式–创建型模式之建造者设计模式" class="headerlink" title="设计模式–创建型模式之建造者设计模式"></a>设计模式–创建型模式之建造者设计模式</h1><p>​    事实上，在平时编写代码时，我们通常都会忽略对象的复杂性，优先考虑使用工厂模式创建对象，而不是建造者模式。因为工厂模式和建造者模式的作用都是创建一个产品对象，相对于建造者模式来说，工厂模式没有抽象建造者和指挥者，所以结构更加简洁直接，因此更常使用。</p><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id17">1.1. 模式动机</a></h2><p>​    无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id18">1.2. 模式定义</a></h2><p>造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id19">1.3. 模式结构</a></h2><p>建造者模式包含如下角色：</p><ul><li><code>Builder</code>：抽象建造者</li><li><code>ConcreteBuilder</code>：具体建造者</li><li><code>Director</code>：指挥者</li><li><code>Product</code>：产品角色</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/Builder.jpg" alt="../_images/Builder.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id20">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_Builder.jpg" alt="../_images/seq_Builder.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id21">1.5. 代码分析</a></h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p><code>Computer</code>产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cpu 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ram 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * usb接口数量 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 屏幕 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 既然是必选的参数 那么每次构造该类的实例都应该有这两参数 其他的参数可选就靠set方法构建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu cpu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ram ran</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRam</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Builder</code>抽象建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置usb接口数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置键盘</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置屏幕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回构建好的产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Computer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">getComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>LenovoComputerComputerBuilder</code>具体建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LenovoComputerComputerBuilder</span> <span class="keyword">extends</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LenovoComputerComputerBuilder</span><span class="params">(String cpu, String ram)</span>&#123;</span><br><span class="line">        computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setUsbCount(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setKeyboard(<span class="string">&quot;Lenovo键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setDisplay(<span class="string">&quot;Lenovo显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MacComputerComputerBuilder</code>具体建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacComputerComputerBuilder</span> <span class="keyword">extends</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MacComputerComputerBuilder</span><span class="params">(String cpu, String ram)</span>&#123;</span><br><span class="line">        computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setUsbCount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setKeyboard(<span class="string">&quot;Mac键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setDisplay(<span class="string">&quot;Mac显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ComputerDirector</code>指导者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerDirector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeComputer</span><span class="params">(ComputerBuilder builder)</span>&#123;</span><br><span class="line">        builder.setDisplay();</span><br><span class="line">        builder.setKeyboard();</span><br><span class="line">        builder.setUsbCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code>演示类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================Mac电脑================&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 首先创建指导者 他来指导生产电脑</span></span><br><span class="line">        <span class="type">ComputerDirector</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerDirector</span>();</span><br><span class="line">        <span class="comment">//2. 创建具体建造类</span></span><br><span class="line">        <span class="type">ComputerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacComputerComputerBuilder</span>(<span class="string">&quot;M1处理器&quot;</span>, <span class="string">&quot;三星125&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 调用指导者的方法生成产品</span></span><br><span class="line">        director.makeComputer(builder);</span><br><span class="line">        <span class="comment">//4. 产品构造完毕 取出产品</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> builder.getComputer();</span><br><span class="line">        <span class="comment">//5. 检验结果</span></span><br><span class="line">        System.out.println(computer);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================Lenovo电脑================&quot;</span>);</span><br><span class="line">        <span class="comment">//步骤同上</span></span><br><span class="line">        builder = <span class="keyword">new</span> <span class="title class_">LenovoComputerComputerBuilder</span>(<span class="string">&quot;I9处理器&quot;</span>, <span class="string">&quot;海力士222&quot;</span>);</span><br><span class="line">        director.makeComputer(builder);</span><br><span class="line">        computer = builder.getComputer();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220620193503069.png" alt="image-20220620193503069"></p><hr><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>​    一般情况下，我们更习惯使用静态内部类的方式实现建造者模式，即一个产品类内部自动带有一个具体建造者，由它负责该产品的组装创建，不再需要 Builder 和 Director。这样做可以使产品表示与创建之间的联系更加紧密，结构更加紧凑，同时使得建造者模式更加简洁。</p><p><code>Computer</code>产品类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cpu 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ram 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * usb接口数量 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 屏幕 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 既然是必选的参数 那么每次构造该类的实例都应该有这两参数 其他的参数可选就靠set方法构建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu cpu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ram ran</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 静态内部类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">            computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">            computer.setUsbCount(usbCount);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setKeyBoard</span><span class="params">(String keyBoard)</span> &#123;</span><br><span class="line">            computer.setKeyboard(keyBoard);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setDisPlay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">            computer.setDisplay(display);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> computer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRam</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Client</code>演示类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//静态内部类好处就是可以链式调用 并且在继承了传统模式的优点下 免去了Director和Builder两个角色 使得代码更简洁更直观</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.Builder(<span class="string">&quot;I9&quot;</span>, <span class="string">&quot;三星&quot;</span>)</span><br><span class="line">                .setUsbCount(<span class="number">2</span>)</span><br><span class="line">                .setKeyBoard(<span class="string">&quot;罗技&quot;</span>)</span><br><span class="line">                .setDisPlay(<span class="string">&quot;三星24寸&quot;</span>)</span><br><span class="line">                .builder();</span><br><span class="line">        <span class="comment">//检验</span></span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220620193825197.png" alt="image-20220620193825197"></p><h2 id="1-6-模式分析"><a href="#1-6-模式分析" class="headerlink" title="1.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id22">1.6. 模式分析</a></h2><p>抽象建造者类中定义了产品的创建方法和返回方法;</p><p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id23">1.7. 实例</a></h2><p>实例：KFC套餐</p><p>建造者模式可以用于描述KFC如何创建套餐：套餐是一个复杂对象，它一般包含主食（如汉堡、鸡肉卷等）和饮料（如果汁、 可乐等）等组成部分，不同的套餐有不同的组成部分，而KFC的服务员可以根据顾客的要求，一步一步装配这些组成部分，构造一份完整的套餐，然后返回给顾客。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/KFCBuilder.jpg" alt="../_images/KFCBuilder.jpg"></p><h2 id="1-8-优点"><a href="#1-8-优点" class="headerlink" title="1.8. 优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id24">1.8. 优点</a></h2><ul><li>在建造者模式中， <strong>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</strong></li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， <strong>用户使用不同的具体建造者即可得到不同的产品对象</strong> 。</li><li><strong>可以更加精细地控制产品的创建过程</strong> 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li><strong>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</strong></li></ul><h2 id="1-9-缺点"><a href="#1-9-缺点" class="headerlink" title="1.9. 缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id25">1.9. 缺点</a></h2><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id26">1.10. 适用环境</a></h2><p>在以下情况下可以使用建造者模式：</p><ul><li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id27">1.11. 模式应用</a></h2><p>在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。</p><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id28">1.12. 模式扩展</a></h2><p>建造者模式的简化:</p><ul><li>省略抽象建造者角色：如果系统中只需要一个具体建造者的话，可以省略掉抽象建造者。</li><li>省略指挥者角色：在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略掉，那么还可以省略指挥者角色，让</li></ul><p>Builder角色扮演指挥者与建造者双重角色。</p><p>建造者模式与抽象工厂模式的比较:</p><ul><li>与抽象工厂模式相比， <strong>建造者模式返回一个组装好的完整产品</strong> ，而 <strong>抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</strong></li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 <strong>汽车配件生产工厂</strong> ，生产一个产品族的产品，那么建造者模式就是一个 <strong>汽车组装工厂</strong> ，通过对部件的组装可以返回一辆完整的汽车。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id29">1.13. 总结</a></h2><ul><li>建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。</li><li>建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li><li>在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li><li>建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li><li>建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之建造者设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之建造者设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之建造者设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之建造者设计模式&lt;/h1&gt;&lt;p&gt;​    事</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--创建型模式之抽象工厂设计模式</title>
    <link href="https://devildyw.github.io/2022/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-19T08:49:01.000Z</published>
    <updated>2022-06-19T08:59:26.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之抽象工厂设计模式"><a href="#设计模式–创建型模式之抽象工厂设计模式" class="headerlink" title="设计模式–创建型模式之抽象工厂设计模式"></a>设计模式–创建型模式之抽象工厂设计模式</h1><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id18">1.1. 模式动机</a></h2><ul><li><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p><blockquote><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><ul><li><strong>产品等级结构</strong> ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li><li><strong>产品族</strong> ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul></blockquote></li><li><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p></li><li><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p></li><li><p>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</p></li></ul><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id19">1.2. 模式定义</a></h2><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id20">1.3. 模式结构</a></h2><p>抽象工厂模式包含如下角色：</p><ul><li><code>AbstractFactory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li><li><code>AbstractProduct</code>：抽象产品</li><li><code>Product</code>：具体产品</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/AbatractFactory.jpg" alt="../_images/AbatractFactory.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id21">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_AbatractFactory.jpg" alt="../_images/seq_AbatractFactory.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id22">1.5. 代码分析</a></h2><p><code>Phone</code>抽象产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 打电话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 发送短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Phone</code>具体产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Router</code>抽象产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 打开wifi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router</code>具体产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiRouter</span> <span class="keyword">extends</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiRouter</span> <span class="keyword">extends</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><code>ProductFactory</code>抽象工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抽象方法 获取手机</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Phone</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抽象方法 获取路由器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Router</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Router <span class="title function_">getRouter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HuaweiFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiFactory</span> <span class="keyword">extends</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Huawei手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaweiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Huawei路由器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaweiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XiaomiFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiFactory</span> <span class="keyword">extends</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Xiaomi手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Xiaomi路由器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>Client</code>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============小米系列=============&quot;</span>);</span><br><span class="line">        <span class="type">ProductFactory</span> <span class="variable">productFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaomiFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> productFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">        <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> productFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============华为系列=============&quot;</span>);</span><br><span class="line">        productFactory = <span class="keyword">new</span> <span class="title class_">HuaweiFactory</span>();</span><br><span class="line">        phone = productFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">        router = productFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.setting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220619165656769.png" alt="image-20220619165656769"></p><h2 id="1-6-模式分析"><a href="#1-6-模式分析" class="headerlink" title="1.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id23">1.6. 模式分析</a></h2><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id24">1.7. 实例</a></h2><h2 id="1-8-优点"><a href="#1-8-优点" class="headerlink" title="1.8. 优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id25">1.8. 优点</a></h2><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li><li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><h2 id="1-9-缺点"><a href="#1-9-缺点" class="headerlink" title="1.9. 缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id26">1.9. 缺点</a></h2><ul><li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id27">1.10. 适用环境</a></h2><p>在以下情况下可以使用抽象工厂模式：</p><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li><li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id28">1.11. 模式应用</a></h2><p>在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。</p><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id29">1.12. 模式扩展</a></h2><h3 id="“开闭原则”的倾斜性"><a href="#“开闭原则”的倾斜性" class="headerlink" title="“开闭原则”的倾斜性"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id30">“开闭原则”的倾斜性</a></h3><ul><li><ul><li><p>“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><p>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。</p></li></ul></li><li><p>抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。</p></li></ul><h3 id="工厂模式的退化"><a href="#工厂模式的退化" class="headerlink" title="工厂模式的退化"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id31">工厂模式的退化</a></h3><ul><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id32">1.13. 总结</a></h2><ul><li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li><li>抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li><li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。</li><li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li><li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之抽象工厂设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之抽象工厂设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之抽象工厂设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之抽象工厂设计模式&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--工厂方法设计模式</title>
    <link href="https://devildyw.github.io/2022/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-11T13:57:45.000Z</published>
    <updated>2022-06-19T09:00:33.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之工厂方法设计模式"><a href="#设计模式–创建型模式之工厂方法设计模式" class="headerlink" title="设计模式–创建型模式之工厂方法设计模式"></a>设计模式–创建型模式之工厂方法设计模式</h1><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id16">1.1. 模式动机</a></h2><p>现在对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的工厂子类去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在抽象按钮工厂类中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合“开闭原则”。</p><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id17">1.2. 模式定义</a></h2><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id18">1.3. 模式结构</a></h2><p>工厂方法模式包含如下角色：</p><ul><li><code>Product</code>：抽象产品</li><li><code>ConcreteProduct</code>：具体产品</li><li><code>Factory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/FactoryMethod.jpg" alt="../_images/FactoryMethod.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id19">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_FactoryMethod.jpg" alt="../_images/seq_FactoryMethod.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://github.com/Devildyw/design-patterns/tree/master/DesignPatterns-Java/FactoryMethodPattern">1.5. 代码分析</a></h2><p><strong>注释也可以仔细看看哦</strong></p><p>抽象产品类<code>Vehicles.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-20:13</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类为工厂方法设计模式中的抽象产品角色&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;基类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicles</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交通工具的核心方法 &quot;运行&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体产品类<code>Bike.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-20:13</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类角色为工厂方法设计模式中的具体产品角色&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;自行车继承自交通工具抽象类实现了抽象方法&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bike</span> <span class="keyword">extends</span> <span class="title class_">Vehicles</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bike is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂类<code>VehiclesFactory.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-21:52</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;工厂方法设计模式 该类为抽象工厂角色&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     这里创建了一个抽象的工厂类 是为了让具体工厂的子类来实现这个特定的方法 以便于生产产品</span></span><br><span class="line"><span class="comment"> *     之所以这样便于生产产品是相较于简单工厂设计模式的，简单工厂设计模式生产产品是将生产过程耦合在了一起</span></span><br><span class="line"><span class="comment"> *     这样在产品不多的时候或是产品种类确定不会经常改变时较为好用，但是我们实际生产中很难确定自己的产品种类就一定不变</span></span><br><span class="line"><span class="comment"> *     所以我们可以使用工厂方法设计模式，他不在原来的类上进行修改，而是给出了一个抽象类 新添加的产品需要创建一个具体工厂类</span></span><br><span class="line"><span class="comment"> *     实现具体的抽象方法以便于创建具体的产品。符合开闭原则的同时也避免了简单工厂设计模式的高耦合性。</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">VehiclesFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 具体工厂继承该类并且实现该抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Vehicles</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Vehicles <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体工厂类<code>BikeFactory.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Bike;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-12-0:44</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;工厂方法设计模式 该类为具体工厂角色&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BikeFactory</span> <span class="keyword">extends</span> <span class="title class_">VehiclesFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Vehicles <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在生成bike...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示类<code>Main.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.factory.BikeFactory;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.factory.VehiclesFactory;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-12-0:48</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类用于向读者展示工厂方法是否有效&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;这里仅仅只是展示了一个产品的工厂生产 通过这一个例子 读者足以理解本片想要表达的含义&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这里我想要一辆自行车</span></span><br><span class="line">        <span class="comment">//首先创建一个工厂类 让他帮我们创建类</span></span><br><span class="line">        <span class="type">VehiclesFactory</span> <span class="variable">bikeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BikeFactory</span>();</span><br><span class="line">        <span class="comment">//工厂类调用特定方法生产产品</span></span><br><span class="line">        <span class="type">Vehicles</span> <span class="variable">product</span> <span class="operator">=</span> bikeFactory.createProduct();</span><br><span class="line">        <span class="comment">//执行产品特有的方法</span></span><br><span class="line">        product.work();</span><br><span class="line">        <span class="comment">//检验结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220612010908971.png" alt="image-20220612010908971"></p><h2 id="2-6-模式分析"><a href="#2-6-模式分析" class="headerlink" title="2.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id21">2.6. 模式分析</a></h2><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</p><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id22">1.7. 实例</a></h2><p>日志记录器</p><p>某系统日志记录器要求支持多种日志记录方式，如文件记录、数据库记录等，且用户可以根据要求动态选择日志记录方式， 现使用工厂方法模式设计该系统。</p><p>结构图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/loger.jpg" alt="../_images/loger.jpg"></p><p>时序图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_loger.jpg" alt="../_images/seq_loger.jpg"></p><h2 id="1-8-工厂方法模式的优点"><a href="#1-8-工厂方法模式的优点" class="headerlink" title="1.8. 工厂方法模式的优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id23">1.8. 工厂方法模式的优点</a></h2><ul><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h2 id="1-9-工厂方法模式的缺点"><a href="#1-9-工厂方法模式的缺点" class="headerlink" title="1.9. 工厂方法模式的缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id24">1.9. 工厂方法模式的缺点</a></h2><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id25">1.10. 适用环境</a></h2><p>在以下情况下可以使用工厂方法模式：</p><ul><li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li><li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li><li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id26">1.11. 模式应用</a></h2><p><code>JDBC</code>中的工厂方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn=DriverManager.getConnection(<span class="string">&quot;jdbc:microsoft:sqlserver://loc</span></span><br><span class="line"><span class="string">alhost:1433; DatabaseName=DB;user=sa;password=&quot;</span>);</span><br><span class="line">Statement statement=conn.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(<span class="string">&quot;select * from UserInfo&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id27">1.12. 模式扩展</a></h2><ul><li>使用多个工厂方法：在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。</li><li>产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中，然后根据客户对产品的请求，对集合进行查询。如果有满足要求的产品对象，就直接将该产品返回客户端；如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。</li><li>多态性的丧失和模式的退化：如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意，发生退化，此时就不再是工厂方法模式了。一般来说，工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成简单工厂模式。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id28">1.13. 总结</a></h2><ul><li>工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li><li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li><li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li><li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li><li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之工厂方法设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之工厂方法设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之工厂方法设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之工厂方法设计模式&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://devildyw.github.io/2022/05/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://devildyw.github.io/2022/05/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-05-21T12:59:28.000Z</published>
    <updated>2022-05-21T13:04:40.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布隆过滤器-BloomFilter"><a href="#布隆过滤器-BloomFilter" class="headerlink" title="布隆过滤器(BloomFilter)"></a>布隆过滤器(BloomFilter)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    我们经常会将一部分数据放在redis等缓存中，比如产品信息。这样有查询请求进来，我们就可以根据产品id直接去缓存中取得数据，如果没有再去读取数据库，再将数据放入缓存，再返回数据，大大减少了访问数据库的次数，这是提升性能最普遍的方式。</p><p>​    但是如果现在有大量的请求进来，而且都在请求一个不存在的id，就会导致大量的请求去访问数据库，而数据库对于不存在的id是需要遍历整个表之后返回一个null的，这样大量的请求访问数据库，很大可能导致数据库宕机，</p><p>这时我们急需一个解决方案，在无效id访问缓存的之前就判断该id不存在。布隆过滤器就是一个很好的选择。</p><hr><h2 id="背景及意义"><a href="#背景及意义" class="headerlink" title="背景及意义"></a>背景及意义</h2><p>​    <strong>布隆过滤器</strong>（英语：Bloom Filter）是 1970 年由一个叫做布隆的老哥提出的。它底层实际上是一个很长的bit数组和一系列随机映射函数。主要用于判断一个元素是否在一个集合中。</p><p>​    通常我们会遇到很多要判断一个元素是否在某个集合中的业务场景(比如缓存场景)，一般想到的是将集合中所有元素保存起来，然后通过比较确定。链表、树、散列表（又叫哈希表，Hash table）等等数据结构都是这种思路。但是随着集合中元素的增加，我们需要的存储空间也会呈现线性增长，最终达到瓶颈。同时检索速度也越来越慢，这个时候，布隆过滤器（Bloom Filter）就应运而生。</p><hr><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>布隆过滤器的数据结构如图所示</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20200714114525436.png" alt="在这里插入图片描述"></p><p>可以发现最底层是一个bit数组，通过一系列hash算法将元素映射到bit数组上。下面我们来介绍一下布隆过滤器（<code>Bloom Filter</code>）的算法。</p><hr><p><strong>当一个元素加入到布隆过滤器中的时候，会进行如下操作。</strong></p><blockquote><ul><li>使用布隆过滤器中的hash函数对元素值进行计算，得到元素的hash值（有几个hash函数获得几个hash值）。</li><li>根据得到的hash值，在bit数组中把对应下标的值由0置为1.</li></ul></blockquote><p><strong>当我们需要判断一个元素是否存在于布隆过滤器中时，会进行如下操作。</strong></p><blockquote><ul><li>对给定元素再次进行相同的hash计算；</li><li>得到值之后判断bit数组中的每个元素是否都为1，如果值为1，那么说明整个值在布隆过滤器中，如果存在一个值不为1，说明该元素不在过滤器中。</li></ul></blockquote><p>如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p><p><strong>因为hash冲突的缘故，不同元素通过hash计算可能会得到相同的hash值；所以布隆过滤器计算得到一个元素是否存在时，可能会出现误判，但是如果布隆过滤器判断一个元素不存在，那么该元素一定不存在。</strong></p><p>对于布隆过滤器的误判的情况，可以通过增加bit数组的大小或者调整hash函数来减小概率。</p><p><strong>综上，我们可以得出：布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p><hr><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><ol><li>增加和查询元素的时间复杂度为：O(K), (K为哈希函数的个数，一般比较小)，与数据量大小无关</li><li>哈希函数相互之间没有关系，方便硬件并行运算</li><li>布隆过滤器不需要存储元素本身，在某些对保密要求比较严格的场合有很大优势</li><li>在能够承受一定的误判时，布隆过滤器比其他数据结构有这很大的空间优势</li><li>数据量很大时，布隆过滤器可以表示全集，其他数据结构不能</li><li>使用同一组散列函数的布隆过滤器可以进行交、并、差运算</li></ol></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><ol><li>有误判率，即存在假阳性(False Position)，即不能准确判断元素是否在集合中(补救方法：再建立一个白<br>名单，存储可能会误判的数据)</li><li>不能获取元素本身</li><li>一般情况下不能从布隆过滤器中删除元素</li><li>如果采用计数方式删除，可能会存在计数回绕问题</li></ol></blockquote><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，5亿以上！）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤、黑名单功能等等。</li><li>去重：比如爬给定网址的时候对已经爬取过的 URL 去重。</li><li>钓鱼网站识别</li><li>秒杀系统：查看用户是否重复购买</li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><code>Bloom-Filter.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dyw.bloomFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-05-21-20:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bit数组的默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">2</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过这个数组可以创建6个不同的hash函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] SEEDS = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">46</span>,<span class="number">91</span>,<span class="number">134</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bit数组。数组中的元素只能是 0 或者 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BitSet bits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放包含 hash 函数的类的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpleHash[] func = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>[SEEDS.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造 指定bit数组大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化多个不同的Hash函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; SEEDS.length; i++) &#123;</span><br><span class="line">            func[i] = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(size, SEEDS[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到位数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (SimpleHash f : func) &#123;</span><br><span class="line">            bits.set(f.hash(value), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断指定元素是否存在于位数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (SimpleHash f : func) &#123;</span><br><span class="line">            ret = ret &amp;&amp; bits.get(f.hash(value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类。用于 hash 操作！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleHash</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> cap;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> seed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimpleHash</span><span class="params">(<span class="type">int</span> cap, <span class="type">int</span> seed)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cap = cap;</span><br><span class="line">            <span class="built_in">this</span>.seed = seed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算 hash 值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            <span class="type">int</span> h;</span><br><span class="line">            <span class="keyword">return</span> (value == <span class="literal">null</span>) ? <span class="number">0</span> : Math.abs(seed * (cap - <span class="number">1</span>) &amp; ((h = value.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="End"><a href="#End" class="headerlink" title="-End-"></a>-End-</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;布隆过滤器-BloomFilter&quot;&gt;&lt;a href=&quot;#布隆过滤器-BloomFilter&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器(BloomFilter)&quot;&gt;&lt;/a&gt;布隆过滤器(BloomFilter)&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://devildyw.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Cache</title>
    <link href="https://devildyw.github.io/2022/05/18/Cache/"/>
    <id>https://devildyw.github.io/2022/05/18/Cache/</id>
    <published>2022-05-18T09:23:15.000Z</published>
    <updated>2022-05-18T09:23:15.843Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://devildyw.github.io/2022/05/15/Docker/"/>
    <id>https://devildyw.github.io/2022/05/15/Docker/</id>
    <published>2022-05-15T06:57:20.000Z</published>
    <updated>2022-07-02T15:34:44.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker 是一个开源的应用容器引擎，基于 Go 语言   并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="为什么会有Docker的出现"><a href="#为什么会有Docker的出现" class="headerlink" title="为什么会有Docker的出现"></a>为什么会有Docker的出现</h2><p>​    传统上认为，软件编码开发&#x2F;测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等（Java为例）。而为了让这些程序可以顺利的执行，开发团队也得准备完成的部署文件，让运维团队得以部署应用程序，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过即便如此，任然常常发生部署失败的状况。Docker的出现使得Docker得以打破过期【程序即应用】的观念。通过镜像（images）将作业系统核心除外，运作应用程序所需要的系统环境，由下而上打包，达到系统程序跨平台间的无缝接轨运作。</p><h2 id="Docker的理念"><a href="#Docker的理念" class="headerlink" title="Docker的理念"></a>Docker的理念</h2><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是&#96;“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220515154552629.png" alt="image-20220515154552629"></p><p>Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p><p><strong>Docker解决了运行环境和配置问题的软件容器， 方便做持续集成并有助于整体发布的容器虚拟化技术。</strong></p><hr><h2 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h2><p><strong>简化程序：</strong><br>Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的  Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的    任务，在Docker容器的处理下，只需要数秒就能完成。</p><p><strong>节省开支：</strong><br>一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。</p><h2 id="容器与虚拟机的比较"><a href="#容器与虚拟机的比较" class="headerlink" title="容器与虚拟机的比较"></a>容器与虚拟机的比较</h2><p>上文我们提到了容器，那么容器和传统的虚拟机有什么区别呢？</p><h3 id="容器发展简史"><a href="#容器发展简史" class="headerlink" title="容器发展简史"></a>容器发展简史</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220515155014898.png" alt="image-20220515155014898"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220515155023912.png" alt="image-20220515155023912"></p><h3 id="传统虚拟机"><a href="#传统虚拟机" class="headerlink" title="传统虚拟机"></a>传统虚拟机</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><ul><li>传统虚拟机技术：模拟一个完整的操作系统，先虚拟出一套硬件，然后在其上安装操作系统，最后在系统上再运行应用程序<br>缺点：资源占用多，启动慢<br>虚拟机偏向于硬件</li></ul><p>使用虚拟机运行多个相互隔离的应用时，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12979420-15eaabb27b008ce1" alt="img"></p><p>从下到上理解上图：</p><p><strong>基础设施</strong>（Infrastructure）。它可以是你的个人电脑，数据中心的服务器，或者是云主机。</p><p><strong>主操作系统</strong>（Host Operating System）。你的个人电脑之上，运行的可能是MacOS，Windows或者某个Linux发行版。</p><p><strong>虚拟机管理系统</strong>（Hypervisor）。利用Hypervisor，可以在主操作系统之上运行多个不同的从操作系统,实现硬件资源虚拟化。类型1的Hypervisor有支持MacOS的HyperKit，支持Windows的Hyper-V以及支持Linux的KVM。类型2的Hypervisor有VirtualBox和VMWare。</p><p><strong>从操作系统</strong>（Guest Operating System）。假设你需要运行3个相互隔离的应用，则需要使用Hypervisor启动3个从操作系统，也就是3个虚拟机。这些虚拟机都非常大，也许有700MB，这就意味着它们将占用2.1GB的磁盘空间。更糟糕的是，它们还会消耗很多CPU和内存。</p><p><strong>各种依赖</strong>。每一个从操作系统都需要安装许多依赖。如果你的的应用需要连接PostgreSQL的话，则需要安装libpq-dev；如果你使用Ruby的话，应该需要安装gems；如果使用其他编程语言，比如Python或者Node.js，都会需要安装对应的依赖库。</p><p>应用。安装依赖之后，就可以在各个从操作系统分别运行应用了，这样各个应用就是相互隔离的。</p><hr><h3 id="Docker容器技术"><a href="#Docker容器技术" class="headerlink" title="Docker容器技术"></a>Docker容器技术</h3><ul><li>Docker容器技术：不是模拟一个完整的操作系统，没有进行硬件虚拟，而是对进程进行隔离，封装成容器，容器内的应用程序是直接使用宿主机的内核，且容器之间是互相隔离的，互不影响<br>优点：更轻便、效率高、启动快、秒级<br>Docker容器技术更多的偏向于软件</li></ul><p>使用Docker容器运行多个相互隔离的应用时，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12979420-005836e6ff3e6b39" alt="img"></p><p><strong>主操作系统</strong>（Host Operating System）。所有主流的Linux发行版都可以运行Docker。对于MacOS和Windows，也有一些办法”运行”Docker。</p><p><strong>Docker守护进程</strong>（Docker Daemon）。Docker守护进程取代了Hypervisor，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。它是运行在操作系统之上的后台进程，负责管理Docker容器。</p><p><strong>各种依赖</strong>。对于Docker，应用的所有依赖都打包在Docker镜像中，Docker容器是基于Docker镜像创建的。</p><p><strong>应用</strong>。应用的源代码与它的依赖都打包在Docker镜像中，不同的应用需要不同的Docker镜像。不同的应用运行在不同的Docker容器中，它们是相互隔离的。</p><hr><h3 id="两者之间的区别"><a href="#两者之间的区别" class="headerlink" title="两者之间的区别"></a>两者之间的区别</h3><ul><li><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p></li><li><p>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p></li><li><p>作为一种轻量级的虚拟化方式，Docker在运行应用上跟传统的虚拟机方式相比具有显著优势：</p></li><li><p>Docker容器很快，启动和停止可以在秒级实现，这相比传统的虚拟机方式要快得多。</p></li><li><p>Docker容器对系统资源需求很少，一台主机上可以同时运行数千个Docker容器。</p></li><li><p>Docker通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。</p></li><li><p>Docker通过<code>Dockerfile</code>配置文件来支持灵活的自动化创建和部署机制，提高工作效率。</p></li><li><p>Docker容器除了运行其中的应用之外，基本不消耗额外的系统资源，保证应用性能的同时，尽量减小系统开销。</p></li><li><p>Docker利用Linux系统上的多种防护机制实现了严格可靠的隔离。从1.3版本开始，Docker引入了安全选项和镜像签名机制，极大地提高了使用Docker的安全性。</p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于原生</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr><tr><td>隔离性</td><td>安全隔离</td><td>完全隔离</td></tr></tbody></table></li></ul><h2 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h2><ul><li><p>开发&#x2F;运维（DevOps）新一代开发工程师</p><blockquote><ul><li>· 一次构建、随处运行</li><li>· 更快速的应用交付和部署<ul><li>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</li></ul></li><li>· 更便捷的升级和扩缩容<ul><li>随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</li></ul></li><li>· 更简单的系统运维<ul><li>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</li></ul></li><li>· 更高效的计算资源利用<ul><li>Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</li></ul></li></ul></blockquote></li><li><p>Docker的应用场景</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220515162158635.png" alt="image-20220515162158635"></p></li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><hr><h4 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h4><p>Docker 支持 64 位版本 CentOS 7&#x2F;8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h2><p>执行以下命令安装依赖包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p><p><strong>这里演示的是阿里云的镜像库</strong></p><p>执行下面的命令添加 <code>yum</code> 软件源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h2 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h2 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete</span><br><span class="line">Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><p>如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker 国内镜像加速。</p><p><strong>这里演示的是阿里云的镜像加速器</strong></p><p>配置镜像加速器:(针对Docker客户端版本大于 1.10.0 的用户)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://3h5lqxa4.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><hr><h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p><strong>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/24/1687d76498e7d980~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="de4146cd809a9f320512b316ed5e4570.png"></p><p><strong>Docker组件:</strong></p><blockquote><ul><li><p>docker Client客户端————&gt;向docker服务器进程发起请求，如:创建、停止、销毁容器等操作</p></li><li><p>docker Server服务器进程—–&gt;处理所有docker的请求，管理所有容器</p></li><li><p>docker Registry镜像仓库——&gt;镜像存放的中央仓库，可看作是存放二进制的scm</p></li></ul></blockquote><hr><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><p>操作系统分为<strong>内核</strong>和<strong>用户空间</strong>.对于<code>linux</code>这类操作系统而言,内核启动后,会挂载<code>root</code>文件文件系统为其提供用户空间支持。而<strong>Docker镜像</strong>（<code>image</code>），就相当于是一个<code>root</code>文件系统。比如官方镜像<code>ubuntu:18.04</code>就包含了完整的一套<code>Ubuntu18.04</code>最小系统的root文件系统。</p><p>Docker镜像是一个特殊的文件系统，除恶了提供容器运行时所需要的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像<strong>不包含</strong>任何动态数据，其内容在构建之后也不会改变。</p><h4 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h4><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 <code>ISO</code> 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><p>后续我会为大家详细介绍如何构建镜像。</p><hr><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h4><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><table><thead><tr><th>Docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。看到这里也就不迷惑为什么有人会把虚拟机和Docker容器混淆了，前面我也介绍了他们之间的区别（虚拟机需要虚拟一套硬件出来）。‘</p><p>容器与镜像一样，也是使用分层存储，每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong></p><p><strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p><p>注意：按照《Docker最佳实践》的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的写入操作，都应该使用<strong>数据卷</strong>、或者<strong>绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。（毕竟容器宕掉了数据也没了，还是有一个稳定的地方存储数据安全有一点。）</p><p><strong>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</strong></p><hr><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><h4 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h4><p>Docker Registry就是一个可以集中存储、分发镜像的服务。我将镜像构建完成之后，可以很容易的在当前宿主机上运行，但是，如果我需要其他服务器上使用该镜像，或者分享给别人使用时Docker Registry就很有用了。</p><p><strong>一个Docker Registry中可以有多个仓库（<code>Repository</code>）；每个仓库可以包含多个标签（<code>Tag</code>）；每个标签对应一个镜像。</strong></p><p>通常，<strong>一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。</strong>我们可以通过 <strong><code>&lt;仓库名&gt;:&lt;标签&gt;</code></strong> 的格式来指定具体是这个软件哪个版本的镜像。<strong>如果不给出标签，将以 <code>latest</code> 作为默认标签。</strong></p><p>以 <a href="https://hub.docker.com/_/ubuntu">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:16.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><p><strong>Docker Registry</strong>分为公开服务和私有服务</p><hr><h4 id="Docker-Registry-公开服务"><a href="#Docker-Registry-公开服务" class="headerlink" title="Docker Registry 公开服务"></a>Docker Registry 公开服务</h4><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的 <a href="https://hub.docker.com/search?q=&type=image&image_filter=official">官方镜像</a>。除此以外，还有 Red Hat 的 <a href="https://quay.io/repository/">Quay.io</a>；Google 的 <a href="https://cloud.google.com/container-registry/">Google Container Registry</a>，<a href="https://kubernetes.io/">Kubernetes</a> 的镜像使用的就是这个服务；代码托管平台 <a href="https://github.com/">GitHub</a> 推出的 <a href="https://docs.github.com/cn/packages/working-with-a-github-packages-registry/working-with-the-container-registry">ghcr.io</a>。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为 <strong>加速器</strong>。常见的有 <a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 <a href="https://docker-practice.github.io/zh-cn/install/mirror.html">安装 Docker</a> 一节中有详细的配置方法。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://c.163.com/hub#/m/library/">网易云镜像服务</a>、<a href="https://hub.daocloud.io/">DaoCloud 镜像市场</a>、<a href="https://www.aliyun.com/product/acr?source=5176.11533457&userCode=8lx5zmtu">阿里云镜像库</a> 等。</p><hr><h4 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h4><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。在 <a href="https://docker-practice.github.io/zh-cn/repository/registry.html">私有仓库</a> 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/goharbor/harbor">Harbor</a> 和 <a href="https://docker-practice.github.io/zh-cn/repository/nexus3_registry.html">Sonatype Nexus</a>。</p><hr><hr><h2 id="使用Docker镜像"><a href="#使用Docker镜像" class="headerlink" title="使用Docker镜像"></a>使用Docker镜像</h2><p>镜像是Docker的三大组件之一</p><p>Docker运行容器之前，需要本地存在对应的镜像，如果本地不存在该镜像，Docker会从镜像仓库中下载该镜像。</p><p>本部分会介绍关于使用Docker镜像的一些操作，包括：</p><blockquote><ul><li>从仓库中获取镜像；</li><li>管理本地主机上的镜像；</li><li>介绍镜像实现的基本原理。</li></ul></blockquote><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>在Docker Registry中我们提到了，<a href="https://hub.docker.com/search?q=&type=image">Docker Hub</a> 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。</p><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>具体**[选项]**可以通过<code>docker pull --help</code> 查看，这里详细介绍下镜像命名的格式。</p><ul><li>Docker镜像仓库地址：地址的格式一般是<code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是Docker Hub（<code>docker.io</code>）。</li><li>仓库名：仓库名是两端式名称，即<code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于Docker Hub，如果不给出用户名，则默认<code>library</code>，也就是官方镜像。</li></ul><p>如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu:18.04</span><br><span class="line">18.04: Pulling from library/ubuntu</span><br><span class="line">92dc2a97ff99: Pull complete</span><br><span class="line">be13a9d27eb8: Pull complete</span><br><span class="line">c8299583700a: Pull complete</span><br><span class="line">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:18.04</span><br><span class="line">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。<code>docker pull</code> 命令的输出结果最后一行给出了镜像的完整名称，即： <code>docker.io/library/ubuntu:18.04</code>。</p><p>从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 <code>sha256</code> 的摘要，以确保下载一致性。</p><p>在使用上面命令的时候，你可能会发现，你所看到的每层 ID 以及 <code>sha256</code> 的摘要和这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。</p><p><em>如果从 Docker Hub 下载镜像非常缓慢，可以参照 <a href="https://docker-practice.github.io/zh-cn/install/mirror.html">镜像加速器</a> 一节配置加速器。</em></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>有了镜像，我们就可以以这个镜像为基础启动并运行一个容器。以上面的<code>ubuntu:18.04</code>为例，如果我们打算能启动里面的<code>bash</code>并进行交互操作的话，可以执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --<span class="built_in">rm</span> ubuntu:18.04 bash</span><br><span class="line"></span><br><span class="line">root@e7009c6ce357:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;18.04.1 LTS (Bionic Beaver)&quot;</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 18.04.1 LTS&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;18.04&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><p><code>docker run</code> 就是运行容器的命令，具体格式我们会在 <a href="https://docker-practice.github.io/zh-cn/container">容器</a>介绍中进行详细讲解，我们这里简要的说明一下上面用到的参数。</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>ubuntu:18.04</code>：这是指用 <code>ubuntu:18.04</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li></ul><p>进入容器后，我们就可以在Shell下操作，执行任何所需的命令。如上述代码</p><p>可以通过<code>exit</code>退出这个容器。</p><h1 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="DevOps" scheme="https://devildyw.github.io/categories/DevOps/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>Paxos</title>
    <link href="https://devildyw.github.io/2022/05/04/Paxos/"/>
    <id>https://devildyw.github.io/2022/05/04/Paxos/</id>
    <published>2022-05-04T13:39:07.000Z</published>
    <updated>2022-05-04T14:08:18.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Paxos算法详解"><a href="#Paxos算法详解" class="headerlink" title="Paxos算法详解"></a>Paxos算法详解</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    Paxos是什么? Paxos算法是基于<strong>消息传递</strong>且具有<strong>高度容错特性</strong>的<strong>一致性算法</strong>，是目前公认的解决<strong>分布式一致性</strong>问题<strong>最有效</strong>的算法之一。    </p><p>​    Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法,它使其获得了2013年图灵奖.</p><p>​    自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性。（Google Chubby的作者Mike Burrows说过这个世界上<strong>只有一种</strong>一致性算法，那就是Paxos，其它的算法都是<strong>残次品</strong>。）Google的很多大型分布式系统都采用了Paxos算法来解决分布式一致性问题，如Chubby、Megastore以及Spanner等。开源的ZooKeeper，以及MySQL 5.7推出的用来取代传统的主从复制的MySQL Group Replication等纷纷采用Paxos算法解决分布式一致性问题。</p><p>​    然而，Paxos的最大特点<strong>就是难，不仅难以理解，更难以实现。</strong></p><h2 id="Paxos解决的问题"><a href="#Paxos解决的问题" class="headerlink" title="Paxos解决的问题"></a>Paxos解决的问题</h2><p>​    在常见的分布式系统中，总会发生诸如<strong>机器宕机</strong>或<strong>网络异常</strong>（包括消息的延迟、丢失、重复、乱序，还有网络分区）等情况。Paxos算法需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对<strong>某个数据的值</strong>达成<strong>一致</strong>，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p><p> <strong>注意：</strong>这里指的<strong>某个数据的值</strong>并不一定只是狭义上的某个数，它可以使日志，也可以是一条命令（command）… 根据应用场景的不同，<strong>某个数据的值</strong>有着不同得含义。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1752522-d2136179b456e13e.png" alt="问题产生的背景"></p><h2 id="Paxos介绍"><a href="#Paxos介绍" class="headerlink" title="Paxos介绍"></a>Paxos介绍</h2><h3 id="Paxos的三种角色"><a href="#Paxos的三种角色" class="headerlink" title="Paxos的三种角色"></a>Paxos的三种角色</h3><ul><li><strong>Proposer: 提议者</strong></li><li><strong>Acceptor: 决策者</strong></li><li><strong>Learners: 最终决策学习者</strong></li></ul><p>​    在具体的实现中，一个进程可能同时充当多种角色。比如一个进程可能及时<strong>Proposer又是Accdeptor又是Learner。</strong></p><p>​    既然有提议者，那么一定有提议，这里还有个有很重的概念叫做<strong>提案（Proposal）</strong>。最终要达成一致的value就在提案里面。</p><p>Proposer可以提出（propose）提案；Acceptor可以接受（accept）提案；如果某个提案被选定（chosen），那么该提案里的value就被选定了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Paxos算法详解&quot;&gt;&lt;a href=&quot;#Paxos算法详解&quot; class=&quot;headerlink&quot; title=&quot;Paxos算法详解&quot;&gt;&lt;/a&gt;Paxos算法详解&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chubby</title>
    <link href="https://devildyw.github.io/2022/05/04/Chubby/"/>
    <id>https://devildyw.github.io/2022/05/04/Chubby/</id>
    <published>2022-05-04T13:38:00.000Z</published>
    <updated>2022-05-04T13:38:47.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chubby"><a href="#Chubby" class="headerlink" title="Chubby"></a>Chubby</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chubby&quot;&gt;&lt;a href=&quot;#Chubby&quot; class=&quot;headerlink&quot; title=&quot;Chubby&quot;&gt;&lt;/a&gt;Chubby&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式----创建型模式之简单工厂设计模式</title>
    <link href="https://devildyw.github.io/2022/04/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/04/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-27T17:29:10.000Z</published>
    <updated>2022-06-19T09:00:03.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式—-创建型模式之单例设计模式"><a href="#设计模式—-创建型模式之单例设计模式" class="headerlink" title="设计模式—-创建型模式之单例设计模式"></a>设计模式—-创建型模式之单例设计模式</h1><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id17">1.1. 模式动机</a></h2><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。</p><p>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。</p><p>一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id18">1.2. 模式定义</a></h2><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id19">1.3. 模式结构</a></h2><p>单例模式包含如下角色：</p><ul><li>Singleton：单例</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/Singleton.jpg" alt="../_images/Singleton.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id20">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_Singleton.jpg" alt="../_images/seq_Singleton.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id21">1.5. 代码分析</a></h2><p>懒汉式:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungrySingleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在程序加载时 就将类初始化 生成实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HungrySingleton</span> <span class="variable">HUNGRY_SINGLETON</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungrySingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二: 静态代码块</span></span><br><span class="line"><span class="comment">//    private static HungrySingleton HUNGRY_SINGLETON = null;</span></span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        HUNGRY_SINGLETON = new HungrySingleton();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化 防止重复创建类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungrySingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当被调用时 直接将该方法返回即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> HUNGRY_SINGLETON</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY_SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个可以打印数组的方法 用于测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : array) &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>懒汉式:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个类实例的变量 用于等待调用 调用后 作为初始化对象的容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">LAZY_SINGLETON</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化 防止被调用重复生成实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当被调用时 如果没有被实例化 则实例化</span></span><br><span class="line"><span class="comment">     * 已经实例化了 直接返回</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;h2&gt;注意:&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">     * 这种写法的缺点就是线程安全无法保证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LAZY_SINGLETON</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果LAZY_SINGLETON为空</span></span><br><span class="line">        <span class="keyword">if</span> (LAZY_SINGLETON==<span class="literal">null</span>)&#123;</span><br><span class="line">            LAZY_SINGLETON = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZY_SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个可以打印数组的方法 用于测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : array) &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>懒汉式改良版:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingletonPlus</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个类实例的变量 用于等待调用 调用后 作为初始化对象的容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingletonPlus</span> <span class="variable">LAZY_SINGLETON_PLUS</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化 防止被调用重复生成实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingletonPlus</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当被调用时 如果没有被实例化 则实例化</span></span><br><span class="line"><span class="comment">     * 已经实例化了 直接返回</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;h2&gt;注意:&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">     * 这种写法的缺点就是线程安全无法保证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LAZY_SINGLETON</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingletonPlus <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一层检查  如果LAZY_SINGLETON为空</span></span><br><span class="line">        <span class="keyword">if</span> (LAZY_SINGLETON_PLUS==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//加锁 第一个线程调用该方法的会获得一个锁 这个锁为悲观锁 保证只有一个线程进入</span></span><br><span class="line">            <span class="comment">//假设有线程A和线程B两个线程同时通过第一层判断，那么它们需要排队进入同步代码块，</span></span><br><span class="line">            <span class="comment">//假设线程A先进入同步代码块，那么实例由线程A创建，那么当线程B进入同代码块时便不能通过第二层检查，</span></span><br><span class="line">            <span class="comment">//即直接返回实例。这样便实现了线程安全的懒加载。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingletonPlus.class)&#123;</span><br><span class="line">                <span class="comment">//第二层检查 此时如果实例还未被创建 则交由此处创造</span></span><br><span class="line">                <span class="comment">//如果这里是被别人抢先一步获得锁 这里是阻塞完毕 实例已经被先行进入锁的线程创建了</span></span><br><span class="line">                <span class="comment">//则这里的判断是跳出条件判断的作用 防止锁死无法跳出 导致线程阻塞.</span></span><br><span class="line">                <span class="keyword">if</span> (LAZY_SINGLETON_PLUS==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//最后创造实例</span></span><br><span class="line">                    LAZY_SINGLETON_PLUS = <span class="keyword">new</span> <span class="title class_">LazySingletonPlus</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回实例</span></span><br><span class="line">        <span class="keyword">return</span> LAZY_SINGLETON_PLUS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个可以打印数组的方法 用于测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : array) &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>测试代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">//饿汉式</span></span><br><span class="line">        <span class="type">HungrySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> HungrySingleton.getInstance();</span><br><span class="line">        instance.print(array);</span><br><span class="line">        <span class="type">HungrySingleton</span> <span class="variable">instance3</span> <span class="operator">=</span> HungrySingleton.getInstance();</span><br><span class="line">        System.out.println(instance==instance3);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//普通懒汉式</span></span><br><span class="line">        <span class="type">LazySingleton</span> <span class="variable">instance1</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">        instance1.print(array);</span><br><span class="line">        <span class="type">LazySingleton</span> <span class="variable">instance4</span> <span class="operator">=</span> LazySingleton.getInstance();</span><br><span class="line">        System.out.println(instance1==instance4);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220428005355210.png" alt="image-20220428005355210"></p><h2 id="1-6-模式分析"><a href="#1-6-模式分析" class="headerlink" title="1.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id22">1.6. 模式分析</a></h2><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p><p>在单例模式的实现过程中，需要注意如下三点：</p><ul><li>单例类的构造函数为私有；</li><li>提供一个自身的静态私有成员变量；</li><li>提供一个公有的静态工厂方法。</li></ul><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id23">1.7. 实例</a></h2><p>在操作系统中，打印池(Print Spooler)是一个用于管理打印任务的应用程序，通过打印池用户可以删除、中止或者改变打印任务的优先级，在一个系统中只允许运行一个打印池对象，如果重复创建打印池则抛出异常。现使用单例模式来模拟实现打印池的设计。</p><h2 id="1-8-优点"><a href="#1-8-优点" class="headerlink" title="1.8. 优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id24">1.8. 优点</a></h2><ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li></ul><h2 id="1-9-缺点"><a href="#1-9-缺点" class="headerlink" title="1.9. 缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id25">1.9. 缺点</a></h2><ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id26">1.10. 适用环境</a></h2><p>在以下情况下可以使用单例模式：</p><ul><li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li><li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id27">1.11. 模式应用</a></h2><p>一个具有自动编号主键的表可以有多个用户同时使用，但数据库中只能有一个地方分配下一个主键编号，否则会出现主键重复，因此该主键编号生成器必须具备唯一性，可以通过单例模式来实现。</p><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id28">1.12. 模式扩展</a></h2><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html#id29">1.13. 总结</a></h2><ul><li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li><li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li><li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li><li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li><li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式—-创建型模式之单例设计模式&quot;&gt;&lt;a href=&quot;#设计模式—-创建型模式之单例设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式—-创建型模式之单例设计模式&quot;&gt;&lt;/a&gt;设计模式—-创建型模式之单例设计模式&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://devildyw.github.io/2022/04/27/JavaScript/"/>
    <id>https://devildyw.github.io/2022/04/27/JavaScript/</id>
    <published>2022-04-27T09:46:48.000Z</published>
    <updated>2022-04-30T07:53:58.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript 是 web 开发人员必须学习的 3 门语言中的一门：</p><ol><li><strong>HTML</strong> 定义了网页的内容</li><li><strong>CSS</strong> 描述了网页的布局</li><li><strong>JavaScript</strong> 控制了网页的行为</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>JavaScript 能够改变 HTML 内容</strong></li></ul><p>​    <code>getElementById()</code> 是多个 JavaScript HTML 方法之一。</p><p>本例使用该方法来“查找” id&#x3D;”demo” 的 HTML 元素，并把元素内容（<code>innerHTML</code>）更改为 “Hello JavaScript”：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="title class_">JavaScript</span> 起步&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript 能够改变HTML内容.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;document.getElementById(&quot;demo&quot;).innerHTML=&quot;Hello JavaScript&quot;&#x27;</span>&gt;</span>点击我 </span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>JavaScript 能够改变 HTML 属性</strong></li></ul><p>​    本例通过改变 <code>&lt;img&gt;</code> 标签的 <code>src</code> 属性（source）来改变一张 HTML 图像：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="title class_">JavaScript</span> 能做什么？&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>JavaScript 能够改变 HTML 属性值。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在本例中，JavaScript 改变了图像的 src 属性值。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;myImage&#x27;).src=&#x27;/i/eg_bulbon.gif&#x27;&quot;</span>&gt;</span>开灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;myImage&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/i/eg_bulboff.gif&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;myImage&#x27;).src=&#x27;/i/eg_bulboff.gif&#x27;&quot;</span>&gt;</span>关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>JavaScript 能够改变 HTML 样式 (CSS)</strong></li></ul><p>​    改变 HTML 元素的样式，是改变 HTML 属性的一种变种：</p><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;25px&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>JavaScript 能够隐藏 HTML 元素</strong></li></ul><p>​    可通过改变 <code>display</code> 样式来隐藏 HTML 元素：</p><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>JavaScript 能够显示 HTML 元素</strong></li></ul><p>可通过改变 <code>display</code> 样式来显示隐藏的 HTML 元素：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;block&quot;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="JavaScript使用"><a href="#JavaScript使用" class="headerlink" title="JavaScript使用"></a>JavaScript使用</h2><p><strong><code>&lt;script&gt; </code>标签</strong></p><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;我的第一段 JavaScript&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="JavaScript-函数和事件"><a href="#JavaScript-函数和事件" class="headerlink" title="JavaScript 函数和事件"></a>JavaScript 函数和事件</h4><p>JavaScript <em>函数</em>是一种 JavaScript 代码块，它可以在调用时被执行。</p><hr><h4 id="lt-head-gt-或-lt-body-gt-中的-JavaScript"><a href="#lt-head-gt-或-lt-body-gt-中的-JavaScript" class="headerlink" title="&lt;head&gt; 或 &lt;body&gt; 中的 JavaScript"></a><code>&lt;head&gt;</code> 或 <code>&lt;body&gt;</code> 中的 JavaScript</h4><p>您能够在 HTML 文档中放置任意数量的脚本。</p><p>脚本可被放置与 HTML 页面的 <code>&lt;body&gt;</code> 或 <code>&lt;head&gt;</code> 部分中，或兼而有之。</p><hr><h4 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h4><p>js脚本可以放置于外部文件中，在html的<code>&lt;head&gt;</code>标签中使用<code>link:src</code>引入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>外部 JavaScript 的优势</strong></p><p>在外部文件中放置脚本有如下优势：</p><ul><li>分离了 HTML 和代码</li><li>使 HTML 和 JavaScript 更易于阅读和维护</li><li>已缓存的 JavaScript 文件可加速页面加载</li></ul><p>如需向一张页面添加多个脚本文件 - 请使用多个 script 标签：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p><strong>innerHTML</strong></p><p>如需访问 HTML 元素，JavaScript 可使用 <code>document.getElementById(id)</code> 方法。</p><p><strong>提示：</strong>更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;<span class="title class_">JavaScript</span>输出&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="number">5</span>+<span class="number">6</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>document.write()</strong></li><li><strong>注意：</strong>在 HTML 文档完全加载后使用 <code>document.write()</code> 将<em>删除所有已有的 HTML</em> ：</li><li><strong>提示：</strong><code>document.write()</code> 方法仅用于测试。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>使用 window.alert()</strong></li><li>您能够使用警告框来显示数据：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>使用 console.log()</p><p>在浏览器中，您可使用 <code>console.log()</code> 方法来显示数据。</p><p>请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+<span class="number">6</span>);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h3><p><strong>在 HTML 中，JavaScript 语句是由 web 浏览器“执行”的“指令”。</strong></p><p>JavaScript是一项编程语言 类似java的语法。</p><ul><li>以分号结尾</li></ul><h4 id="JavaScript关键词"><a href="#JavaScript关键词" class="headerlink" title="JavaScript关键词"></a>JavaScript关键词</h4><p>​    JavaScript 语句常常通过某个关键词来标识需要执行的 JavaScript 动作。</p><p>下面的表格列出了一部分将在教程中学到的关键词：</p><table><thead><tr><th align="left">关键词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">break</td><td align="left">终止 switch 或循环。</td></tr><tr><td align="left">continue</td><td align="left">跳出循环并在顶端开始。</td></tr><tr><td align="left">debugger</td><td align="left">停止执行 JavaScript，并调用调试函数（如果可用）。</td></tr><tr><td align="left">do … while</td><td align="left">执行语句块，并在条件为真时重复代码块。</td></tr><tr><td align="left">for</td><td align="left">标记需被执行的语句块，只要条件为真。</td></tr><tr><td align="left">function</td><td align="left">声明函数。</td></tr><tr><td align="left">if … else</td><td align="left">标记需被执行的语句块，根据某个条件。</td></tr><tr><td align="left">return</td><td align="left">退出函数。</td></tr><tr><td align="left">switch</td><td align="left">标记需被执行的语句块，根据不同的情况。</td></tr><tr><td align="left">try … catch</td><td align="left">对语句块实现错误处理。</td></tr><tr><td align="left">var</td><td align="left">声明变量。</td></tr></tbody></table><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法方面除了使用若引用类型var定义变量之外 类型方面、符号方面、标识符定义规范等与其他编程语言一致，参考Java</p><hr><h2 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430152136094.png" alt="image-20220430152136094"></p><h4 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430152252269.png" alt="image-20220430152252269"></p><p><strong>DOM把以上内容都看做是对象</strong></p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><h5 id="根据ID获取元素"><a href="#根据ID获取元素" class="headerlink" title="根据ID获取元素"></a>根据ID获取元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(time);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>获取到的元素其实是一个对象.</strong></p><hr><h5 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取到的元素是一个集合对象(伪数组).</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430153616839.png" alt="image-20220430153616839"></p><p>得到的元素是动态的.</p><p>可以通过获取标签对应的元素 再通过这个元素的获取他的子元素.</p><hr><h5 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素"></a>根据类名获取元素</h5><p><code>getElementsByClassName()</code>根据类名获得某些元素集合</p><hr><h5 id="指定选择器来获取元素"><a href="#指定选择器来获取元素" class="headerlink" title="指定选择器来获取元素"></a>指定选择器来获取元素</h5><p><code>querySelector()</code>如果是类名则需要加点<code>querySelector(&#39;.classname&#39;)</code>类似于CSS选择器写法id也是这样.</p><hr><h4 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h4><ol><li>事件是由三部分组成得 <strong>事件源 事件类型 事件处理程序</strong> 我们也称为事件三要素<ol><li>事件源 事件被触发的对象</li><li>事件类型 如何出发 什么事件 比如鼠标点击(onclick) 还是鼠标经过</li><li>事件处理程序 通过函数赋值的方式 完成.</li></ol></li></ol><hr><h1 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;p&gt;JavaScript 是 web 开发人员必须学习的 3 门语言中的一门：&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://devildyw.github.io/2022/04/26/Zookeeper/"/>
    <id>https://devildyw.github.io/2022/04/26/Zookeeper/</id>
    <published>2022-04-26T06:59:01.000Z</published>
    <updated>2022-05-04T03:35:14.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper-一-简单介绍和历史由来"><a href="#Zookeeper-一-简单介绍和历史由来" class="headerlink" title="Zookeeper(一) 简单介绍和历史由来"></a>Zookeeper(一) 简单介绍和历史由来</h1><p><a href="https://www.w3cschool.cn/zookeeper/zookeeper_overview.html">Zookeeper 概述_w3cschool</a></p><p><a href="https://blog.csdn.net/yyx3214/article/details/97114603">(15条消息) zookeeper的前世今生_柠檬草。的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper-一-简单介绍和历史由来&quot;&gt;&lt;a href=&quot;#Zookeeper-一-简单介绍和历史由来&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper(一) 简单介绍和历史由来&quot;&gt;&lt;/a&gt;Zookeeper(一) 简单介绍和历史由来</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="https://devildyw.github.io/2022/04/25/CSS/"/>
    <id>https://devildyw.github.io/2022/04/25/CSS/</id>
    <published>2022-04-25T14:32:04.000Z</published>
    <updated>2022-05-04T05:05:34.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>但用HTML写一个页面并不够美观，并且HTML也并不适合用来做简单的样式。</p><p><strong>CSS：网页的美容师</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425223707651.png" alt="image-20220425223707651"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425223904716.png" alt="image-20220425223904716"></p><hr><h2 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h2><p>使用HTML时，需要遵从一定的规范，CSS也是如此。想要熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则</p><p>CSS 规则集（rule-set）由选择器和声明块组成：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/selector.gif" alt="CSS 选择器"></p><blockquote><p><strong>选择器指向您需要设置样式的 HTML 元素。</strong></p><p><strong>声明块包含一条或多条用分号分隔的声明。</strong></p><p><strong>每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。(键值对)</strong></p><p><strong>多条 CSS 声明用分号分隔，声明块用花括号括起来。</strong></p></blockquote><hr><h2 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h2><p>风格并非强制规范，而是符合实际开发书写方式</p><ol><li><strong>样式格式书写</strong></li><li><strong>样式大小写风格</strong></li><li><strong>样式空格风格</strong></li></ol><hr><h3 id="样式格式书写"><a href="#样式格式书写" class="headerlink" title="样式格式书写"></a>样式格式书写</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425224953831.png" alt="image-20220425224953831"></p><hr><h3 id="样式大小写风格"><a href="#样式大小写风格" class="headerlink" title="样式大小写风格"></a>样式大小写风格</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425225045699.png" alt="image-20220425225045699"></p><hr><h3 id="样式空格风格"><a href="#样式空格风格" class="headerlink" title="样式空格风格"></a>样式空格风格</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425225208125.png" alt="image-20220425225208125"></p><hr><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>选择器（选择符）就是根据不同的需求把不同的标签选择出来这就是选择器的作用。简单来说，<strong>就是选择标签用的。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/selector.gif" alt="CSS 选择器"></p><p>以上CSS做了两件事：</p><ol><li>找到所有的h1标签。选择器（选对人）。</li><li>设置这些标签的样式，比如颜色为红色（作对事）。</li></ol><h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><p>我们可以将 CSS 选择器分为五类：</p><ul><li><strong>简单选择器：</strong>（根据名称、<code>id</code>、类来选取元素）</li><li><strong>组合器选择器：</strong>（根据它们之间的特定关系来选取元素）</li><li><strong>伪类选择器</strong>：（根据特定状态选取元素）</li><li><strong>伪元素选择器</strong>：（选取元素的一部分并设置其样式）</li><li><strong>属性选择器</strong>：（根据属性或属性值来选取元素）</li></ul><hr><h4 id="CSS-id-选择器"><a href="#CSS-id-选择器" class="headerlink" title="CSS id 选择器"></a>CSS <code>id</code> 选择器</h4><p><code>id</code> 选择器使用 HTML 元素的 id 属性来选择特定元素。</p><p>元素的 <code>id</code> 在页面中是唯一的，因此 id 选择器用于选择一个唯一的元素！</p><p>要选择具有特定 id 的元素，请写一个井号（<code>＃</code>），后跟该元素的 id。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#para1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center; 内容居中</span><br><span class="line">  <span class="attribute">color</span>: red; 文本颜色为红色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="CSS-类选择器"><a href="#CSS-类选择器" class="headerlink" title="CSS 类选择器"></a>CSS 类选择器</h4><p>类选择器选择有特定 <code>class</code> 属性的 HTML 元素。</p><p>如需选择拥有特定 <code>class</code> 的元素，请写一个句点（<code>.</code>）字符，后面跟类名。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123; <span class="comment">/*标签p中的center类*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多类名使用方式"><a href="#多类名使用方式" class="headerlink" title="多类名使用方式"></a>多类名使用方式</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">           <span class="comment">/* 背景颜色 */</span></span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="selector-class">.font35</span> &#123;</span><br><span class="line">           <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font35&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425231901421.png" alt="image-20220425231901421"></p><p><strong>多类名开发场景：</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425232017238.png" alt="image-20220425232017238"></p><p><strong>总结：</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425232049117.png"></p><hr><h4 id="CSS-通用选择器"><a href="#CSS-通用选择器" class="headerlink" title="CSS 通用选择器"></a>CSS 通用选择器</h4><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p><p>不用主动调用，自动给所有元素使用样式</p><p>特殊情况才使用</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426225329412.png" alt="image-20220426225329412"></p><p>下面的 CSS 规则会影响页面上的每个 HTML 元素：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="CSS-分组选择器"><a href="#CSS-分组选择器" class="headerlink" title="CSS 分组选择器"></a>CSS 分组选择器</h4><p>分组选择器选取所有具有相同样式定义的 HTML 元素。(即直接选择标签)</p><p>请看下面的 CSS 代码（h1、h2 和 p 元素具有相同的样式定义）：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们对上述代码中的选择器进行分组：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426224733284.png" alt="image-20220426224733284"></p><p>口诀: id选择器的口诀: 样式**#定义**，结构id调用，只能调用一次，别人切勿使用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-id">#p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="id选择器和类选择器的区别"><a href="#id选择器和类选择器的区别" class="headerlink" title="id选择器和类选择器的区别"></a>id选择器和类选择器的区别</h5><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426225128326.png" alt="image-20220426225128326"></p><hr><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425231237265.png" alt="image-20220425231237265"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426225443244.png" alt="image-20220426225443244"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426225548503.png" alt="image-20220426225548503"></p><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430011628771.png" alt="image-20220430011628771"></p><hr><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h5><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430140917829.png" alt="image-20220430140917829"></p><hr><h5 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h5><ul><li>只能够选择作为某元素最近的一级子元素.</li><li><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430141208960.png" alt="image-20220430141208960"></li></ul><hr><h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430142013280.png" alt="image-20220430142013280"></p><hr><h5 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h5><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430142718973.png" alt="image-20220430142718973"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430142811453.png" alt="image-20220430142811453"></p><p><strong>注意事项:</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430143118431.png" alt="image-20220430143118431"></p><p><strong>链接伪类选择器实际工作开发中的写法:</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430143207303.png" alt="image-20220430143207303"></p><h5 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h5><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430143607788.png" alt="image-20220430143607788"></p><hr><p>小样例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 背景颜色 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425231558469.png" alt="image-20220425231558469"></p><hr><h2 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h2><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>CSS使用font-family属性定义文本的字体系列。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>,<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426230244841.png" alt="image-20220426230244841"></p><hr><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>CSS使用<strong>font-size</strong>属性定义字体大小</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426230739770.png" alt="image-20220426230739770"></p><p>注意： 标题标签不能使用body统一设置 需要单独设置 加一个h2的选择器 </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>CSS使用font-weight设置字体粗细</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426232119994.png" alt="image-20220426232119994"></p><hr><h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><p>CSS使用font-style设置文字样式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic; <span class="comment">/*倾斜的字体*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal; <span class="comment">/*正常的字体 不倾斜*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426232443954.png" alt="image-20220426232443954"></p><hr><h4 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h4><p>CSS使用font设置字体系列、大小、粗细、和文字样式（如斜体)</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* font-style: italic;</span></span><br><span class="line"><span class="comment">    font-weight: 700;</span></span><br><span class="line"><span class="comment">    font-size: 16px;</span></span><br><span class="line"><span class="comment">    font-family: &#x27;Microsoft yahei&#x27;; */</span></span><br><span class="line">    <span class="comment">/* 上面的代码可以使用复合属性设置 font */</span></span><br><span class="line">    <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&#x27;Microsoft yahei&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 但是严格要求顺序 不能更换顺序 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>&lt;div&gt;    今天是个好天气&lt;/div&gt;</code></pre><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426233051163.png" alt="image-20220426233051163"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: <span class="number">100px</span> <span class="string">&#x27;Microsoft yahei&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="字体属性总结"><a href="#字体属性总结" class="headerlink" title="字体属性总结"></a>字体属性总结</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220426233333113.png" alt="image-20220426233333113"></p><hr><h4 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220429135537803.png" alt="image-20220429135537803"></p><hr><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220429135902762.png" alt="image-20220429135902762"></p><hr><h4 id="文本行高"><a href="#文本行高" class="headerlink" title="文本行高"></a>文本行高</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430002934404.png" alt="image-20220430002934404"></p><h3 id="文本属性总结"><a href="#文本属性总结" class="headerlink" title="文本属性总结"></a>文本属性总结</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430002934404.png"></p><hr><h2 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h2><p>作用: 网页的标签非常多，在不同的地方会用到不同类型的标签，了解他们的特点<strong>可以更好的布局我们的网页</strong>。</p><p>元素显示模式就是<strong>元素（标签）以什么方式进行显示</strong>，比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code>.</p><p>HTML元素一般为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</p><hr><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430144422309.png" alt="image-20220430144422309"></p><p><strong>注意：</strong><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430144730430.png"></p><hr><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430145327498.png" alt="image-20220430145327498"></p><p><strong>注意：</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430145556486.png" alt="image-20220430145556486"></p><h3 id="行内块级元素"><a href="#行内块级元素" class="headerlink" title="行内块级元素"></a>行内块级元素</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430145910158.png" alt="image-20220430145910158"></p><hr><h3 id="CSS的元素显示模式的总结"><a href="#CSS的元素显示模式的总结" class="headerlink" title="CSS的元素显示模式的总结"></a>CSS的元素显示模式的总结</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430150105316.png" alt="image-20220430150105316"></p><hr><h3 id="元素显示模式的切换"><a href="#元素显示模式的切换" class="headerlink" title="元素显示模式的切换"></a>元素显示模式的切换</h3><p>常用于行内元素转化为块级元素的地方</p><p>因为行内元素不能够指定宽高的参数.</p><p>可以使用display属性来切换元素显示模式</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;<span class="comment">/*转换为块级*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;<span class="comment">/*转换为行内*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;<span class="comment">/*转换为行内块级元素*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="侧边栏案例"><a href="#侧边栏案例" class="headerlink" title="侧边栏案例"></a>侧边栏案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置链接属性 将其设置为块级 背景颜色 缩进 字体大小 下划线 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#55585a</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电视 盒子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>笔记本 平板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>出行 穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能 路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>健康 儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>耳机 音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504115819894.png" alt="image-20220504115819894"></p><hr><h3 id="文字垂直居中小技巧"><a href="#文字垂直居中小技巧" class="headerlink" title="文字垂直居中小技巧"></a>文字垂直居中小技巧</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504115949285.png" alt="image-20220504115949285"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504120108580.png" alt="image-20220504120108580"></p><hr><h2 id="CSS背景设置"><a href="#CSS背景设置" class="headerlink" title="CSS背景设置"></a>CSS背景设置</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504120448675.png" alt="image-20220504120448675"></p><hr><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504121033371.png" alt="image-20220504121033371"></p><hr><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504121338046.png" alt="image-20220504121338046"></p><hr><h3 id="背景图片的位置"><a href="#背景图片的位置" class="headerlink" title="背景图片的位置"></a>背景图片的位置</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220504121559622.png" alt="image-20220504121559622"></p><hr><h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430003236850.png" alt="image-20220430003236850"></p><hr><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430003405466.png" alt="image-20220430003405466"></p><ul><li>一般用在测试过程中,不适合实际开发过程中</li></ul><hr><h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430003711733.png" alt="image-20220430003711733"></p><hr><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430003941662.png" alt="image-20220430003941662"></p><hr><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>新闻页面html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: <span class="number">16px</span> <span class="number">28px</span> <span class="string">&#x27;Microsoft YahHei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">700</span>; <span class="comment">/*文字加粗*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center; <span class="comment">/*文字居中*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.gray</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#888888</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.search</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 所有段落首行缩进 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 想要图片水平居中 需要给他的父类添加text-align */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pic</span> &#123; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>中共中央政治局召开会议 分析研究当前经济形势和经济工作 审议《国家“十四五”期间人才发展规划》 中共中央总书记习近平主持会议<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gray&quot;</span>&gt;</span>（原标题：中共中央政治局召开会议 分析研究当前经济形势和经济工作 审议《国家“十四五”期间人才发展规划》 中共中央总书记习近平主持会议）<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网易新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入查询条件&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>中共中央政治局召开会议 中共中央总书记习近平主持会议（来源：视频综合）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">中共中央政治局4月29日召开会议，分析研究当前经济形势和经济工作，审议《国家“十四五”期间人才发展规划》。中共中央总书记习近平主持会议。</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cms-bucket.ws.126.net/2022/0222/348a6d62j00r7p5ey004oc000go006yc.jpg?imageView&amp;thumbnail=600y250&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议认为，今年以来，面对百年变局和世纪疫情相互叠加的复杂局面，在以习近平同志为核心的党中央坚强领导下，各地区各部门有力统筹疫情防控和经济社会发展，我国经济运行总体实现平稳开局，成功举办北京冬奥会、冬残奥会。成绩来之不易。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议指出，新冠肺炎疫情和乌克兰危机导致风险挑战增多，我国经济发展环境的复杂性、严峻性、不确定性上升，稳增长、稳就业、稳物价面临新的挑战。做好经济工作、切实保障和改善民生至关重要。要坚定信心、攻坚克难，确保党中央大政方针落实到位。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议强调，疫情要防住、经济要稳住、发展要安全，这是党中央的明确要求。要根据病毒变异和传播的新特点，高效统筹疫情防控和经济社会发展，坚定不移坚持人民至上、生命至上，坚持外防输入、内防反弹，坚持动态清零，最大程度保护人民生命安全和身体健康，最大限度减少疫情对经济社会发展的影响。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议要求，要加大宏观政策调节力度，扎实稳住经济，努力实现全年经济社会发展预期目标，保持经济运行在合理区间。要加快落实已经确定的政策，实施好退税减税降费等政策，用好各类货币政策工具。要抓紧谋划增量政策工具，加大相机调控力度，把握好目标导向下政策的提前量和冗余度。要全力扩大国内需求，发挥有效投资的关键作用，强化土地、用能、环评等保障，全面加强基础设施建设。要发挥消费对经济循环的牵引带动作用。要稳住市场主体，对受疫情严重冲击的行业、中小微企业和个体工商户实施一揽子纾困帮扶政策。要做好能源资源保供稳价工作，抓好春耕备耕工作。要切实保障和改善民生，稳定和扩大就业，组织好重要民生商品供应，保障城市核心功能运转，稳控安全生产形势，维护社会大局稳定。要坚持全国一盘棋，确保交通物流畅通，确保重点产业链供应链、抗疫保供企业、关键基础设施正常运转。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议强调，要有效管控重点风险，守住不发生系统性风险底线。要坚持房子是用来住的、不是用来炒的定位，支持各地从当地实际出发完善房地产政策，支持刚性和改善性住房需求，优化商品房预售资金监管，促进房地产市场平稳健康发展。要及时回应市场关切，稳步推进股票发行注册制改革，积极引入长期投资者，保持资本市场平稳运行。要促进平台经济健康发展，完成平台经济专项整改，实施常态化监管，出台支持平台经济规范健康发展的具体措施。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议指出，要坚持办好自己的事，加快构建新发展格局，坚定不移深化供给侧结构性改革，用改革的办法解决发展中的问题，加快实现高水平科技自立自强，建设强大而有韧性的国民经济循环体系。要坚持扩大高水平对外开放，积极回应外资企业来华营商便利等诉求，稳住外贸外资基本盘。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议强调，各级领导干部在工作中要有“时时放心不下”的责任感，担当作为，求真务实，防止各类“黑天鹅”、“灰犀牛”事件发生。各级党委和政府要团结带领广大干部群众齐心协力、顽强拼搏，以实际行动迎接党的二十大胜利召开。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议指出，编制《国家“十四五”期间人才发展规划》是党中央部署的一项重要工作，是落实中央人才工作会议精神的具体举措，也是国家“十四五”规划的一项重要专项规划。要全面加强党对人才工作的领导，牢固确立人才引领发展的战略地位，全方位培养引进用好人才。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议强调，要坚持重点布局、梯次推进，加快建设世界重要人才中心和创新高地。北京、上海、粤港澳大湾区要坚持高标准，努力打造成创新人才高地示范区。一些高层次人才集中的中心城市要采取有力措施，着力建设吸引和集聚人才的平台，加快形成战略支点和雁阵格局。要大力培养使用战略科学家，打造大批一流科技领军人才和创新团队，造就规模宏大的青年科技人才队伍，培养大批卓越工程师。要把人才培养的着力点放在基础研究人才的支持培养上，为他们提供长期稳定的支持和保障。要深化人才发展体制机制改革，为各类人才搭建干事创业的平台。各级党委（党组）要强化主体责任，完善党管人才工作格局，统筹推进人才工作重大举措落地生效，积极为用人主体和人才排忧解难，加强对人才的政治引领和政治吸纳，引导广大人才爱党报国、敬业奉献，胸怀祖国、服务人民。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>会议还研究了其他事项。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430010452990.png" alt="image-20220430010452990"></p><hr><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><h3 id="Emmet语法快速生成Html标签语法"><a href="#Emmet语法快速生成Html标签语法" class="headerlink" title="Emmet语法快速生成Html标签语法"></a>Emmet语法快速生成Html标签语法</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430010638902.png" alt="image-20220430010638902"></p><hr><h3 id="Emmet语法快速生成样式语法"><a href="#Emmet语法快速生成样式语法" class="headerlink" title="Emmet语法快速生成样式语法"></a>Emmet语法快速生成样式语法</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430010934814.png" alt="image-20220430010934814"></p><hr><h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220430011256189.png" alt="image-20220430011256189"></p><hr><h1 id="持续更新中。。。"><a href="#持续更新中。。。" class="headerlink" title="持续更新中。。。"></a>持续更新中。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS层叠样式表&quot;&gt;&lt;a href=&quot;#CSS层叠样式表&quot; class=&quot;headerlink&quot; title=&quot;CSS层叠样式表&quot;&gt;&lt;/a&gt;CSS层叠样式表&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="前端" scheme="https://devildyw.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://devildyw.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://devildyw.github.io/2022/04/24/Html/"/>
    <id>https://devildyw.github.io/2022/04/24/Html/</id>
    <published>2022-04-24T15:48:59.000Z</published>
    <updated>2022-04-25T14:31:31.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><code>HTML</code></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    这里主要用于自己学习前端过程中的一些比较难记的知识点或是容易出错的地方，所以内容不是那么完整。一些基础的标签建议之间看文档知道意思就行了。在学习其他的内容的过程中会使用，此时就可以练习加深印象。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><p>表格主要用于展示数据</p></li><li><p>表格所有内容都应该包含在<code>&lt;table&gt;</code>标签中</p></li><li><p>表头应该包含在<code>&lt;thead&gt;</code>(语义标签)中</p></li><li><p>表体应该包含在<code>&lt;tbody&gt;</code>(语义标签)中</p></li><li><p>表位应该包含在<code>&lt;tfoot&gt;</code>(语义标签)中</p></li><li><p><code>&lt;tr&gt;</code>表示表中的一行是比<code>&lt;table&gt;</code>低一级的</p></li><li><p><code>&lt;th&gt;</code>表格头，内容居中，加粗显示</p></li><li><p><code>&lt;td&gt;</code>普通表格，内容左对齐</p></li></ul><p><em><strong>【注意】：浏览器一般是通过加载全部表格数据后才显示，但是当数据量很大时，希望能加载一部分，即显示一部分？？</strong></em></p><p>— 使用 <strong>带结构的表格</strong>！！！ 即使用<thead>  <tbody> <tfoot>三个标签</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20190313151313759.PNG" alt="img"></p><p><strong>【注意】：如果需要单元格合并？？？—使用 跨列属性<code>colspan</code>、<code>rowspan</code></strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>丁杨维<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!---这里对表进行了列合并和行合并 都为合并2格-&gt;</span></span><br><span class="line"><span class="comment">                &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">                &lt;!-- &lt;td&gt;男&lt;/td&gt; --&gt;</span><span class="comment">&lt;!--合并之后 后写列或是行的元素就是多余的了就可以去掉--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>丁杨维<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;td&gt;20&lt;/td&gt; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;td&gt;男&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425000232732.png" alt="image-20220425000232732"></p><hr><h3 id="table标签的属性"><a href="#table标签的属性" class="headerlink" title="table标签的属性"></a>table标签的属性</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20190313144717432.jpg" alt="img"></p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ul><li><p><code>&lt;ol&gt;</code>标签标识里面包含的元素都是有序的可以理解为<code>order list</code></p></li><li><p><code>&lt;li&gt;</code>标签定义列表项目。</p></li><li><p>&#96;&#96;&#96;html</p><!-- 有序列表 --><pre><code>&lt;ol&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;1&lt;/li&gt;&lt;/ol&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![image-20220425000813561](https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425000813561.png)</span><br><span class="line"></span><br><span class="line">  有着数字序号标识顺序</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### **无序列表***</span><br><span class="line"></span><br><span class="line">* `&lt;ul&gt;`标签 标识该标签包含的数据是无序的但`&lt;ul&gt;`标签和`&lt;ol&gt;`标签都无法包含除`&lt;li&gt;`之外的内容</span><br><span class="line">* `&lt;li&gt;`标签定义列表项目。 但是`&lt;li&gt;`标签中却可以包含任何标签</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!-- 无序列表 --&gt;</span><br><span class="line">    &lt;h4&gt;你喜欢的食物&lt;/h4&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            5</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425001049361.png" alt="image-20220425001049361"></p><p>黑点无法像数字序号那样有着顺序的含义.</p><hr><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a><strong>自定义列表</strong></h3><ul><li><strong><code>&lt;dl&gt;</code></strong> 标签定义了定义列表（definition list）、**<code>&lt;dl&gt;</code>** 标签用于结合 <strong><code>&lt;dt&gt;</code><strong>（定义列表中的项目）和</strong><code>&lt;dd&gt;</code></strong> （描述列表中的项目）。</li><li>**<code>&lt;dt&gt;</code>**标签（定义列表中的项目）</li><li><strong><code>&lt;dd&gt;</code></strong> （描述列表中的项目）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>qq<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>weibo<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425001428912.png" alt="image-20220425001428912"></p><hr><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>在HTML中，一个完整的表单通常由表单域，表单控件（表单元素）和提示信息3个部分构成。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425205501066.png" alt="image-20220425205501066"></p><hr><h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><p><strong>表单域</strong>是一个包含表单元素的区域</p><p>在HTML标签中，<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递。</p><p><code>&lt;form&gt;</code>标签会把它范围内的表单信息提交给服务器。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425210050698.png" alt="image-20220425210050698"></p><hr><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a><a href="https://www.runoob.com/tags/tag-input.html">表单元素</a></h3><p><code>&lt;input&gt;</code> 元素有很多形态，根据不同的 <em>type</em> 属性（必选属性）。</p><p><code>type</code>属性有：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425210352522.png" alt="image-20220425210352522"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425212053862.png" alt="image-20220425212053862"></p><p><code>placeholder</code>与<code>value</code>不同 <code>value</code>相当于会是一个默认值的方式显示在文本框中，而<code>placeholder</code>这是以描述的方式显示起到提醒的作用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本框 value就是该input的描述信息会显示出来(默认值)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码框 用于用户填写密码 会有非明文显示的功能 placeholder则是真正的描述不会影响内容 只是起提醒的作用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单按钮 可以实现多选一--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name是表单元素的名字 这里性别单选按钮必须有相同的名字name 才可以实现多选1 --&gt;</span></span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span> 女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复选框 可以实现多选--&gt;</span></span><br><span class="line">    吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">checked</span>&gt;</span> 睡觉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425212312274.png" alt="image-20220425212312274"></p><h4 id="input-type"><a href="#input-type" class="headerlink" title="input:type"></a><code>input:type</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提交表单中的数据--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 重置表单中元素的默认值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425213025395.png" alt="image-20220425213025395"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通按钮 长搭配js一起使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件 使用此标签即可选择文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425214453918.png" alt="image-20220425214453918"></p><h4 id="lt-lable-gt-标签"><a href="#lt-lable-gt-标签" class="headerlink" title="&lt;lable&gt;标签"></a><code>&lt;lable&gt;</code>标签</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425214600618.png" alt="image-20220425214600618"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425215214816.png" alt="image-20220425215214816"></p><p>核心：<code>&lt;label&gt;</code>标签的<strong>for属性的值</strong>与相关元素的<strong>id属性相同</strong></p><h4 id="lt-select-gt-表单元素"><a href="#lt-select-gt-表单元素" class="headerlink" title="&lt;select&gt;表单元素"></a><code>&lt;select&gt;</code>表单元素</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425215400451.png" alt="image-20220425215400451"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        籍贯:</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425215653010.png" alt="image-20220425215653010"></p><p>注意：</p><blockquote><ul><li><p><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></p></li><li><p>在<code>&lt;option&gt;</code>中定义<code>selected = &quot;selected&quot;</code> 时，当前项即为默认选中项</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt;表单元素"></a><code>&lt;textarea&gt;</code>表单元素</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425220048166.png" alt="image-20220425220048166"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        今日反馈:</span><br><span class="line">    <span class="comment">&lt;!-- cols:行数 rows:列数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>留言板:由textarea实现<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425220432726.png" alt="image-20220425220432726"></p><p>该阶段<code>Demo</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>青春不常在,抓紧谈恋爱<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第一行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第二行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择年份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>2002<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择月份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择日--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第三行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所在地区<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第四行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hyzk&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jiehun&quot;</span> <span class="attr">checked</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jiehun&quot;</span>&gt;</span>结婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hyzk&quot;</span> <span class="attr">id</span>=<span class="string">&quot;yihun&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;yihun&quot;</span>&gt;</span>已婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hyzk&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lihun&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lihun&quot;</span>&gt;</span>离婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第五行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;博士后&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第六行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜欢类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xhlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qingchun&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;qingchun&quot;</span>&gt;</span>清纯<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xhlx&quot;</span> <span class="attr">id</span>=<span class="string">&quot;keai&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;keai&quot;</span>&gt;</span>可爱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第七行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>个人介绍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第八行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第九行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>&gt;</span>我同意注册条款</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第十行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a&quot;</span>&gt;</span>我是会员,立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--第十一行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>我承诺<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 年满十八、单身<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>抱着严肃的态度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>真诚寻找另一半<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220425222817761.png" alt="image-20220425222817761"></p><hr><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://www.w3school.com.cn/">w3school 在线教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs (mozilla.org)</a></li></ul><hr><h1 id="持续更新中。。。。"><a href="#持续更新中。。。。" class="headerlink" title="持续更新中。。。。"></a>持续更新中。。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;&lt;code&gt;HTML&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://devildyw.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML5" scheme="https://devildyw.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>Filter</title>
    <link href="https://devildyw.github.io/2022/04/24/Filter/"/>
    <id>https://devildyw.github.io/2022/04/24/Filter/</id>
    <published>2022-04-24T09:24:56.000Z</published>
    <updated>2022-04-24T09:26:13.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Filter是对客户端访问资源的过滤，符合条件的放行，不符合条件的不放行，并且可以对目标资源访问前后进行逻辑处理的一个组件。</p><h2 id="过滤器的作用"><a href="#过滤器的作用" class="headerlink" title="过滤器的作用"></a>过滤器的作用</h2><p>​    Java过滤器是处于客户端与服务器资源文件之间的一道过滤网，在访问资源文件之前，通过一系列的过滤器可以对请求进行修改、判断等，把不符合规则的请求在中途拦截或修改；也可以对响应进行过滤，拦截或修改响应。例如：修改响应体或是请求体的字符集。</p><hr><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>步骤： <ul><li>使用Maven创建一个Web项目</li><li>导入<code>javax.servlet-api</code>依赖</li><li>编写一个过滤器继承<code>Filter</code>执行过滤操作</li><li>编写一个<code>Servlet</code>继承<code>HttpServlet</code>执行业务处理操作</li><li>在<code>web.xml/</code>注解中进行配置（配置<code>servlet</code> 和 <code>filter</code> ）</li></ul></li></ul><p>​    <code>CharsetFilter.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharsetFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这里做一些初始化操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这里做一些过滤器被销毁前的操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这里执行过滤请求&quot;</span>);</span><br><span class="line">        <span class="comment">//比如将请求的字符集改为utf-8</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(request.getCharacterEncoding());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里也可以设置响应体的相关参数</span></span><br><span class="line">        System.out.println(response.getCharacterEncoding());</span><br><span class="line">        <span class="comment">//改后放行</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;这里过滤响应&quot;</span>);</span><br><span class="line">        System.out.println(response.getCharacterEncoding());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <code>ServiceServlet.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(req.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.ServiceServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.CharsetFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>xml</code>配置</p><p><code>url-pattern</code>：代表要过滤的资源的匹配</p><p><code>filter-name</code>：过滤器名称 用于映射 于<code>servlet-name</code>作用相同</p><p><code>filter-class</code>： 过滤器类的全限定名称</p><p><code>servlet-name</code>：代表要过滤的<code>Servlet</code>的资源匹配</p></blockquote><hr><h2 id="Filter的生命周期其与生命周期相关的方法"><a href="#Filter的生命周期其与生命周期相关的方法" class="headerlink" title="Filter的生命周期其与生命周期相关的方法"></a>Filter的生命周期其与生命周期相关的方法</h2><p>Filter接口有三个方法，这三个方法都与Filter的生命后期有关。</p><ul><li><code>init(FilterConfig)</code>： 代表filter对象初始化方法，filter对象由<code>tomcat</code>创建并且会将配置文件（<code>web.xml</code>）生成一个<code>FilterConfig</code>对象注入其中。</li><li><code>doFilter(ServletRequest,ServletResponse,FilterChain)</code>： 代表filter对象执行过滤的核心方法如果某资源在已经被配置到这个filter进行过滤的话，那么每次访问这个资源都会执行<code>doFilter()</code>方法，与<code>Servlet</code>的<code>Service()</code>方法类似。</li><li><code>destory()</code>： 代表filter销毁的方法，这里可以执行一些销毁前的操作， 当filter对象销毁时会执行这个方法。</li></ul><hr><h3 id="Filter对象的生命周期"><a href="#Filter对象的生命周期" class="headerlink" title="Filter对象的生命周期"></a>Filter对象的生命周期</h3><ul><li><strong>Filter何时创建：服务器启动时就创建该filter对象</strong></li><li><strong>Filter合适销毁： 服务器关闭时filter销毁</strong></li></ul><p><strong>注意：<code>Filter</code>与<code>Servlet</code>一样都是默认单例的。</strong></p><hr><h2 id="Filter相关API"><a href="#Filter相关API" class="headerlink" title="Filter相关API"></a>Filter相关<code>API</code></h2><ol><li><p><code>init(FilterConfig)</code></p><ol><li><code>Filter</code>创建时会去执行的<code>init</code>方法</li><li>参数<code>FilterConfig</code>代表该<code>Filter</code>对象配置信息的对象，内部封装的是该Filter的配置信息。由<code>Tomcat</code>创建该Filter对象时从配置文件中读取封装为一个<code>FilterConfig</code>后注入。</li></ol></li><li><p><code>destroy()</code></p><ol><li>filter对象销毁时执行</li><li>这里可以执行一些销毁前需要执行的操作，因为filter对象销毁时该方法会被执行</li></ol></li><li><p><code>doFilter(ServletRequest,ServletResponse,FilterChain)</code></p><ol><li><p>当该filter映射的<code>url-pattern</code>对应的资源被访问了 会执行该方法</p></li><li><p>其中的参数</p><blockquote><ul><li><code>ServletRequest/ServletResponse</code>：每次在执行<code>doFilter</code>方法时 web容器负责创建一个<code>request</code>和一个<code>response</code>对象作为<code>doFilter</code>的参数传递进来。该<code>request</code>和<code>response</code>就是在访问目标资源的<code>service</code>方法时的<code>request</code>和<code>response</code>。</li><li><code>FilterChain</code>: 过滤器链对象， 通过该对象的<code>doFilter</code>方法可以放行该请求，如果该过滤器上还有过滤器没有过滤该请求，那么转交给它，如果没有则直接到达<code>Servlet</code>的<code>service()</code>。</li></ul></blockquote></li></ol></li></ol><hr><h2 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h2><p>​    在一个 Web 应用程序中可以注册多个 Filter 程序，每个 Filter 程序都可以针对某一个 URL 进行拦截。如果多个 Filter 程序都对同一个 URL 进行拦截，那么这些 Filter 就会组成一个Filter 链（也称过滤器链）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/e7aa5e26bcbc923a1235b5e70b6e938f.png" alt="e7aa5e26bcbc923a1235b5e70b6e938f.png"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/5-1Z6121G30B63.png" alt="Filter链"></p><ul><li>拦截顺序和过滤器<code>web.xml</code>注册顺序（<code>filter-mapping</code>）一致。</li><li>由上图可知过滤器链过滤的顺序准许”先进后出”的原则。</li></ul><h3 id="过滤器链代码演示"><a href="#过滤器链代码演示" class="headerlink" title="过滤器链代码演示"></a>过滤器链代码演示</h3><p><code>Servlet.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;html/text;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求已接受&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;请求已接受&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Filter01.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter01</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求经过过滤器01&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        System.out.println(<span class="string">&quot;响应经过过滤器01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Filter02.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter02</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求经过过滤器02&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        System.out.println(<span class="string">&quot;响应经过过滤器02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filterServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    过滤器链注册--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter01<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.Filter01<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter01<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filterServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.Filter02<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filterServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出（可以看到 先进后出）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220424163848783.png" alt="image-20220424163848783"></p><hr><h2 id="Filter的url-pattern配置"><a href="#Filter的url-pattern配置" class="headerlink" title="Filter的url-pattern配置"></a><code>Filter</code>的<code>url-pattern</code>配置</h2><ul><li><p>匹配单个资源</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.Filter02<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/filterServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>统配符匹配（最常使用）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.Filter02<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>扩展名匹配 （<code>*.abc *.jsp</code>）<strong>注意不能和统配符混用</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.Filter02<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter02<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="End"><a href="#End" class="headerlink" title="-End-"></a>-End-</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JavaEE" scheme="https://devildyw.github.io/categories/JavaEE/"/>
    
    
    <category term="Java" scheme="https://devildyw.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
