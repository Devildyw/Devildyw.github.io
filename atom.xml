<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devil的个人博客</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="https://devildyw.github.io/atom.xml" rel="self"/>
  
  <link href="https://devildyw.github.io/"/>
  <updated>2022-10-10T13:52:33.842Z</updated>
  <id>https://devildyw.github.io/</id>
  
  <author>
    <name>Devil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Netty4核心原理与手写RPC框架实战》</title>
    <link href="https://devildyw.github.io/2022/10/06/%E3%80%8ANetty4%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98%E3%80%8B/"/>
    <id>https://devildyw.github.io/2022/10/06/%E3%80%8ANetty4%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98%E3%80%8B/</id>
    <published>2022-10-06T11:30:52.000Z</published>
    <updated>2022-10-10T13:52:33.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Netty4核心原理与手写RPC框架实战》读书笔记"><a href="#《Netty4核心原理与手写RPC框架实战》读书笔记" class="headerlink" title="《Netty4核心原理与手写RPC框架实战》读书笔记"></a>《Netty4核心原理与手写RPC框架实战》读书笔记</h1><h2 id="Java-I-x2F-O-演进之路"><a href="#Java-I-x2F-O-演进之路" class="headerlink" title="Java I&#x2F;O 演进之路"></a>Java I&#x2F;O 演进之路</h2><h3 id="什么是-I-x2F-O"><a href="#什么是-I-x2F-O" class="headerlink" title="什么是 I&#x2F;O"></a>什么是 I&#x2F;O</h3><p>在操作系统之中我们都知道在 UNIX 世界里一切皆文件，而文件呢就是一串二进制流而已，其实不管是 Socket，还是 FIFO、管道、终端。对计算机来说一切都是文件，一切都是流。<strong>在信息交换的过程中，计算机都是对这些流进行数据的收发操作，简称 I&#x2F;O 操作（Input and Output）。</strong> </p><h3 id="I-x2F-O-交互流程"><a href="#I-x2F-O-交互流程" class="headerlink" title="I&#x2F;O 交互流程"></a>I&#x2F;O 交互流程</h3><p>通过用户进程中的一次完整的 I&#x2F;O 交互流程分为两阶段，首先是经过内核空间，也就是由操作系统处理；紧接着就是到用户空间，也就是交由应用程序。具体流程如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210061940952.png" alt="image-20221006194022868"></p><p>I&#x2F;O 有内存 I&#x2F;O、网络 I&#x2F;O 和磁盘 I&#x2F;O 三种，通常我们说的 I&#x2F;O 指的是后两者。如下图所示是 I&#x2F;O 通信过程的调度示意。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210061943276.png" alt="image-20221006194305227"></p><h2 id="五种-I-x2F-O-通信模型"><a href="#五种-I-x2F-O-通信模型" class="headerlink" title="五种 I&#x2F;O 通信模型"></a>五种 I&#x2F;O 通信模型</h2><p>在网络环境下，通俗地讲，将 I&#x2F;O 分为两步：<strong>第一步是等待；第二步是数据搬迁。</strong></p><p>如果想要提高 I&#x2F;O 效率，需要将<strong>等待时间降低</strong>。因此发展出来五种 I&#x2F;O 模型，分别是：<strong>阻塞 I&#x2F;O 模型、非阻塞 I&#x2F;O 模型、多路复用 I&#x2F;O 模型、信号驱动 I&#x2F;O 模型、异步 I&#x2F;O 模型。其中前四种被称为同步 I&#x2F;O</strong>，下面对每一种 I&#x2F;O 模型进行详细分析。</p><h3 id="阻塞-I-x2F-O-模型"><a href="#阻塞-I-x2F-O-模型" class="headerlink" title="阻塞 I&#x2F;O 模型"></a>阻塞 I&#x2F;O 模型</h3><p>阻塞 I&#x2F;O 模型的通信过程示意如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062050240.png" alt="image-20221006205039163"></p><p>我们第一次接触的到的网络编程都是从 <code>listen()</code>、<code>send()</code>、<code>recv()</code> 等接口开始的，这些接口都是阻塞型的。都属于阻塞 I&#x2F;O 模型</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062051489.png" alt="image-20221006205154439"></p><h3 id="非阻塞-I-x2F-O-模型"><a href="#非阻塞-I-x2F-O-模型" class="headerlink" title="非阻塞 I&#x2F;O 模型"></a>非阻塞 I&#x2F;O 模型</h3><p>示意图如下。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062052703.png" alt="image-20221006205243625"></p><p>当用户进程发出 read 操作时，如果内核中的数据还没有准备好，那么它并不会阻塞用户进程，而是立刻返回一个 error。从用户进程的角度讲，他发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果，用户进程判断结果是一个 error 时，他就知道数据还没有准备好。于是它可以再次发送 read 操作，一旦内核中的数据准备好了，并且再次收到了用户进程的系统调用，那么它会马上将数据拷贝到用户内存，然后返回，非阻塞接口相比于阻塞接口的显著差异在于，在被调用之后立即返回。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062059124.png" alt="image-20221006205945061"></p><blockquote><p>非阻塞模式套接字与阻塞模式相比，不容易使用，使用非阻塞模式套接字，要编写更多的代码，但是，非阻塞模式套接字在控制建立多个链接、时间不定时，具有明显优势。</p></blockquote><h3 id="多路复用-I-x2F-O-模型"><a href="#多路复用-I-x2F-O-模型" class="headerlink" title="多路复用 I&#x2F;O 模型"></a>多路复用 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081837376.png" alt="image-20221008183741246"></p><p>多个进程的 I&#x2F;O 可以注册到一个复用器（Selector）上，当用户进程调用该 Selector，Selector 会监听注册进来的所有 I&#x2F;O，如果Selector 监听的所有 I&#x2F;O 在内核缓冲区都没有可读数据，select 调用进程会被阻塞，而当任一 I&#x2F;O 在内核缓冲区中有可读数据时，select 调用进程就会返回，而后 select 调用进程可以自己或通知另外的进程（注册进程）再次发起读取 I&#x2F;O，读取内核中准备好的数据，多个进程注册 I&#x2F;O 后，只有一个 select 调用进程被阻塞。</p><blockquote><p>其实多路复用 I&#x2F;O 模型和阻塞 I&#x2F;O 模型并没有太大的不同，事实上由于这里要使用两个系统调用而比阻塞 I&#x2F;O 模型的性能还要差些。</p><p>多路复用 I&#x2F;O 不一定比使用多线程加阻塞 I&#x2F;O 的模式更优，甚至性能更佳，多路复用的优势在于可以处理更多的连接，而不是单个连接处理更快。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081847520.png" alt="image-20221008184759480"></p><h3 id="信号驱动-I-x2F-O-模型"><a href="#信号驱动-I-x2F-O-模型" class="headerlink" title="信号驱动 I&#x2F;O 模型"></a>信号驱动 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081848507.png" alt="image-20221008184819467"></p><p>信号驱动 I&#x2F;O 是指进程预先告知内核，向内核注册一个信号处理函数，然后用户进程返回<strong>不阻塞</strong>，当内核<strong>数据就绪时会发送一个信号给进程</strong>，用户进程便在信号处理函数中调用 I&#x2F;O 读取数据，从上图可以看出，<strong>实际上 I&#x2F;O 内核拷贝到用户进程的过程还是阻塞的，信号驱动 I&#x2F;O 并没有实现真正的异步，因为通知到进程后，依然由进程来完成 I&#x2F;O 操作。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081853074.png" alt="image-20221008185312018"></p><h3 id="异步-I-x2F-O-模型"><a href="#异步-I-x2F-O-模型" class="headerlink" title="异步 I&#x2F;O 模型"></a>异步 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081853986.png" alt="image-20221008185359939"></p><p>用户进程发起 aio_read 操作后，给内核传递与 read 相同的描述符、缓冲区指针、缓冲区大小三个参数及文件偏移，告诉内核当整个操作完成时，如何通知我们立刻就可以开始去做其他的事；而另一方面，从内核的角度，当他收到一个 aio_read 之后，首先他会立刻返回，所以不会对用户进程产生任何阻塞，内核会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，内核会给用户进程发送一个信号，告诉它 aio_read 操作完成。</p><blockquote><p>异步 I&#x2F;O 的工作机制是：告知内核启动某个操作，并让内核在整个操作完成后通知我们，这种模型与信号驱动 I&#x2F;O 模型的区别在于，<strong>信号驱动 I&#x2F;O 模型是由内核通知我们何时可以启动一个 I&#x2F;O 操作，这个 I&#x2F;O 操作由用户自定义的信号函数来实现，而异步 I&#x2F;O 模型由内核告知我们 I&#x2F;O 操作何时完成。</strong></p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081924965.png" alt="image-20221008192424929"></p><h3 id="各-I-x2F-O-模型的对比与总结"><a href="#各-I-x2F-O-模型的对比与总结" class="headerlink" title="各 I&#x2F;O 模型的对比与总结"></a>各 I&#x2F;O 模型的对比与总结</h3><p>前四种 I&#x2F;O 模型都是同步 I&#x2F;O 操作，它们的区别在于第一阶段，而第二阶段是一样的：数据（准备好后）从内核拷贝到应用缓冲区期间（用户空间），进程阻塞于 <code>recvfrom</code> 调用。</p><blockquote><p>recvfrom 会将数据从内核（Kernel）拷贝到用户内存中，这个时候进程就被阻塞了。在这段时间内，进程是被阻塞的。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081929728.png" alt="image.png"></p><p>由上图可以看出，阻塞程度：阻塞 I&#x2F;O &gt; 非阻塞 I&#x2F;O &gt; 多路复用 I&#x2F;O &gt; 信号驱动 I&#x2F;O &gt; 异步 I&#x2F;O，效率是由低到高的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081930764.png" alt="image-20221008193056732"></p><p>Java BIO 和 NIO 之间的主要差异。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081952389.png" alt="image-20221008195234349"></p><h2 id="易混淆概念解释"><a href="#易混淆概念解释" class="headerlink" title="易混淆概念解释"></a>易混淆概念解释</h2><ul><li>同步与异步：主要看请求发起方对消息结果的获取是主动发起还是被动通知的。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081934838.png" alt="image-20221008193426801"></p><ul><li>阻塞与非阻塞：调用一个函数后，在等待这个函数返回结果之前，当前的线程是处于挂起状态还是运行状态。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081936694.png" alt="image-20221008193611650"></p><ul><li>同步阻塞：请求方主动发起的，一直等待应答结果（用户线程阻塞挂起）；</li><li>异步非阻塞：请求方主动发起，但是可以去做其他的事情，但是需要不断轮询查看发起的请求是否有结果；</li><li>异步阻塞：请求方发起请求，一直阻塞等待答应结果（实际不应用）；</li><li>异步非阻塞：请求方发起请求，可以去干自己的事，服务会主动通知该请求已完成。</li></ul><h2 id="NIO-介绍"><a href="#NIO-介绍" class="headerlink" title="NIO 介绍"></a>NIO 介绍</h2><h3 id="缓冲区（Buffer）"><a href="#缓冲区（Buffer）" class="headerlink" title="缓冲区（Buffer）"></a>缓冲区（Buffer）</h3><p>在谈到缓冲区，<strong>我们说缓冲区对象本质上是一个数组，但它其实是一个特殊的数组，缓冲区对象内置了一些机制，能够追踪和记录缓冲区的状态变化情况</strong>，如果我们使用 <code>get()</code> 方法从缓冲区获取数据或者使用 <code>put()</code> 方法把数据写入缓冲区，都会引起缓冲区状态的变化。</p><blockquote><p>缓冲区三个重要属性：</p><ul><li>position：指定下一个将要被写入或者读取的元素索引，它的值由 get()&#x2F;put() 方法自动更新，在新创建一个 Buffer 对象时，position 被初始化为 0。</li><li>limit：指定还有多少数据需要取出（在从缓冲区写入通道时），或者还有多少空间可以放入数据（在从通道读入缓冲区时）。</li><li>capacity：指定了可以存储在缓冲区的最大数据容量，实际上，它指定了底层数据的大小，或者至少时指定了准许我们使用的底层数组的容量。‘</li></ul><p>注：0&lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</p></blockquote><p>在 NIO 中，所有的缓冲区类型都继承与抽象类 Buffer，最常用的就是 ByteBuffer，对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210082019274.png" alt="image-20221008201920235"></p><ul><li><p><strong>缓存区的分配</strong>：可以通过调用静态方法 <code>allocate()</code> 来指定缓冲区的容量，其实调用 allocate 方法相当于<strong>创建了一个指定大小的数组，并把它包装为缓冲区对象</strong>。我们也可以<strong>自己创建一个数组通过调用静态方法 <code>wrap()</code> 来将其包装为缓冲区对象。</strong> </p></li><li><p><strong>缓冲区分片</strong>：根据现有的缓冲区对象创建一个子缓冲区，<strong>即在现有缓冲区上切出一片作为一个新的缓冲区，但现有的缓冲区与创建的子缓冲区在底层数面上是数据共享的（子缓冲区相当于现有缓冲区的一个视图窗口）。</strong>可以通过调用缓冲区对象的 <code>slice()</code> 创建。</p></li><li><p><strong>只读缓冲区</strong>：通过调用缓冲区对象的 <code>asReadOnlyBuffer()</code> 方法，将任何<strong>常规缓冲区转换为只读缓冲区</strong>，这个方法返回一个与原缓冲区<strong>完全相同</strong>的缓冲区，并与原缓冲区<strong>共享数据</strong>，只不过它是只读的。如果<strong>原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化</strong>。<strong>注意：尝试修改只读缓冲区的内容，则会报 ReadOnlyBufferException 异常；只可以 常规–&gt; 只读 不可以 只读 –&gt; 可写</strong></p></li><li><p><strong>直接缓冲区</strong>：直接缓冲区是为了加快 I&#x2F;O 速度，使用一种特殊方式为其分配内存的缓冲区。<strong>该缓冲区会在每一次调用底层操作系统的本机 I&#x2F;O 操作之前（或之后），尝试避免将缓冲区内容拷贝到一个中间缓冲区拷贝数据。</strong>通过调用静态方法 <code>allocateDirect()</code> 方法</p></li><li><p><strong>内存映射</strong>：比常规的基于流或者基于通道的 I&#x2F;O 快得多。 <strong>内存映射文件 I&#x2F;O 通过使文件的数据表现为内存数组的内容来完成</strong>。一般来说，<strong>只有文件中实际读取或写入的部分才会映射到内存中</strong>。</p></li></ul><h3 id="选择器（Selector）"><a href="#选择器（Selector）" class="headerlink" title="选择器（Selector）"></a>选择器（Selector）</h3><p>NIO 中非阻塞 I&#x2F;O 采用了基于 Reactor 模式的工作方式， I&#x2F;O 调用不会被阻塞，而是注册感兴趣的特定 I&#x2F;O 事件，如可读数据到达、新的套接字连接等，在发生特定事件时，系统再通知我们。NIO 中实现非阻塞 I&#x2F;O 的核心对象是 Selector，Selector 是注册各种 I&#x2F;O 事件的地方，而且当那些事情发生时，就是 Selector 告诉我们所发生的事件。</p><h3 id="通道（Channel）"><a href="#通道（Channel）" class="headerlink" title="通道（Channel）"></a>通道（Channel）</h3><p>通道是一个对象，通过它可以读取和写入数据，当然所有数据都通过 Buffer 对象来处理。我们永远不会将字节直接写入通道，而是将数据写入包含一个或者多个字节的缓冲区。同样也不会直接从通道中读取字节，而是通过数据从通道读入缓冲区，再从缓冲区获取这个字节。</p><p><img src="https://pic2.zhimg.com/80/v2-537ed6de4ca2cfeefd0dd11654519b65_720w.webp" alt="img"></p><h3 id="反应堆"><a href="#反应堆" class="headerlink" title="反应堆"></a>反应堆</h3><p>阻塞 I&#x2F;O 的通信模型如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091808348.png" alt="image-20221009180839283"></p><p>每个客户端连接成功后，服务端都会启动一个线程区处理该客户端请求。</p><p><strong>阻塞 I&#x2F;O 通信模型缺点</strong></p><ol><li>当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些 CPU 时间。</li><li>阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。</li></ol><p>在这种情况下非阻塞 I&#x2F;O 就有了它的应用前景。</p><p><strong>Java NIO 工作原理。</strong></p><ol><li><strong>有一个专门的线程来处理所有 I&#x2F;O 事件，并负责分发。</strong></li><li><strong>事件驱动机制</strong>：事件到的时候出发，而不是同步地去监视事件。</li><li><strong>线程通信</strong>：线程之间通过 wait、notify 等方式通信。保证每次上下文切换都是<strong>有意义的</strong>，<strong>减少无谓的线程切换</strong>。</li></ol><blockquote><p> Java NIO 反应堆工作原理图。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091814247.png" alt="image-20221009181444168"></p><p>（注：每个线程的处理流程大概都是读取数据、解码、计算处理、编码和发送响应。）</p></blockquote><h3 id="Netty-与-NIO"><a href="#Netty-与-NIO" class="headerlink" title="Netty 与 NIO"></a>Netty 与 NIO</h3><h4 id="Netty-支持的功能与特性"><a href="#Netty-支持的功能与特性" class="headerlink" title="Netty 支持的功能与特性"></a>Netty 支持的功能与特性</h4><p>根据定义，Netty 是一个异步的、事件驱动的、用来做高性能高可靠的网络应用的框架。优点如下：</p><ol><li>框架设计优雅，底层模型随意切换，适应不同的网络协议要求。</li><li>提供了很多的协议、安全、编解码的支持。</li><li>解决了很多 NIO 不易用的问题。</li><li>社区更为活跃。</li></ol><p>Netty 支持的功能与特性如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091819746.png" alt="image-20221009181932653"></p><ol><li>底层核心有：Zero-Copy-Capable Buffer，非常易用的零拷贝 Buffer；统一的 API；标准可扩展的事件模型。</li><li>传输方面支持的有：管道通信；HTTP 隧道；TCP 与 UDP。</li><li>协议方面的支持有：基于原始文本和二进制的协议；解压缩；大文件传输；流媒体传输；ProtoBuf 编解码；安全认证；HTTP 和 WebSocket。</li></ol><h4 id="Netty-采用-NIO-而非-AIO-的理由"><a href="#Netty-采用-NIO-而非-AIO-的理由" class="headerlink" title="Netty 采用 NIO 而非 AIO 的理由"></a>Netty 采用 NIO 而非 AIO 的理由</h4><blockquote><ol><li>Netty 不看重 Windows 上的使用，在 Linux 系统上，AIO 的底层实现仍使用 <code>epoll</code>，没有很好地实现 AIO，因此在性能上没有明显又是，且被 JDK 封装了一层，不容易深度优化。</li><li>Netty 整体架构采用 Reactor 模型，而 AIO 采用 Proactor 模型，混在一起会非常混乱，把 AIO 也改造成 Reactor 模型，看起来是把 Epoll 绕了个弯又绕回来。</li><li>AIO 还有个缺点是接受数据需要预先分配缓存， 而 NIO 是需要接收时才分配，所以对连接数量非常大但流量小的情况，AIO 会浪费很多内存。</li><li>Linux上 AIO 不够成熟，处理回调结果的速度跟不上处理需求。</li></ol></blockquote><h2 id="Nettty-高性能之道"><a href="#Nettty-高性能之道" class="headerlink" title="Nettty 高性能之道"></a>Nettty 高性能之道</h2><h3 id="传统-RPC-调用性能差的三大问题"><a href="#传统-RPC-调用性能差的三大问题" class="headerlink" title="传统 RPC 调用性能差的三大问题"></a>传统 RPC 调用性能差的三大问题</h3><h4 id="1-网络传输方式存在弊端"><a href="#1-网络传输方式存在弊端" class="headerlink" title="1. 网络传输方式存在弊端"></a>1. 网络传输方式存在弊端</h4><p>传统的 RPC 框架或者居于 RMI 等方式的远程服务（过程）调用都是采用 BIO，当客户端的并发压力或者网络时延 增大的时候，BIO 会因频繁的 “wait” 导致 I&#x2F;O 线程经常出席那阻塞的情况，由于线程本省无法高效地工作，I&#x2F;O 处理能力自然就会下降。</p><p><strong>采用 BIO 通信模型的服务端</strong>，通常由一个独立的 Acceptor 线程负责监听客户端的连接，接收到客户端连接之后为客户端创建一个新的线程处理请求消息，处理完成之后，返回应答消息给客户端，线程销毁，这就是典型的一请求一应答模型。<strong>这样的架构设计，最大的问题就是无法进行弹性伸缩。当用户访问量剧增时，并发量自然上升，而服务端的线程个数和并发访问数成线性正比，由于线程是 JVM 非常宝贵的系统资源，所以随着并发量的持续增加、线程数急剧膨胀，系统的性能也急剧下降，可能会发生句柄和线程堆栈溢出等问题，最终可能导致服务器宕机。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210101942644.png" alt="image-20221010194225522"></p><h4 id="2-序列化方式存在弊端"><a href="#2-序列化方式存在弊端" class="headerlink" title="2. 序列化方式存在弊端"></a>2. 序列化方式存在弊端</h4><p>Java 序列化存在如下几个较为典型的问题：</p><ul><li>无法跨语言使用</li><li>比起第三方序列化框架，序列化后的字节流占用的空间太大（传输带宽占用太大）。</li><li>序列化性能较差，序列化时会占用较多的 CPU 资源。</li></ul><h4 id="3-线程模型存在弊端"><a href="#3-线程模型存在弊端" class="headerlink" title="3. 线程模型存在弊端"></a>3. 线程模型存在弊端</h4><p>由于传统的 RPC 框架均采用 BIO 模型，这使得每个 TCP 链家都需要分配 1 个线程，而线程资源是 JVM 非常宝贵的系统资源，当 I&#x2F;O 读写阻塞时无法及时释放时，会导致系统性能急剧下降，甚至会导致虚拟机无法创建新的线程。</p><h3 id="Netty-高性能的三个主题"><a href="#Netty-高性能的三个主题" class="headerlink" title="Netty 高性能的三个主题"></a>Netty 高性能的三个主题</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210101949866.png" alt="image-20221010194940812"></p><h4 id="I-x2F-O-传输模型"><a href="#I-x2F-O-传输模型" class="headerlink" title="I&#x2F;O 传输模型"></a>I&#x2F;O 传输模型</h4><p>用什么样的通道将数据发送给对方，是 BIO、NIO 还是 AIO，I&#x2F;O 传输模型在很大程度上决定了框架的性能。</p><h4 id="数据协议"><a href="#数据协议" class="headerlink" title="数据协议"></a>数据协议</h4><p>采用什么样的通信协议，是 HTTP 还是内部私有协议。协议的选择不同，性能模型也就不同。一般来说内部私有协议比公有协议的性能更高。</p><h4 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h4><p>线程模型涉及如何读取数据包，读取之后的编解码在哪个线程中进行，编解码后的消息如何派发等方面。线程模型设计得不同，对性能也会产生非常大得影响。</p><h3 id="异步非阻塞通信"><a href="#异步非阻塞通信" class="headerlink" title="异步非阻塞通信"></a>异步非阻塞通信</h3><p>与 Socket 类和ServerSocket 类相对应，NIO 也提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现。这两种新增的 Channel 都支持阻塞和非阻塞两种 I&#x2F;O 模式。</p><ol><li><p>服务端得通行步骤</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102002142.png" alt="image-20221010200208068"></p></li><li><p>客户端通信步骤：</p></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102002287.png" alt="image-20221010200238215"></p><p>通过上面的序列图，我们大概能够了解到 Netty 的 I&#x2F;O 线程 NioEventLoop 聚合了 Selector，可以同时并发处理成百上千个客户端 Channel，而且它的<strong>读写操作都是非阻塞的</strong>，这可以大幅提升 I&#x2F;O 线程的运行效率，<strong>避免由于频繁 I&#x2F;O 阻塞导致的线程挂起</strong>。另外，由于 Netty 采用的是<strong>异步通信模式</strong>，<strong>单个 I&#x2F;O 线程也可以并发处理多个用户端连接和读写操作</strong>，所以从根本上解决了传统 BIO 的但连接单线程模型的弊端，使整个系统的性能、弹性伸缩性能和可靠性都得到了极大的提升。</p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>在<strong>操作系统</strong>的层面上<strong>零拷贝</strong>是指<strong>避免</strong>在<strong>用户态</strong>(User-space) 与<strong>内核态</strong>(Kernel-space)之间<strong>来回拷贝</strong>数据的技术。Netty 中零拷贝与操作系统层面上的零拷贝是完全不一样的，<strong>Netty 的零拷贝完全是在用户态（java层面）的，更多的是数据操作的优化。</strong></p><p>Netty 的零拷贝主要体现在如下五个方面。</p><ol><li>Netty 接收和发送 ByteBuffer 采用 DirectBuffer，使用堆外直接内存进行 Socket 读写，不需要进行字节缓冲区的二次拷贝。<strong>如果使用传统的堆存（Heap Buffer）进行 Socket 的读写。那么 JVM 会将推存拷贝一份到直接内存中，然后才写入 Socket。</strong>相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。</li><li>Netty 提供了多种组合 Buffer 对象，可以聚合多个 ByteBuffer 对象，用户可以像操作一个 Buffer 那样方面地对组合 Buffer 进行操作，避免了传统的通过内存拷贝的方式将几个小 Buffer 合并成一个大 Buffer 的繁琐操作。</li><li>Netty 中文件传输采用 <code>transferTo()</code> 方法，它可以直接将文件缓冲区的数据发送到目标 <code>Channel</code>，避免了传统通过循环 <code>write()</code> 方式导致的内存拷贝问题。</li><li>通过 wrap 操作，我们可以将 <code>byte[]</code> 数组、ByteBuf、ByteBuffer 等包装成要给 Netty ByteBuf 对象，进而避免了拷贝技术。</li><li>ByteBuf 支持 slice 操作，可以将 ByteBuf分解为多个共享同一个存储区域的 ByteBuf，避免内存的拷贝。</li></ol><blockquote><p>对于很多操作系统，它接收文件缓冲区的内容直接发送给目标 Channel，而不需要从内核拷贝到应用程序内存，这种更加高效的传输实现了文件传输的零拷贝</p></blockquote><blockquote><p>这一块的详细文章推荐：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&mid=2247483933&idx=1&sn=d9776b9efe054b30523adbe60cb7524a&scene=21#wechat_redirect">NIO效率高的原理之零拷贝与直接内存映射</a></p></blockquote><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>随着技术的发展，对象的分配和回收已经是一个非常轻量级的工作了。但是对于缓冲区来说还是有些特殊，尤其是对于堆外直接内存的分配和回收，是一种耗时的操作。<strong>为了尽量重复例用缓冲区内存</strong>，Netty 设计了一套<strong>基于内存池的缓冲区重用机制</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.PooledByteBufAllocator;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Netty 内存池技术测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-10-10-20:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolBufferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] CONTENT = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">1800000</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">poolBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------采用内存池分配器创建直接缓冲区----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">            poolBuffer = PooledByteBufAllocator.DEFAULT.directBuffer(<span class="number">1024</span>);</span><br><span class="line">            poolBuffer.writeBytes(CONTENT);</span><br><span class="line">            poolBuffer.release();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;内存池分配缓冲区耗时&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------采用非 堆内存分配器创建直接缓冲区----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">            buffer = Unpooled.directBuffer();</span><br><span class="line">            buffer.writeBytes(CONTENT);</span><br><span class="line">            buffer.release();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;非内存池分配缓冲区耗时&quot;</span>+(endTime-startTime2)+<span class="string">&quot;ms.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102105891.png" alt="image-20221010210500830"></p><h3 id="高效的-Reactor-线程模型"><a href="#高效的-Reactor-线程模型" class="headerlink" title="高效的 Reactor 线程模型"></a>高效的 Reactor 线程模型</h3><ol><li>Reactor 单线程模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102107177.png" alt="image-20221010210701111"></p><p><code>Acceptor</code> 负责接收客户端的 TCP 连接请求消息，链路建立成功之后，通过 <code>Dispatcher</code> 将对应的 <code>ByteBuffer</code> 派发到指定的 <code>Handler</code> 上进行消息解码，用户 <code>Handler</code> 通过 NIO 线程将消息发送给客户端。</p><p>对于并发量较小的业务场景，可以使用单线程模型。但单线程模型不适合高负载、高并发的场景。</p><ol start="2"><li>Reactor 多线程模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102113881.png" alt="image-20221010211346809"></p><ul><li>有一个专门的 NIO 线程 Acceptor 用于监听服务端、接收服务端的 TCP 连接请求。</li><li>网络 I&#x2F;O 读、写等操作只有一个 NIO 线程池负责，可以采用标准的 JDK 线程池来实现，它包含一个任务队列和多个可用的线程，由这些 NIO 线程负责消息的读取、节码、编码和发送。</li><li>一个 NIO 线程可用同时处理多条请求链路，但是一条链路只对应一个 NIO 线程，防止发生并发串行。</li></ul><ol start="3"><li>主从 Reactor 多线成模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102117819.png" alt="image-20221010211724752"></p><ul><li>服务端用于接收客户端连接的不再是单个 NIO 线程，而是分配了一个独立的 NIO 线程池。Acceptor 接收到客户端 TCP 连接请求并处理完成后（可能包含接入认证等），将新创建的 SocketChannel 注册到 I&#x2F;O 线程池（Sub Reactor 子线程池）的某个 I&#x2F;O 线程上，由它负责 SocketChannel 的读写和编解码工作。</li><li>Acceptor 线程仅仅用于客户端的登录、握手和安全认证，一旦链路建立成功，就将链路注册到后端 Sub Reactor 子线程池的 I&#x2F;O 线程上，再由 I&#x2F;O 线程负责后续的 I&#x2F;O 操作。</li></ul><p>利用主从Reactor多线程模型可以解决一个服务端监听线程无法有效处理所有客户端连接的性能不足的问题。因此，在Netty的官方Demo中，推荐使用该线程模型。</p><h3 id="无锁化的串行设计理念"><a href="#无锁化的串行设计理念" class="headerlink" title="无锁化的串行设计理念"></a>无锁化的串行设计理念</h3><p>为了尽可能避免锁竞争带来的性能损耗，<strong>可用通过串行化设计来避免多线程竞争和同步锁，即消息的处理尽可能在同一个线程内完成，不进行线程的切换。（减少上下文切换）</strong></p><p><strong>为了尽可能提升性能，Netty 采用了无锁化串行设计，在 I&#x2F;O 线程内部进行串行操作，避免多线程竞争导致的性能下降。</strong>表面上看似乎串行化设计对 CPU 利用率不高，并发程度不够。<strong>但是通过调整 NIO 线程池的线程参数，可用同时启动多个串行的线程并行运行，这种局部无锁化的串行线程设计相比一个队列——多个工作线程的模型更优。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102137205.png" alt="image.png"></p><h3 id="高效的并发编程"><a href="#高效的并发编程" class="headerlink" title="高效的并发编程"></a>高效的并发编程</h3><p>Netty 的高效并发编程主要体现在如下几点。</p><ol><li><strong>volatile 关键字的大量且正确的使用。</strong></li><li><strong>CAS 和原子类的广泛使用。</strong></li><li><strong>线程安全容器的使用</strong></li><li><strong>通过读写锁提升并发性能。</strong></li></ol><h3 id="对高性能序列化框架的支持"><a href="#对高性能序列化框架的支持" class="headerlink" title="对高性能序列化框架的支持"></a>对高性能序列化框架的支持</h3><p>Netty默认提供了对Google Protobuf的支持，用户也可以通过<strong>扩展Netty的编解码接口接入其他高性能的序列化框架进行编解码</strong>，例如Thrift的压缩二进制编解码框架。</p><h3 id="灵活的-TCP-参数配置能力"><a href="#灵活的-TCP-参数配置能力" class="headerlink" title="灵活的 TCP 参数配置能力"></a>灵活的 TCP 参数配置能力</h3><p>合理设置 TCP 参数在某些场景下对性能的提升具有显著的效果，例如 <code>SO_RCVBUF</code> 和 <code>SO_SNDBUF</code>：通常建议值为 128KB 或者 256KB。如果设置不当，对性能的影响也是非常大的。</p><p>对性能影响比较大的几个配置项。</p><ol><li><code>SO_RCVBUF</code> 和 <code>SO_SNDBUF</code>：通常建议值为128KB或者256KB。</li><li><code>SO_TCPNODELAY</code>：<code>Nagle</code> 算法通过将缓冲区内的小封包自动相连，组成较大的封包，阻止大量小封包的发阻塞网络，从而提高网络应用效率。但是对于延时敏感的应用场景需要关闭该优化算法。</li></ol><blockquote><p><code>Nagle</code> 算法是以其发明人 John Nagle 的名字命名的，<strong>它用于将小的碎片数据连接成更大的保温来最小化所发送的报文数量。如果需要发送一些较小的保温，则需要禁用该算法</strong>。Netty <strong>默认禁用该算法</strong>，从而使得传输的<strong>延时最小化</strong>。</p></blockquote><ol start="3"><li>软中断：如果 Linux 内核版本支持 RPS（2.6.35 版本以上），开启 RPS 可以实现软中断，提升网络吞吐量。RPS 会<strong>根据数据包的源地址、目的地址，已经源端口和目标端口进行计算得到一个 hash 值，然后根据这个 hash 值来选择软中断 CPU 的运行</strong>。从<strong>上层来看，也就是将每个连接和 CPU 绑定，通过这个 Hash 值在多个 CPU 上均衡软中断，提升网络并行处理性能。</strong></li></ol><blockquote><p>Netty 在启动辅助类中可以灵活地配置 TCP 参数，满足不同的用户场景。相关配置如下表所示。（此表还有不详尽之处，大概了解，用作以后备）</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102149808.png" alt="image-20221010214936680"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102149175.png" alt="image-20221010214957049"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102151047.png" alt="image-20221010215112965"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《Netty4核心原理与手写RPC框架实战》读书笔记&quot;&gt;&lt;a href=&quot;#《Netty4核心原理与手写RPC框架实战》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《Netty4核心原理与手写RPC框架实战》读书笔记&quot;&gt;&lt;/a&gt;《Netty4核</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://devildyw.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Netty" scheme="https://devildyw.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Sentinel</title>
    <link href="https://devildyw.github.io/2022/09/25/Spring%20Cloud-Sentinel/"/>
    <id>https://devildyw.github.io/2022/09/25/Spring%20Cloud-Sentinel/</id>
    <published>2022-09-25T14:12:24.000Z</published>
    <updated>2022-09-25T14:16:12.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Sentinel"><a href="#Spring-Cloud-Sentinel" class="headerlink" title="Spring Cloud-Sentinel"></a>Spring Cloud-Sentinel</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Sentinel&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Sentinel&quot;&gt;&lt;/a&gt;Spring Cloud-Sentinel&lt;/</summary>
      
    
    
    
    <category term="服务降级" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之策略模式</title>
    <link href="https://devildyw.github.io/2022/09/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-06T04:52:09.000Z</published>
    <updated>2022-09-06T05:07:06.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之策略模式"><a href="#设计模式–行为型模式之策略模式" class="headerlink" title="设计模式–行为型模式之策略模式"></a>设计模式–行为型模式之策略模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>策略模式</strong>是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256882.png" alt="策略设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。</p><p>用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的最快路线。</p><p>程序的首个版本只能规划公路路线。 驾车旅行的人们对此非常满意。 但很显然， 并非所有人都会在度假时开车。 因此你在下次更新时添加了规划步行路线的功能。 此后， 你又添加了规划公共交通路线的功能。</p><p>而这只是个开始。 不久后， 你又要为骑行者规划路线。 又过了一段时间， 你又要为游览城市中的所有景点规划路线。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256885.png" alt="导游代码将变得非常臃肿"></p><p>导游代码将变得非常臃肿。</p><p>尽管从商业角度来看， 这款应用非常成功， 但其技术部分却让你非常头疼： 每次添加新的路线规划算法后， 导游应用中主要类的体积就会增加一倍。 终于在某个时候， 你觉得自己没法继续维护这堆代码了。</p><p>无论是修复简单缺陷还是微调街道权重， 对某个算法进行任何修改都会影响整个类， 从而增加在已有正常运行代码中引入错误的风险。</p><p>此外， 团队合作将变得低效。 如果你在应用成功发布后招募了团队成员， 他们会抱怨在合并冲突的工作上花费了太多时间。 在实现新功能的过程中， 你的团队需要修改同一个巨大的类， 这样他们所编写的代码相互之间就可能会出现冲突。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>策略模式建议找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为<em>策略</em>的独立类中。</p><p>名为<em>上下文</em>的原始类必须包含一个成员变量来存储对于每种策略的引用。 上下文并不执行任务， 而是将工作委派给已连接的策略对象。</p><p>上下文不负责选择符合任务需要的算法——客户端会将所需策略传递给上下文。 实际上， 上下文并不十分了解策略， 它会通过同样的通用接口与所有策略进行交互， 而该接口只需暴露一个方法来触发所选策略中封装的算法即可。</p><p>因此， 上下文可独立于具体策略。 这样你就可在不修改上下文代码或其他策略的情况下添加新算法或修改已有算法了。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256878.png" alt="路线规划策略"></p><p>路线规划策略。</p><p>在导游应用中， 每个路线规划算法都可被抽取到只有一个 <code>build­Route</code>生成路线方法的独立类中。 该方法接收起点和终点作为参数， 并返回路线中途点的集合。</p><p>即使传递给每个路径规划类的参数一模一样， 其所创建的路线也可能完全不同。 主要导游类的主要工作是在地图上渲染一系列中途点， 不会在意如何选择算法。 该类中还有一个用于切换当前路径规划策略的方法， 因此客户端 （例如用户界面中的按钮） 可用其他策略替换当前选择的路径规划行为。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256868.png" alt="各种出行策略"></p><p>各种前往机场的出行策略</p><p>假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。</p><h2 id="策略模式结构"><a href="#策略模式结构" class="headerlink" title="策略模式结构"></a>策略模式结构</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256520.png" alt="策略设计模式的结构"></p><ol><li><strong>上下文</strong> （Con­text） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li><li><strong>策略</strong> （Strat­e­gy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li><li><strong>具体策略</strong> （Con­crete Strate­gies） 实现了上下文所用算法的各种不同变体。</li><li>当上下文需要运行算法时， 它会在其已连接的策略对象上调用执行方法。 上下文不清楚其所涉及的策略类型与算法的执行方式。</li><li><strong>客户端</strong> （Client） 会创建一个特定策略对象并将其传递给上下文。 上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li></ol><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在本例中， 上下文使用了多个<strong>策略</strong>来执行不同的计算操作。</p><p>一个人想去一个目的地，他现在有四种策略可以选择，分别是 <strong>飞机</strong>、<strong>开车</strong>、<strong>骑车</strong>和<strong>坐公交</strong>。</p><p><code>Strategy 抽象策略类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略类接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行策略的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Context 上下文</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上下文环境</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        strategy.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ConcreteStrategies 具体策略类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 乘坐飞机的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlaneStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择乘坐飞机,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 骑自行车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BikeStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择骑自行车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 乘坐公交车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择乘坐公交车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 开车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择开车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client 客户端</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建上下文</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建策略</span></span><br><span class="line">        <span class="type">BusStrategy</span> <span class="variable">busStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusStrategy</span>();</span><br><span class="line">        <span class="type">BikeStrategy</span> <span class="variable">bikeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BikeStrategy</span>();</span><br><span class="line">        <span class="type">AirPlaneStrategy</span> <span class="variable">airPlaneStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirPlaneStrategy</span>();</span><br><span class="line">        <span class="type">CarStrategy</span> <span class="variable">carStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarStrategy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开车</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(busStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//骑车</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(bikeStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//飞机</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(airPlaneStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//公交</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(busStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061303618.png" alt="image-20220906130353573"></p><p><strong>将环境和策略耦合松散，防止随着策略的增加代码主体越来越臃肿。</strong></p><h2 id="策略模式适合应用场景"><a href="#策略模式适合应用场景" class="headerlink" title="策略模式适合应用场景"></a>策略模式适合应用场景</h2><p> <strong>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。</strong></p><p> 策略模式让你能够将对象关联至可以不同方式执行特定子任务的不同子对象， 从而以间接方式在运行时更改对象行为。</p><p> 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。</p><p> 策略模式让你能将不同行为抽取到一个独立类层次结构中， 并将原始类组合成同一个， 从而减少重复代码。</p><p> 如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。</p><p> 策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。</p><p> 当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</p><p> 策略模式将所有继承自同样接口的算法抽取到独立类中， 因此不再需要条件语句。 原始对象并不实现所有算法的变体， 而是将执行工作委派给其中的一个独立算法对象。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><strong>从上下文类中找出修改频率较高的算法 （也可能是用于在运行时选择某个算法变体的复杂条件运算符）。</strong></li><li><strong>声明该算法所有变体的通用策略接口。</strong></li><li><strong>将算法逐一抽取到各自的类中， 它们都必须实现策略接口。</strong></li><li><strong>在上下文类中添加一个成员变量用于保存对于策略对象的引用。 然后提供设置器以修改该成员变量。 上下文仅可通过策略接口同策略对象进行交互， 如有需要还可定义一个接口来让策略访问其数据。</strong></li><li><strong>客户端必须将上下文类与相应策略进行关联， 使上下文可以预期的方式完成其主要工作。</strong></li></ol><h2 id="策略模式优缺点"><a href="#策略模式优缺点" class="headerlink" title="策略模式优缺点"></a>策略模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li><em>开闭原则</em>。 你无需对上下文进行修改就能够引入新的策略。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>看上去很像， 因为两者都能通过某些行为来参数化对象。 但是， 它们的意图有非常大的不同。<ul><li>你可以使用<em>命令</em>来将任何操作转换为对象。 操作的参数将成为对象的成员变量。 你可以通过转换来延迟操作的执行、 将操作放入队列、 保存历史命令或者向远程服务发送命令等。</li><li>另一方面， <em>策略</em>通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法。</li></ul></li><li><a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a>可让你更改对象的外表， <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>则让你能够改变其本质。</li><li><a href="https://refactoringguru.cn/design-patterns/template-method">模板方法模式</a>基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 <em>模板方法</em>在类层次上运作， 因此它是静态的。 <em>策略</em>在对象层次上运作， 因此允许在运行时切换行为。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之策略模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之策略模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之策略模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之状态模式</title>
    <link href="https://devildyw.github.io/2022/09/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-05T05:55:10.000Z</published>
    <updated>2022-09-05T06:14:03.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之状态模式"><a href="#设计模式–行为型模式之状态模式" class="headerlink" title="设计模式–行为型模式之状态模式"></a>设计模式–行为型模式之状态模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>状态模式</strong>是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。</p><p><img src="https://refactoringguru.cn/images/patterns/content/state/state-zh.png" alt="状态设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>状态模式与<strong>有限状态机</strong> 的概念紧密相关。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/problem1.png" alt="有限状态机"></p><p>有限状态机。</p><p>其主要思想是程序在任意时刻仅可处于几种<em>有限</em>的<em>状态</em>中。 在任何一个特定状态中， 程序的行为都不相同， 且可瞬间从一个状态切换到另一个状态。 不过， 根据当前状态， 程序可能会切换到另外一种状态， 也可能会保持当前状态不变。 这些数量有限且预先定义的状态切换规则被称为<em>转移</em>。</p><p>你还可将该方法应用在对象上。 假如你有一个 <code>文档</code> <code>Doc­u­ment</code> 类。 文档可能会处于 <code>草稿</code>Draft 、  <code>审阅中 </code> <code>Mod­er­a­tion</code> 和 <code>已发布</code> <code>Pub­lished</code> 三种状态中的一种。 文档的 <code>pub­lish</code>发布方法在不同状态下的行为略有不同：</p><ul><li>处于 <code>草稿</code>状态时， 它会将文档转移到审阅中状态。</li><li>处于 <code>审阅中</code>状态时， 如果当前用户是管理员， 它会公开发布文档。</li><li>处于 <code>已发布</code>状态时， 它不会进行任何操作。</li></ul><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/problem2-zh.png" alt="文档对象的全部状态"></p><p>文档对象的全部状态和转移。</p><p>状态机通常由众多条件运算符 （ <code>if</code>或 <code>switch</code> ） 实现， 可根据对象的当前状态选择相应的行为。  “状态” 通常只是对象中的一组成员变量值。 即使你之前从未听说过有限状态机， 你也很可能已经实现过状态模式。 下面的代码应该能帮助你回忆起来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Document is</span><br><span class="line">    field state: string</span><br><span class="line">    // ……</span><br><span class="line">    method publish() is</span><br><span class="line">        switch (state)</span><br><span class="line">            &quot;draft&quot;:</span><br><span class="line">                state = &quot;moderation&quot;</span><br><span class="line">                break</span><br><span class="line">            &quot;moderation&quot;:</span><br><span class="line">                if (currentUser.role == &quot;admin&quot;)</span><br><span class="line">                    state = &quot;published&quot;</span><br><span class="line">                break</span><br><span class="line">            &quot;published&quot;:</span><br><span class="line">                // 什么也不做。</span><br><span class="line">                break</span><br><span class="line">    // ……</span><br></pre></td></tr></table></figure><p>当我们逐步在 <code>文档</code>类中添加更多状态和依赖于状态的行为后， 基于条件语句的状态机就会暴露其最大的弱点。 为了能根据当前状态选择完成相应行为的方法， 绝大部分方法中会包含复杂的条件语句。 修改其转换逻辑可能会涉及到修改所有方法中的状态条件语句， 导致代码的维护工作非常艰难。</p><p>这个问题会随着项目进行变得越发严重。 我们很难在设计阶段预测到所有可能的状态和转换。 随着时间推移， 最初仅包含有限条件语句的简洁状态机可能会变成臃肿的一团乱麻。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>状态模式建议为对象的所有可能状态新建一个类， 然后将所有状态的对应行为抽取到这些类中。</p><p>原始对象被称为<em>上下文</em> （<code>con­text</code>）， 它并不会自行实现所有行为， 而是会保存一个指向表示当前状态的状态对象的引用， 且将所有与状态相关的工作委派给该对象。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/solution-zh.png" alt="文档将工作委派给一个状态对象"></p><p>文档将工作委派给一个状态对象。</p><p>如需将上下文转换为另外一种状态， 则需将当前活动的状态对象替换为另外一个代表新状态的对象。 采用这种方式是有前提的： 所有状态类都必须遵循同样的接口， 而且上下文必须仅通过接口与这些对象进行交互。</p><p>这个结构可能看上去与<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>模式相似， 但有一个关键性的不同——在状态模式中， 特定状态知道其他所有状态的存在， 且能触发从一个状态到另一个状态的转换； 策略则几乎完全不知道其他策略的存在。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p>智能手机的按键和开关会根据设备当前状态完成不同行为：</p><ul><li>当手机处于解锁状态时， 按下按键将执行各种功能。</li><li>当手机处于锁定状态时， 按下任何按键都将解锁屏幕。</li><li>当手机电量不足时， 按下任何按键都将显示充电页面。</li></ul><h2 id="状态模式结构"><a href="#状态模式结构" class="headerlink" title="状态模式结构"></a>状态模式结构</h2><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/structure-zh.png" alt="状态设计模式的结构"></p><ol><li><p><strong>上下文</strong> （<code>Con­text</code>） 保存了对于一个具体状态对象的引用， 并会将所有与该状态相关的工作委派给它。 上下文通过状态接口与状态对象交互， 且会提供一个设置器用于传递新的状态对象。</p></li><li><p><strong>状态</strong> （<code>State</code>） 接口会声明特定于状态的方法。 这些方法应能被其他所有具体状态所理解， 因为你不希望某些状态所拥有的方法永远不会被调用。</p></li><li><p><strong>具体状态</strong> （<code>Con­crete States</code>） 会自行实现特定于状态的方法。 为了避免多个状态中包含相似代码， 你可以提供一个封装有部分通用行为的中间抽象类。</p><p>状态对象可存储对于上下文对象的反向引用。 状态可以通过该引用从上下文处获取所需信息， 并且能触发状态转移。</p></li><li><p>上下文和具体状态都可以设置上下文的下个状态， 并可通过替换连接到上下文的状态对象来完成实际的状态转换。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>酒店中的房间有如下几个状态，<strong>已预定</strong>、<strong>以入住</strong>、<strong>以空闲</strong>。</p><p>由上可以分析出，房间是作为一个上下文对象，他有着三个状态，根据不同的操作可以更换当前房间的状态对象，以此改变房间对于用户互动做出的反应。</p><p><code>State</code> 抽象状态类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象状态类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HomeContnext</code> 状态上下文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态上下文</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 房间对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改状态!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="comment">//不同状态响应的处理</span></span><br><span class="line">        state.handle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ConcreteState</code> 具体状态类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 已预定状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookedState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间已预定！别人不能再定！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 以入住状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckInState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间已入住！请勿打扰！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间空闲！！！欢迎入住！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Client</code> 客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取房间对象</span></span><br><span class="line">        <span class="type">HomeContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeContext</span>();</span><br><span class="line">        <span class="comment">//设置房间状态</span></span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">FreeState</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">BookedState</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">CheckInState</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209051411049.png" alt="image-20220905141146000"></p><h2 id="状态模式适合应用场景"><a href="#状态模式适合应用场景" class="headerlink" title="状态模式适合应用场景"></a>状态模式适合应用场景</h2><p> <strong>如果对象需要根据自身当前状态进行不同行为， 同时状态的数量非常多且与状态相关的代码会频繁变更的话， 可使用状态模式。</strong></p><p> 模式建议你将所有特定于状态的代码抽取到一组独立的类中。 这样一来， 你可以在独立于其他状态的情况下添加新状态或修改已有状态， 从而减少维护成本。</p><p> <strong>如果某个类需要根据成员变量的当前值改变自身行为， 从而需要使用大量的条件语句时， 可使用该模式。</strong></p><p> 状态模式会将这些条件语句的分支抽取到相应状态类的方法中。 同时， 你还可以清除主要类中与特定状态相关的临时成员变量和帮手方法代码。</p><p> <strong>当相似状态和基于条件的状态机转换中存在许多重复代码时， 可使用状态模式。</strong></p><p> <strong>状态模式让你能够生成状态类层次结构， 通过将公用代码抽取到抽象基类中来减少重复。</strong></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>确定哪些类是上下文。 它可能是包含依赖于状态的代码的已有类； 如果特定于状态的代码分散在多个类中， 那么它可能是一个新的类。</p></li><li><p>声明状态接口。 虽然你可能会需要完全复制上下文中声明的所有方法， 但最好是仅把关注点放在那些可能包含特定于状态的行为的方法上。</p></li><li><p>为每个实际状态创建一个继承于状态接口的类。 然后检查上下文中的方法并将与特定状态相关的所有代码抽取到新建的类中。</p><p>在将代码移动到状态类的过程中， 你可能会发现它依赖于上下文中的一些私有成员。 你可以采用以下几种变通方式：</p><ul><li>将这些成员变量或方法设为公有。</li><li>将需要抽取的上下文行为更改为上下文中的公有方法， 然后在状态类中调用。 这种方式简陋却便捷， 你可以稍后再对其进行修补。</li><li>将状态类嵌套在上下文类中。 这种方式需要你所使用的编程语言支持嵌套类。</li></ul></li><li><p>在上下文类中添加一个状态接口类型的引用成员变量， 以及一个用于修改该成员变量值的公有设置器。</p></li><li><p>再次检查上下文中的方法， 将空的条件语句替换为相应的状态对象方法。</p></li><li><p>为切换上下文状态， 你需要创建某个状态类实例并将其传递给上下文。 你可以在上下文、 各种状态或客户端中完成这项工作。 无论在何处完成这项工作， 该类都将依赖于其所实例化的具体类。</p></li></ol><h2 id="状态模式优缺点"><a href="#状态模式优缺点" class="headerlink" title="状态模式优缺点"></a>状态模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong><em>单一职责原则</em>。 将与特定状态相关的代码放在单独的类中。</strong></li><li><strong><em>开闭原则</em>。 无需修改已有状态类和上下文就能引入新状态。</strong></li><li><strong>通过消除臃肿的状态机条件语句简化上下文代码。</strong></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><strong>如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。</strong></li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之状态模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之状态模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之状态模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之状态模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之观察者模式</title>
    <link href="https://devildyw.github.io/2022/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-04T04:31:24.000Z</published>
    <updated>2022-09-04T05:40:19.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之观察者模式"><a href="#设计模式–行为型模式之观察者模式" class="headerlink" title="设计模式–行为型模式之观察者模式"></a>设计模式–行为型模式之观察者模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256185.png" alt="观察者设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你有两种类型的对象：  <code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 <code>iPhone</code> 手机）， 而该产品很快将会在商店里出售。</p><p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256484.png" alt="访问商店或发送垃圾邮件"></p><p>前往商店和发送垃圾邮件</p><p>另一方面， 每次新产品到货时， 商店可以向所有顾客发送邮件 （可能会被视为垃圾邮件）。 这样， 部分顾客就无需反复前往商店了， 但也可能会惹恼对新产品没有兴趣的其他顾客。</p><p>我们似乎遇到了一个矛盾： 要么让顾客浪费时间检查产品是否到货， 要么让商店浪费资源去通知没有需求的顾客。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>拥有一些值得关注的状态的对象通常被称为<em>目标</em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为<em>发布者</em> （<code>pub­lish­er</code>）。 所有希望关注发布者状态变化的其他对象被称为<em>订阅者</em> （<code>sub­scribers</code>）。</p><p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括 1） 一个用于存储订阅者对象引用的列表成员变量； 2） 几个用于添加或删除该列表中订阅者的公有方法。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256688.png" alt="订阅机制"></p><p>订阅机制允许对象订阅事件通知。</p><p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p><p><strong>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</strong></p><p>因此， <strong>所有订阅者都必须实现同样的接口</strong>， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256693.png" alt="通知方法"></p><p>发布者调用订阅者对象中的特定通知方法来通知订阅者。</p><p>如果你的应用中有多个不同类型的发布者， 且<strong>希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有发布者遵循同样的接口</strong>。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256088.png" alt="杂志和报纸订阅"></p><p>杂志和报纸订阅。</p><p>如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。</p><p>出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</p><h2 id="观察者模式结构"><a href="#观察者模式结构" class="headerlink" title="观察者模式结构"></a>观察者模式结构</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256695.png" alt="观察者设计模式的结构"></p><ol><li><strong>发布者</strong> （<code>Pub­lish­er</code>） 会向其他对象发送值得关注的事件。 事件会在发布者自身状态改变或执行特定行为后发生。 发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅构架。</li><li>当新事件发生时， 发送者会遍历订阅列表并调用每个订阅者对象的通知方法。 该方法是在订阅者接口中声明的。</li><li><strong>订阅者（观察者）</strong> （<code>Sub­scriber</code>） 接口声明了通知接口。 在绝大多数情况下， 该接口仅包含一个 <code>update</code>更新方法。 该方法可以拥有多个参数， 使发布者能在更新时传递事件的详细信息。</li><li><strong>具体订阅者</strong> （<code>Con­crete Sub­scribers</code>） 可以执行一些操作来回应发布者的通知。 所有具体订阅者类都实现了同样的接口， 因此发布者不需要与具体类相耦合。</li><li>订阅者通常需要一些上下文信息来正确地处理更新。 因此， 发布者通常会将一些上下文数据作为通知方法的参数进行传递。 发布者也可将自身作为参数进行传递， 使订阅者直接获取所需的数据。</li><li><strong>客户端</strong> （Client） 会分别创建发布者和订阅者对象， 然后为订阅者注册发布者更新。</li></ol><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><p>再此示例中，目标对象就是所谓的发布者，而观察者就是一个一个的观察目标对象内值是否发生改变的订阅者。</p><p><strong><code>Subject</code></strong> 抽象发布者&#x2F;目标对象  一旦发生了改变就会通知订阅者们。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//存储订阅者</span></span><br><span class="line">    List&lt;Observer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册订阅者方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(T obs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除订阅者方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(T obs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有的观察者更新状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Observer</code></strong> 观察者&#x2F;订阅者  一旦目标对象发生改变，订阅者会被通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 定义观察者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Subject subject)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>ConcreteSubject</code></strong> 具体目标&#x2F;具体发布者 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象（主体对象 topic）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&lt;Observer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="comment">//主题对象（目标对象）值发生了变化，请通知所有的观察者</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">        list.add(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">        list.remove(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">            <span class="comment">//更新每一个观察者中的信息</span></span><br><span class="line">            observer.update(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>ConcreteObserver</code></strong> 具体观察者&#x2F;订阅者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 观察者 实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverA</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myState需要跟目标对象的state值保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyState</span><span class="params">(<span class="type">int</span> myState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myState = myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新为和目标对象的值一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        myState = ((ConcreteSubject)subject).getState();</span><br><span class="line">        <span class="comment">//一但发送了改变 就会将改变后值打印到控制台</span></span><br><span class="line">        System.out.println(myState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>Client</code></strong> 客户端 调用代码 测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这三个观察者添加到subject对象的观察者队伍中</span></span><br><span class="line">        subject.registerObserver(obs1);</span><br><span class="line">        subject.registerObserver(obs2);</span><br><span class="line">        subject.registerObserver(obs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变subject的状态</span></span><br><span class="line">        subject.setState(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line"><span class="comment">//        System.out.println(obs1.);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次改变subject的状态</span></span><br><span class="line">        subject.setState(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041306526.png" alt="image-20220904130656485"></p><p>可以发现目标对象的值发生修改后，所有订阅者都被通知了并且做出了响应的打印操作。</p><hr><h3 id="Java内置观察者模式实现"><a href="#Java内置观察者模式实现" class="headerlink" title="Java内置观察者模式实现"></a>Java内置观察者模式实现</h3><p>在 <code>java.util</code> 包中包含由基本的 <code>Observer</code> 接口和 <code>Observable</code> 抽象类，功能上和 <code>Observer</code> 接口和 <code>Subject</code> 接口类似。不过在使用上，内置的就方便许多了，因为i许多功能比如说<strong>注册</strong>、<strong>删除</strong>、<strong>通知</strong>观察者的哪些功能已经内置好了。</p><p><code>ConcreteSubject</code> 具体观察者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象</span></span><br><span class="line"><span class="comment"> * 继承 Observable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> s)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = s; <span class="comment">//目标对象的状态发生了改变</span></span><br><span class="line">        setChanged(); <span class="comment">//表示目标对象已经做了更改</span></span><br><span class="line">        notifyObservers(state); <span class="comment">//通知所有的观察者(订阅者)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察者只需要继承Observable父类。发送消息的方式执行如下代码即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setChanged(); <span class="comment">//表示目标对象已经做了更改</span></span><br><span class="line">notifyObservers(state); <span class="comment">//通知所有的观察者(订阅者) 值发生了改变</span></span><br></pre></td></tr></table></figure><p><code>void setChange()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    changed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void notifyObservers(Object arg)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a temporary array buffer, used as a snapshot of the state of</span></span><br><span class="line"><span class="comment">     * current Observers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123; <span class="comment">//获取锁 进入同步锁代码块 从主存中获取最新值</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (!changed) <span class="comment">// 获取到最新得changed 如果不为true就直接返回 否则执行如下代码</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        arrLocal = obs.toArray(); <span class="comment">//获取所有得订阅者</span></span><br><span class="line">        clearChanged(); <span class="comment">//清除修改标志</span></span><br><span class="line">    &#125; <span class="comment">//退出同步代码块 将值写入主存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//再调用订阅者得update方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        ((Observer)arrLocal[i]).update(<span class="built_in">this</span>, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ObserverA</code> 具体观察者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 观察者(消息订阅者)</span></span><br><span class="line"><span class="comment"> * 实现Observer接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverA</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myState需要跟目标对象的state值保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyState</span><span class="params">(<span class="type">int</span> myState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myState = myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        myState = ((ConcreteSubject) o).getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code> 客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-13:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这三个观察者添加到subject对象的观察者队伍中</span></span><br><span class="line">        subject.addObserver(obs1);</span><br><span class="line">        subject.addObserver(obs2);</span><br><span class="line">        subject.addObserver(obs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变subject的状态</span></span><br><span class="line">        subject.set(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次改变subject的状态</span></span><br><span class="line">        subject.set(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除一个订阅者</span></span><br><span class="line">        subject.deleteObserver(obs2);</span><br><span class="line">        subject.set(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察者也就是订阅者只需要实现Observer接口并重写相关update方法即可，在目标实现中我们发现触发的时候执行的就是观察者的update方法。</p><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041339351.png" alt="image-20220904133910295"></p><p>这样就实现了官方提供观察者模式，其实这里的Observable和Observer和我们前面自定义的Subject和Observer差不多，只是考虑更全面罢了。</p><h2 id="观察者模式适合应用场景"><a href="#观察者模式适合应用场景" class="headerlink" title="观察者模式适合应用场景"></a>观察者模式适合应用场景</h2><p> 当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。</p><p> 当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入自定义代码， 这样当用户按下按钮时就会触发这些代码。</p><p>观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许客户端通过自定义订阅类注入自定义代码。</p><p> 当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。</p><p> 订阅列表是动态的， 因此订阅者可随时加入或离开该列表。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>仔细检查你的业务逻辑， 试着将其拆分为两个部分： 独立于其他代码的核心功能将作为发布者； 其他代码则将转化为一组订阅类。</p></li><li><p>声明订阅者接口。 该接口至少应声明一个 <code>update</code>方法。</p></li><li><p>声明发布者接口并定义一些接口来在列表中添加和删除订阅对象。 记住发布者必须仅通过订阅者接口与它们进行交互。</p></li><li><p>确定存放实际订阅列表的位置并实现订阅方法。 通常所有类型的发布者代码看上去都一样， 因此将列表放置在直接扩展自发布者接口的抽象类中是显而易见的。 具体发布者会扩展该类从而继承所有的订阅行为。</p><p>但是， 如果你需要在现有的类层次结构中应用该模式， 则可以考虑使用组合的方式： 将订阅逻辑放入一个独立的对象， 然后让所有实际订阅者使用该对象。</p></li><li><p>创建具体发布者类。 每次发布者发生了重要事件时都必须通知所有的订阅者。</p></li><li><p>在具体订阅者类中实现通知更新的方法。 绝大部分订阅者需要一些与事件相关的上下文数据。 这些数据可作为通知方法的参数来传递。</p><p>但还有另一种选择。 订阅者接收到通知后直接从通知中获取所有数据。 在这种情况下， 发布者必须通过更新方法将自身传递出去。 另一种不太灵活的方式是通过构造函数将发布者与订阅者永久性地连接起来。</p></li><li><p>客户端必须生成所需的全部订阅者， 并在相应的发布者处完成注册工作。</p></li></ol><h2 id="观察者模式优缺点"><a href="#观察者模式优缺点" class="headerlink" title="观察者模式优缺点"></a>观察者模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong><em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</strong></li><li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。</li><li>观察者模式支持广播通信。</li><li>你可以在运行时建立对象之间的联系。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>订阅者的通知顺序是随机的这一点是不支持的。</li><li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化（可以自己定义，该缺点可以被解决）。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a>、 <a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>、 <a href="https://refactoringguru.cn/design-patterns/mediator">中介者模式</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者模式</a>用于处理请求发送者和接收者之间的不同连接方式：</p><ul><li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li><li><em>命令</em>在发送者和请求者之间建立单向连接。</li><li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li><li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li></ul></li><li><p><a href="https://refactoringguru.cn/design-patterns/mediator">中介者</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者</a>之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</p><p><em>中介者</em>的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 <em>观察者</em>的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p><p>有一种流行的中介者模式实现方式依赖于<em>观察者</em>。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当<em>中介者</em>以这种方式实现时， 它可能看上去与<em>观察者</em>非常相似。</p><p>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和<em>观察者</em>并不相同， 但这仍是一种中介者模式。</p><p>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之观察者模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之观察者模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之观察者模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之中介者模式</title>
    <link href="https://devildyw.github.io/2022/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-03T04:13:53.000Z</published>
    <updated>2022-09-03T04:33:13.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之中介者模式"><a href="#设计模式–行为型模式之中介者模式" class="headerlink" title="设计模式–行为型模式之中介者模式"></a>设计模式–行为型模式之中介者模式</h1><blockquote><p>定义一个对象来封装一系列对象的交互。中介者模式使各对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间地交互</p></blockquote><h2 id="场景介绍："><a href="#场景介绍：" class="headerlink" title="场景介绍："></a>场景介绍：</h2><p><strong>房产中介</strong></p><ol><li>假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218895.png" alt="img"></p><ol><li>实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218868.png" alt="img"></p><ol><li>这就是一个典型的“中介者模式”，总经理起到一个中介、协调的作用</li></ol><p><strong>实现核心</strong></p><p>  如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象称为”同事对象”，我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为星型结构。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218017.png" alt="img"></p><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><ul><li>在用户与用户直接聊天的设计方案中，用户对象之间存在很强的关联性，将导致系统出现如下问题：</li><li>系统结构复杂：对象之间存在大量的相互关联和调用，若有一个对象发生变化，则需要跟踪和该对象关联的其他所有对象，并进行适当处理。</li><li>对象可重用性差：由于一个对象和其他对象具有很强的关联，若没有其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现出来更像一个不可分割的整体，职责较为混乱。</li><li>系统扩展性低：增加一个新的对象需要在原有相关对象上增加引用，增加新的引用关系也需要调整原有对象，系统耦合度很高，对象操作很不灵活，扩展性差。</li><li>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。</li><li>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，这就是中介者模式的模式动机。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>中介者模式包含如下角色：</p><ul><li><strong>Mediator: 抽象中介者</strong> 定义一个接口，该接口用于与各同事对象之间的通信；</li><li><strong>ConcreteMediator: 具体中介者</strong> 是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li><li><strong>Colleague: 抽象同事类</strong> 定义各同事的公有方法；</li><li><strong>ConcreteColleague: 具体同事类</strong> 是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li></ul><p><strong>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219661.jpeg" alt="../_images/Mediator.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219678.jpeg" alt="../_images/seq_Mediator.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象中介者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 同事</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String dname, Department d)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(String dname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体中介者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">President</span> <span class="keyword">implements</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Department&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Department&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String dname, Department d)</span> &#123;</span><br><span class="line">        map.put(dname,d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        map.get(dname).selfAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象同事类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同事类的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span>; <span class="comment">//做本部门的事情</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span>; <span class="comment">//向总经理发出申请</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体同事类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 财务部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Financial</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Financial</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        <span class="comment">//注册到中介者的管理列表中</span></span><br><span class="line">        mediator.register(<span class="string">&quot;financial&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供资金支持！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开发部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Development</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Development</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        mediator.register(<span class="string">&quot;development&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汇报工作！没钱了，需要资金支持！&quot;</span>);</span><br><span class="line">        <span class="comment">//中介者做协同处理 并不用我们单独去调用指定对象完成操作 而是借助了中介者</span></span><br><span class="line">        mediator.command(<span class="string">&quot;financial&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;专心科研，开发项目！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 市场部 同事类的具体实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Market</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Market</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        mediator.register(<span class="string">&quot;market&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汇报工作！项目承接的进度，需要资金支持！&quot;</span>);</span><br><span class="line"><span class="comment">//中介者做协同处理 并不用我们单独去调用指定对象完成操作 而是借助了中介者</span></span><br><span class="line">        mediator.command(<span class="string">&quot;financial&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑去接项目！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取中介者对象</span></span><br><span class="line">        <span class="type">Mediator</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">President</span>();</span><br><span class="line">        <span class="comment">//获取同事对象，实例化的时候会在中介者对象中注册</span></span><br><span class="line">        <span class="type">Market</span> <span class="variable">market</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Market</span>(m);</span><br><span class="line">        <span class="type">Development</span> <span class="variable">development</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Development</span>(m);</span><br><span class="line">        <span class="type">Financial</span> <span class="variable">financial</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Financial</span>(m);</span><br><span class="line"></span><br><span class="line">        market.selfAction();</span><br><span class="line">        market.outAction();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过中介者的加入，将同事类之间的耦合关系松散，当同事之间有调用关系时，并不是通过添加引用直接调用，而是通过中介者完成协调。将这样的调用关系全部交给中介者。</strong></p><p><strong>执行结果：</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031226123.png" alt="image-20220903122604085"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>中介者模式可以使对象之间的关系数量急剧减少。</p><p>中介者承担两方面的职责：</p><ul><li>中转作用（结构性）：<strong>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</strong></li><li>协调作用（行为性）：<strong>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</strong></li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219419.jpeg" alt="../_images/Mediator_eg.jpg"></p><p>时序图</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219158.jpeg" alt="../_images/seq_Mediator_eg.jpg"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>实例：虚拟聊天室</p><p>某论坛系统欲增加一个虚拟聊天室，允许论坛会员通过该聊天室进行信息交流，普通会员(CommonMember)可以给其他会员发送文本信息，钻石会员(DiamondMember)既可以给其他会员发送文本信息，还可以发送图片信息。该聊天室可以对不雅字符进行过滤，如“日”等字符；还可以对发送的图片大小进行控制。用中介者模式设计该虚拟聊天室。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>中介者模式的优点</p><ul><li>简化了对象之间的交互。</li><li>将各同事解耦。</li><li>减少子类生成。</li><li>可以简化各同事类的设计和实现。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>中介者模式的缺点</p><ul><li>在具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用中介者模式：</p><ul><li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li><li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li><li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p><strong>MVC架构中控制器</strong></p><p>Controller 作为一种中介者，它负责控制视图对象View和模型对象Model之间的交互。如在Struts中，Action就可以作为JSP页面与业务对象之间的中介者。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>中介者模式与迪米特法则</p><ul><li>在中介者模式中，<strong>通过创造出一个中介者对象，将系统中有关的对象所引用的其他对象数目减少到最少</strong>，使得一个对象与其同事之间的相互作用被这个对象与中介者对象之间的相互作用所取代。因此，<strong>中介者模式就是迪米特法则的一个典型应用。</strong></li></ul><p>中介者模式与GUI开发</p><ul><li>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。</li><li>对于这些复杂的交互关系，有时候我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，这也是中介者模式的常见应用之一。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</li><li>中介者模式包含四个角色：抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；抽象同事类定义各同事的公有方法；具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li><li>通过引入中介者对象，可以将系统的网状结构变成以中介者为中心的星形结构，中介者承担了中转作用和协调作用。中介者类是中介者模式的核心，它对整个系统进行控制和协调，简化了对象之间的交互，还可以对对象间的交互进行进一步的控制。</li><li>中介者模式的主要优点在于简化了对象之间的交互，将各同事解耦，还可以减少子类生成，对于复杂的对象之间的交互，通过引入中介者，可以简化各同事类的设计和实现；中介者模式主要缺点在于具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li><li>中介者模式适用情况包括：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解；一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象；想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之中介者模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之中介者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之中介者模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之中介者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;定</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之命令模式</title>
    <link href="https://devildyw.github.io/2022/09/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-01T13:34:46.000Z</published>
    <updated>2022-09-02T05:12:34.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之命令模式"><a href="#设计模式–行为型模式之命令模式" class="headerlink" title="设计模式–行为型模式之命令模式"></a>设计模式–行为型模式之命令模式</h1><blockquote><p>将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作</p></blockquote><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。</p><p>命令模式可以对发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。这就是命令模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>命令模式包含如下角色：</p><ul><li><strong>Command: 抽象命令类</strong> 抽象命令类中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作；</li><li><strong>ConcreteCommand: 具体命令类</strong> 抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li><li><strong>Invoker: 调用者</strong> 请求的发送者，又称为请求者，它通过命令对象来执行请求；</li><li><strong>Receiver: 接收者</strong> 接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li><li><strong>Client:客户类</strong></li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255066.jpeg" alt="../_images/Command.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255813.jpeg" alt="../_images/seq_Command.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象命令类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:53</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 抽象命令角色</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 对子类的规范约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体命令类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:56</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 具体命令对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 将会调用命令接收的方法 只是将一条一条的命令封装成了对象(请求) 命令始终是命令 真正执行的是接收命令的并执行的角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.turnOFF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.turnOFF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:59</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 命令调用者 负责调用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 客户端通过将具体的命令对象创建后  传入该对象即可调用对应的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:57</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 命令接收者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 正则执行命令的角色 命令对象内部会调用该对象的方法完成真正的命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnON</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行开灯操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOFF</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行关灯操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-23:04</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户发送请求的客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//配置客户端</span></span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        <span class="comment">//创建请求</span></span><br><span class="line">        <span class="type">LightOnCommand</span> <span class="variable">lightOnCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOnCommand</span>(receiver);</span><br><span class="line">        <span class="type">LightOffCommand</span> <span class="variable">lightOffCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOffCommand</span>(receiver);</span><br><span class="line">        <span class="comment">//发送请求 并执行</span></span><br><span class="line">        invoker.execute(lightOnCommand);</span><br><span class="line">        invoker.execute(lightOffCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021307264.png" alt="image-20220902130729225"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p><strong>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。</strong></p><ul><li>每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。</li><li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li><li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li><li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>实例一：电视机遥控器</p><ul><li>电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。显然，电视机遥控器就是一个典型的命令模式应用实例。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255802.jpeg" alt="../_images/Command_eg.jpg"></p><p>时序图:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255789.jpeg" alt="../_images/seq_Command_eg.jpg"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>命令模式的优点</p><ul><li>降低系统的耦合度。</li><li>新的命令可以很容易地加入到系统中。</li><li>可以比较容易地设计一个命令队列和宏命令（组合命令）。</li><li>可以方便地实现对请求的Undo和Redo。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>命令模式的缺点</p><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用命令模式：</p><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li><li>系统需要将一组操作组合在一起，即支持宏命令</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>很多系统都提供了宏命令功能，如UNIX平台下的Shell编程，可以将多条命令封装在一个命令对象中，只需要一条简单的命令即可执行一个命令序列，这也是命令模式的应用实例之一。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>宏命令又称为组合命令，它是命令模式和组合模式联用的产物。</p><p>-宏命令也是一个具体命令，不过它包含了对其他命令对象的引用，在调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员对象可以是简单命令，还可以继续是宏命令。执行一个宏命令将执行多个具体命令，从而实现对命令的批处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在命令模式中，将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li><li>命令模式包含四个角色：抽象命令类中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作；具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li><li>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li><li>命令模式的主要优点在于降低系统的耦合度，增加新的命令很方便，而且可以比较容易地设计一个命令队列和宏命令，并方便地实现对请求的撤销和恢复；其主要缺点在于可能会导致某些系统有过多的具体命令类。</li><li>命令模式适用情况包括：需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互；需要在不同的时间指定请求、将请求排队和执行请求；需要支持命令的撤销操作和恢复操作，需要将一组操作组合在一起，即支持宏命令。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之命令模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之命令模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之命令模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将一个请求</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之代理模式</title>
    <link href="https://devildyw.github.io/2022/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-30T03:57:19.000Z</published>
    <updated>2022-08-30T04:17:10.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之代理模式"><a href="#设计模式–结构型模式之代理模式" class="headerlink" title="设计模式–结构型模式之代理模式"></a>设计模式–结构型模式之代理模式</h1><blockquote><p>给某一个对象提供一个代理或占位符，并且代理对象来控制对原对象的访问</p></blockquote><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>在某些情况下，一个客户不想或者不能直接引用一个对 象，此时可以通过一个称之为“代理”的第三者来实现 间接引用。代理对象可以在客户端和目标对象之间起到 <strong>中介</strong>的作用，<strong>并且可以通过代理对象去掉客户不能看到 的内容和服务或者添加客户需要的额外服务。</strong></p><p>通过引入一个新的对象（如小图片和远程代理 对象）来实现对真实对象的操作或者将新的对 象作为真实对象的一个替身，这种实现机制即 为代理模式，通过引入代理对象来间接访问一 个对象，这就是代理模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>代理模式包含如下角色：</p><ul><li><strong>Subject: 抽象主题角色</strong> 声明了真实主题和代理主题的共同接口；</li><li><strong>Proxy: 代理主题角色</strong> 内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象，<strong>控制和限制被代理角色的实现，并且拥有自己的处理方法（预处理和善后）</strong>；</li><li><strong>RealSubject: 真实主题角色</strong> 定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301159203.jpeg" alt="../_images/Proxy.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301159540.jpeg" alt="../_images/seq_Proxy.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Star</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">&quot;: 经纪人接了一部电影,我负责拍就好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理对象  代理角色持有被代理角色的引用</span></span><br><span class="line">    <span class="keyword">private</span> Subject star;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Agent</span><span class="params">(Subject star)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为代理角色添加了额外的服务 这里是接戏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">&quot;: 剧本很好，这部电影接下了&quot;</span>);</span><br><span class="line">        star.movie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端Client：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">star</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Agent</span>(star);</span><br><span class="line">        </span><br><span class="line">        proxy.movie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301205678.png" alt="image-20220830120554645"></p><p>代理角色持有被代理角色的引用，<strong>要访问被代理角色必须通过代理</strong>，负责被代理角色本职之外的职能，并且具有准入和过滤的功能。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>代理模式的优点</p><ul><li><strong>代理模式能够协调调用者和被调用者，在一定程度上降低了系 统的耦合度。</strong></li><li><strong>远程代理使得客户端可以访问在远程机器上的对象，远程机器 可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</strong></li><li><strong>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系 统资源的消耗，对系统进行优化并提高运行速度。</strong></li><li><strong>保护代理可以控制对真实对象的使用权限。</strong></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>代理模式的缺点</p><ul><li><strong>由于在客户端和真实主题之间增加了代理对象，因此 有些类型的代理模式可能会造成请求的处理速度变慢。</strong></li><li><strong>实现代理模式需要额外的工作，有些代理模式的实现 非常复杂。</strong></li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>根据代理模式的使用目的，常见的代理模式有以下几种类型：</p><ul><li>远程(Remote)代理：为一个位于不同的地址空间的对象提供一个本地 的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在 另一台主机中，远程代理又叫做大使(Ambassador)。</li><li>虚拟(Virtual)代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li><li>Copy-on-Write代理：它是虚拟代理的一种，把复制（克隆）操作延迟 到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个 开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。</li><li>保护(Protect or Access)代理：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li><li>缓冲(Cache)代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>防火墙(Firewall)代理：保护目标不让恶意用户接近。</li><li>同步化(Synchronization)代理：使几个用户能够同时使用一个对象而没有冲突。</li><li>智能引用(Smart Reference)代理：当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>EJB、Web Service等分布式技术都是代理模式的应用。在EJB中使用了RMI机制，远程服务器中的企业级Bean在本地有一个桩代理，客户端通过桩来调用远程对象中定义的方法，而无须直接与远程对象交互。在EJB的使用中需要提供一个公共的接口，客户端针对该接口进行编程，无须知道桩以及远程EJB的实现细节。</p><p><strong>在调用某个接口前后做日志处理，这时使用代理也可以满足对修改关闭，对扩展开发的原则。（用动态代理做更方便，更轻便）</strong></p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>几种常用的代理模式</p><ul><li>图片代理：一个很常见的代理模式的应用实例就是对大图浏览的控制。</li><li>用户通过浏览器访问网页时先不加载真实的大图，而是通过代理对象的方法来进行处理，在代理对象的方法中，先使用一个线程向客户端浏览器加载一个小图片，然后在后台使用另一个线程来调用大图片的加载方法将大图片加载到客户端。当需要浏览大图片时，再将大图片在新网页中显示。如果用户在浏览大图时加载工作还没有完成，可以再启动一个线程来显示相应的提示信息。通过代理技术结合多线程编程将真实图片的加载放到后台来操作，不影响前台图片的浏览。</li><li>远程代理：远程代理可以将网络的细节隐藏起来，使得客户端不必考虑网络的存在。客户完全可以认为被代理的远程业务对象是局域的而不是远程的，而远程代理对象承担了大部分的网络通信工作。</li><li>虚拟代理：当一个对象的加载十分耗费资源的时候，虚拟代理的优势就非常明显地体现出来了。虚拟代理模式是一种内存节省技术，那些占用大量内存或处理复杂的对象将推迟到使用它的时候才创建。</li></ul><p>-在应用程序启动的时候，可以用代理对象代替真实对象初始化，节省了内存的占用，并大大加速了系统的启动时间。</p><p><strong>动态代理</strong></p><ul><li>动态代理是一种较为高级的代理模式，它的典型应用就是Spring AOP。</li><li>在传统的代理模式中，客户端通过Proxy调用RealSubject类的request()方法，同时还在代理类中封装了其他方法(如preRequest()和postRequest())，可以处理一些其他问题。</li><li>如果按照这种方法使用代理模式，那么真实主题角色必须是事先已经存在的，并将其作为代理对象的内部成员属性。如果一个真实主题角色必须对应一个代理主题角色，这将导致系统中的类个数急剧增加，因此需要想办法减少系统中类的个数，此外，如何在事先不知道真实主题角色的情况下使用代理主题角色，这都是动态代理需要解决的问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在代理模式中，要求给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。 - 代理模式包含三个角色：抽象主题角色声明了真实主题和代理主题的共同接口；代理主题角色内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象；真实主题角色定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。 - 代理模式的优点在于能够协调调用者和被调用者，在一定程度上降低了系统的耦合度；其缺点在于由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，并且实现代理模式需要额外的工作，有些代理模式的实现非常复杂。远程代理为一个位于不同的地址空间的对象提供一个本地的代表对象，它使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。- 如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建，这个小对象称为虚拟代理。虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。 - 保护代理可以控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</p><blockquote><p>后续会学习 Java的动态代理。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之代理模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之代理模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给某一个对</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之享元模式</title>
    <link href="https://devildyw.github.io/2022/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-29T04:07:31.000Z</published>
    <updated>2022-08-29T05:26:12.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之享元模式"><a href="#设计模式–结构型模式之享元模式" class="headerlink" title="设计模式–结构型模式之享元模式"></a>设计模式–结构型模式之享元模式</h1><blockquote><p>运用共享技术有效地支持大量细粒度对象的复用</p></blockquote><blockquote><p>spring的常量池、数据库连接池、缓冲池等等这些都是享元模式的应用</p><p>比如：我们每次创建字符串对象时，如果每次都创建一个新的字符串对象的话，内存开销会很大，所以如果第一次创建了字符串对象“七夕“，下次再创建相同的字符串”七夕“时，只是把它的引用指向”七夕“，这样就实现了”七夕“字符串再内存中的共享。</p></blockquote><p><strong>享元拆开来讲，享，即共享，元，可以理解为元数据，内存当中的数据，对象。看来是共享对象喽</strong></p><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>面向对象技术可以很好地解决一些灵活性或可扩展性问题，但在很多情况下需要在系统中增加类和对象的个数。当对象数量太多时，将导致运行代价过高，带来性能下降等问题。</p><ul><li>享元模式正是为解决这一类问题而诞生的。享元模式通过共享技术实现相同或相似对象的重用。</li><li>在享元模式中可以共享的相同内容称为内部状态(IntrinsicState)，而那些需要外部环境来设置的不能共享的内容称为外部状态(Extrinsic State)，由于区分了内部状态和外部状态，因此可以通过设置不同的外部状态使得相同的对象可以具有一些不同的特征，而相同的内部状态是可以共享的。</li><li>在享元模式中通常会出现工厂模式，需要创建一个享元工厂来负责维护一个享元池(Flyweight Pool)用于存储具有相同内部状态的享元对象。</li><li>在享元模式中共享的是享元对象的内部状态，外部状态需要通过环境来设置。在实际使用中，能够共享的内部状态是有限的，因此享元对象一般都设计为较小的对象，它所包含的内部状态较少，这种对象也称为细粒度对象。享元模式的目的就是使用共享技术来实现大量细粒度对象的复用。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>享元模式(Flyweight Pattern)：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>享元模式包含如下角色：</p><ul><li><strong>Flyweight: 抽象享元类</strong> 定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态。</li><li><strong>ConcreteFlyweight: 具体享元类</strong> 能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。</li><li><strong>UnsharedConcreteFlyweight: 非共享具体享元类</strong> 不复用享元工厂内部状态，但实现享元类的具体实现类。</li><li><strong>FlyweightFactory: 享元工厂类</strong> 管理一个享元对象类的缓存池</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291310426.jpeg" alt="../_images/Flyweight.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291310753.jpeg" alt="../_images/seq_Flyweight.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p><p>对于相同颜色不同坐标的圆，我们可以将原有颜色的圆复用，这样可以减少很多内存空间，如果不进行复用而是每个坐标每个颜色圆都创建新的对象，那么该示例中就会出现20个新增对象。</p><p><strong>抽象享元类</strong> 创建一个Shape接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体享元类</strong> 创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//x坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//y坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">int</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle: Draw()[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, x=&quot;</span> + x +</span><br><span class="line">                <span class="string">&quot;, y=&quot;</span> + y +</span><br><span class="line">                <span class="string">&quot;, radius=&quot;</span> + radius +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>享元工厂类</strong> 创建一个工厂，生成基于给定信息的实体类的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个缓存池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color 颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Shape</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getCircle</span><span class="params">(String color)</span>&#123;</span><br><span class="line">        <span class="comment">//从缓存池中获取 防止每次都生成新的对象导致内存中对象数量太多(节约内存空间)</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) circleMap.get(color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓冲池中没有 才去创建新的对象 并且将创建好的对象加入缓存池中</span></span><br><span class="line">        <span class="keyword">if</span> (circle == <span class="literal">null</span>)&#123;</span><br><span class="line">            circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(color);</span><br><span class="line">            circleMap.put(color,circle);</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating circle of color : &quot;</span> + color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong> 使用该工厂，通过传递颜色信息来获取实体类的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String colors[] = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;White&quot;</span>, <span class="string">&quot;Black&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) ShapeFactory.getCircle(getRandomColor());</span><br><span class="line">            circle.setX(getRandomX());</span><br><span class="line">            circle.setY(getRandomY());</span><br><span class="line">            circle.setRadius(<span class="number">100</span>);</span><br><span class="line">            circle.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colors[(<span class="type">int</span>) (Math.random() * colors.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机x坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机y坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291319413.png" alt="image-20220829131943337"></p><p>可以发现我们花了20个不同坐标不同颜色的圆，但实际上只创建了5个对象。</p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>享元模式是一个考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。</p><p>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</p><p><strong>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。</strong></p><ul><li><strong>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享（例如该示例中的圆的颜色）。</strong></li><li><strong>外部状态是随环境改变而改变的、不可以共享的状态（例如该示例中圆的坐标）。</strong>享元对象的外部状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>spring的常量池、数据库连接池、缓冲池等；英雄联盟中，一台服务器要连接多个客户端（多个玩家），如果每个玩家进去地图都要创建对象，那对象将无数啊。。。。。所以这里要使用享元模式，将地图对象减少到几个实例。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>享元模式的优点</p><ul><li>享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li><li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>享元模式的缺点</p><ul><li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li><li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用享元模式：</p><ul><li>一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>享元模式在编辑器软件中大量使用，如在一个文档中多次出现相同的图片，则只需要创建一个图片对象，通过在应用程序中设置该图片出现的位置，可以实现该图片在不同地方多次重复显示。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>单纯享元模式和复合享元模式</p><ul><li>单纯享元模式：在单纯享元模式中，所有的享元对象都是可以共享的，即所有抽象享元类的子类都可共享，不存在非共享具体享元类。</li><li>复合享元模式：将一些单纯享元使用组合模式加以组合，可以形成复合享元对象，这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</li></ul><p>享元模式与其他模式的联用</p><ul><li>在享元模式的享元工厂类中通常提供一个静态的工厂方法用于返回享元对象，使用简单工厂模式来生成享元对象。</li><li>在一个系统中，通常只有唯一一个享元工厂，因此享元工厂类可以使用单例模式进行设计。</li><li>享元模式可以结合组合模式形成复合享元模式，统一对享元对象设置外部状态。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li><li>享元模式包含四个角色：抽象享元类声明一个接口，通过它可以接受并作用于外部状态；具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li><li>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态和外部状态。其中内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享；外部状态是随环境改变而改变的、不可以共享的状态。</li><li>享元模式主要优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；其缺点是使得系统更加复杂，并且需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li><li>享元模式适用情况包括：一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费；对象的大部分状态都可以外部化，可以将这些外部状态传入对象中；多次重复使用享元对象。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之享元模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之享元模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之享元模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之享元模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;运用共享技</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之外观模式</title>
    <link href="https://devildyw.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-28T03:59:27.000Z</published>
    <updated>2022-08-28T05:33:39.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之外观模式"><a href="#设计模式–结构型模式之外观模式" class="headerlink" title="设计模式–结构型模式之外观模式"></a>设计模式–结构型模式之外观模式</h1><blockquote><p>为子系统的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p></blockquote><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>外观模式包含如下角色：</p><ul><li><strong>Facade: 外观角色</strong>  客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li><li><strong>SubSystem:子系统角色</strong> 在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281326965.jpeg" alt="../_images/Facade.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281325570.jpeg" alt="../_images/seq_Facade.jpg"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。 -外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。 - 外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。 -外观模式的目的在于降低系统的复杂程度。 -外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设一台电脑，它包含了 CPU（处理器），Memory（内存） ，Disk（硬盘）这几个部件，若想要启动电脑，则先后必须启动 CPU、Memory、Disk。关闭也是如此。</p><p>但是实际上我们在电脑开&#x2F;关机时根本不需要去操作这些组件，因为电脑已经帮我们都处理好了，并隐藏了这些东西。</p><p>这些组件好比子系统角色，而电脑就是一个外观角色。</p><h3 id="SubSystem-子系统角色"><a href="#SubSystem-子系统角色" class="headerlink" title="SubSystem 子系统角色"></a>SubSystem 子系统角色</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Facade-外观角色"><a href="#Facade-外观角色" class="headerlink" title="Facade 外观角色"></a>Facade 外观角色</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = <span class="keyword">new</span> <span class="title class_">CPU</span>();</span><br><span class="line">        <span class="built_in">this</span>.memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        <span class="built_in">this</span>.disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机时 computer的startup方法 帮助我们调用了各个组件的开机方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start the computer!&quot;</span>);</span><br><span class="line">        cpu.startup();</span><br><span class="line">        memory.startup();</span><br><span class="line">        disk.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;start computer finished!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关机时 computer的shutdown方法 帮助我们调用了各个组件的关机方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin to close the computer!&quot;</span>);</span><br><span class="line">        cpu.shutdown();</span><br><span class="line">        memory.shutdown();</span><br><span class="line">        disk.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;computer closed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281331933.png" alt="image-20220828133152882"></p><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>外观模式的优点</p><ul><li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li><li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li><li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>外观模式的缺点</p><ul><li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用外观模式：</p><ul><li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li><li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li><li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li></ul><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><ul><li><p>一个系统有多个外观类</p><p>在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。</p></li><li><p>不要试图通过外观类为子系统增加新行为</p><p>不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。</p></li><li><p>外观模式与迪米特法则</p><p>外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的“第三者”，降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。</p></li><li><p>抽象外观类的引入</p><p>外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li><li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li><li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li><li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之外观模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之外观模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之外观模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之外观模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为子系统的</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之装饰模式</title>
    <link href="https://devildyw.github.io/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-27T03:26:46.000Z</published>
    <updated>2022-08-27T04:52:05.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之装饰模式"><a href="#设计模式–结构型模式之装饰模式" class="headerlink" title="设计模式–结构型模式之装饰模式"></a>设计模式–结构型模式之装饰模式</h1><blockquote><p>动态地给一个对象增加一些额外的职责，就扩展功能而言，装饰模式提供了一种比使用子类更加灵活的替代方案</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>有时我们希望给某个对象而不是整个类添加一些功能，虽然使用继承是添加功能的一种方式，但是不够灵活，而且会导致子类增加了无用功能，耦合性太强。一种较为灵活的方式是将对象嵌入另一个对象中，通过该对象添加功能，称这个嵌入的对象为装饰。这个装饰与被装饰的对象接口一致，它将请求转发给被装饰对象，并在转发的前后进行额外操作。 装饰模式就是<strong>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。</strong></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>装饰模式包含如下角色：</p><ul><li><strong>Component: 抽象构件</strong> 定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li><li><strong>ConcreteComponent: 具体构件（也可称为被装饰者）</strong> 具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li><li><strong>Decorator: 抽象装饰类</strong>   抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li><li><strong>ConcreteDecorator: 具体装饰类（装饰者）</strong> 具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li></ul><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>模式名称：<strong>DECORATOR</strong>（装饰）</li><li>类型：对象结构型模式</li><li>意图：动态地给一个对象添加一些额外的职责。就增加功能来说， Decorator模式相比生成子类更为灵活。</li><li>适用性：<ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li></ul></li><li>效果：</li><li>优点：<ul><li>比继承更灵活。</li><li>避免在层次结构高层的类有太多的特征。</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”</li></ul></li><li>缺点：<ul><li>多层装饰比较复杂，加大学习与理解的难度</li><li>较与继承更加容易出错，排错也比较困难。</li></ul></li></ul><h2 id="下面通过一个例子，来深入理解装饰模式"><a href="#下面通过一个例子，来深入理解装饰模式" class="headerlink" title="下面通过一个例子，来深入理解装饰模式"></a>下面通过一个例子，来深入理解装饰模式</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">有一家咖啡店，生意很火爆，想要更新订单系统，来满足目前的饮料供应需求。原先的设计如下：</span><br><span class="line">有一个饮料的抽象类，所有的饮品都继承此类。类中包含了变量 description(描述)，和方法 getDescription()获取描述信息，以及抽象方法cost()花费。子类要实现cost方法。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225090.webp" alt="image.png"></p><p>在原先饮品种类少的情况还可以，如果说为了提高市场竞争力和消费升级，要增加多种饮品，并按照加入的不同调味品收取不同的费用。要是还按照之前的方式创建子类实现cost，就会造成子类过多，并且如果某一种调味料价格有变动，需要修改的类就很多，不利于维护。</p><p>这时可能会说直接在饮料类中添加调味料变量，设置和获取是否有某种调味料的方法就好了，将饮料类中cost方法提供实现，用于判断调味料的价钱，子类只需 计算自己的价值，配置有哪种调料，并加上父类的就行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饮料类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> milkCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> soyCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> mochaCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> whipCost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasMilk;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasSoy;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasMocha;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasWhip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasMilk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasMilk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasMilk</span><span class="params">(<span class="type">boolean</span> hasMilk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasMilk = hasMilk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasSoy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasSoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasSoy</span><span class="params">(<span class="type">boolean</span> hasSoy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasSoy = hasSoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasMocha</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasMocha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasMocha</span><span class="params">(<span class="type">boolean</span> hasMocha)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasMocha = hasMocha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasWhip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasWhip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasWhip</span><span class="params">(<span class="type">boolean</span> hasWhip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasWhip = hasWhip;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">condimentCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(hasMilk)&#123;</span><br><span class="line">            condimentCost+=milkCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasMocha)&#123;</span><br><span class="line">            condimentCost+=mochaCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasSoy)&#123;</span><br><span class="line">            condimentCost+=soyCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasWhip)&#123;</span><br><span class="line">            condimentCost+= whipCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> condimentCost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoast</span><span class="params">()</span> &#123;</span><br><span class="line">        setDescription(<span class="string">&quot;Most Excellent Dark Roast&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.3</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式存在几个问题：</p><ol><li>调料价格变东需要修改现有代码</li><li>添加或删除新的调料，需要变动相应的变量和方法，以及 cost的计算。</li><li>如果有新的饮料不适合原有调料加入，子类依然有这些没用的调料。</li><li>如果想要双倍调料还需要修改cost并且添加变量。 由此看出这种方式明显违反了设计原则中的 开闭原则：对扩展开放，对修改关闭。在例子中，变化的是每种饮料的价格，价格需要根据调味品发生改变。那就先以饮料作为对象，用调味品对象装饰。</li></ol><p>装饰模式类图结构</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225028.webp" alt="image.png"></p><p>从中可以看出：</p><ol><li>装饰者和被装饰着有相同的父类</li><li>可以使用一个或多个装饰类装饰对象</li><li>装饰对象可以替代被装饰类对象。</li><li>装饰对象可以在被装饰者的行为执行前后进行操作。</li></ol><p>根据装饰者模式进行调整</p><ol><li>先将饮料作为被封装者</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225061.webp" alt="image.png"></p><p>2.用摩卡装饰饮料</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225111.webp" alt="image.png"></p><p>3.再将被摩卡装饰的对象作为被装饰者，使用 奶泡进行装饰</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225312.webp" alt="image.png"></p><p>下面来看下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">装饰和被装饰的父类 </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被装饰者类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DarkRoast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.3</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者的父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CondimentDecorator</span> <span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Beverage <span class="title function_">getBeverage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mocha</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mocha</span><span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getBeverage().getDescription()+<span class="string">&quot; Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeverage().cost()+<span class="number">.20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Whip</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Whip</span><span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getBeverage().getDescription()+<span class="string">&quot; Whip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeverage().cost()+<span class="number">.10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用情况</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明了具体构建</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DarkRoast</span>();</span><br><span class="line">        System.out.println(beverage.getDescription()+<span class="string">&quot; $ &quot;</span>+beverage.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对其进行装饰</span></span><br><span class="line">        <span class="type">Mocha</span> <span class="variable">mocha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage);</span><br><span class="line">        System.out.println(mocha.getDescription()+<span class="string">&quot; $ &quot;</span>+mocha.cost());</span><br><span class="line"></span><br><span class="line">        <span class="type">Whip</span> <span class="variable">whip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Whip</span>(beverage);</span><br><span class="line">        System.out.println(whip.getDescription()+<span class="string">&quot; $ &quot;</span>+ whip.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271250750.png" alt="image-20220827124904754"></p><h2 id="Java-I-x2F-O的装饰模式"><a href="#Java-I-x2F-O的装饰模式" class="headerlink" title="Java I&#x2F;O的装饰模式"></a>Java I&#x2F;O的装饰模式</h2><p>java.io包内的类看起来比较多，其实就是利用了装饰模式</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225042.webp" alt="image.png"></p><p>其中：<code>InputStream</code>是装饰类和被装饰类的父类；<code>FileInputStream</code>，<code>StringBufferInputStream</code>，<code>ByteArrayInputStream</code>是被装饰类， <code>FilterInputStream</code>是装饰类的父类，<code>BufferedInputStream</code>，<code>LineNumberInputStream</code>，<code>DataInputStream</code>是装饰类。</p><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><p>在以下情况下可以使用装饰模式：</p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。</li><li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类定义不能继承（如final类）.</li></ul><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>装饰模式的简化-需要注意的问题:</p><ul><li>一个装饰类的接口必须与被装饰类的接口保持相同，对于客户端来说无论是装饰之前的对象还是装饰之后的对象都可以一致对待。</li><li>尽量保持具体构件类Component作为一个“轻”类，也就是说不要把太多的逻辑和状态放在具体构件类中，可以通过装饰类</li></ul><p>对其进行扩展。 - 如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之装饰模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之装饰模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之装饰模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之装饰模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;动态地给一</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之桥接模式</title>
    <link href="https://devildyw.github.io/2022/08/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-26T08:15:05.000Z</published>
    <updated>2022-08-27T04:38:11.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之桥接模式"><a href="#设计模式–结构型模式之桥接模式" class="headerlink" title="设计模式–结构型模式之桥接模式"></a>设计模式–结构型模式之桥接模式</h1><blockquote><p>将抽象部分与它的实现部分解耦，使得两个都能够独立变化</p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote><p>推荐一读的概述</p></blockquote><p>毛笔和蜡笔是两种很常见的文具，它们都归属于画笔。假设需要大、中、小 3 种型号的画笔，能够绘制 12 种不同的颜色，如果使用蜡笔，需要准备 3 × 12 &#x3D; 36 支，但是如果使用毛笔，只需要提供 3 种型号的毛笔，外加一个包含 12 种颜色的调色板，涉及的对象个数仅为 3 + 12 &#x3D; 15，远小于 36 ，却能够实现 36 支蜡笔同样的功能。如果增加一种新型号的画笔，并且也需要具有 12 种颜色，对应的蜡笔需要增加 12 支，而毛笔只需要增加 1 支。</p><p>不难得知，在蜡笔中，颜色和型号两个不同的变化维度耦合在一起，无论是对颜色进行扩展还是对型号进行扩展势必会影响另一个维度；但在毛笔中，颜色和型号实现了分离，增加新的颜色或者型号对另一方没有任何影响。如果使用软件工程中的术语，可以认为在蜡笔中颜色和型号之间存在较强的耦合性，而毛笔很好地将二者解耦，使用起来更加的灵活，扩展也更为方便。在软件开发中有一种设计模式可以用来处理与画笔类似的具有多变化维度的情况，这就是<strong>桥接模式</strong>。</p><p>在桥接模式中将两个独立变化的维度设计为两个独立的继承等级结构，而不是将二者耦合在一起形成多层继承结构。桥接模式在抽象层建立起一个抽象关联，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p><blockquote><p><strong>桥接模式</strong>：将抽象部分与它的实现部分解耦，使得两者都能够独立变化。</p></blockquote><p>桥接模式是一种对象结构型模式，它又被称为柄体（Handle and Body）模式或接口（Interface）模式。桥接模式用一种巧妙地方式处理多层继承存在的问题，用抽象关系取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效地控制了系统中类的个数。</p><h2 id="2-结构与实现"><a href="#2-结构与实现" class="headerlink" title="2 结构与实现"></a>2 结构与实现</h2><h3 id="2-1-桥接模式结构"><a href="#2-1-桥接模式结构" class="headerlink" title="2.1 桥接模式结构"></a>2.1 桥接模式结构</h3><p>桥接模式包含以下 4 个角色：</p><ol><li>**Abstraction(抽象类)**：其中定义了一个实现类接口类型的对象并可以维护该对象，它与 Implementor 之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</li><li><strong>RefinedAbstraction(扩充抽象类)<strong>：它扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，</strong>在扩充抽象类中可以调用在实现类接口中定义的业务方法；</strong></li><li>**Implementor(实现类接口)**：实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li><li>**ConcreteImplementor(具体实现类)**：具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li></ol><h3 id="2-2-桥接模式举例"><a href="#2-2-桥接模式举例" class="headerlink" title="2.2 桥接模式举例"></a>2.2 桥接模式举例</h3><h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p>某软件公司要开发一个跨平台图像浏览系统，要求该系统能够显示 BMP、JPG、GIF、PNG 等多种格式的文件，并且能够在 Windows、Linux、UNIX 等多个操作系统上运行。系统首先将各种格式的文件解析为像素矩阵（Matrix），然后将像素矩阵显示在屏幕上，在不同的操作系统中可以调用不同的绘制函数来绘制像素矩阵。系统需要具有较好的扩展性，以便在将来支持新的文件格式和操作系统。请使用桥接模式。</p><h4 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261617013.png" alt="image-20220826161740971"></p><h4 id="三、项目-UML"><a href="#三、项目-UML" class="headerlink" title="三、项目 UML"></a>三、项目 UML</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261615858.webp" alt="UML"></p><h4 id="四、抽象类"><a href="#四、抽象类" class="headerlink" title="四、抽象类"></a>四、抽象类</h4><h5 id="Image-抽象类"><a href="#Image-抽象类" class="headerlink" title="Image 抽象类"></a>Image 抽象类</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title class_">OSImpl</span> osImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入实现类接口对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Image</span>(<span class="title class_">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">osImpl</span> = osImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">void</span> <span class="title function_">parseFile</span>(<span class="title class_">String</span> fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="五、扩充抽象类"><a href="#五、扩充抽象类" class="headerlink" title="五、扩充抽象类"></a>五、扩充抽象类</h4><h5 id="BMPImage-扩充抽象类"><a href="#BMPImage-扩充抽象类" class="headerlink" title="BMPImage 扩充抽象类"></a>BMPImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BMPImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">BMPImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为BMP.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JPGImage-扩充抽象类"><a href="#JPGImage-扩充抽象类" class="headerlink" title="JPGImage 扩充抽象类"></a>JPGImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JPGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    public <span class="type">JPGImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为JPG.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="GIFImage-扩充抽象类"><a href="#GIFImage-扩充抽象类" class="headerlink" title="GIFImage 扩充抽象类"></a>GIFImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GIFImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    public <span class="type">GIFImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为GIF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PNGImage-扩充抽象类"><a href="#PNGImage-扩充抽象类" class="headerlink" title="PNGImage 扩充抽象类"></a>PNGImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PNGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">PNGImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为PNG.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="六、实现类接口"><a href="#六、实现类接口" class="headerlink" title="六、实现类接口"></a>六、实现类接口</h4><h5 id="OSImpl"><a href="#OSImpl" class="headerlink" title="OSImpl"></a>OSImpl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPaint</span><span class="params">(Matrix m)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="七、具体实现类"><a href="#七、具体实现类" class="headerlink" title="七、具体实现类"></a>七、具体实现类</h4><h5 id="WindowsImpl"><a href="#WindowsImpl" class="headerlink" title="WindowsImpl"></a>WindowsImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Windows 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinuxImpl"><a href="#LinuxImpl" class="headerlink" title="LinuxImpl"></a>LinuxImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Linux 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="UnixImpl"><a href="#UnixImpl" class="headerlink" title="UnixImpl"></a>UnixImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnixImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Unix 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="八、Matrix-辅助类"><a href="#八、Matrix-辅助类" class="headerlink" title="八、Matrix 辅助类"></a>八、Matrix 辅助类</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九、测试客户类"><a href="#九、测试客户类" class="headerlink" title="九、测试客户类"></a>九、测试客户类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Image image;</span><br><span class="line">        image = <span class="keyword">new</span> <span class="built_in">GIFImage</span>(<span class="keyword">new</span> <span class="built_in">WindowImpl</span>());</span><br><span class="line">        image.<span class="built_in">parseFile</span>(<span class="string">&quot;杜颖淼&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line">        image = <span class="keyword">new</span> <span class="built_in">PNGImage</span>(<span class="keyword">new</span> <span class="built_in">LinuxImpl</span>());</span><br><span class="line">        image.<span class="built_in">parseFile</span>(<span class="string">&quot;这是一个文件&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十、测试结果"><a href="#十、测试结果" class="headerlink" title="十、测试结果"></a>十、测试结果</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261621578.png" alt="image-20220826162105535"></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>从举例容易看出，客户端面向抽象编程，每个维度都有一个高级抽象类，每个维度的具体选项继承自该高级抽象类。<strong>举例中我们通过 xml 配置文件配置各个维度的选择，选择什么类型的图片？选择什么操作系统？实现了不同维度的的解耦。</strong></p><p>桥接模式十设计 Java 虚拟机和实现 JDBC 等驱动程序的核心模式之一，应用较为广泛。在软件开发中如果一个类或一个系统有多个变化维度都可以尝试使用桥接模式对其进行设计。桥接模式为多维度变化的系统提供了一套完整的解决方案，并且降低了系统的复杂度。</p><h3 id="3-1-桥接模式优点"><a href="#3-1-桥接模式优点" class="headerlink" title="3.1 桥接模式优点"></a>3.1 桥接模式优点</h3><ol><li>分离抽象接口及其实现部分。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓的抽象何实现沿着各自维度的变化，也就是说抽象和实现不在同一个继承层次结构中，而是“子类化”它们，使它们各自具有自己的子类，以便任意组合子类，从而获得多维度组合对象。</li><li>在很多情况下，桥接模式可以取代多层继承方案，多层继承方案违背了单一职责原则，复用性较差，并且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大地减少了子类的个数。</li><li>桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度都不需要修改原有系统，符合开闭原则。</li></ol><h3 id="3-2-桥接模式缺点"><a href="#3-2-桥接模式缺点" class="headerlink" title="3.2 桥接模式缺点"></a>3.2 桥接模式缺点</h3><ol><li>桥接模式的使用会增加系统的理解和设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。</li><li>桥接模式要求正确地识别出系统中地两个独立变化的维度，因此其使用的范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。</li></ol><h3 id="3-3-桥接模式适用环境"><a href="#3-3-桥接模式适用环境" class="headerlink" title="3.3 桥接模式适用环境"></a>3.3 桥接模式适用环境</h3><ol><li>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>抽象部分和实现部分可以用继承的方式独立扩展而互不影响，在程序运行时可以动态地将一个抽象化子类地对象和一个实现化子类地对象进行组合，即系统需要对抽象化角色和实现化角色进行多态耦合。</li><li>一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。</li><li>对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ol><blockquote><p>抽象类和实现类接口都可以对调，因为对于不同规格的毛笔而言，每一种规格都可以有不同的颜色使用；对于不同的颜色而言每一种颜色都有不同规格的毛笔来使用。我们使用时权衡即可。</p></blockquote><h1 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h1><p><a href="https://zhuanlan.zhihu.com/p/58903776">秒懂设计模式之桥接模式（Bridge Pattern） - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之桥接模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之桥接模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之桥接模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将抽象部分</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型设计模式之适配器模式</title>
    <link href="https://devildyw.github.io/2022/08/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-25T07:51:20.000Z</published>
    <updated>2022-08-27T04:37:06.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型设计模式之适配器模式"><a href="#设计模式–结构型设计模式之适配器模式" class="headerlink" title="设计模式–结构型设计模式之适配器模式"></a>设计模式–结构型设计模式之适配器模式</h1><blockquote><p>将一个类的接口转换成客户希望的另一个接口。该模式让接口不兼容的类可以一起工作</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1）概述"><a href="#1）概述" class="headerlink" title="1）概述"></a>1）概述</h3><p>​        在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。还有像下面这张图一样：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208251751012.webp" alt="在这里插入图片描述"></p><p>​        在软件设计中也可能出现：</p><ol><li><strong>需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容，如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。</strong></li><li>如果想增加现有组件的复用率也可以使用适配器模式。</li></ol><h3 id="2）介绍"><a href="#2）介绍" class="headerlink" title="2）介绍"></a>2）介绍</h3><p>适配器模式（Adapter）的定义如下：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><p>Adapter模式的宗旨：<strong>保留现有类所提供的服务，向客户提供接口，以满足客户的期望</strong>。</p><h3 id="3）角色结构"><a href="#3）角色结构" class="headerlink" title="3）角色结构"></a>3）角色结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><blockquote><p>适配器就是使用现有的组件（适配者）来实现目标接口规范（目标接口）来完成转化的一个类。</p></blockquote><h3 id="4）使用场景"><a href="#4）使用场景" class="headerlink" title="4）使用场景"></a>4）使用场景</h3><p>适配器模式（Adapter）通常适用于以下场景。</p><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。（<del>就是所谓的加一层，一层不行就加两层</del>）😁</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h2 id="二、类适配器"><a href="#二、类适配器" class="headerlink" title="二、类适配器"></a>二、类适配器</h2><p>当客户在接口中定义了他期望的行为时，我们就可以应用适配器模式，提供一个实现该接口的类，并且扩展已有的类，通过创建子类来实现适配。</p><p><code>实现方式</code>：<strong>定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件</strong>。</p><p>我们直接用之前的那个图来做个例子：中国人到了欧洲，的给自己电脑充电，但因为自己电脑是双叉，欧式是三叉，这中间就得需要一个转换器。<strong>对于电脑而言，它只能是双叉的，但是现在只有三叉的插座，想要充电，就必须能让双叉的插头能够插入三叉的插座上，此时我们需要一个适配器，将三叉插座的电传输给双叉的插头。此时的目标是双叉，需要将三叉的电传输到双叉的线上。</strong></p><blockquote><p>可能使用sd卡和tf卡的案例比较好理解，对于同一台电脑而言它只能插入sd卡，但是呢我们现在不想让他插入sd读取数据了，我想让他读取tf卡，但是电脑不能匹配，此时就只能使用tf卡转sd的适配器了，通过读sd的方式读取了tf卡。对于该问题，目标接口就是sd卡，而适配者是tf卡，tf卡不符合现有接口规范（sd卡），需要通过适配器（适配器通过现有组件tf的读写方式实现了sd接口的规范）完成了转化。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208251751008.webp" alt="在这里插入图片描述"></p><h3 id="2-1、代码"><a href="#2-1、代码" class="headerlink" title="2.1、代码"></a>2.1、代码</h3><p>适配者（Adaptee）：即图中的欧式三叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line">    <span class="comment">/** 欧式三叉 通电 接通电 插座*/</span></span><br><span class="line">    String <span class="title function_">useEuropesocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧式三叉实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useEuropesocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;使用欧式三叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标（Target）接口：即中国双叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">useChineseSocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国插头的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        String msg=<span class="string">&quot;使用中国双叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器（Adapter）类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义适配器类 中国双叉转为欧洲三叉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseAdapterEurope</span> <span class="keyword">extends</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用转换器转换完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> useEuropesocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑类，对于电脑类而言，它只能使用双叉的充电器，所以客户端希望的目标类就是中国双叉。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">(ChineseSocket chineseSocket)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(chineseSocket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;sd card null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chineseSocket.useChineseSocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ChineseSocket</span> <span class="variable">chineseSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseSocketImpl</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(chineseSocket));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="type">ChineseAdapterEurope</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseAdapterEurope</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(adapter));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">         * ------------</span></span><br><span class="line"><span class="comment">         * 使用转换器转换完成</span></span><br><span class="line"><span class="comment">         * 使用欧式三叉充电</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是简单的演示了适配器的使用。</p><p><code>注</code>:类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h2 id="三、对象适配器"><a href="#三、对象适配器" class="headerlink" title="三、对象适配器"></a>三、对象适配器</h2><p>对象适配器”通过组合除了满足“用户期待接口”还降低了代码间的不良耦合。在工作中推荐使用“对象适配”。</p><p>实现方式：<strong>对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口</strong>。</p><p>题目还是和上面一样的哈。代码其实差异很小</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>适配者（Adaptee）：即图中的欧式三叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line">    <span class="comment">/** 欧式三叉 通电 接通电 插座*/</span></span><br><span class="line">    String <span class="title function_">useEuropesocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧式三叉实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useEuropesocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;使用欧式三叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标（Target）接口：即中国双叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">useChineseSocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国插头的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        String msg=<span class="string">&quot;使用中国双叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器（Adapter）类： 就是这个适配器内做了一些更改 从继承改为了成员变量的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseAdapterEurope</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EuropeSocket europeSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChineseAdapterEurope</span><span class="params">(EuropeSocket europeSocket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.europeSocket = europeSocket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用转换器转换完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> europeSocket.useEuropesocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">(ChineseSocket chineseSocket)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(chineseSocket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;sd card null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chineseSocket.useChineseSocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ChineseSocket</span> <span class="variable">chineseSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseSocketImpl</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(chineseSocket));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="comment">//这里做了更改</span></span><br><span class="line">        EuropeSocket europeSocket=<span class="keyword">new</span> <span class="title class_">EuropeSocketImpl</span>();</span><br><span class="line">        <span class="type">ChineseAdapterEurope</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseAdapterEurope</span>(europeSocket);</span><br><span class="line">        System.out.println(computer.useChineseSocket(adapter));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">         * ------------</span></span><br><span class="line"><span class="comment">         * 使用转换器转换完成</span></span><br><span class="line"><span class="comment">         * 使用欧式三叉充电</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是对象适配器啦，</p><p>适合于解决问题常见：</p><ul><li>　需要的东西有，但不能用，且短时间无法改造。即，使得一个功能适合不同的环境。</li><li>　　在开发中，系统的数据、行为都匹配，但接口不符时，可以考虑适配器。</li><li>　　<strong>希望复用一些现存的类，但是接口又与复用环境的要求不一致，应该考虑用适配器模式。</strong>（使用一个已经存在的类，但它的接口（即，方法)，与需要的不相同时）</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>适配器模式（Adapter）可扩展为双向适配器模式，双向适配器类既可以把适配者接口转换成目标接口，也可以把目标接口转换成适配者接口</strong>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>优点</strong>：</p><ul><li>客户端通过适配器可以透明地调用目标接口。</li><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。<strong>提高了类的复用</strong></li><li><strong>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题</strong>。灵活性好</li><li>可以让任何两个没有关联的类一起运行</li><li><strong>在很多业务场景中符合开闭原则</strong></li></ul><p><strong>其缺点是</strong>：</p><ul><li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。（如：明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难）</li></ul><p> <strong>核心思想：</strong></p><p>继承或者依赖（引用）适配者对象，然后实现目标的接口。确保原来代码不改变的情况下，增加新的功能。</p><p>因为目标类是需要使用的，而我们现在并不能直接使用目标类（一个已存在的类，但是它不符合现有的接口规范），而需要通过适配器将现有的组件转化为目标类，所以适配器需由现有组件实现目标接口的功能（转化使其符合现有规范）来完成转化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型设计模式之适配器模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型设计模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型设计模式之适配器模式&quot;&gt;&lt;/a&gt;设计模式–结构型设计模式之适配器模式&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator</title>
    <link href="https://devildyw.github.io/2022/08/23/Spring%20Boot%20Actuator/"/>
    <id>https://devildyw.github.io/2022/08/23/Spring%20Boot%20Actuator/</id>
    <published>2022-08-23T11:50:23.000Z</published>
    <updated>2022-08-23T14:09:05.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h1><p>在企业级应用中，学习了如何进行SpringBoot应用的功能开发，以及如何写单元测试、集成测试等还是不够的。在实际的软件开发中还需要：<strong>应用程序的监控和管理</strong>。SpringBoot的Actuator模块实现了应用的监控与管理。这样的需求在分布式服务中基本是必须的，项目上线后的监控也是如此</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>生产系统中，往往需要对系统实际运行的情况（例如cpu、io、disk、db、业务功能等指标）进行监控运维。在SpringBoot项目中Actuator模块提供了众多HTTP接口端点（Endpoint），<strong>来提供应用程序运行时的内部状态信息。</strong></p><p>Actuator模块提供了一个监控和管理生产环境的模块，可以使用<strong>http、jmx、ssh、telnet等</strong>来管理和监控应用。包括应用的审计（Auditing）、健康（health）状态信息、数据采集（metrics gathering）统计等监控运维的功能。同时，提供了可以扩展 Actuator端点（Endpoint）自定义监控指标。这些指标都是以<strong>JSON接口数据的方式呈现</strong>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用Spring Boot Actuator需要加入如下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>actuator并没有默认集成在自动配置中（所以需要手动引入），而在作为独立的项目来呈现的。当引入了上面的依赖，默认会引入actuator相关的两个项目：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>spring-boot-actuator</code>为功能实现，<code>spring-boot-actuator-autoconfigure</code>为自动配置。</p><p>需要注意：因<code>SpringBoot Actuator</code>会暴露服务的详细信息，为了保障安全性，建议添加安全控制的相关依赖<code>spring-boot-starter-security</code>，这样在访问应用监控端点时，都需要输入验证信息。所需依赖如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然也可以手动自定义不需要引入<code>security</code></p><p>关于security的使用我们在此不进行展开，可在application文件中配置相应的访问密码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>经过以上步骤的操作，启动SpringBoot项目，actuator便自动集成配置了，可通过：</p><p><a href="http://localhost:8080/actuator">http://localhost:8080/actuator</a> 访问，结果如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health-path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>默认支持的链接有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/actuator</span><br><span class="line">/actuator/health</span><br><span class="line">/actuator/health/&#123;*path&#125;</span><br></pre></td></tr></table></figure><p>可以在application配置文件中配置开启更多的监控信息：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#/info获取info前缀的配置信息 这一项必不可少</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>management.endpoints.web.exposure.include</code>&#x3D;’*’，代表开启全部监控，也可仅配置需要开启的监控，如： <code>management.endpoints.web.exposure.include</code>&#x3D;beans,trace。</p></li><li><p><code>management.endpoint.health.show-details</code>&#x3D;always，health endpoint开启显示全部细节。默认情况下&#x2F;actuator&#x2F;health是公开的，但不显示细节。</p></li><li><p><code>management.endpoints.web.base-path</code>&#x3D;&#x2F;monitor，启用指定的url地址访问根路径，默认路径为&#x2F;actuator&#x2F;*，开启则访问路径变为&#x2F;monitor&#x2F;*。</p></li><li><p><code>management.endpoint.shutdown.enabled</code>&#x3D;true，启用接口关闭<code>SpringBoot</code>。</p></li></ul><p>监控信息如果需要跨越调用，可通过<code>CORS</code>配置来支持，默认处于禁用状态。设置<code>management.endpoints.web.cors.allowed-origins</code>属性后开启。</p><p>比如允许来自<a href="https://www.choupangxia.com/">https://www.choupangxia.com</a> 域的GET和POST调用：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">https://www.choupangxia.com</span></span><br><span class="line">        <span class="attr">allowed-methods:</span> <span class="string">GET,POST</span></span><br></pre></td></tr></table></figure><h2 id="REST接口"><a href="#REST接口" class="headerlink" title="REST接口"></a>REST接口</h2><p>Spring Boot Actuator提供了非常丰富的监控接口，可以通过这些接口了解应用程序运行时的内部状况。Actuator也支持用户自定义添加端点，可以根据实际应用，定义一些比较关心的指标，在运行期进行监控。</p><table><thead><tr><th>HTTP方法</th><th>路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;auditevents</td><td>显示当前应用程序的审计事件信息</td></tr><tr><td>GET</td><td>&#x2F;beans</td><td>显示一个应用中所有Spring Beans的完整列表</td></tr><tr><td>GET</td><td>&#x2F;conditions</td><td>显示配置类和自动配置类(configuration and auto-configuration classes)的状态及它们被应用或未被应用的原因。</td></tr><tr><td>GET</td><td>&#x2F;configprops</td><td>显示一个所有@ConfigurationProperties的集合列表</td></tr><tr><td>GET</td><td>&#x2F;env</td><td>显示来自Spring的ConfigurableEnvironment的属性。</td></tr><tr><td>GET</td><td>&#x2F;flyway</td><td>显示数据库迁移路径，如果有的话。</td></tr><tr><td>GET</td><td>&#x2F;health</td><td>显示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情）</td></tr><tr><td>GET</td><td>&#x2F;info</td><td>显示任意的应用信息</td></tr><tr><td>GET</td><td>&#x2F;liquibase</td><td>展示任何Liquibase数据库迁移路径，如果有的话</td></tr><tr><td>GET</td><td>&#x2F;metrics</td><td>展示当前应用的metrics信息</td></tr><tr><td>GET</td><td>&#x2F;mappings</td><td>显示一个所有@RequestMapping路径的集合列表</td></tr><tr><td>GET</td><td>&#x2F;scheduledtasks</td><td>显示应用程序中的计划任务</td></tr><tr><td>GET</td><td>&#x2F;sessions</td><td>允许从Spring会话支持的会话存储中检索和删除(retrieval and deletion)用户会话。使用Spring Session对反应性Web应用程序的支持时不可用。</td></tr><tr><td>POST</td><td>&#x2F;shutdown</td><td>允许应用以优雅的方式关闭（默认情况下不启用）</td></tr><tr><td>GET</td><td>&#x2F;threaddump</td><td>执行一个线程dump</td></tr></tbody></table><p>如果使用web应用(Spring MVC, Spring WebFlux, 或者 Jersey)，还可以使用以下接口：</p><table><thead><tr><th>HTTP方法</th><th>路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;heapdump</td><td>返回一个GZip压缩的hprof堆dump文件</td></tr><tr><td>GET</td><td>&#x2F;jolokia</td><td>通过HTTP暴露JMX beans（当Jolokia在类路径上时，WebFlux不可用）</td></tr><tr><td>GET</td><td>&#x2F;logfile</td><td>返回日志文件内容（如果设置了logging.file或logging.path属性的话），支持使用HTTP Range头接收日志文件内容的部分信息</td></tr><tr><td>GET</td><td>&#x2F;prometheus</td><td>以可以被Prometheus服务器抓取的格式显示metrics信息</td></tr></tbody></table><h2 id="接口详解"><a href="#接口详解" class="headerlink" title="接口详解"></a>接口详解</h2><p>health主要用来检查应用的运行状态，这是使用频次最高的监控点。通常使用此接口显示应用实例的运行状态，以及应用不“健康”的原因，比如数据库连接、磁盘空间不够等，如常用的eureka，zookeeper，consul注册中心就是靠该接口检测实例健康状态的。</p><p>默认情况下health的状态是开放的，访问：<a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a> 即可看到应用的状态。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置状态码顺序：<code>setStatusOrder(Status.DOWN,Status.OUT*OF*SERVICE, Status.UP, Status.UNKNOWN</code>)。过滤掉不能识别的状态码。如果无任何状态码，整个<code>SpringBoot</code>应用的状态是UNKNOWN。将所有收集到的状态码排序。返回有序状态码序列中的第一个状态码，作为整个<code>SpringBoot</code>应用的状态。</p><p>Health通过合并几个健康指数检查应用的健康情况。<code>SpringBoot Actuator</code>会自动配置以下内容：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>CassandraHealthIndicator</code></td><td>检查Cassandra数据库是否已启动。</td></tr><tr><td><code>CouchbaseHealthIndicator</code></td><td>检查Couchbase群集是否已启动。</td></tr><tr><td><code>DiskSpaceHealthIndicator</code></td><td>检查磁盘空间不足。</td></tr><tr><td><code>DataSourceHealthIndicator</code></td><td>检查是否可以建立连接DataSource。</td></tr><tr><td><code>ElasticsearchHealthIndicator</code></td><td>检查Elasticsearch集群是否已启动。</td></tr><tr><td><code>InfluxDbHealthIndicator</code></td><td>检查InfluxDB服务器是否已启动。</td></tr><tr><td><code>JmsHealthIndicator</code></td><td>检查JMS代理是否启动。</td></tr><tr><td><code>MailHealthIndicator</code></td><td>检查邮件服务器是否已启动。</td></tr><tr><td><code>MongoHealthIndicator</code></td><td>检查Mongo数据库是否已启动。</td></tr><tr><td><code>Neo4jHealthIndicator</code></td><td>检查Neo4j服务器是否已启动。</td></tr><tr><td><code>RabbitHealthIndicator</code></td><td>检查Rabbit服务器是否已启动。</td></tr><tr><td><code>RedisHealthIndicator</code></td><td>检查Redis服务器是否启动。</td></tr><tr><td><code>SolrHealthIndicator</code></td><td>检查Solr服务器是否已启动。</td></tr></tbody></table><p>可以通过设置 <code>management.health.defaults.enabled</code>属性来全部禁用。</p><h2 id="原生端点"><a href="#原生端点" class="headerlink" title="原生端点"></a>原生端点</h2><p>原生端点分为三大类：</p><ul><li>应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。</li><li>度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。</li><li>操作控制类：提供了对应用的关闭等操作类功能。</li></ul><hr><h3 id="应用配置类"><a href="#应用配置类" class="headerlink" title="应用配置类"></a>应用配置类</h3><p>&#x2F;conditions：该端点用来获取应用的自动化配置报告，其中包括所有自动化配置的候选项。同时还列出了每个候选项自动化配置的各个先决条件是否满足。该端点可以帮助我们方便的找到一些自动化配置为什么没有生效的具体原因。</p><p>该报告内容将自动化配置内容分为两部分：positiveMatches中返回的是条件匹配成功的自动化配置和negativeMatches中返回的是条件匹配不成功的自动化配置。</p><p>部分代码如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contexts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;positiveMatches&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;AuditEventsEndpointAutoConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnAvailableEndpointCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnAvailableEndpoint marked as exposed by a &#x27;management.endpoints.web.exposure&#x27; property&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;BeansEndpointAutoConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnAvailableEndpointCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnAvailableEndpoint marked as exposed by a &#x27;management.endpoints.web.exposure&#x27; property&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;BeansEndpointAutoConfiguration#beansEndpoint&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnBeanCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>&#x2F;info：就是在配置文件中配置的以info开头的信息，如配置为：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-actuator</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;spring-boot-actuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>info中配置的参数也可以通过符号*@*包围的属性值来自pom.xml文件中的元素节点。如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">        <span class="attr">artifact:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">@project.name@</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">@project.description@</span></span><br><span class="line">        <span class="attr">ersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;artifact&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring-learn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring-learn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo project for Spring Boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;beans：该端点用来获取应用上下文中创建的所有Bean。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;contexts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;application&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;beans&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;endpointCachingOperationInvokerAdvisor&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aliases&quot;</span>: [],</span><br><span class="line">                    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;singleton&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.class]&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;dependencies&quot;</span>: [<span class="string">&quot;environment&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;defaultServletHandlerMapping&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aliases&quot;</span>: [],</span><br><span class="line">                    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;singleton&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;org.springframework.web.servlet.HandlerMapping&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration<span class="variable">$EnableWebMvcConfiguration</span>.class]&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;dependencies&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口展现了bean的别名、类型、是否单例、类的地址、依赖等信息。</p><p>&#x2F;configprops：该端点用来获取应用中配置的属性信息报告。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring.transaction&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面展示了TransactionProperties属性的配置信息。</p><p>&#x2F;mappings：该端点用来返回所有SpringMVC的控制器映射关系报告。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;handler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Actuator web endpoint &#x27;beans&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;predicate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;GET /actuator/beans, produces [application/vnd.spring-boot.actuator.v2+json || application/json]&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;handlerMethod&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.OperationHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;handle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;descriptor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Ljavax/servlet/http/HttpServletRequest;Ljava/util/Map;)Ljava/lang/Object;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;requestMappingConditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;consumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;GET&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/actuator/beans&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;produces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.spring-boot.actuator.v2+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;negated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;negated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>/env</code>：该端点与<code>/configprops</code>不同，它用来获取应用所有可用的环境属性报告。包括：环境变量、JVM属性、应用的配置配置、命令行中的参数。</p><h3 id="度量指标类"><a href="#度量指标类" class="headerlink" title="度量指标类"></a>度量指标类</h3><p>应用配置类提供的指标为静态报告，而度量指标类端点提供的报告内容则是动态变化的，提供了应用程序在运行过程中的一些快照信息，比如：内存使用情况、HTTP请求统计、外部资源指标等。这些端点对于构建微服务架构中的监控系统非常有帮助。</p><p>&#x2F;metrics：该端点用来返回当前应用的各类重要度量指标，比如：内存信息、线程信息、垃圾回收信息等。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.states&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;http.server.requests&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.files.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.memory.promoted&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.load.average.1m&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.used&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.max.data.size&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.committed&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.cpu.count&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;logback.events&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.sent&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.memory.used&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.daemon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.cpu.usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.memory.allocated&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.request.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.request&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.expired&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.live&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.peak&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.received&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.uptime&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.rejected&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.cpu.usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.config.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.classes.loaded&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.classes.unloaded&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.error&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.active.current&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.alive.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.live.data.size&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.current&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.files.open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.count&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.total.capacity&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.active.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.busy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.start.time&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>从上面的示例中有这些重要的度量值：</p><ul><li>系统信息：包括处理器数量processors、运行时间uptime和instance.uptime、系统平均负载systemload.average。</li><li>mem.*：内存概要信息，包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。</li><li>heap.*：堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li>nonheap.*：非堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getNonHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li>threads.*：线程使用情况，包括线程数、守护线程数（daemon）、线程峰值（peak）等，这些数据均来自java.lang.management.ThreadMXBean。</li><li>classes.*：应用加载和卸载的类统计。这些数据均来自java.lang.management.ClassLoadingMXBean。</li><li>gc.*：垃圾收集器的详细信息，包括垃圾回收次数gc.ps_scavenge.count、垃圾回收消耗时间gc.ps_scavenge.time、标记-清除算法的次数gc.ps_marksweep.count、标记-清除算法的消耗时间gc.ps_marksweep.time。这些数据均来自java.lang.management.GarbageCollectorMXBean。</li><li>httpsessions.*：Tomcat容器的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.active。该度量指标信息仅在引入了嵌入式Tomcat作为应用容器的时候才会提供。</li><li>gauge.*：HTTP请求的性能指标之一，它主要用来反映一个绝对数值。比如上面示例中的gauge.response.hello: 5，它表示上一次hello请求的延迟时间为5毫秒。</li><li>counter.*：HTTP请求的性能指标之一，它主要作为计数器来使用，记录了增加量和减少量。如上示例中counter.status.200.hello: 11，它代表了hello请求返回200状态的次数为11。</li></ul><p>&#x2F;threaddump：会生成当前线程活动的快照。方便我们在日常定位问题的时候查看线程的情况。主要展示了线程名、线程ID、线程的状态、是否等待锁资源等信息。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;threads&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;threadName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reference Handler&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadId&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedCount&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;daemon&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inNative&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadState&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RUNNABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stackTrace&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;classLoaderName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;moduleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.base&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;moduleVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;methodName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waitForReferencePendingList&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reference.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lineNumber&quot;</span><span class="punctuation">:</span> <span class="number">-2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.ref.Reference&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nativeMethod&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;lockedMonitors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedSynchronizers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.concurrent.locks.ReentrantLock$NonfairSync&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;identityHashCode&quot;</span><span class="punctuation">:</span> <span class="number">2060076420</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockInfo&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;threadName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DestroyJavaVM&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadId&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;daemon&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inNative&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadState&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RUNNABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stackTrace&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedMonitors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedSynchronizers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockInfo&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;trace：该端点用来返回基本的HTTP跟踪信息。默认情况下，跟踪信息的存储采用。（2.2版本以后不在默认提供）</p><h3 id="操作控制类"><a href="#操作控制类" class="headerlink" title="操作控制类"></a>操作控制类</h3><p>&#x2F;shutdown：配置文件中配置开启此功能：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>使用 curl 模拟 post 请求此接口：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:8080/actuator/shutdown&quot;</span>复制代码</span><br></pre></td></tr></table></figure><p>显示结果为：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shutting down, bye...&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由此可见shutdown可以关闭Spring Boot项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Boot-Actuator&quot;&gt;&lt;a href=&quot;#Spring-Boot-Actuator&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Actuator&quot;&gt;&lt;/a&gt;Spring Boot Actuator&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="监控" scheme="https://devildyw.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://devildyw.github.io/2022/08/22/Linux/"/>
    <id>https://devildyw.github.io/2022/08/22/Linux/</id>
    <published>2022-08-22T13:06:31.000Z</published>
    <updated>2022-08-22T13:07:47.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/linux/linux-tutorial.html&quot;&gt;Linux 教程 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Linux" scheme="https://devildyw.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://devildyw.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Nacos</title>
    <link href="https://devildyw.github.io/2022/08/12/Spring%20Cloud-Nacos/"/>
    <id>https://devildyw.github.io/2022/08/12/Spring%20Cloud-Nacos/</id>
    <published>2022-08-12T06:02:28.000Z</published>
    <updated>2022-08-23T11:49:34.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Nacos"><a href="#Spring-Cloud-Nacos" class="headerlink" title="Spring Cloud-Nacos"></a>Spring Cloud-Nacos</h1><h2 id="认识Nacos"><a href="#认识Nacos" class="headerlink" title="认识Nacos"></a>认识Nacos</h2><p><code>Nacos</code> 是阿里巴巴的产品，现在是 <code>SpringCloud</code> 中的一个组件。相比 <code>Eureka</code> 功能更加丰富，在国内受欢迎程度较高。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121449674.png" alt="image-20220812144921010"></p><p><code>Nacos /nɑ:kəʊs/</code> 是 Dynamic Naming and Configuration Service的首字母简称，<strong>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</strong></p><p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有猪流类型的“服务”的发现、配置、管理：</p><ul><li><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></p></li><li><p><a href="https://grpc.io/docs/guides/concepts.html#service-definition">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/">Dubbo RPC Service</a></p></li><li><p><a href="https://spring.io/projects/spring-restdocs">Spring Cloud RESTful Service</a></p></li></ul><p><strong>Nacos 的关键特性包括:</strong></p><ul><li><p><strong>服务发现和服务健康监测</strong></p><blockquote><p><strong>Nacos 支持基于 DNS 和基于 RPC 的服务发现。</strong>服务提供者使用 <a href="https://nacos.io/zh-cn/docs/sdk.html">原生SDK</a>、<a href="https://nacos.io/zh-cn/docs/open-api.html">OpenAPI</a>、或一个<a href="https://nacos.io/zh-cn/docs/other-language.html">独立的Agent TODO</a>注册 Service 后，服务消费者可以使用<a href="https://nacos.io/zh-cn/docs/xx">DNS TODO</a> 或<a href="https://nacos.io/zh-cn/docs/open-api.html">HTTP&amp;API</a>查找和发现服务。</p><p><strong>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求</strong>。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p></blockquote></li><li><p><strong>动态配置服务</strong></p><blockquote><p><strong>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</strong></p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的UI (<a href="http://console.nacos.io/nacos/index.html">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p></blockquote></li><li><p><strong>动态 DNS 服务</strong></p><blockquote><p><strong>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。</strong>动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p><p>Nacos 提供了一些简单的 <a href="https://nacos.io/zh-cn/docs/xx">DNS APIs TODO</a> 帮助您管理服务的关联域名和可用的 IP:PORT 列表.</p></blockquote></li><li><p><strong>服务及其元数据管理</strong></p><blockquote><p><strong>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</strong></p></blockquote></li></ul><blockquote><p>Nacos官方文档：<a href="https://nacos.io/zh-cn/">home (nacos.io)</a></p></blockquote><h2 id="Nacos-地图"><a href="#Nacos-地图" class="headerlink" title="Nacos 地图"></a>Nacos 地图</h2><p>一图看懂 Nacos</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121813662.jpg" alt="nacosMap"></p><h2 id="Nacos生态"><a href="#Nacos生态" class="headerlink" title="Nacos生态"></a>Nacos生态</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121813862.png" alt="nacos_landscape.png"></p><p>如 Nacos 全景图所示，Nacos 无缝支持一些主流的开源生态，例如</p><ul><li><a href="https://nacos.io/en-us/docs/quick-start-spring-cloud.html">Spring Cloud</a></li><li><a href="https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html">Apache Dubbo and Dubbo Mesh</a></li><li><a href="https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html">Kubernetes and CNCF</a>。</li></ul><p>使用 Nacos 简化服务发现、配置管理、服务治理及管理的解决方案，让微服务的发现、管理、共享、组合更加容易。</p><h2 id="Nacos安装-单机"><a href="#Nacos安装-单机" class="headerlink" title="Nacos安装-单机"></a>Nacos安装-单机</h2><h3 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h3><p>有一个能够运行 <strong>docker</strong> 和 <strong>mysql</strong>，可以参考<a href="https://developer.aliyun.com/article/871775?spm=a2c6h.12873639.article-detail.6.b10d6b470PITWC">Docker中运行一个mysql</a></p><h3 id="选择拉取镜像"><a href="#选择拉取镜像" class="headerlink" title="选择拉取镜像"></a>选择拉取镜像</h3><blockquote><p><a href="https://hub.docker.com/r/nacos/nacos-server/tags">https://hub.docker.com/r/nacos/nacos-server/tags</a></p></blockquote><p>这里选择了**<code>2.1.0</code>**版本</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121825334.png" alt="image.png"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server:v2.1.0</span><br></pre></td></tr></table></figure><h3 id="创建nacos数据库"><a href="#创建nacos数据库" class="headerlink" title="创建nacos数据库"></a>创建nacos数据库</h3><blockquote><p>将nacos持久化到mysql数据库中</p><p>新建nacos数据库</p></blockquote><p>从<a href="https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql">Nacos数据库配置</a>下载建表语句。也可以将下列语句粘贴执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><h4 id="获取容器内的配置文件"><a href="#获取容器内的配置文件" class="headerlink" title="获取容器内的配置文件"></a>获取容器内的配置文件</h4><p>先直接部署一个容器</p><blockquote><p>是为了拿到<code>application.properties</code>等配置文件</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=localhost \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0 </span><br></pre></td></tr></table></figure><blockquote><p>参数说明</p><ul><li>MODE&#x3D;standalone 单节点模式（开发阶段单机模式即可）</li><li>SPRING_DATASOURCE_PLATFORM&#x3D;mysql 使用mysql数据库连接方式</li><li>MYSQL_SERVICE_HOST&#x3D;192.168.120.1 指定数据库地址</li><li>MYSQL_SERVICE_PORT 数据库端口</li><li>MYSQL_SERVICE_USER 数据库用户名</li><li>MYSQL_SERVICE_PASSWORD 数据库密码</li><li>MYSQL_SERVICE_DB_NAME 数据库名称</li><li>-p 8848:8848 端口映射</li><li>–name nacos 容器命名</li><li>–restart&#x3D;always 任意时候重启容器，开机就能自动启动容器(需设置docker为开机自启)</li></ul></blockquote><p><strong>Ncaos Docker支持的参数有：</strong></p><p><strong>Common property configuration</strong></p><table><thead><tr><th>属性名称</th><th>描述</th><th>选项</th></tr></thead><tbody><tr><td>MODE</td><td>系统启动方式: 集群&#x2F;单机</td><td>cluster&#x2F;standalone默认 <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>集群地址</td><td>p1:port1空格ip2:port2 空格ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>支持IP还是域名模式</td><td>hostname&#x2F;ip 默认 <strong>ip</strong></td></tr><tr><td>NACOS_SERVER_PORT</td><td>Nacos 运行端口</td><td>默认 <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>多网卡模式下可以指定IP</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>单机模式下支持MYSQL数据库</td><td>mysql &#x2F; 空 默认:空</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>数据库 连接地址</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>数据库端口</td><td>默认 : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>数据库库名</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>数据库用户名</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>数据库用户密码</td><td></td></tr><tr><td>MYSQL_SERVICE_DB_PARAM</td><td>数据库连接参数</td><td>default : <strong>characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false</strong></td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>数据库编号</td><td>默认 :<strong>1</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>默认 :1g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>默认 :1g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>默认 :512m</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>默认 :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>默认 :320m</td></tr><tr><td>NACOS_DEBUG</td><td>是否开启远程DEBUG</td><td>y&#x2F;n 默认 :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>默认 :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>权限系统类型选择,目前只支持nacos类型</td><td>默认 :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>是否开启权限系统</td><td>默认 :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>token 失效时间</td><td>默认 :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>token</td><td>默认 :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>权限缓存开关 ,开启后权限缓存的更新默认有15秒的延迟</td><td>默认 : false</td></tr><tr><td>MEMBER_LIST</td><td>通过环境变量的方式设置集群地址</td><td>例子:192.168.16.101:8847?raft_port&#x3D;8807,192.168.16.101?raft_port&#x3D;8808,192.168.16.101:8849?raft_port&#x3D;8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>是否开启集群嵌入式存储模式</td><td><code>embedded</code> 默认 : none</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>nacos.core.auth.caching.enabled</td><td>default : false</td></tr><tr><td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td><td>nacos.core.auth.enable.userAgentAuthWhite</td><td>default : false</td></tr><tr><td>NACOS_AUTH_IDENTITY_KEY</td><td>nacos.core.auth.server.identity.key</td><td>default : serverIdentity</td></tr><tr><td>NACOS_AUTH_IDENTITY_VALUE</td><td>nacos.core.auth.server.identity.value</td><td>default : security</td></tr><tr><td>NACOS_SECURITY_IGNORE_URLS</td><td>nacos.security.ignore.urls</td><td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/p</code></td></tr></tbody></table><h3 id="宿主机配置文件映射"><a href="#宿主机配置文件映射" class="headerlink" title="宿主机配置文件映射"></a>宿主机配置文件映射</h3><h5 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/conf/application.properties /home/docker/nacos/config/</span><br></pre></td></tr></table></figure><h5 id="拷贝logback日志配置文件"><a href="#拷贝logback日志配置文件" class="headerlink" title="拷贝logback日志配置文件"></a>拷贝logback日志配置文件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/conf/nacos-logback.xml /home/docker/nacos/config/</span><br></pre></td></tr></table></figure><h5 id="修改application-properties的配置"><a href="#修改application-properties的配置" class="headerlink" title="修改application.properties的配置"></a>修改application.properties的配置</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">$&#123;SERVER_SERVLET_CONTEXTPATH:/nacos&#125;</span></span><br><span class="line"><span class="attr">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">$&#123;NACOS_APPLICATION_PORT:8848&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,将SPRING_DATASOURCE_PLATFORM的默认值&quot;&quot;改为mysql</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">$&#123;SPRING_DATASOURCE_PLATFORM:mysql&#125;</span></span><br><span class="line"><span class="attr">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">$&#123;MYSQL_DATABASE_NUM:1&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_HOST的默认值为192.168.120.1,MYSQL_SERVICE_DB_NAME的默认值为nacos</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST:124.222.35.20&#125;:$&#123;MYSQL_SERVICE_PORT:3319&#125;/$&#123;MYSQL_SERVICE_DB_NAME:nacos_config&#125;?$&#123;MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_HOST的默认值为192.168.120.1,MYSQL_SERVICE_DB_NAME的默认值为nacos</span></span><br><span class="line"><span class="attr">db.url.1</span>=<span class="string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST:124.222.35.20&#125;:$&#123;MYSQL_SERVICE_PORT:3319&#125;/$&#123;MYSQL_SERVICE_DB_NAME:nacos_config&#125;?$&#123;MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_USER的默认值为root</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">$&#123;MYSQL_SERVICE_USER:ding&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_PASSWORD的默认值为root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">$&#123;MYSQL_SERVICE_PASSWORD:dyw20020304&#125;</span></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="attr">nacos.core.auth.system.type</span>=<span class="string">$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.secret.key</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="attr">nacos.core.auth.caching.enabled</span>=<span class="string">$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="string">$&#123;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.key</span>=<span class="string">$&#123;NACOS_AUTH_IDENTITY_KEY:serverIdentity&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.value</span>=<span class="string">$&#123;NACOS_AUTH_IDENTITY_VALUE:security&#125;</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D</span></span><br><span class="line"><span class="comment"># default current work dir</span></span><br><span class="line"><span class="attr">server.tomcat.basedir</span>=<span class="string"></span></span><br><span class="line"><span class="comment">## spring security config</span></span><br><span class="line"><span class="comment">### turn off security</span></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">$&#123;NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&#125;</span></span><br></pre></td></tr></table></figure><p>采用添加默认值的方式，这样不会影响指定命令行的参数</p><h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><p>运行之前先删除之前启动的容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop nacos</span><br><span class="line">docker <span class="built_in">rm</span> nacos</span><br></pre></td></tr></table></figure><p>重新运行容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-v /home/docker/nacos/config:/home/nacos/conf \</span><br><span class="line">-v /home/docker/nacos/logs:/home/nacos/logs \</span><br><span class="line">-v /home/docker/nacos/data:/home/nacos/data \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0</span><br></pre></td></tr></table></figure><p>访问：**<code>ip:8848/nacos</code>** 进入 <code>Nacos</code> 图形化控制台</p><p>输入账户密码 默认账户密码都为 nacos</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121942195.png" alt="image-20220812194232088"></p><p>进入如下界面表示登录成功。</p><h2 id="服务注册-x2F-服务发现"><a href="#服务注册-x2F-服务发现" class="headerlink" title="服务注册&#x2F;服务发现"></a>服务注册&#x2F;服务发现</h2><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>将服务注册到Nacos上，完成服务调用。</p><p>由于 Spring Cloud Commons 定义了Spring Cloud 的一组抽象类和接口，所以Spring Cloud 各类组件的行为都是一致的，例如Spring Cloud 规定了 服务发现接口和 服务注册的接口，Spring Cloud 中的服务治理组件都是实现了这两个接口并衍生的，所以相同类别的组件切换只需要更换依赖和修改配置即可。其他操作与原来一致（例如服务的注册，服务的发现，服务的调用等）</p><p>例如这里我们使用 nacos 代替 eureka 作为注册中心，只需要修改依赖和添加nacos的服务器地址即可，其他行为与原eureka相同，不需要做其他的改变。</p><blockquote><p><strong>Spring Cloud 2021.0.1</strong> 新版本使用 <strong>Spring Cloud Loadbalancer</strong> 做负载均衡，没有默认集成 <strong>Ribbon</strong> 了，在进行服务消费者开发的项目中需要引入 <strong>Loadbalancer</strong> 依赖，这一点需要注意一下。从2021版本开始 Nacos已经不再支持Ribbon了。所以推荐使用Spring Cloud LoadBalaner</p></blockquote><h4 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h4><p>在父工程中添加 <code>spring-cloud-alibaba-dependencies</code>得管理依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-provider-payment8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>将<code>Cloud-eureka-consumer-order80</code>工程复制到该父工程的子模块下，改名为<code>Cloud-nacos-consumer-order80</code></p><p>新增pom.xml依赖，并且把原来的eureka的依赖删除或者注释掉。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-nacos-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除掉原来与<code>eureka</code>有关的所有配置，<code>application.yml</code>和代码中的部分</p><p><code>application.yml</code>新增nacos配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br></pre></td></tr></table></figure><hr><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>将<code>Cloud-eureka-provider-payment8001</code> 和 <code>Cloud-eureka-provider-payment8002</code>工程复制到该父工程的子模块下，改名为<code>Cloud-nacos-provider-payment8001</code> 和 <code>Cloud-nacos-provider-payment8002</code></p><p>新增pom.xml依赖，并且把原来的eureka的依赖删除或者注释掉。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-nacos-provider-payment8002<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除掉原来与<code>eureka</code>有关的所有配置，<code>application.yml</code>和代码中的部分</p><p><code>application.yml</code>新增nacos配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动生产者集群和消费者。</p><p>启动完成后可以在Nacos的控制界面中看到，这跟eureka也是一致的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122314253.png" alt="image-20220812231435085"></p><p>点击详情可以看到服务实例节点的ip、端口等信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122315536.png" alt="image-20220812231544441"></p><p>调用<code>get: http://localhost:80/consumer/payment/get/1547503738317369346</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122326542.png" alt="image-20220812232655486"></p><p>调用成功。</p><h2 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131119550.png" alt="image-20220813111902398"></p><p>一个服务可以包含多个服务集群，集群又可以包含多个服务实例。这就是Nacos的分级存储模型。</p><p><strong>服务跨集群调用问题</strong></p><p>服务调用尽可能选择本地集群的服务，，跨集群调用延迟较高</p><p>本地集群不可访问时，再去访问其他集群。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131121375.png" alt="image-20220813112131302"></p><p>没有设置集群是，会显示DEFAULT</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131126861.png" alt="image-20220813112654815"></p><p>我们可以通过修改<code>application.yml</code>文件来修改配置集群名称</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">CD</span> <span class="comment">#集群名称</span></span><br></pre></td></tr></table></figure><p>修改后</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131129777.png" alt="image-20220813112952725"></p><p><strong>总结</strong>：</p><ol><li>Nacos服务分级存储模型<ol><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ol></li><li>如何设置实例的集群属性<ol><li>修改<code>application.yml</code>文件，添加集群名称即可。</li></ol></li></ol><h2 id="NacosRule-负载均衡"><a href="#NacosRule-负载均衡" class="headerlink" title="NacosRule 负载均衡"></a>NacosRule 负载均衡</h2><p>Nacos + Ribbon特有的策略</p><blockquote><p>Spring Cloud Nacos 2021 版本开始已经禁止使用Ribbon做负载均衡了，而使用LoadBalancer有没有许多支持的策略，所以这里我们选择老版本的Spring Cloud Nacos 做演示。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者添加如上依赖后，修改<code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud-payment-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure><p>为 <code>cloud-payment-service</code> 服务配置Nacos的集群负载均衡策略。</p><p>修改后消费者就会优先调用同一个集群内的服务提供者。如果同一集群内的服务提供者宕机或者发生网络波动断开了与注册中心的连接，消费者就会向其他集群内的提供者发起调用，并且会在控制台提醒发生了跨集群调用。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131309334.png" alt="image-20220813130918232"></p><p><strong>总结：</strong></p><ol><li>NacosRule负载均衡策略<ol><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其他集群寻找，并且会报警</li><li><strong>确定了可用实例列表后，再采用随机负载均衡挑选实例。</strong></li></ol></li></ol><h3 id="根据权重负载均衡"><a href="#根据权重负载均衡" class="headerlink" title="根据权重负载均衡"></a>根据权重负载均衡</h3><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能由差异，部分实例所在机器性能比较好，另一些较差，我没希望性能好的机器承担更多的用户请求。</li></ul><p>Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131456215.png" alt="image-20220813145655114"></p><p>将权重设置为0.1，测试可以发现8001被访问到的频率大大降低</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131457175.png" alt="image-20220813145757129"></p><p><strong>用途</strong></p><p>除了希望将性能更好的机器承担更多的用户请求外，还有一点；当我们想要将某一服务实例做维护时，可以将该服务实例的权重调为0，慢慢的请求将不会再发送到该实例上，我们就可以将其下线进行维护，等维护完毕，想要上线时，将其的权重调小一点，放部分请求测试服务是否可用后，再将其的权重调为正常值。<strong>在此期间用户时完全没有感知的</strong>。</p><p><strong>总结</strong></p><ol><li>实例的权重控制<ol><li>Nacos控制台可用设置实例的权重值，0~1之间</li><li>统计群内的多个实例，权重越高被访问的频率越高</li><li>权重为0则完全不会被访问</li></ol></li></ol><h2 id="环境隔离-NameSpace"><a href="#环境隔离-NameSpace" class="headerlink" title="环境隔离 - NameSpace"></a>环境隔离 - NameSpace</h2><p>Nacos中服务存储和数据存储的最外层都是一个名为 namespace 的东西，用来做最外层隔离。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131508378.png"></p><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><p>Nacos 数据模型 Key 由三元组唯一确认。</p><ul><li><strong>作为注册中心时，Namespace + Group + Service</strong></li><li><strong>作为配置中心时，Namespace + Group + DataId</strong></li></ul><p>在Nacos控制台可用创建 namespace，用来隔离环境</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131513130.png" alt="image-20220813151321008"></p><p>然后填写一个新的命名空间信息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131514573.png" alt="image-20220813151432517"></p><p>保存后会在控制台看到这个命名空间的id：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131515237.png" alt="image-20220813151506147"></p><p>而我们创建的服务注册到 Nacos 上默认都是在 public 这个命名空间下，想要修改就需要在<code>application.yml</code> 中添加如下配置。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">6f5658db-97ef-45e7-b48c-d3a8309275a3</span> <span class="comment">#namespace的id</span></span><br></pre></td></tr></table></figure><p>配置好后 在dev的命名空间下就可以看到我们配置的服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131518316.png" alt="image-20220813151841255"></p><p>此时访问消费者调用提供者的接口，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131519203.png" alt="image-20220813151944162"></p><p><strong>总结</strong></p><ol><li>Nacos环境隔离<ol><li>每个namespace都有唯一id</li><li>服务设置namespace时要写id而不是名称</li><li>不同namespace下的服务互相不可见</li></ol></li></ol><h2 id="配置分组-Group"><a href="#配置分组-Group" class="headerlink" title="配置分组-Group"></a>配置分组-Group</h2><p>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：<strong>不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置</strong>。</p><h2 id="Nacos-与-Eureka-对比"><a href="#Nacos-与-Eureka-对比" class="headerlink" title="Nacos 与 Eureka 对比"></a>Nacos 与 Eureka 对比</h2><p>nacos注册中心细节分析</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131522369.png" alt="image-20220813152243270"></p><p>消费者并不是每一次都向注册中心拉取一次服务列表，而是有一个缓存，nacos客户端会对服务列表做一个服务列表缓存，默认每隔30秒刷新一次。这一点与Eureka一致；<strong>但是当发现有服务变更，Nacos会主动推送变更消息到消费者。</strong></p><p>Nacos对于临时实例采用心跳检测（即服务每个一段时间向 Nacos 发起一次心跳），如果超过一段时间后 Nacos 接收不到服务的心跳了，就会把这个临时实例剔除；</p><p>但是对于非临时实例 服务实例不再需要向 Nacos 发送心跳，而是Nacos主动询问节点是否存活。并且服务挂掉了也不会将其直接剔除，而是标记为不健康的实例。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">#修改为非临时实例</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>Nacos 与 Eureka 的共同点<ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ol></li><li>Nacos 与 Eureka 的区别<ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时。</li><li>Nacos 集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式。</li></ol></li></ol><hr><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>前面我们学过 Spring Cloud Config。这里我们学习 Nacos 的配置管理，这也是非常流行的方式。</p><ul><li>配置更改热更新</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132156351.png"></p><p>Spring Cloud Alibaba Nacos 即有服务注册&#x2F;发现的功能，又有配置管理的功能。 </p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在Nacos控制台上添加配置</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132159724.png" alt="image-20220813215901633"></p><p>在弹出表单中填写配置信息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132159829.png" alt="image-20220813215938772"></p><h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><p>配置获取的步骤如下：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132203450.png" alt="image-20220813220331379"></p><ol><li>引入Nacos的配置管理客户端依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在resource目录添加一个bootstrap.yml文件，<strong>这个文件是引导文件，优先级高于application.yml</strong>，用来在引导配置管理中心的的信息，来获取配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>配置后可以将Application.yml中的nacos相关配置给删除，但还是按需配置。</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String dateFormat;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateFormat));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>启动后 访问对于接口</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-14</span> <span class="number">11</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">:</span><span class="number">48</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>总结：</strong></p><p>将配置交给Nacos管理的步骤</p><ol><li>在Nacos中添加配置文件。</li><li>在微服务中引入nacos的config依赖。</li><li>在微服务中添加bootstrap.yml，配置nacos地址、当前环境、服务名称、文件后缀名。这些决定了程序启动时去nacos读取那个文件。</li></ol><h3 id="配置自动刷新"><a href="#配置自动刷新" class="headerlink" title="配置自动刷新"></a>配置自动刷新</h3><p>Nacos中的配置文件变更后，微服务无需重启就可以感知。<strong>与Spring Cloud Config 不同的是Nacos配置文件发送变动后会主动推送给订阅者。</strong>不过需要通过下面两种配置实现：</p><p><strong>方式一：</strong></p><p>在 @Value 注入的变量所在类上添加注解 @RefreshScope</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateFormat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateFormat));</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>使用@ConfigurationProperties注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">PatternProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(properties.getDateformat()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Nacos配置更改后，微服务可以实现热更新，方式：</p><ol><li>通过@Value注解注入，结合@RefreshScope来刷新</li><li>通过@ConfigurationProperties注入，自动刷新</li></ol><p>注意事项：</p><ul><li>不是所有的配置都适合放到配置中心，维护起来比较麻烦</li><li>建议将一些关键参数，需要运行时调整的参数放到nacos配置中心，一般都是自定义配置</li></ul><h3 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h3><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>[spring.application.name]-[spring.profiles.active].yaml，例如：userservice-dev.yaml</li><li>[spring.application.name].yaml，例如：userservice.yaml无论profile</li></ul><p>如何变化，[spring.application.name].yaml这个文件一定会加载，因此多环境共享配置可以写入这个文件</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141332991.png" alt="image-20220814133233859"></p><p>新增配置文件<code>cloud-order-service.yaml</code> </p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141333328.png" alt="image-20220814133314239"></p><p><strong>测试</strong></p><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String envSharedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">PatternProperties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;prop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PatternProperties <span class="title function_">properties</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;环境共享属性值&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>发现确实访问到了未带有属性的配置文件。</p><p><strong>多环境配置覆盖优先级</strong></p><p><strong>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141343402.png" alt="image-20220814134350338"></p><p><strong>总结：</strong></p><p>微服务会从nacos读取的配置文件：</p><ol><li>[服务名]-[spring.profile.active].yaml，环境配置</li><li>[服务名].yaml，默认配置，多环境共享</li></ol><p>优先级：</p><ul><li>[服务名]-[环境].yaml &gt;[服务名].yaml &gt; 本地配置</li></ul><h3 id="多服务共享配置"><a href="#多服务共享配置" class="headerlink" title="多服务共享配置"></a>多服务共享配置</h3><p>不同微服务之间可以共享配置文件，通过下面的两种方式来指定：</p><p>首先创建一个用来共享的配置文件。<strong>即除了配置中心独有特质的配置文件外，还想配置中心拉取以创建的共享的配置文件</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141354786.png" alt="image-20220814135415706"></p><p><strong>方式一：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># 多微服务共享配置文件 配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># 多微服务共享配置文件 配置</span></span><br><span class="line">        <span class="attr">extension-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;共享配置文件&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>多种配置的覆盖优先级：</strong></p><p><strong>服务名-profile.yaml  &gt;服务名称.yaml  &gt;  extension-config &gt; shared-config &gt;  本地配置</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141355287.png" alt="image-20220814135520212"></p><p><strong>总结</strong></p><p>微服务默认读取的配置文件：</p><ol><li>[服务名]-[spring.profile.active].yaml，默认配置</li><li>[服务名].yaml，多环境共享</li></ol><p>不同微服务共享的配置文件：</p><ol><li>通过shared-configs指定</li><li>通过extension-configs指定</li></ol><p>优先级：</p><ul><li>环境配置 &gt;服务名.yaml &gt; extension-config &gt; extension-configs &gt; shared-configs &gt; 本地配置</li></ul><h2 id="Nacos安装-集群"><a href="#Nacos安装-集群" class="headerlink" title="Nacos安装-集群"></a>Nacos安装-集群</h2><p>docker network create nacos-net</p><h2 id="Open-API"><a href="#Open-API" class="headerlink" title="Open-API"></a>Open-API</h2><blockquote><p>Nacos open-API官网地址：<a href="https://nacos.io/zh-cn/docs/open-api.html">https://nacos.io/zh-cn/docs/open-api.html</a></p><p>包含了查询服务实例、注销服务实例等功能。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Nacos&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Nacos&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Nacos&quot;&gt;&lt;/a&gt;Spring Cloud-Nacos&lt;/h1&gt;&lt;h2 id=&quot;认</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Sleuth</title>
    <link href="https://devildyw.github.io/2022/08/10/Spring%20Cloud-Sleuth/"/>
    <id>https://devildyw.github.io/2022/08/10/Spring%20Cloud-Sleuth/</id>
    <published>2022-08-10T15:24:45.000Z</published>
    <updated>2022-08-11T11:39:32.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud-Sleuth"></a>Spring Cloud-Sleuth</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经果多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或者错误都会引起整个请求最后的失败。因此，就需要一些能够帮助理解系统行为、分析系统性能问题的工具， 以便在系统发生故障的时候，快速定位和解决问题。这些工具就是<code>APM</code>（Application Performance Management）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111809578.png" alt="image-20220811180900496"></p><p>复杂的分布式服务调用链路</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111809444.png" alt="image-20220811180918384"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud Sleuth 能够跟踪你的请求和消息，以便你可以将该通信与相应的日志条目相关联。 你还可以将跟踪信息导出到外部系统以可视化延迟。</p><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p><p>在分布式系统中提供追踪解决方案并且兼容支持了<code>zipkin</code>。</p><p>通过Seuth产生的调用链监控信息，可以得知微服务之间的调用链路，但监控信息只输出到控制台不方便查看。我们需要一个<strong>图形化的工具zipkin</strong>。Zipkin是Twitter开源的分布式跟踪系统，<strong>主要用来收集系统的时许数据，从而追踪系统的调用问题。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111822397.png" alt="img"></p><blockquote><p>官方<code>Github</code>地址：<a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></p></blockquote><h2 id="Zipkin搭建安装"><a href="#Zipkin搭建安装" class="headerlink" title="Zipkin搭建安装"></a>Zipkin搭建安装</h2><p>**docker安装部署<code>Zipkin</code>**。</p><p>Spring Cloud 从F版起已不需要自己构建<code>Zipkin</code> server了，只需要调用jar包即可，所以用Docker部署更为简单，只需要一个命令即可安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111832618.png" alt="image-20220811183218576"></p><p>开启云服务器端口后，就算是部署完成了。</p><p>访问<code>http://ip:端口/zipkin/</code>即可看到<code>zipkin</code>图形化控制台。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>Spring Cloud Sleuth 借用了 Dapper 的术语。</p><ol><li><strong>Span</strong></li></ol><blockquote><p>基本工作单元，表示调用链路来源。 span用一个64位的id唯一标识。除ID外，span还包含其他数据，例如描述、时间戳事件、键值对的注解（标签）， spanID、span父 ID等。 span被启动和停止时，记录了时间信息。初始化 span被为”rootspan”，该 span的 id和 trace的 ID相等。<strong>通俗的理解span就是一次请求信息</strong></p></blockquote><ol start="2"><li><strong>Trace</strong></li></ol><blockquote><p>一组共享”rootspan”的 span组成的树状结构称为 trace， trace也用一个64位的 ID唯一标识， trace中的所有 span都共享该 trace的 ID</p></blockquote><ol start="3"><li><strong>Annotation&#x2F;Event</strong></li></ol><blockquote><p>用于及时记录某个事件的存在</p></blockquote><blockquote><ol><li><p>CS（ Client sent客户端发送）：客户端发起一个请求，该 annotation描述了span的开始。</p></li><li><p>SR（ server Received服务器端接收）：服务器端获得请求并准备处理它。如果用 SR减去 CS时间戳，就能得到网络延迟。</p></li><li><p>SS（ server sent服务器端发送）：该 annotation表明完成请求处理（当响应发回客户端时）。如果用 SS减去 SR时间戳，就能得到服务器端处理请求所需的时间。</p></li><li><p>CR（ Client Received客户端接收）： span结束的标识。客户端成功接收到服务器端的响应。如果 CR减去 CS时间戳，就能得到从客户端发送请求到服务器响应的所需的时间。</p></li></ol></blockquote><p>下图显示了Span和Trace在系统中的流转</p><p><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/main/docs/src/main/asciidoc/images/trace-id.jpg" alt="跟踪信息传播"></p><p>每个note色块代表着一个span，（有七个span - 从A到G），思考一下下面的note</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> D</span><br><span class="line">Client Sent</span><br></pre></td></tr></table></figure><p>此note表明当前span将Trace Id设置为X并将span Id设置为D。此外，从 <code>RPC</code> 的角度来看，发生了 Client Sent 事件。</p><p>再思考一下下面note，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> A</span><br><span class="line">(no custom span)</span><br><span class="line"></span><br><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> C</span><br><span class="line">(custom span)</span><br></pre></td></tr></table></figure><p>您可以继续使用创建的span（带有no custom span指示的示例），也可以手动创建子span（带有custom span指示的示例）。 </p><p>下图显示了span的父子关系的流转：</p><p><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/main/docs/src/main/asciidoc/images/parents.jpg" alt="Parent child relationship"></p><h2 id="搭建链路监控"><a href="#搭建链路监控" class="headerlink" title="搭建链路监控"></a>搭建链路监控</h2><p>Spring Cloud Sleuth 的maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务消费者和服务生产者都新添加该依赖。</p><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p><code>Cloud-eureka-provider-payment8001</code></p><p>修改<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://36.137.128.27:9411/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="string">......</span>     </span><br></pre></td></tr></table></figure><p>修改业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">......   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/zipkin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi ,i&#x27;am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><code>Cloud-eureka-consumer-order80</code></p><p>修改<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://36.137.128.27:9411/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="string">......</span>     </span><br></pre></td></tr></table></figure><p>修改业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动eureka注册中心，生产者，消费者</p><p>调用接口<code>get: http://localhost:80/consumer/payment/zipkin</code>调用成功后，观察zipkin图形控制台信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111933098.png" alt="image-20220811193308993"></p><p>我们选择根据服务名称查询，选择好对应的服务名后，点击<code>RUN QUERY</code> 即可获得每次请求的链路跟踪信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111934252.png" alt="image-20220811193429168"></p><p>图上显示了每次调用的链路基本信息</p><p>点击SHOW还可以看到更多详细的信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111935689.png" alt="image-20220811193542614"></p><p>包括请求持续时间，链路上的服务数量，TraceID等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Sleuth&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Sleuth&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Sleuth&quot;&gt;&lt;/a&gt;Spring Cloud-Sleuth&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="链路跟踪" scheme="https://devildyw.github.io/categories/%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Stream</title>
    <link href="https://devildyw.github.io/2022/08/10/Spring%20Cloud-Stream/"/>
    <id>https://devildyw.github.io/2022/08/10/Spring%20Cloud-Stream/</id>
    <published>2022-08-10T09:30:35.000Z</published>
    <updated>2022-08-11T07:26:23.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为什么要引入Spring Cloud Stream？</p><p>如今市场上有着4大流行的 <code>MQ</code> （消息中间件）如：<code>ActiveMQ</code>、<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Kafka</code>。在不同系统中可能使用的消息中间件不同，这就需要程序员对每种的消息中间件去掌握，如果每一种消息中间件都去掌握的话，是一件费时又费力的事情，而且还要涉及到消息中间件的切换，维护，和开发。</p><p>有没有一种新的技术诞生？</p><p>让我们不再关注具体 <code>MQ</code> 的细节，我们只需要用一种适配绑定的方式，自动的给我们在各种 <code>MQ</code> 内切换。（类似于JDBC）</p><p><strong>Spring Cloud Stream 响应诞生</strong>，它是<strong>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p><p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream 中 binder 对象交互。</p><p>通过我们配置来binding（绑定），而Spring Cloud Stream 的 binder 对象负责于消息中间件交互。</p><p>所以，我们只需要搞清楚如何于 Spring Cloud Stream 交互就可以方便使用消息驱动方式。</p><p>通过使用 Spring Integration来连接消息代理中间件以实现消息事件驱动。</p><p>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了<strong>发布-订阅、消费组、分区</strong>的三个概念</p><p><strong>目前官方只支持 RabbitMQ、Kafka</strong></p><blockquote><p>Spring Cloud Stream 官方地址：<a href="https://spring.io/projects/spring-cloud-stream#overview">Spring Cloud Stream-Spring.io</a></p><p>Spring Cloud Stream 中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">Spring Cloud Stream 中文指导手册</a></p></blockquote><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="标准-MQ"><a href="#标准-MQ" class="headerlink" title="标准 MQ"></a>标准 <code>MQ</code></h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101804867.png" alt="image-20220810180406037"></p><p>标准的 <code>MQ</code> 中 生产者&#x2F;消费者之间靠Message（消息）媒介传递信息内容</p><p>消息必须走特定的通道–消息通道<code>MessageChannel</code></p><p>消息通道里的消息由<code>MessageChannel</code>的子接口<code>SubscribableChannel</code>转发，由<code>MessageHandler</code>消息处理器订阅消费</p><h3 id="为什么使用Spring-Cloud-Stream"><a href="#为什么使用Spring-Cloud-Stream" class="headerlink" title="为什么使用Spring Cloud Stream?"></a>为什么使用Spring Cloud Stream?</h3><p>假如说我们用到了<code>RabbitMQ</code>和<code>Kafka</code>，由于这两个消息中间件的架构上的不同，像<code>RabbitMQ</code>由exchange，<code>kafka</code>由Topic和Partitions分区。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101838002.png" alt="image-20220810183809938"></p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用两个消息队列的其中一种，后面的业务需求，我们向往另外一种消息队列进行迁移，这时无疑就是一个灾难性的，<strong>一大堆东西都要重新推倒重新做</strong>，因为它更我们的系统耦合了，这时候Spring Cloud Stream给我们提供了一种解耦合的方式。</p><h4 id="为什么Spring-Cloud-Stream可以统一底层差异"><a href="#为什么Spring-Cloud-Stream可以统一底层差异" class="headerlink" title="为什么Spring Cloud Stream可以统一底层差异"></a>为什么Spring Cloud Stream可以统一底层差异</h4><p>在没有绑定器这个概念的请款下，我们的Spring Boot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，他们的实现细节上会有较大的差异性</p><p>通过定义绑定器作为中间层，完美地实现了<strong>应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101849568.png" alt="image-20220810184906483"></p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>在没有绑定器这个概念的情况下，完美的Spring Boot应用要直接与消息中间件进行消息交互的时候，由于各个消息中间件构建的初衷哦那个不同，它们的实现细节上会有较大的差异性。通过定义绑定器作为中间层，完美地实现了<strong>应用程序与消息中间件细节之间的隔离</strong>。Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的动态的切换中间件（<code>rabbitMQ</code>切换为<code>Kafka</code>），使得微服务开发的高度解耦，服务可以关注更多自己的业务流程。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101938238.png" alt="img"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101937891.gif" alt="img"></p><p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p><blockquote><p><strong>INPUT对应于消费者</strong></p><p><strong>OUTPUT对应于生产者</strong></p></blockquote><p><strong>Spring Cloud Stream中的消息通信遵循了发布-订阅模式，使用Topic（主题）进行广播</strong>，主题这个概念在Kafka中就是Topic，在<code>RabbitMQ</code>中就是Exchange（交换机）</p><h2 id="Spring-Cloud-Stream-标准流程"><a href="#Spring-Cloud-Stream-标准流程" class="headerlink" title="Spring Cloud Stream 标准流程"></a>Spring Cloud Stream 标准流程</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101907035.png" alt="image-20220810190738980"></p><p>上述中展示了4种Spring Cloud Stream的组件，分别是<strong>Binder</strong>、<strong>Channel</strong>、<strong>Source</strong>和<strong>Sink</strong>。</p><p><strong>作用</strong></p><p><strong>Binder</strong>：很方便的连接中间件，屏蔽差异</p><p><strong>Channel</strong>：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p><p><strong>Source和Sink</strong>：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</p><h2 id="RabbitMQ-Binder-配置"><a href="#RabbitMQ-Binder-配置" class="headerlink" title="RabbitMQ Binder 配置"></a><code>RabbitMQ</code> Binder 配置</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>要使用 <code>RabbitMQ</code> binder，您可以使用以下 Maven 坐标将其添加到 Spring Cloud Stream 应用程序中：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者，您可以使用 Spring Cloud Stream RabbitMQ Starter，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><h4 id="RabbitMQ-Binder属性"><a href="#RabbitMQ-Binder属性" class="headerlink" title="RabbitMQ Binder属性"></a>RabbitMQ Binder属性</h4><p>默认情况下，<code>RabbitMQ</code> binder 使用 Spring Boot 的<code>ConnectionFactory</code>. 因此，它支持 <code>RabbitMQ</code> 的所有 Spring Boot 配置选项（<a href="https://devildyw.github.io/2022/07/29/RabbitMQ/">RabbitMQ</a>）。<code>RabbitMQ</code> 配置选项使用<code>spring.rabbitmq</code>前缀。</p><p>除了 Spring Boot 选项之外，<code>RabbitMQ</code> binder 还支持以下属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.adminAddresses</em></td><td align="center"></td><td align="center">空</td></tr><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.nodes</em></td><td align="center"></td><td align="center">空</td></tr><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.compressionLevel</em></td><td align="center">压缩绑定的压缩级别。</td><td align="center">1(BEST_LEVEL)</td></tr><tr><td align="center"><em>spring.cloud.stream.binder.connection-name-prefix</em></td><td align="center">连接名称前缀，用于命名此绑定器创建的连接。名称是此前缀后跟<code>#n</code>，<code>n</code>每次打开新连接时都会递增。</td><td align="center">无（Spring AMQP 默认值）</td></tr></tbody></table><h4 id="RabbitMQ-消费者属性"><a href="#RabbitMQ-消费者属性" class="headerlink" title="RabbitMQ 消费者属性"></a>RabbitMQ 消费者属性</h4><p>以下属性仅适用于 Rabbit 消费者，并且必须以 <code>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.consumer. </code>为前缀</p><p>但是，如果需要将同一组属性应用于大多数绑定，为避免重复，Spring Cloud Stream 支持为所有通道设置值，格式为<code>spring.cloud.stream.rabbit.default.&lt;property&gt;=&lt;value&gt;</code>.</p><p>另外，请记住，<strong>绑定特定属性将在默认情况下覆盖为其配置的全局属性</strong>。</p><table><thead><tr><th align="center"><strong>属性</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><em>acknowledgeMode</em></td><td align="center">消费者端的<code>ACK</code>模式</td><td align="center"><code>AUTO</code></td></tr><tr><td align="center"><em>anonymousGroupPrefix</em></td><td align="center">当绑定没有<code>group</code>属性时，一个匿名且自动删除的队列被绑定到目标交换机上，此类队列会由默认命名策略生成一个名为<code>anonymous.&lt;base64 representation of a UUID&gt;</code>的属性值。设置此属性可将前缀更改为默认值以外的值。</td><td align="center"><code>anonymous.</code></td></tr><tr><td align="center"><em>autoBindDlq</em></td><td align="center">是否自动声明 DLQ（死信队列） 并将其绑定到 binder DLX（死信交换机）。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>bindingRoutingKey</em></td><td align="center">将队列绑定到交换器的路由键（如果<code>bindQueue</code>是<code>true</code>）。可以是多个键 - 请参阅<code>bindingRoutingKeyDelimiter</code>。对于分区目标，<code>-&lt;instanceIndex&gt;</code>附加到每个键。</td><td align="center"><code>#</code></td></tr><tr><td align="center"><em>bindingRoutingKeyDelimiter</em></td><td align="center">当该属性不为空时，<code>bindingRoutingKey</code> 被认为是由该值分隔的键列表；通常使用逗号。</td><td align="center"><code>null</code></td></tr><tr><td align="center"><em>bindQueue</em></td><td align="center">是否声明队列并将其绑定到目标交换机。如果您已经设置了自己的基础架构并且之前已经创建并绑定了队列，请将其设置为<code>false</code>。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>consumerTagPrefix</em></td><td align="center">用于创建消费者标签；将添加每个消费者创建的<code>#n</code>增量<code>n</code>。 示例：<code>$&#123;spring.application.name&#125;-$&#123;spring.cloud.stream.bindings.input.group&#125;-$&#123;spring.cloud.stream.instance-index&#125;</code>。</td><td align="center">无 - 代理将生成随机消费者标签</td></tr><tr><td align="center"><em>containerType</em></td><td align="center">选择要使用的侦听器容器的类型。</td><td align="center"><code>simple</code></td></tr><tr><td align="center"><em>deadLetterQueueName</em></td><td align="center">DLQ（死信队列） 的名称</td><td align="center"><code>prefix+destination.dlq</code></td></tr><tr><td align="center"><em>deadLetterExchange</em></td><td align="center">分配给队列的 DLX（死信交换机）。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。</td><td align="center"><code>prefix+DLX</code></td></tr><tr><td align="center"><em>deadLetterExchangeType</em></td><td align="center">要分配给队列的 DLX 的类型。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。</td><td align="center"><code>direct</code></td></tr><tr><td align="center"><em>deadLetterRoutingKey</em></td><td align="center">绑定交换机的死信路由键，仅当<code>autoBindDlq</code>为<code>true</code>才相关。</td><td align="center"><code>destination</code></td></tr><tr><td align="center"><em>declareDlx</em></td><td align="center">是否为指定<code>destination</code>声明 DLX，仅当<code>autoBindDlq</code>是<code>true</code>时才相关。如果你有与配置的 DLX 请设置为 <code>false</code></td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>declareExchange</em></td><td align="center">是否为指定<code>destination</code>声明交换机</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>delayedExchange</em></td><td align="center">是否为指定<code>destination</code>声明<code>Delayed Message Exchagne</code>（延迟交换机）。需要在broker上安装<code>Delayed Message Exchagne</code> 插件。将参数 <code>exchageType</code> 设置为 <code>x-delayed-type</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqBindingArguments</em></td><td align="center">将 dlq 绑定到死信交换时应用的参数；用于<code>headers</code> <code>deadLetterExchangeType</code>指定要匹配的标头。例如<code>…dlqBindingArguments.x-match=any</code>，<code>…dlqBindingArguments.someHeader=someValue</code>。</td><td align="center">空</td></tr><tr><td align="center"><em>dlqDeadLetterExchange</em></td><td align="center">如果声明了 DLQ，则分配给该队列一个 DLX。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqDeadLetterRoutingKey</em></td><td align="center">如果一个 DLQ 被声明了，会分配给该队列一个死信路由key</td><td align="center">无</td></tr><tr><td align="center"><em>dlqExpires</em></td><td align="center">一个死信队列超过多长时间后被删除。</td><td align="center">不过期</td></tr><tr><td align="center"><em>dlqLazy</em></td><td align="center">声明一个带有<code>x-queue-mode=lazy</code>参数的死信队列（即 <strong>惰性死信队列</strong>），考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqMaxLength</em></td><td align="center">死信队列中的可存储最大消息数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>dlqMaxLengthBytes</em></td><td align="center">死信队列中所有消息的最大总字节数和。</td><td align="center">不限制</td></tr><tr><td align="center"><em>dlqMaxPriority</em></td><td align="center">死信队列中消息的最大优先级</td><td align="center">无</td></tr><tr><td align="center"><em>dlqOverflowBehavior</em></td><td align="center">超过<code>dlqMaxLength</code>或<code>dlqMaxLengthBytes</code>时采取的行动；由<code>drop-head</code>和<code>reject-publish</code>两种</td><td align="center">无</td></tr><tr><td align="center"><em>dlqQuorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，邮件将被丢弃或死信。</td><td align="center">无  - 将应用代理默认值。</td></tr><tr><td align="center"><em>dlqQuorum.enabled</em></td><td align="center">如果为 true，则创建仲裁死信队列而不是普通队列。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqQuorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>dlqSingleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true，即<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqTtl</em></td><td align="center">声明时应用于死信队列的默认生存时间（以毫秒为单位）。</td><td align="center">不限制</td></tr><tr><td align="center"><em>durableSubscription</em></td><td align="center">订阅是否应该是持久的。仅当<code>group</code>也设置时才有效。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeAutoDelete</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机会被自动删除（即在最后一个队列被删除后删除）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeDurable</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机是持久的（即，它在broker重启后仍然存在）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeType</em></td><td align="center">交换类型：<code>direct</code>, <code>fanout</code>,<code>headers</code>或<code>topic</code>用于非分区<code>destination</code>和<code>direct</code>, 标头或<code>topic</code>用于分区<code>destination</code>。</td><td align="center"><code>topic</code></td></tr><tr><td align="center"><em>exclusive</em></td><td align="center">是否创建单一活动的消费者，如果该属性值为<code>true</code>，则最大消费者数为1。多个消费者同时监听同一个队列，同一时间只能有一个消费者去消费消息，其他的消费者都处于等待状态，当该消费者失败或者关闭时，另一个消费者才将成为“活跃”消费者并恢复消费。（原理参阅请参阅<code>recoveryInterval</code>，它控制备用实例尝试使用的频率。）在使用 <code>RabbitMQ 3.8</code> 或更高版本时考虑使用<code>singleActiveConsumer</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>expires</em></td><td align="center">队列未使用被删除的时间（存活时间）</td><td align="center">不过期</td></tr><tr><td align="center"><em>failedDeclarationRetryInterval</em></td><td align="center">如果队列丢失，重试消费的时间间隔</td><td align="center">5000</td></tr><tr><td align="center"><em>frameMaxHeadroom</em></td><td align="center">将堆栈跟踪添加到 DLQ 消息标头时为其他标头保留的字节数。所有标头必须适合<code>frame_max</code>代理上配置的大小。堆栈跟踪可能很大；如果大小加上此属性超过<code>frame_max</code>，则堆栈跟踪将被截断。将写入 WARN 日志；考虑<code>frame_max</code>通过捕获异常并抛出具有较小堆栈跟踪的异常来增加或减少堆栈跟踪。</td><td align="center">20000</td></tr><tr><td align="center"><em>headerPatterns</em></td><td align="center">标头模式</td><td align="center">&#96;&#96;[‘*’]<code>所有标题</code></td></tr><tr><td align="center"><em>lazy</em></td><td align="center">是否用参数声明队列<code>x-queue-mode=lazy</code>，惰性队列，考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>maxConcurrency</em></td><td align="center">最大消费者数。<code>containerType</code>是<code>direct</code>时不支持。</td><td align="center">1</td></tr><tr><td align="center"><em>maxLength</em></td><td align="center">普通队列中的最大消息数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>maxLengthBytes</em></td><td align="center">普通队列中所有消息的最大总字节数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>maxPriority</em></td><td align="center">普通队列中消息的最大优先级 (0-255)</td><td align="center">无</td></tr><tr><td align="center"><em>missingQueuesFatal</em></td><td align="center">当找不到队列时，是否将条件视为致命并停止监听听器容器。默认为<code>false</code>使容器不断尝试从队列中消费</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>overflowBehavior</em></td><td align="center"><code>maxLength</code>超过或超过时采取的行动<code>maxLengthBytes</code>；目前有<code>drop-head</code>或<code>reject-publish</code>两种</td><td align="center">无</td></tr><tr><td align="center"><em>prefetch</em></td><td align="center">每个消费者可以处理的未确认消息的最大数量</td><td align="center">1</td></tr><tr><td align="center"><em>prefix</em></td><td align="center">要添加到<code>destination</code>和 队列名称的前缀。</td><td align="center">””</td></tr><tr><td align="center"><em>queueBindingArguments</em></td><td align="center">将队列绑定到交换器时应用的参数；用于<code>headers</code> <code>exchangeType</code>指定要匹配的标头。例如<code>…queueBindingArguments.x-match=any</code>，<code>…queueBindingArguments.someHeader=someValue</code>。</td><td align="center">空</td></tr><tr><td align="center"><em>queueDeclarationRetries</em></td><td align="center">如果队列丢失，则重试从队列消费的次数。仅当<code>missingQueuesFatal</code>是<code>true</code>时才相关。否则，容器会无限期地重试。<code>containerType</code>是<code>direct</code>时不支持。</td><td align="center">3</td></tr><tr><td align="center"><em>queueNameGroupOnly</em></td><td align="center">如果为 <code>true</code>，则从名称等于 <code>group</code> 的队列中消费。否则从队列名称为 <code>destination.group</code> 队列中消费。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，消息将被丢弃或死信。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>quorum.enabled</em></td><td align="center">如果为 true，则创建仲裁队列而不是普通队列。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>recoveryInterval</em></td><td align="center">连接恢复尝试之间的间隔，以毫秒为单位。</td><td align="center">5000</td></tr><tr><td align="center"><em>requeueRejected</em></td><td align="center">当消息消费失败重试机制被关闭或者<code>republishToDlq</code> 为 <code>false</code>时，重新入队失败后是否还应该重新入队，</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>republishDeliveryMode</em></td><td align="center">当<code>republishToDlq</code> 为 <code>false</code>时，指定重新发布消息的传递模式。</td><td align="center"><code>DeliveryMode.PERSISTENT</code></td></tr><tr><td align="center"><em>republishToDlq</em></td><td align="center">默认情况下，重试次数用尽后失败的消息将被拒绝。如果配置了死信队列 (DLQ)，RabbitMQ 会将失败的消息（未更改）路由到 DLQ。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>singleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true。称为<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>transacted</em></td><td align="center">是否使用channel-transacted，即是否在消息中使用事务</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>ttl</em></td><td align="center">声明时应用到队列的默认生存时间（以毫秒为单位）。</td><td align="center">无限制</td></tr><tr><td align="center"><em>txSize</em></td><td align="center">设置transaction-size的数量，当<code>acknowledgeMode</code>为AUTO时，容器会在处理txSize数目消息之后才开始应答,<code>containerType</code>是 <code>direct</code> 时不支持。</td><td align="center">1</td></tr></tbody></table><h4 id="RabbitMQ-生产者属性"><a href="#RabbitMQ-生产者属性" class="headerlink" title="RabbitMQ 生产者属性"></a>RabbitMQ 生产者属性</h4><p>以下属性仅适用于 Rabbit 生产者，并且必须以<code>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.producer.</code>作为前缀。</p><p>如果需要将同一组属性应用于大多数绑定，为避免重复，Spring Cloud Stream 支持为所有通道设置值，格式为<code>spring.cloud.stream.rabbit.default.&lt;property&gt;=&lt;value&gt;</code>.</p><p>另外，请记住，<strong>绑定特定属性将在默认情况下覆盖其全局配置属性。</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><em>autoBindDlq</em></td><td align="center">是否自动声明 DLQ（死信队列） 并将其绑定到 binder DLX（死信交换机）。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>batchingEnabled</em></td><td align="center">是否启用生产者的消息批处理。消息根据以下属性（在此列表的下三个条目中描述）被批处理为一条消息：<code>batchSize</code> <code>batchBufferLimit</code>、 和<code>batchTimeout</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>batchSize</em></td><td align="center">启用批处理时要缓冲的消息数。</td><td align="center">100</td></tr><tr><td align="center"><em>batchBufferLimit</em></td><td align="center">启用批处理时的最大缓冲区大小。</td><td align="center">10000</td></tr><tr><td align="center"><em>batchTimeout</em></td><td align="center">启用批处理时的批处理超时。</td><td align="center">5000</td></tr><tr><td align="center"><em>bindingRoutingKey</em></td><td align="center">将队列绑定到交换器的路由键（如果<code>bindQueue</code>是<code>true</code>）。可以是多个键 - 请参阅<code>bindingRoutingKeyDelimiter</code>。对于分区目标，<code>-&lt;instanceIndex&gt;</code>附加到每个键。</td><td align="center"><code>#</code></td></tr><tr><td align="center"><em>bindingRoutingKeyDelimiter</em></td><td align="center">当该属性不为空时，<code>bindingRoutingKey</code> 被认为是由该值分隔的键列表；通常使用逗号。</td><td align="center"><code>null</code></td></tr><tr><td align="center"><em>bindQueue</em></td><td align="center">是否声明队列并将其绑定到目标交换机。如果您已经设置了自己的基础架构并且之前已经创建并绑定了队列，请将其设置为<code>false</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>compress</em></td><td align="center">发送时是否应压缩数据。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>confirmAckChannel</em></td><td align="center">当 <code>errorChannelEnabled</code>为true时，向其发送肯定的交付确认（又名发布者确认）的通道。如果通道不存在，则<code>DirectChannel</code>使用此名称注册。连接工厂必须配置为<code>publisher confirms</code>为 <code>true</code></td><td align="center"><code>nullChannel</code>（<code>acks</code> are discarded）</td></tr><tr><td align="center"><em>deadLetterQueueName</em></td><td align="center">DLQ（死信队列） 的名称仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>prefix+destination.dlq</code></td></tr><tr><td align="center"><em>deadLetterExchange</em></td><td align="center">分配给队列的 DLX。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>prefix+DLX</code></td></tr><tr><td align="center"><em>deadLetterExchangeType</em></td><td align="center">分配给队列的 DLX。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>direct</code></td></tr><tr><td align="center"><em>deadLetterRoutingKey</em></td><td align="center">分配给队列的死信路由键。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>destination</code></td></tr><tr><td align="center"><em>declareDlx</em></td><td align="center">是否为<code>destination</code>申报死信交换机。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。如果您有预配置的 DLX，请设置为<code>false</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>declareExchange</em></td><td align="center">是否为<code>destination</code>申报交换机</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>delayExpression</em></td><td align="center">一个 SpEL 表达式，用于评估应用于消息（<code>x-delay</code>标头）的延迟。如果交换机不是延迟消息交换机，则无效。</td><td align="center">不设置x-delay标头</td></tr><tr><td align="center"><em>delayedExchange</em></td><td align="center">是否将交易所声明为<code>Delayed Message Exchange</code>. 需要broker上安装延迟消息交换插件。将参数 <code>exchageType</code> 设置为 <code>x-delayed-type</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>deliveryMode</em></td><td align="center">消息持久化</td><td align="center"><code>PERSISTENT</code></td></tr><tr><td align="center"><em>dlqBindingArguments</em></td><td align="center">将 dlq 绑定到死信交换时应用的参数；用于<code>headers</code> <code>deadLetterExchangeType</code>指定要匹配的标头。例如<code>…dlqBindingArguments.x-match=any</code>，<code>…dlqBindingArguments.someHeader=someValue</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">空</td></tr><tr><td align="center"><em>dlqDeadLetterExchange</em></td><td align="center">声明 DLQ 时，分配给该队列的 DLX。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqDeadLetterRoutingKey</em></td><td align="center">声明 DLQ 时，分配给该队列的死信路由键。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqExpires</em></td><td align="center">删除超过该事件的未使用的死信队列（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">不过期</td></tr><tr><td align="center"><em>dlqLazy</em></td><td align="center">声明一个带有<code>x-queue-mode=lazy</code>参数的死信队列（即 <strong>惰性死信队列</strong>），考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqMaxLength</em></td><td align="center">死信队列中的最大消息数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>dlqMaxLengthBytes</em></td><td align="center">所有消息的死信队列中的最大总字节数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>dlqMaxPriority</em></td><td align="center">死信队列中消息的最大优先级 (0-255) 仅在<code>requiredGroups</code>提供时适用，然后仅适用于那些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqQuorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，邮件将被丢弃或死信。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>dlqQuorum.enabled</em></td><td align="center">如果为 true，则创建仲裁死信队列而不是普通队列。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqQuorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>dlqSingleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true，即<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqTtl</em></td><td align="center">声明时应用于死信队列的默认生存时间（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>exchangeAutoDelete</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机会被自动删除（即在最后一个队列被删除后删除）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeDurable</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机是持久的（即，它在broker重启后仍然存在）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeType</em></td><td align="center">交换类型：<code>direct</code>, <code>fanout</code>,<code>headers</code>或<code>topic</code>用于非分区<code>destination</code>和<code>direct</code>, 标头或<code>topic</code>用于分区<code>destination</code>。</td><td align="center"><code>topic</code></td></tr><tr><td align="center"><em>expires</em></td><td align="center">队列未使用被删除的时间（存活时间）</td><td align="center">不过期</td></tr><tr><td align="center"><em>headerPatterns</em></td><td align="center">标头模式</td><td align="center"><code>[&#39;*&#39;]</code>所有标题</td></tr><tr><td align="center"><em>lazy</em></td><td align="center">是否用参数声明队列<code>x-queue-mode=lazy</code>，惰性队列，考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>maxLength</em></td><td align="center">普通队列中的最大消息数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>maxLengthBytes</em></td><td align="center">普通队列中所有消息的最大总字节数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>maxPriority</em></td><td align="center">普通队列中消息的最大优先级 (0-255)。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>prefix</em></td><td align="center">要添加到<code>destination</code>交换机所名称的前缀。</td><td align="center">””</td></tr><tr><td align="center"><em>queueBindingArguments</em></td><td align="center">将队列绑定到交换器时应用的参数；用于<code>headers</code> <code>exchangeType</code>指定要匹配的标头。例如<code>…queueBindingArguments.x-match=any</code>，<code>…queueBindingArguments.someHeader=someValue</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">空</td></tr><tr><td align="center"><em>queueNameGroupOnly</em></td><td align="center">如果为 <code>true</code>，则从名称等于 <code>group</code> 的队列中消费。否则从队列名称为 <code>destination.group</code> 队列中消费。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，消息将被丢弃或死信。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>quorum.enabled</em></td><td align="center">如果为 true，则创建仲裁队列而不是普通队列。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.initialQuorumSize</em></td><td align="center">仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>routingKeyExpression</em></td><td align="center">一个 SpEL 表达式，用于确定发布消息时要使用的路由键。对于固定路由键，请使用<code>routingKey</code>.</td><td align="center"><code>destination</code>或<code>destination-&lt;partition&gt;</code>用于分区目标。</td></tr><tr><td align="center"><em>routingKey</em></td><td align="center">定义发布消息时使用的固定路由键的字符串。</td><td align="center">见<code>routingKeyExpression</code></td></tr><tr><td align="center"><em>singleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true。称为<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>transacted</em></td><td align="center">是否使用channel-transacted，即是否在消息中使用事务</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>ttl</em></td><td align="center">声明时应用到队列的默认生存时间（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>useConfirmHeader</em></td><td align="center">详情查看 <a href="https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit#publisher-confirms">Publisher Confirms</a>. 与 <code>confirmAckChannel</code> 互斥。</td><td align="center"></td></tr></tbody></table><h3 id="Publisher-Confirms"><a href="#Publisher-Confirms" class="headerlink" title="Publisher Confirms"></a>Publisher Confirms</h3><p>有两种机制可以获取发布消息的结果；在每种情况下，连接工厂都必须<code>publisherConfirmType</code>设置<code>ConfirmType.CORRELATED</code>。 “<strong>legacy</strong>” 机制是将 <code>confirmAckChannel</code> 设置为以消息通道为名称的bean。您可以从中异步检索确认；否定确认被发送到错误通道（如果启用）</p><p>3.1 版中添加的<code>preferred</code>机制是使用<code>correlation data header</code>并通过其属性 <code>Future&lt;Confirm&gt;</code> 等待结果。这对于批处理监听器特别有用，因为您可以在等待结果之前发送多条消息。要使用此技术，请将<code>useConfirmHeader</code>属性设置为 <code>true</code>。以下简单应用程序是使用此技术的示例：     </p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.group</span>=<span class="string">someGroup</span></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.consumer.batch-mode</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.source</span>=<span class="string">output</span></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.output-out-0.producer.error-channel-enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.output-out-0.producer.useConfirmHeader</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.auto-bind-dlq</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.batch-size</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-confirm-type</span>=<span class="string">correlated</span></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge bridge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Consumer&lt;List&lt;String&gt;&gt; <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list -&gt; &#123;</span><br><span class="line">            List&lt;MyCorrelationData&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.forEach(str -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Received: &quot;</span> + str);</span><br><span class="line">                <span class="type">MyCorrelationData</span> <span class="variable">corr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCorrelationData</span>(UUID.randomUUID().toString(), str);</span><br><span class="line">                results.add(corr);</span><br><span class="line">                <span class="built_in">this</span>.bridge.send(<span class="string">&quot;output-out-0&quot;</span>, MessageBuilder.withPayload(str.toUpperCase())</span><br><span class="line">                        .setHeader(AmqpHeaders.PUBLISH_CONFIRM_CORRELATION, corr)</span><br><span class="line">                        .build());</span><br><span class="line">            &#125;);</span><br><span class="line">            results.forEach(correlation -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Confirm</span> <span class="variable">confirm</span> <span class="operator">=</span> correlation.getFuture().get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">                    log.info(confirm + <span class="string">&quot; for &quot;</span> + correlation.getPayload());</span><br><span class="line">                    <span class="keyword">if</span> (correlation.getReturnedMessage() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Message for &quot;</span> + correlation.getPayload() + <span class="string">&quot; was returned &quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// try to re-publish, send a DLQ, etc</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (ExecutionException | TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationRunner <span class="title function_">runner</span><span class="params">(BatchingRabbitTemplate template)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; IntStream.range(<span class="number">0</span>, <span class="number">10</span>).forEach(i -&gt;</span><br><span class="line">                template.convertAndSend(<span class="string">&quot;input-in-0&quot;</span>, <span class="string">&quot;input-in-0.rbgh303&quot;</span>, <span class="string">&quot;foo&quot;</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BatchingRabbitTemplate <span class="title function_">template</span><span class="params">(CachingConnectionFactory cf, TaskScheduler taskScheduler)</span> &#123;</span><br><span class="line">        <span class="type">BatchingStrategy</span> <span class="variable">batchingStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBatchingStrategy</span>(<span class="number">10</span>, <span class="number">1000000</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BatchingRabbitTemplate</span>(cf, batchingStrategy, taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCorrelationData</span> <span class="keyword">extends</span> <span class="title class_">CorrelationData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String payload;</span><br><span class="line"></span><br><span class="line">    MyCorrelationData(String id, String payload) &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">        <span class="built_in">this</span>.payload = payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>correlation data必须具有唯一<code>id</code>性，以便框架可以执行关联。</strong></p></blockquote><p>你不能同时设置<code>useConfirmHeader </code>和<code>confirmAckChannel</code>，但是当<code>useConfirmHeader</code>为true时仍然可以在错误通道中接收返回的消息，但是使用<code>correlation header</code>更方便。</p><h3 id="接收批量消息的配置"><a href="#接收批量消息的配置" class="headerlink" title="接收批量消息的配置"></a>接收批量消息的配置</h3><p>使用 <code>RabbitMQ</code> binder，有两种类型的批处理由消费者 bindings 处理：</p><h5 id="生产者创建的批处理消息"><a href="#生产者创建的批处理消息" class="headerlink" title="生产者创建的批处理消息"></a>生产者创建的批处理消息</h5><p>通常，如果生产者 bindings 具有<code>batch-enabled=true</code>，或者<code>BatchingRabbitTemplate</code>创建一条消息，批次元素将作为一个对监听器方法的单独调用返回。从<code>RabbitMQ3.0</code>开始，如果<code>spring.cloud.stream.bindings.&lt;name&gt;.consumer.batch-mode</code> 为 <code>true </code> 则任何此类批次消息都将以<code>List&lt;?&gt;</code>的形式传递到监听方法中，</p><h5 id="消费端批处理"><a href="#消费端批处理" class="headerlink" title="消费端批处理"></a>消费端批处理</h5><p>从3.1版本开始，将消费者可以配置为将多个入站消息组装成一个批处理，该批处理作为<code>List&lt;?&gt;</code>转换后的有效负载呈现给应用程序。以下简单的应用程序演示了如何使用此技术：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.group</span>=<span class="string">someGroup</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.consumer.batch-mode</span>=<span class="string">true #开启批处理模式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.enable-batching</span>=<span class="string">true #是否开启批处理</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.batch-size</span>=<span class="string">10  #批处理大小</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.receive-timeout</span>=<span class="string">200  #接收超时时间</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Consumer&lt;List&lt;Thing&gt;&gt; <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Received &quot;</span> + list.size());</span><br><span class="line">            list.forEach(thing -&gt; &#123;</span><br><span class="line">                System.out.println(thing);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationRunner <span class="title function_">runner</span><span class="params">(RabbitTemplate template)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            template.convertAndSend(<span class="string">&quot;input-in-0.someGroup&quot;</span>, <span class="string">&quot;&#123;\&quot;field\&quot;:\&quot;value1\&quot;&#125;&quot;</span>);</span><br><span class="line">            template.convertAndSend(<span class="string">&quot;input-in-0.someGroup&quot;</span>, <span class="string">&quot;&#123;\&quot;field\&quot;:\&quot;value2\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Thing</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Thing</span><span class="params">(String field)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getField</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(String field)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thing [field=&quot;</span> + <span class="built_in">this</span>.field + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Received 2</span><br><span class="line">Thing [field=value1]</span><br><span class="line">Thing [field=value2]</span><br></pre></td></tr></table></figure><p>批处理中的消息数量由<code>batch-size</code>和<code>receive-timeout</code>属性指定；如果<code>receive-timeout</code>过去没有新消息，则发送“短”批次。</p><blockquote><p>仅使用<code>container-type=simple</code>（默认）才支持消费者端批处理。</p></blockquote><p><strong>如果您想检查消费者端批处理消息的Headers，您应该使用<code>Message&lt;List&lt;?&gt;&gt;</code>；</strong></p><h3 id="使用现有队列-x2F-交换机"><a href="#使用现有队列-x2F-交换机" class="headerlink" title="使用现有队列&#x2F;交换机"></a>使用现有队列&#x2F;交换机</h3><p>默认情况下，绑定器将自动提供一个主题交换，其名称源自目标绑定属性的值<code>&lt;prefix&gt;&lt;destination&gt;</code>。如果未提供，则<code>destination</code>默认为 <code>bindings</code> 名称。绑定消费者时，将自动为队列提供名称<code>&lt;prefix&gt;&lt;destination&gt;.&lt;group&gt;</code>（如果<code>group</code>指定了绑定属性），或者为一个匿名名称（没有指定group的匿名队列会被自动删除）。对于非分区绑定或分区绑定，队列将使用“match-all”通配符路由键 ( <code>#</code> ) 绑定到交换机<code>&lt;destination&gt;-&lt;instanceIndex&gt;</code>。前缀默认为空字符串。如果使用 <code>requiredGroups</code> 指定了输出绑定，将为每个组提供一个队列&#x2F;绑定。</p><p>有许多特定于 rabbit 的绑定属性允许您修改此默认行为。</p><p>如果你想要使用现有交换&#x2F;队列，你可以完全禁用自动配置，假设交换机被命名<code>myExchange</code>并且队列被命名<code>myQueue</code>：</p><p><code>myQueue</code>：</p><ul><li><code>spring.cloud.stream.bindings.&lt;binding name&gt;.destination=myExhange</code></li><li><code>spring.cloud.stream.bindings.&lt;binding name&gt;.group=myQueue</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.bindQueue=false</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.declareExchange=false</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.queueNameGroupOnly=true</code></li></ul><p>如果您希望binder提供 队列&#x2F;交换机，但您想使用此处讨论的默认值以外的其他内容来执行此操作，请使用以下属性。</p><ul><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.bindingRoutingKey=myRoutingKey</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.exchangeType=&lt;type&gt;</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.producer.routingKeyExpression=&#39;myRoutingKey&#39;</code></li></ul><p>当 <code>autoBindDlq</code>为 <code>true</code>时，在声明死信交换&#x2F;队列时使用了类似的属性。</p><hr><h3 id="使用-RabbitMQ-Binder-重试"><a href="#使用-RabbitMQ-Binder-重试" class="headerlink" title="使用 RabbitMQ Binder 重试"></a>使用 RabbitMQ Binder 重试</h3><p>在 Binder 中启用重试后，监听器容器线程将在配置的周期的任何期间内暂停。当需要对<strong>单一消费者</strong>进行严格排序时，这时非常重要的。但是，对于其他用例，它会阻止在该线程上处理其他消息。</p><p>使用 Binder 重试的另一种方法是在死信队列 (DLQ) 上设置死信，以及在 DLQ 本身上设置死信配置。</p><ul><li>设置<code>autoBindDlq</code>为<code>true</code>。binder 创建一个 DLQ。或者，您可以在 <code>deadLetterQueueName</code> 中指定名称。</li><li>设置<code>dlqTtl</code>为重试等待时间。</li><li>将 <code>dlqDeadLetterExchange</code> 设置为默认交换。来自 DLQ 的过期消息被路由到原来的队列，因为默认<code>deadLetterRoutingKey</code>是队列名称 ( <code>destination.group</code>)。设置为默认交换机是通过将属性设置为无值来实现的，如下例所示。</li></ul><p>要强制消息为死信，请抛出一个<code>AmqpRejectAndDontRequeueException</code>或设置<code>requeueRejected</code>为<code>false</code>（默认值）并抛出任何异常。</p><p>循环无止境地继续，这对于暂时性问题很好，但您可能希望在尝试多次后放弃。幸运的是，RabbitMQ 提供了<code>x-death</code>标头，可以让您确定发生了多少个周期。</p><p>要在放弃后确认消息，请抛出<code>ImmediateAcknowledgeAmqpException</code>。</p><h2 id="编码案例"><a href="#编码案例" class="headerlink" title="编码案例"></a>编码案例</h2><p><strong>注意</strong>：在进行编码时至少需要完成<code>RabbitMQ</code>和<code>Kafka</code>种任意一个消息中间件的环境搭建 </p><p>这里我们演示Spring Cloud Stream RabbitMQ Binder 的案例</p><h3 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h3><ol><li><p>首先创建父工程<code>Cloud-09-Stream</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="子工程-消息驱动之生产者"><a href="#子工程-消息驱动之生产者" class="headerlink" title="子工程-消息驱动之生产者"></a>子工程-消息驱动之生产者</h3><ol><li><p>创建工程<code>Cloud-09-stream-rabbitMQ-provider8801</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-stream-rabbitMQ-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring Cloud Stream RabbitMQ Binder--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-out-0:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>  <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意<code>bingdings</code> 集合中的key由 通道名-out&#x2F;in-数字组成</p></blockquote></li><li><p>主启动类</p></li><li><p>业务类</p><p>消息发送接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.springcloud.serivce;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-10-19:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge streamBridge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> UUID.randomUUID().toString(); <span class="comment">//发送的消息</span></span><br><span class="line">        streamBridge.send(<span class="string">&quot;output&quot;</span>, serial);</span><br><span class="line">        log.debug(<span class="string">&quot;发送消息:&quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用<code>@Resource</code>注入<code>StreamBride</code>，<code>StreamBridge</code>的send方法第一个参数是binding的key名字，第二个参数是想要发送的消息</strong></p></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.devildyw.springcloud.serivce.IMessageProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="子工程-消息驱动之消费者"><a href="#子工程-消息驱动之消费者" class="headerlink" title="子工程-消息驱动之消费者"></a>子工程-消息驱动之消费者</h3><ol><li><p>创建工程<code>Cloud-09-stream-rabbitMQ-consumer8802</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-stream-rabbitMQ-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring Cloud Stream RabbitMQ Binder--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8803</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-in-0:</span> <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用Exchange名称定义</span></span><br><span class="line">          <span class="attr">contentType:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置为“text/plain”</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8803.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamConsumerService</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Consumer&lt;String&gt; <span class="title function_">myChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String message)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;message:&#123;&#125;&quot;</span>,message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述代码的方法名（即Consumer的bean实例名）需要是<code>yml</code>配置中的通道名，应用程序启动后会自动接收生产者发送的消息</strong></p></li></ol><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>启动eureka注册中心、生产者、消费者（8802）</p><p><code>RabbitMQ</code>图形控制界面新增了一个交换机，这个交换机也就是我们所设置的bindings 的 <code>myChannel</code> 的 <code>destination</code> ，在 <code>RabbitMQ</code> 中该 <code>destination</code> 值就是交换机</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102209425.png" alt="image-20220810220917325"></p><p>进入交换机查看详细信息，可以发现该交换机绑定了一个个队列，这个队列也就是我们消费者所监听的队列。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102203457.png" alt="image-20220810220306385"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102203631.png" alt="image-20220810220355584"></p><h2 id="消息重复消费问题"><a href="#消息重复消费问题" class="headerlink" title="消息重复消费问题"></a>消息重复消费问题</h2><p>将8802拷贝改名成为新的消费者8803，配置与业务类与8802完全相同</p><p>启动eureka注册中心、生产者、消费者（8802、8803）</p><p>可以看到交换机现在绑定了两个队列了，这两个队列就是我们消费者所监听的队列</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214091.png" alt="image-20220810221338704"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214171.png" alt="image-20220810220355584"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214095.png" alt="image-20220810221438351"></p><p>我们会发现同一条消息被两个消费者同时消费了，这样的情况在某些场景下是毁灭级别的。</p><p>比如在如下场景下，订单系统我们坐集群部署，都会从RabbitMQ中获取订单信息，那<strong>如果一个订单同时被两个服务获取到</strong>，那么就会造成数据错误，我们得避免这种情况。</p><p>这时<strong>我们就可以使用Stream中的消息分组来解决</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102218046.png" alt="image-20220810221759981"></p><p>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同组是可以全面消费的</strong>（重复消费）。</p><p><strong>同一组内会发生竞争关系，只有其中一个可以消费</strong>。</p><h3 id="导致重复消费的原因"><a href="#导致重复消费的原因" class="headerlink" title="导致重复消费的原因"></a>导致重复消费的原因</h3><p>默认分组group是不同的，组流水号不一样，被认为不同组，（不同组）可以消费同一条消息（广播）。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。<strong>不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费</strong>。</p><blockquote><p>Stream概念中的group，对应在<code>RabbitMQ</code>中就是队列的含义，交换机默认创建是Topic类型，而消费者创建的队列默认<code>routingKey</code>为 #，在 <code>RabbitMQ</code> 中我们学过 # 可以匹配一个或多个词，所以基本上交换机会将消息转发到所有于其相连的队列上。</p></blockquote><blockquote><p>Stream在我们没有配置group时，为我们创建一个随机的唯一的group名称这样的消费者我们称为匿名消费者，它所监听的队列也会在消费者关闭时被删除。如果想要将多个消费者分为一组，就需要手动指定了。</p></blockquote><p>为每个消费者设置<code>group</code>，同一组的消费者group名称要相同。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="string">......</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-in-0:</span> <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用Exchange名称定义</span></span><br><span class="line">          <span class="attr">contentType:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置为“text/plain”</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">receiveA</span> <span class="comment">#设置组名为receiveA</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure><p>配置完成后，重新启动消费者</p><p><code>RabbitMQ</code>图形界面可以发现交换机只绑定了一个队列，并且该队列的后缀就是我们所设置的组名。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102234521.png" alt="image-20220810223431446"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102301336.png" alt="image-20220810230132249"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102232791.png" alt="image-20220810223258747"></p><p>这次只有8803接收到了，尝试多次后只有一个消费者能够接收。说明重复消费问题解决。</p><blockquote><p>我们也可以主动配置交换机和队列，交换机的名称就是<code>destination</code>的值，而队列的名称则是交换机名称.group即<code>destinnation.group</code> 可以自己手动配置队列和交换机的属性，前提是你了解不同的消息中间件</p></blockquote><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>因为 <code>RabbitMQ</code> 的消息都是默认持久化的，生产者发送的消息会率先到达交换机，交换机转发到队列中，此时的消息会存放在 <code>RabbitMQ</code> 虽在主机的内存中，持久化的目的就是防止消息的丢失。</p><p>但是消息持久化的前提是队列也要持久化，否则队列都没了还谈什么消息呢？</p><p>将 exchange、queue 和 message 都进行持久化操作后，也不能保证消息一定不会丢失，消息存入<code>RabbitMQ</code> 之后，还需要一段时间才能存入硬盘。<code>RabbitMQ</code> 并不会为每条消息都进行同步存盘，如果在这段时间，服务器宕机或者重启，消息还没来得及保存到磁盘当中，就会丢失。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Stream&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Stream&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Stream&quot;&gt;&lt;/a&gt;Spring Cloud Stream&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="消息驱动" scheme="https://devildyw.github.io/categories/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Eureka</title>
    <link href="https://devildyw.github.io/2022/07/29/Spring%20Cloud-Eureka/"/>
    <id>https://devildyw.github.io/2022/07/29/Spring%20Cloud-Eureka/</id>
    <published>2022-07-29T15:48:18.000Z</published>
    <updated>2022-08-12T04:41:41.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><blockquote><p>注：Eureka中各个节点都是平等的，没有<code>ZK</code>中角色的概念，即使N-1个节点挂掉也不会影响其他节点的正常运行。</p></blockquote><p>虽然Eureka已经停止维护了，但是并不代表我们不去学习它，理解它的思想也是后来为学习其他注册中心打下基础。</p><blockquote><p>以下所有Demo都是基于上述入门案例改编。</p></blockquote><h2 id="服务调用出现的问题"><a href="#服务调用出现的问题" class="headerlink" title="服务调用出现的问题"></a>服务调用出现的问题</h2><ul><li>服务消费者该如何获取服务提供者的地址信息？</li><li>如果有多个服务提供者，消费者该如何选择？</li><li>消费者如何得知服务提供者的健康状态？</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121219787.png" alt="image-20220812121848429"></p><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p><code>Spring Cloud</code>封装<code>NetFlix</code>公司开发的<code>Eureka</code>模块来实现服务治理</p><p>那么什么事服务治理呢？</p><p>当服务较少的时候，可能我们根本不需要什么所谓的服务治理，会觉得这不就是中间商赚差价吗，为什么我能直接调用还要再中间加个服务治理呢？其实啊在传统的<code>RPC</code>框架中当服务多到一定程度时，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，熔断等，实现服务的注册与发现。</p><h3 id="服务注册-x2F-发现"><a href="#服务注册-x2F-发现" class="headerlink" title="服务注册&#x2F;发现"></a>服务注册&#x2F;发现</h3><p><code>Eureka</code>采用了<code>C/S</code>的设计架构，<code>Eureka Server</code>作为服务注册功能的服务器，他是服务注册中心。而系统中的其他微服务，使用<code>Eureka</code>的客户端连接到<code>Eureka Server</code>并维持心跳连接。这样系统的维护人员就可以通过<code>Eureka Server</code>来监控系统中各个微服务是否可以正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己的信息比如服务地址通讯地址等以别名的方式注册到注册中心上。另一方（消费者服务的提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址（<code>ip</code>地址），然后在实现本地<code>RPC</code>调用<code>RPC</code>远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与每个服务之间的依赖关系（服务治理概念）。在任何<code>RPC</code>远程调用框架中，都会有一个注册中心存放服务地址相关信息（接口地址）。</p><p>注册中心会维护所有注册到注册中心上的健康的服务的信息，当有消费者消费对应服务时，注册中心会返回服务的<code>ip</code>地址等信息，消费者在通过这些信息去远程调用服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/3956561052b9dc3909f16f1ff26d01bb.png" alt="img"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121220609.png" alt="image-20220812122041515"></p><p>8001、8003宕机后，注册中心通过心跳检测，会将这些服务信息剔除。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121221531.png" alt="image-20220812122114480"></p><h3 id="Eureka组件"><a href="#Eureka组件" class="headerlink" title="Eureka组件"></a>Eureka组件</h3><p>前面我们了解到，<code>Eureka</code>是<code>C/S</code>结构的，它有两个组件    <strong><code>Eureka Server</code> 和 <code>EurekaClient</code></strong></p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p>提供服务注册服务，就是我们所说的<code>Eureka</code>的服务端，提供服务治理的相关功能。</p><p>各个微服务节点通过配置启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表中将会存储所有可用的服务节点的信息，服务节点的信息可用在界面中直观的看到。</p><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>通过注册中心进行访问，<code>Eureka</code>的客户端，提供了与<code>Eureka</code>服务端交互的功能。</p><p>他是一个Java客户端，用于简化与<code>Eureka Server</code>的交互，客户端同时也具备一个内置的，使用轮询（<code>round-robin</code>）负载均衡算法的负载均衡器（用于同一个服务下多个提供者的情况），在应用启动后，将会</p><p>向<code>Eureka Server</code>发送心跳（默认周期30秒）。如果<code>Eureka Server</code>在多个心跳周期内没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除（默认90秒）。</p><h3 id="Eureka常用配置"><a href="#Eureka常用配置" class="headerlink" title="Eureka常用配置"></a>Eureka常用配置</h3><h4 id="Eureka-Server-1"><a href="#Eureka-Server-1" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p><code>Eureka Server</code>配置参数的格式：<code>eureka.server.xxx</code>。</p><ul><li><code>enable-self-preservation</code>：<ul><li>表示注册中心是否开启服务的自我保护能力（后面会介绍）。</li></ul></li><li><code>renewal-percent-threshold</code>：<ul><li>表示 Eureka Server 开启自我保护的系数，默认：0.85。</li></ul></li><li><code>eviction-interval-timer-in-ms</code>：<ul><li>表示 <code>Eureka Server</code> 清理无效节点的频率，默认 60000 毫秒（60 秒）。</li></ul></li></ul><h4 id="Eureka-Instance"><a href="#Eureka-Instance" class="headerlink" title="Eureka Instance"></a>Eureka Instance</h4><p><code>Eureka Instance</code> 的配置参数格式：<code>eureka.instance.xxx</code>。</p><ul><li><code>instance-id</code>：<ul><li>表示实例在注册中心注册的唯一ID。</li></ul></li><li><code>prefer-ip-address</code>：<ul><li><code>true</code>：实例以 <code>IP</code> 的形式注册</li><li><code>false</code>：实例以机器 <code>HOSTNAME</code> 形式注册</li></ul></li><li><code>lease-expiration-duration-in-seconds</code>：<ul><li>表示 <code>Eureka Server</code> 在接收到上一个心跳之后等待下一个心跳的秒数（默认 90 秒），若不能在指定时间内收到心跳，则移除此实例，并禁止此实例的流量。</li><li>此值设置太长，即使实例不存在，流量也能路由到该实例</li><li>此值设置太小，由于网络故障，实例会被取消流量</li><li><strong>需要设置为至少高于 <code>lease-renewal-interval-in-seconds</code> 的值，不然会被误移除了。</strong></li></ul></li><li><code>lease-renewal-interval-in-seconds</code>：<ul><li>表示 <code>Eureka Client</code> 向 <code>Eureka Server</code> 发送心跳的频率（默认 30 秒），如果在 <code>lease-expiration-duration-in-seconds</code> 指定的时间内未收到心跳，则移除该实例。</li></ul></li></ul><h4 id="Eureka-Client-1"><a href="#Eureka-Client-1" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>Eureka Client 的配置参数格式：<code>eureka.client.xxx</code>。</p><ul><li><code>register-with-eureka</code>：<ul><li>表示此实例是否注册到 Eureka Server 以供其他实例发现。在某些情况下，如果你不想自己的实例被发现，而只想发现其他实例，配置为 false 即可。</li></ul></li><li><code>fetch-registry</code>：<ul><li>表示客户端是否从 Eureka Server 获取实例注册信息。</li></ul></li><li><code>serviceUrl.defaultZone</code>：<ul><li>表示客户端需要注册的 Eureka Server 的地址。</li></ul></li></ul><h4 id="用到的其他参数"><a href="#用到的其他参数" class="headerlink" title="用到的其他参数"></a>用到的其他参数</h4><ul><li><code>spring.application.name</code>：<ul><li>表示应用名称，在注册中心中显示的服务注册名称。</li></ul></li><li><code>spring.cloud.client.ip-address</code>：<ul><li>获取客户端的 <code>IP</code> 地址。</li></ul></li></ul><p><strong>上面讲的 Eureka 某些参数都可以可以在 Eureka 控制台上面找到</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714140318475.png" alt="image-20220714140318475"></p><p>Eureka 控制台上面的其他参数都可以定制。</p><blockquote><p>Eureka详细配置：<a href="https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/">Eureka详细配置</a></p></blockquote><h3 id="搭建一个Eureka-服务端"><a href="#搭建一个Eureka-服务端" class="headerlink" title="搭建一个Eureka 服务端"></a>搭建一个Eureka 服务端</h3><p>根据前文我们可以知道要搭建一个<code>Eureka</code>服务器，需要用到<code>Eureka Server</code></p><p>父工程的话<code>pom.xml</code>与上述入门案例一致。</p><p>创建Eureka服务端工程<code>Cloud-eureka-server7001</code></p><p>项目结构：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141129475.png" alt="image-20220714141129475"></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-02-Eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表示该模块为Eureka的注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaMain7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在启动类的头上加上<code>@EnableEurekaServer</code>注解，表示该模块为Eureka服务端。 </p></li><li><p>启动</p><p>启动后访问yml中的<code>http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/</code>地址看到如下界面表示成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141438302.png" alt="image-20220714141438302"></p><p><strong>上述便是单机版Eureka注册中心的搭建了</strong></p><h3 id="支付微服务8001注册到Eureka-Server中"><a href="#支付微服务8001注册到Eureka-Server中" class="headerlink" title="支付微服务8001注册到Eureka Server中"></a>支付微服务8001注册到Eureka Server中</h3><p>将入门案例中的<code>Cloud-provide-payment-8001</code>复制粘贴到Eureka工程中并改名为<code>Cloud-eureka-provider-payment8001</code>业务部分不用更改 主要是<code>pom.xml</code>和<code>application.yml</code>的修改</p><ol><li><p>改<code>pom.xml</code>新增依赖<code>spring-cloud-starter-netflix-eureka-client</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>改<code>application.yml</code> 新增Eureka配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#要注册到的注册中心的地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#指定实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示ip</span></span><br></pre></td></tr></table></figure></li><li><p>启动类修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是将服务注册到注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714154834760.png" alt="image-20220714154834760"></p><p>可以通过<code>Eureka DashBoard</code>发现服务已经注册进了注册中心，实例的名称也是我们yml中指定的，服务名则是我们<code>spring.application.name</code>。</p></li></ol></li></ol><h3 id="订单微服务80入驻进Eureka-Server中"><a href="#订单微服务80入驻进Eureka-Server中" class="headerlink" title="订单微服务80入驻进Eureka Server中"></a>订单微服务80入驻进Eureka Server中</h3><p>将入门案例中的<code>Cloud-consumer-order80</code>复制到Eureka工程中，改名为<code>Cloud-eureka-consumer-order80</code>我们要做的也是修改<code>pom.xml</code>和<code>application.yml</code></p><ol><li><p>修改<code>pom.xml</code> 添加<code>spring-cloud-starter-netflix-eureka-client</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code> 添加Eureka相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#指定实例id 不指定注册中心中显示的就是ip的格式</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是消费注册中心中的服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改业务类<code>Controller</code></p><p>注册到注册中心上的服务，需要使用服务提供者注册到注册中心的服务名称代替<code>ip地址:端口</code>的方式调用。单个提供者时，使用真实<code>ip地址:端口</code>与使用服务名称是没有区别的，但是当服务提供者是以集群的方式提供服务，那么这是想要使用负载均衡功能时，就必须使用这种方式了。均衡算法会返回一个正确<code>ip:端口</code>。</p><p><code>OrderController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里配置成服务名称其实也是一种规范，从一开始我们就提到了 <strong>约定 &gt; 配置 &gt; 编码</strong></p></li><li><p>启动测试</p><p><code>GET : http://localhost:80/consumer/payment/get/1547118279208656900</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h3><p>​    <img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/14570c4b7c4dd8653be6211da2675e45.png" alt="img"></p><p><strong>Eureka 集群，实际上就是启动多个 Eureka 实例，多个 Eureka 实例之间，互相注册，互相同步数据，共同组成一个 Eureka 集群。</strong></p><p>得到8个字<strong>互相注册，相互守望</strong>。</p><p>问题:微服务<code>RPC</code>远程服务调用最核心的是什么？<br>高可用，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。</p><p>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。</p><h3 id="搭建Eureka集群"><a href="#搭建Eureka集群" class="headerlink" title="搭建Eureka集群"></a>搭建Eureka集群</h3><p>本地机为了演示Eureka集群 需要修改电脑的hosts文件</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714161642589.png" alt="image-20220714161642589"></p><p>原理我们已经直到，就是需要再搭建一个Eureka注册中心<code>Cloud-eureka-server7002</code>，让我们原来搭建的Eureka注册中心和现在这个相互注册，使其相互同步数据。 </p><p>搭建步骤这里不再演示只说这里需要更改的地方</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7002.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><hr><p><code>Cloud-eureka-server7002</code></p><p> <code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7001.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>启动后观看Eureka Dashboard</p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162757151.png" alt="image-20220714162757151"></p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162843103.png" alt="image-20220714162843103"></p><p>可用发现两个注册中心的<code>DS Replicas</code>出现了对方的注册的实例名称，说明集群搭建成功。</p><p>这里我们启动<code>Cloud-eureka-provider-payment8001</code>使其<code>eureka7001.com</code>对应的注册中心上。</p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163426520.png" alt="image-20220714163426520"></p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163501059.png" alt="image-20220714163501059"></p><p>可用发现<code>http://eureka7002.com:7002/</code>上同样出现了我们注册的服务。这就是集群，集群的各个节点之间相互同步信息，防止单一节点宕机的问题。</p><hr><h3 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>在实际开发中，不仅需要防止注册中心的单一节点宕机问题，服务提供者同样需要，不仅仅是为了防止宕机，同样也是为了提升服务的性能，服务提供者的集群不需要相互同步之间的信息，而是需要避免单一节点承受不住大量请求，导致反应慢或是请求失败等情况，同一服务新增节点集群 搭配上负载均衡，可以提升性能提高用户体验。</p><p>与Eureka搭建集群相似，没有什么特殊的改变，就是简单创建一个与之前服务相同工程<code>Cloud-eureka-provider-payment8002</code></p><p>修改部分<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"> <span class="string">...</span> <span class="comment">#其他部分相同这里省略</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span> <span class="comment">#实例名称 如果不配置 到时Eureka注册中心中显示的就是IP的格式</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>另外，我们可以将**<code>Cloud-eureka-provider-payment8001</code>**多次启动， 模拟多实例部署，但为了避免端口冲突，需要修改端口设置：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121237831.png" alt="image-20220812123718765"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121238375.png" alt="image-20220812123838314"></p><p>启动<code>Cloud-eureka-provider-payment8002</code>和<code>Cloud-eureka-provider-payment8001</code>以及Eureka注册中心。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714164450602.png" alt="image-20220714164450602"></p><p>可以发现同一个服务名称下面出现了两个服务实例，这也正是我们所配置的名称。</p><p>测试</p><p><strong>注意： 当服务以集群出现时如果采用了用服务名称代替<code>ip</code>+端口的格式的话 需要在<code>RestTemplate</code>配置类下配置<code>@LoadBalanced</code> 实现负载均衡 否则会出现访问报错</strong></p><p><code>RestTemplateConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//开启RestTemplate的负载均衡功能</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且为了方便查看负载均衡，我们在Controller的返回结果中加上了他们各自的端口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8002</span>; <span class="comment">//Cloud-eureka-provider-payment8002</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8001</span>; <span class="comment">//Cloud-eureka-provider-payment8001</span></span><br></pre></td></tr></table></figure><p>访问接口 <code>POST : http://localhost:80/consumer/payment/create</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="DiscoveryClient"><a href="#DiscoveryClient" class="headerlink" title="DiscoveryClient"></a><code>DiscoveryClient</code></h3><p>对于注册进eureka里面的微服务，可以通过<code>DiscoveryClient</code>来获得该服务的信息</p><p><code>DiscoveryClient</code>提供了获取注册中心中注册服务信息的<code>API</code></p><p><strong>使用</strong></p><p>修改<code>Cloud-eureka-provider-payment8002</code>的<code>Controller</code> 新增</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增接口 查看注册中心服务信息</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取注册中心里面的所有暴露的服务</span></span><br><span class="line">       List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">       <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;*****element:&#123;&#125;&quot;</span>,service);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//获取指定服务实例名称对应的实例信息</span></span><br><span class="line">       List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">           log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getInstanceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getUri()+<span class="string">&quot;\t&quot;</span>+instance.getPort());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动类新增注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//添加该注解 使其该微服务支持Discovery</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试</p><p><code>GET : http://localhost:8002/payment/discovery</code> </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;services&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;cloud-payment-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cloud-order-service&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170357151.png" alt="image-20220714170357151"></p><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><p><strong>概述</strong></p><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区（由于网络波动等原因引起）场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p><strong>官方对于自我保护机制的定义</strong></p><blockquote><p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p></blockquote><p><strong>自我保护机制的工作机制</strong></p><p>自我保护机制的工作机制是：<strong>如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</strong>，此时会出现以下几种情况：</p><ol><li>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li><li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可用。</li><li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</li></ol><p>因此<code>Eureka Server</code>可以很好的应对因网络故障导致部分节点失联的情况，而不会像<code>ZK</code>那样如果有一半不可用的情况会导致整个集群不可用而变成瘫痪。</p><p><strong>为什么会产生Eureka自我保护机制?</strong></p><p>该功能防止节点因为网络波动导致心跳检测信息不能及时发送到注册中心，但节点本身没有问题的情况。如果关闭了自我保护机制，一旦检测到某个节点没有在指定时间内发送心跳包，就会将该节点剔除。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170747792.png" alt="image-20220714170747792"></p><p>从这个机制可以看出Eureka满足了CAP理论中的AP分支。即达到了100%可用性和100%分区容错性。</p><p><strong>什么是自我保护机制?</strong></p><p>默认情况下，如果<code>EurekaServer</code>在一定时间内没有接收到某个微服务实例的心跳，<code>EurekaServer</code>将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与<code>EurekaServer</code>之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。<code>Eureka</code>通过“自我保护模式”来解决这个问题——当<code>EurekaServer</code>节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。</p><p>自我保护机制∶默认情况下<code>EurekaClient</code>定时向<code>EurekaServer</code>端发送心跳包，如果Eureka在server端在一定时间内(默认90秒)没有收到<code>EurekaClient</code>发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，这时候<code>Eurekaserver</code>会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是<code>EurekaClient</code>为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。也正如官方所说的使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p><hr><h3 id="自我保护开关"><a href="#自我保护开关" class="headerlink" title="自我保护开关"></a>自我保护开关</h3><p>Eureka自我保护机制，通过配置 <code>eureka.server.enable-self-preservation</code> 来<code>true</code>打开&#x2F;<code>false</code>禁用自我保护机制，默认打开状态，建议生产环境打开此配置。</p><p>如果要实现服务失效自动移除，只需要修改以下配置</p><h5 id="1、-注册中心关闭自我保护机制，修改检查失效服务的时间。"><a href="#1、-注册中心关闭自我保护机制，修改检查失效服务的时间。" class="headerlink" title="1、 注册中心关闭自我保护机制，修改检查失效服务的时间。"></a>1、 注册中心关闭自我保护机制，修改检查失效服务的时间。</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">     <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">     <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h5 id="2、-微服务修改减短服务心跳的时间。"><a href="#2、-微服务修改减短服务心跳的时间。" class="headerlink" title="2、 微服务修改减短服务心跳的时间。"></a>2、 微服务修改减短服务心跳的时间。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认90秒</span></span><br><span class="line">lease-expiration-duration-in-seconds:  10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认30秒</span></span><br><span class="line">lease-renewal-interval-in-seconds:  3</span><br></pre></td></tr></table></figure><blockquote><p>以上配置建议在生产环境使用默认的时间配置。</p></blockquote><p>根据如上我们可以根据需求关闭注册中心的自我保护机制。</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#关闭节点自我保护机制 默认是开启 关闭后如果在有限的心跳检测时间范围内节点没有及时发送心跳包 就将该服务节点从服务列表中踢出</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置心跳检测时间</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p><code>Cloud-eureka-provider-payment8002</code></p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="string">....</span> <span class="comment"># 省略配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认为30秒)</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限,单位为秒(默认是90秒),超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line"><span class="string">...</span> <span class="comment">#省略配置</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-server7001</code> 和<code>Cloud-eureka-provider-payment8002</code></p><p>界面中会出现这么一句话</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714173719274.png" alt="image-20220714173719274"></p><p>表示自我保护机制以及关闭</p><p>此时关闭<code>Cloud-eureka-provider-payment8002</code>Eureka会立刻剔除该服务。</p><h3 id="Eureka停更说明"><a href="#Eureka停更说明" class="headerlink" title="Eureka停更说明"></a>Eureka停更说明</h3><p><a href="https://github.com/Netflix/eureka/wiki">Netflix-eureka</a></p><blockquote><p>Eureka 2.0 (Discontinued)</p><p>The existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.</p><p>Eureka 1.x is a core part of Netflix’s service discovery system and is still an active project.</p></blockquote><p>虽然Eureka停更了，但是<code>Spring Cloud</code>也有着许多其他功能更为丰富更为优秀的服务治理组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注：Eureka中各个节点都是平等的，没有&lt;code&gt;ZK&lt;/code&gt;中角色的概</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://devildyw.github.io/2022/07/29/RabbitMQ/"/>
    <id>https://devildyw.github.io/2022/07/29/RabbitMQ/</id>
    <published>2022-07-29T15:42:17.000Z</published>
    <updated>2022-08-23T06:53:38.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>**<code>MQ</code>**全称 <strong>Message Queue</strong>（消息队列）,是在消息传输过程中保存消息的容器。多用于分布式系统之间进行通信。</p><ul><li>分布式系统通信两种方式：直接远程调用 和 借助第三方完成间接通信</li><li>发送方称为生产者，接收方称为消费者</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311844564.png" alt="image-20220731133612671"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311844215.png" alt="image-20220731134217286"></p><h2 id="MQ的优势与劣势"><a href="#MQ的优势与劣势" class="headerlink" title="MQ的优势与劣势"></a><code>MQ</code>的优势与劣势</h2><p><strong>优势</strong></p><ul><li>应用解耦</li><li>异步提速</li><li>削峰填谷</li></ul><p><strong>劣势</strong></p><ul><li>系统可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ul><h3 id="MQ的优势"><a href="#MQ的优势" class="headerlink" title="MQ的优势"></a><code>MQ</code>的优势</h3><h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311907908.png" alt="image-20220731190749880"></p><p><strong>系统的耦合性越高，容错性就越低，可维护性就越低。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311859119.png" alt="image-20220731185909084"></p><p>有了<code>MQ</code>服务订单服务不需要集成库存服务、支付系统、物流系统或者其他系统，而是将系统全部解耦，拆分成不同的分布式微服务。微服务们通过监听<code>MQ</code>的信息，获取到符合的消息，然后消费。解耦也避免了某一个服务无法使用导致的整个系统崩溃问题。 同时多个服务耦合在一起也比解耦成单个服务的维护好做的多。</p><p><strong>使用<code>MQ</code>使得应用间解耦，提升容错性和可维护性。</strong></p><h4 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311910913.png" alt="image-20220731191009885"></p><p>如果不适用<code>MQ</code>服务就必须等待服务远程调用到返回结果在响应。但是使用了<code>MQ</code>我们只需要将消息放入<code>MQ</code>中即可返回响应，分布式的系统只需要监听<code>MQ</code>，消费其中的消息即可。</p><p>用户点击完下单按钮后，只需等待<code>25ms</code>就能得到下单响应 (20 + 5 &#x3D; <code>25ms</code>)。</p><p><strong>提升用户体验和系统吞吐量（单位时间内处理请求的数目）。</strong></p><h4 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h4><p><strong>未使用<code>MQ</code></strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311915309.png" alt="image-20220731191521273"></p><p><strong>使用<code>MQ</code></strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311916674.png" alt="image-20220731191602635"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311917433.png" alt="image-20220731191729405"></p><p>使用了 <code>MQ</code> 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 <code>MQ</code> 中，高峰</p><p>就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直</p><p>到消费完积压的消息，这就叫做“填谷”。</p><p><strong>使用<code>MQ</code>后，可以提高系统稳定性。</strong></p><h3 id="MQ的劣势"><a href="#MQ的劣势" class="headerlink" title="MQ的劣势"></a><code>MQ</code>的劣势</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311919717.png" alt="image-20220731191959687"></p><ul><li><p><strong>系统可用性降低</strong></p><p>系统引入的外部依赖越多，系统稳定性越差。一旦 <code>MQ</code> 宕机，就会对业务造成影响。如何保证<code>MQ</code>的高可用？</p></li><li><p><strong>系统复杂度提高</strong></p><p><code>MQ</code> 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 <code>MQ</code> 进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p></li><li><p><strong>一致性问题</strong></p><p>A 系统处理完业务，通过 <code>MQ</code> 给B、C、D三个系统发消息数据，如果 B 系统、C 系统处理成功，D 系统处理失败。如何保证消息数据处理的一致性？</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>既然 <code>MQ</code> 有优势也有劣势，那么使用 <code>MQ</code> 需要满足什么条件呢？</p><ol><li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li><li>容许短暂的不一致性。</li><li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入<code>MQ</code>，管理<code>MQ</code>这些成本。</li></ol><h2 id="常见的MQ产品"><a href="#常见的MQ产品" class="headerlink" title="常见的MQ产品"></a>常见的<code>MQ</code>产品</h2><p>目前业界有很多的 <code>MQ</code> 产品，例如 <code>RabbitMQ</code>、<code>RocketMQ</code>、<code>ActiveMQ</code>、<code>Kafka</code>、<code>ZeroMQ</code>、<code>MetaMq</code>等，也有直接使用 <code>Redis</code> 充当消息队列的案例，而这些消息队列产品，各有侧重，在实际选型时，需要结合自身需求及 <code>MQ</code> 产品特征，综合考虑。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311938809.png" alt="image-20220731193822769"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong><code>RabbitMQ</code> 是基于 <code>AMQP</code> 协议使用 Erlang 语言开发的一款消息队列产品。</strong></p><p><code>AMQP</code>，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。2006年，**<code>AMQP</code> 规范发布。类比HTTP。** </p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311940089.png" alt="image-20220731194023059"></p><p>2007年，Rabbit 技术公司基于 <code>AMQP</code> 标准开发的 <code>RabbitMQ</code> 1.0 发布。<code>RabbitMQ</code> 采用 Erlang 语言开发。Erlang 语言由 <code>Ericson</code> 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</p><p><code>RabbitMQ</code> 基础架构如下图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311942381.png" alt="image-20220731194224348"></p><h3 id="RabbitMQ-中的相关概念："><a href="#RabbitMQ-中的相关概念：" class="headerlink" title="RabbitMQ 中的相关概念："></a><strong><code>RabbitMQ</code> 中的相关概念：</strong></h3><ul><li><p><strong>Broker</strong>：接收和分发消息的应用，<code>RabbitMQ</code> Server就是Message Broker</p></li><li><p><strong>Virtual host</strong>：出于多租户和安全因素设计的，把<code>AMQP</code> 的基本组件划分到一个虚拟的分组中，类似于网络中的<code>namespace</code> 概念。当多个不同的用户使用同一个<code>RabbitMQ</code> server 提供的服务时，可以划分出多个<code>vhost</code>，每个用户在自己的<code>vhost</code> 创建exchange／queue 等</p></li><li><p>**<code>Connection</code>**：publisher／consumer 和broker 之间的TCP 连接</p></li><li><p><strong>Channel</strong>：如果每一次访问<code>RabbitMQ</code> 都建立一个Connection，在消息量大的时候建立TCP Connection的开销将是巨大的，效率也较低。Channel 是在connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的channel 进行通讯，<code>AMQP</code> method 包含了channel id 帮助客户端和message broker 识别channel，所以channel 之间是完全隔离的。Channel 作为轻量级的Connection 极大减少了操作系统建立TCP connection 的开销</p></li><li><p>**<code>Exchange</code>**：message 到达broker 的第一站，根据分发规则，匹配查询表中的routing key，分发消息到queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (<code>multicast</code>)</p></li><li><p><strong>Queue</strong>：消息最终被送到这里等待consumer 取走</p></li><li><p>**<code>Binding</code>**：exchange 和queue 之间的虚拟连接，binding 中可以包含routing key。Binding 信息被保存到exchange 中的查询表中，用于message 的分发依据</p></li></ul><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><strong><code>RabbitMQ</code>提供了6种工作模式</strong>：简单模式、<code>workqueues</code>、<code>Publish/Subscribe</code>发布与订阅模式、Routing 路由模式、Topics主题模式、<code>RPC</code>远程调用模式（远程调用，不太算<code>MQ</code>；暂不作介绍）。官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html"><code>RabbitMQ</code>模式介绍</a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311957220.png" alt="image-20220731195754182"></p><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a><code>JMS</code></h3><ul><li><p><code>JMS</code> 即 Java 消息服务（<code>JavaMessage</code> Service）应用程序接口，是一个 Java 平台中关于面向消息中间件</p><p>的<code>API</code></p></li><li><p><strong><code>JMS</code> 是 <code>JavaEE</code> 规范中的一种，类比<code>JDBC</code></strong></p></li><li><p>很多消息中间件都实现了<code>JMS</code>规范，例如：<code>ActiveMQ</code>。<code>RabbitMQ</code> 官方没有提供 <code>JMS </code>的实现包，但是开源社区有。</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>使用Docker安装</strong></p><p><strong>不指定账号密码的启动方式</strong> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li><strong>-d</strong>：容器后台运行</li><li><strong>-p</strong>：映射端口 5672 <code>RabbitMQ</code>服务器端口号，15672是图形界面端口号</li><li><strong>–name</strong>：指定<code>RabbitMQ</code>名称</li></ul><blockquote><p>调用docker run后如果没有该镜像会自动拉取 不指定版本号默认拉取最新版<code>lastest</code></p></blockquote><p><strong>指定账户密码的启动方式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li><strong>-d</strong>： 后台运行</li><li><strong>-p</strong>： 隐射端口</li><li><strong>–name</strong>： 指定<code>rabbitMQ</code>名称</li><li>**<code>RABBITMQ_DEFAULT_USER</code>**： 指定用户账号</li><li>**<code>RABBITMQ_DEFAULT_PASS</code>**： 指定账号密码</li></ul><p>安装好后，访问<code>http://ip:15672</code>如果安装无误可以看到以下界面</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207312038049.png" alt="image-20220731203834936"></p><p>输入我们启动容器时设置的账号密码，如果没有指定默认<code>guest/guest</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207312039266.png" alt="image-20220731203915173"></p><p><strong>得到以上界面表示你的安装无误。</strong></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><p>创建工程（生产者，消费者）</p><p><code>rabbitMQ-01-HellWord</code>、<code>rabbitMQ-01-comsumer</code>、<code>rabbitMQ-01-producer</code></p></li><li><p>分别添加依赖</p><ol><li><p><code>rabbitMQ-01-HellWord</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitMQ-01-consuemr<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitMQ-01-producer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amqp.client.version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">amqp.client.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;amqp.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rabbitMQ-01-comsumer</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-consuemr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rabbitMQ-01-producer</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rabbitmq java客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写生产者发送消息</p><p><code>Producer_HelloWorld</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.dvildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-12:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_HelloWord</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">                                 Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment">         参数：</span></span><br><span class="line"><span class="comment">         1. queue: 队列名称</span></span><br><span class="line"><span class="comment">         2. durable: 是否持久化，当mq重启之后,还在</span></span><br><span class="line"><span class="comment">         3. exclusive:</span></span><br><span class="line"><span class="comment">            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)</span></span><br><span class="line"><span class="comment">         4. autoDelete: 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">         5. argument: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫作“hello_world”的队列,则会创建该队列,如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6.发送消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        void basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">            throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称。简单模式下交换机会使用默认的 “”</span></span><br><span class="line"><span class="comment">        2. routingKey: 路由配置</span></span><br><span class="line"><span class="comment">        3. props: 配置信息</span></span><br><span class="line"><span class="comment">        4. body: 发送消息数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq~~~&quot;</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello_word&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者的编写大致可以分为7个步骤</strong></p><ol><li>创建连接工厂</li><li>设置连接参数</li><li>获取对应连接</li><li>创建Channel</li><li>声明队列Queue</li><li>发送消息</li><li>关闭连接</li></ol><hr><p>其中我们创建队列使用的方法是</p><p><code>Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments) throws IOException;</code></p><blockquote><p>参数：<br>            1. <code>queue</code>: 队列名称<br>            2. ·durable<code>: 是否持久化，当mq重启之后,还在</code><br>            3. exclusive<code>:</code><br>            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)<br>            4. <code>autoDelete</code>: 是否自动删除。当没有Consumer时，自动删除掉<br>            5. <code>argument</code>: 参数</p></blockquote><hr><p>发送消息则使用的是</p><p><code>void basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body) throws IOException;</code></p><blockquote><p> 参数:<br>           1. <code>exchange</code>: 交换机名称。简单模式下交换机会使用默认的 “”<br>           2. <code>routingKey</code>: 路由配置<br>           3. <code>props</code>: 配置信息<br>           4. <code>body</code>: 发送消息数据</p></blockquote><p>启动查看图形控制界面 发现新增了队列<code>Hello_world</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011247536.png" alt="image-20220801124706439"></p></li><li><p>编写消费者接收消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-12:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 声明队列Queue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">                                 Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment">         参数：</span></span><br><span class="line"><span class="comment">         1. queue: 队列名称</span></span><br><span class="line"><span class="comment">         2. durable: 是否持久化，当mq重启之后,还在</span></span><br><span class="line"><span class="comment">         3. exclusive:</span></span><br><span class="line"><span class="comment">            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)</span></span><br><span class="line"><span class="comment">         4. autoDelete: 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">         5. argument: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫作“hello_world”的队列,则会创建该队列,如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String basicConsume(String queue, boolean autoAck, Consumer callback) throws IOException;</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. autoAck: 是否自动确认</span></span><br><span class="line"><span class="comment">        3. callback: 回调对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">            1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">            2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">            3. properties: 配置信息</span></span><br><span class="line"><span class="comment">            4. body: 数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;consumerTag: &quot;</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">&quot;Exchange: &quot;</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">&quot;RoutingKey: &quot;</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">&quot;Properties: &quot;</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者会去一直监听队列中的信息,不能够关闭资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者的编写大致可以分为6个步骤</strong></p><ol><li>创建连接工厂</li><li>设置连接参数</li><li>获取对应连接</li><li>创建Channel</li><li>声明队列Queue</li><li>接收消息</li></ol><p><strong>这里之所以还要声明队列是为了防止该队列还未声明导致消费者监听报错。</strong></p><p><strong>之所以不在最后关闭连接，是因为消费者需要一直监听队列中的信息。</strong></p><p><strong>接收消息这里使用的方法是</strong></p><p><code>String basicConsume(String queue, boolean autoAck, Consumer callback) throws IOException;</code></p><blockquote><p>参数:<br>           1. <code>queue</code>: 队列名称<br>           2. <code>autoAck</code>: 是否自动确认<br>           3. <code>callback</code>: 回调对象</p></blockquote><p>回调对象则是使用的<code>DefaultConsumer</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">           1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">           2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">           3. properties: 配置信息</span></span><br><span class="line"><span class="comment">           4. body: 数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;consumerTag: &quot;</span>+consumerTag);</span><br><span class="line">               System.out.println(<span class="string">&quot;Exchange: &quot;</span>+envelope.getExchange());</span><br><span class="line">               System.out.println(<span class="string">&quot;RoutingKey: &quot;</span>+envelope.getRoutingKey());</span><br><span class="line">               System.out.println(<span class="string">&quot;Properties: &quot;</span>+properties);</span><br><span class="line">               System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><p>实现其中的回调方法<code>public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException;</code></p><blockquote><p>回调方法,当收到消息后,会自动执行该方法<br>               1. <code>consumerTag</code>: 标识<br>               2. <code>envelope</code>: 获取一些信息,交换机,路由key<br>               3. <code>properties</code>: 配置信息<br>               4. <code>body</code>: 数据</p></blockquote></li></ol><hr><p>上述的入门案例中其实使用的是如下的简单模模式：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011216044.png" alt="image-20220801121453365"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接收者，会一直等待消息的到来</li><li>queue：消息队列，途中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li></ul><h2 id="RabbitMQ工作模式"><a href="#RabbitMQ工作模式" class="headerlink" title="RabbitMQ工作模式"></a><code>RabbitMQ</code>工作模式</h2><p>在<strong>快速开始</strong>中我们已经演示第一种工作模式<code>HelloWorld</code>模式了，下面我们会介绍其他几种模式。</p><h3 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h3><p><strong>模式说明</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011313383.png" alt="image-20220801131354336"></p><ul><li>Work Queues：与入门程序的简单模式相比，<strong>多了一个或一些消费者，多个消费端共同消费同一个队列中的消息（竞争关系）</strong>。</li><li>应用场景：对于任务过重或任务较多情况使用工作队列可以<strong>提高任务处理的速率</strong>。</li></ul><p><strong>Work Queues</strong> 与入门程序的简单模式的代码几乎是一样的。可以完全复制，并多复制一个消费者进行多</p><p>个消费者同时对消费消息的测试。</p><p><strong>为了区分将队列名称修改为work_queues</strong></p><p>为了方便测试我们对生产者做了些许修改，使其可以一次发送大量的消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> i+<span class="string">&quot; hello rabbitmq~~~&quot;</span>; <span class="comment">//数字编号 1~10</span></span><br><span class="line">    <span class="comment">//发送</span></span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello_word&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于消费者我们对其进行了多个复制，来演示他们竞争的关系。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011413495.png" alt="image-20220801141331431"></p><p>方便展示注释掉了回调方法中其他无关参数的打印。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">            1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">            2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">            3. properties: 配置信息</span></span><br><span class="line"><span class="comment">            4. body: 数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag: &quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange: &quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey: &quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Properties: &quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动测试(先启动两个消费者监听队列)</p><p><code>consumer1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011419621.png" alt="image-20220801141945564"></p><p><code>consumer2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011420513.png" alt="image-20220801142010458"></p><p><strong>小结</strong></p><ol><li>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的消费关系是<strong>竞争</strong>的关系。</li><li><strong>Work Queues</strong> 对于任务过重或人物较多情况使用工作队列可以提高人物处理的速度。例如：短信服务部署多个，只需要有一个节点发送成功即可。</li></ol><h3 id="Pub-x2F-Sub-订阅模式"><a href="#Pub-x2F-Sub-订阅模式" class="headerlink" title="Pub&#x2F;Sub 订阅模式"></a>Pub&#x2F;Sub 订阅模式</h3><p><strong>模式说明</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011429714.png" alt="image-20220801142920660"></p><p>在订阅模型中，多了一个 Exchange 角色，而且过程略有变化</p><ul><li><p>P：生产者，也就是要发送消息的程序，但不再发送到队列中，而是发给X（交换机）</p></li><li><p>C：消费者，消息的接收者，会一直等待消息到来</p></li><li><p>Queue：消息队列，接收消息，缓存消息</p></li><li><p>Exchange：交换机（X）。一方面接受生产者放的消息，另一方面，直到如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。Exchange有常见以下三种类型：</p><ul><li>Fanout：广播，将信息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合所有指定routing key的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式）的队列</li></ul><p>Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p></li></ul><p><strong>代码实现</strong></p><p><strong>生产者<code>Producer_PubSub</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_PubSub</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如上所述编写pub&#x2F;sub模式的生产者需要9步</strong></p><ol><li>创建连接工厂</li><li>设置参数</li><li>获取对应连接 Connection</li><li>创建Channel</li><li>声明交换机</li><li>创建队列</li><li>绑定队列和交换机</li><li>发送消息</li><li>释放资源</li></ol><p><strong>声明交换机</strong></p><p><code>Exchange.DeclareOk exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments) throws IOException;</code></p><blockquote><ol><li><code>exchange</code>: 交换机名称</li><li><code>type</code>: 交换机类型 枚举类型<ol><li><code>DIRECT</code>(“direct”): 定向</li><li><code>FANOUT</code>(“fanout”): 扇形(广播),发送消息到每一个与之绑定的队列</li><li><code>TOPIC</code>(“topic”): 通配符的方式</li><li><code>HEADERS</code>(“headers”): 参数匹配</li></ol></li><li><code>durable</code>: 是否持久化</li><li><code>autoDelete</code>: 自动删除</li><li><code>internal</code>: 内部使用.-一般为false</li><li><code>arguments</code>: 参数</li></ol></blockquote><p><strong>绑定队列和交换机</strong></p><p><code>Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</code></p><blockquote><ol><li><code>queue</code>: 队列名称</li><li><code>exchange</code>: 交换机名称</li><li><code>routingKey</code>: 路由键,绑定规则 如果交换机类型为fanout, <code>routingKey</code>设置为””</li></ol></blockquote><p><strong><code>FANOUT</code>类型的交换机绑定<code>queue</code>是不需要设置<code>routingKey</code>的</strong></p><p><strong>消费者<code>Consuemr_PubSub1</code> <code>Consuemr_PubSub2</code></strong></p><p>消费者没有太大的变换 只是分别绑定上述生产者创建的两个队列的队列名即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(queue1Name,<span class="literal">true</span>,consumer);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(queue2Name,<span class="literal">true</span>,consumer);</span><br></pre></td></tr></table></figure><p><strong>启动测试</strong></p><p><code>Consumer_PubSub1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011522423.png" alt="image-20220801152237353"></p><p><code>Consumer_PubSub2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011523900.png" alt="image-20220801152301842"></p><p><strong>小结</strong></p><ol><li>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都接收到（俗称广播）</li><li>发布订阅模式和工作队列模式的区别：<ul><li>工作队列模式不用定义交换机，而发布&#x2F;订阅模式需要定义交换机</li><li><strong>发布&#x2F;订阅模式的生产方是面向交换机发送消息，工作队列模式的生方式面向队列发送消息（底层使用默认交换机）</strong></li><li><strong>发布&#x2F;订阅模式需要设置队列和交换机的绑定</strong>，工作队列模式不需要设置，实际上工作队列模式会将队列绑定到默认的交换机。</li></ul></li></ol><hr><h3 id="Routing-路由模式"><a href="#Routing-路由模式" class="headerlink" title="Routing 路由模式"></a>Routing 路由模式</h3><p><strong>模式说明</strong></p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在向<code>Exchagne</code>发送消息时，也必须指定消息的<code>RoutingKey</code></li><li>Exchange 不再把消息发送给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的<code>RoutingKey</code> 与消息的<code>RoutingKey</code> 完全一致，才会接收到消息。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011535573.png" alt="image-20220801153109158"></p><p>图解：</p><ul><li><code>P</code>：生产者，向Exchange发送消息，发送消息时，会指定一个<code>RoutingKey</code></li><li><code>X</code>：Exchange（交换机），接收生产者的消息，然后把消息递交给<code>RoutingKey</code>完全匹配的队列</li><li><code>C1</code>：消费者，其所在队列指定了需要routing key 为error的消息</li><li><code>C2</code>：消费者，其所在队列指定了需要routing key为info、error、warning 的消息</li></ul><blockquote><p>在Direct类型下交换机下。交换机与队列绑定需要Routing Key，当生产者向交换机发送消息时也需要指定Routing Key，只有指定了Routing Key 交换机才可以确定将消息存入那个绑定的队列中。<strong>相当于Routing Key只是生产者与队列之间的关系（生产者通过这种关系将消息存入指定的队列中），而消费者只需要去对应队列名中的队列中获取消息消费即可。</strong></p></blockquote><p><strong>代码编写</strong></p><p>一般业务中要存到数据库中保存的日志 一般日志级别都是**<code>error</code>**</p><p><strong>设置Exchange类型为<code>Direct</code></strong></p><p>生产者绑定两个队列，队列一绑定了Routing key 为 <code>error</code>， 队列二绑定了3个Routing Key ，分别为 <code>error</code>、<code>info</code>、<code>warning</code></p><p><strong>生产者<code>Producer_Routing</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Routing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_direct&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//队列1的绑定</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//队列2的绑定</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者<code>Consumer_Routing1</code>、<code>Consumer_Routing2</code></strong></p><p>两个消费者去监听不同名称的队列即可</p><p><code>Consumer_Routing1</code>用于存储日志级别为error的日志，<code>Consumer_Routing2</code>用来将个级别日志打印在控制台上。</p><p>启动测试</p><p><strong>生产者发送 routing key 为 <code>info</code>的消息</strong></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011610208.png" alt="image-20220801161056145"></p><p><code>Consumer_Routing2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011610389.png" alt="image-20220801161048325"></p><p><strong>生产者发送 routing key 为<code>error</code>的消息</strong></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011616105.png" alt="image-20220801161615050"></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011616571.png" alt="image-20220801161628521"></p><p><strong>小结</strong></p><p><strong><code>Routing</code></strong> 模式要求队列在绑定交换机时要指定 <strong>routing key</strong>，消息会转发到符合 routing key 的队列</p><h3 id="Topics-通配符模式"><a href="#Topics-通配符模式" class="headerlink" title="Topics 通配符模式"></a>Topics 通配符模式</h3><p><strong>模式说明</strong></p><ul><li>Topic 类型与 Direct 相比，都是可以根据 Routing Key把消息路由到不同的队列。只不过 Topic 类型 Exchange 可以让队列在绑定 Routing key的 时候使用<strong>通配符</strong>！</li><li><code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以 ”.“ 分割，例如：item.insert</li><li>通配符规则：# 匹配一个或多个词，* 匹配不多不少恰好一个词，例如：item.# 能够匹配 item.insert.abc  或者 item.insert，item.* 只能匹配 item.insert</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011628500.png" alt="image-20220801162829423"></p><p>图解：</p><ul><li>红色 Queue：绑定的是 usa.# ，因此凡是以 usa.开头的 routing key 都会被匹配到</li><li>黄色 Queue：绑定的是 #.news ,因此凡是以 .news 结尾的 routing key 都会被匹配到</li></ul><p><strong>代码编写</strong></p><p><strong>需求:  所有error级别的日志存入数据库，所有order系统的日志存入数据库</strong></p><p>生产者<code>Producer_Topic</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Topic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_topic&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//routing key 格式 系统的名称.日志的级别</span></span><br><span class="line">        <span class="comment">//需求: 所有error级别的日志存入数据库，所有order系统的日志存入数据库</span></span><br><span class="line">        <span class="comment">//队列1的绑定</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">        <span class="comment">//队列2的绑定</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志 日志级别:error&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;order.info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以 ”.“ 分割，例如：item.insert</p></blockquote><p>交换机与队列的绑定（通配符的配置）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">      channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">      <span class="comment">//队列2的绑定</span></span><br><span class="line">      channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>消费者 <code>Consumer_Topic1</code>、<code>Consumer_Topic2</code></strong></p><p>修改部分：修改两个消费者监听的队列名称</p><p>启动测试</p><p>生产者发送 <code>routingKey</code> 为 <code>order.info</code> 的消息</p><p><code>Consumer_Topic1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011658734.png" alt="image-20220801165834676"></p><p><code>Consumer_Topic2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011658384.png" alt="image-20220801165818326"></p><p>生产者发送 <code>routingKey</code> 为 <code>goods.info</code> 的消息</p><p><code>Consumer_Topic1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011702595.png" alt="image-20220801170213533"></p><p><code>Consumer_Topic2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011701487.png" alt="image-20220801170152429"></p><p>根据发送的routing key<code>goods.info</code>无法匹配队列一 通配符，但可以匹配队列二得通配符。</p><p><strong>小结</strong></p><p>Topic 主题模式可以实现 Pub&#x2F;Sub 发布于订阅模式和 Routing 路由模式的功能， 只能是 Topic 在配置 routing key 的时候可以使用通配符，显得更加灵活。</p><h3 id="工作模式总结"><a href="#工作模式总结" class="headerlink" title="工作模式总结"></a>工作模式总结</h3><ol><li>简单模式 Hello World<ul><li>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。</li></ul></li><li>工作队列模式 Work Queue<ul><li>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。</li></ul></li><li>发布订阅模式 Publish&#x2F;subscribe<ul><li>需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</li></ul></li><li>路由模式 Routing<ul><li>需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li></ul></li><li>通配符模式 Topic<ul><li>需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li></ul></li></ol><hr><h2 id="Spring-Boot-整合-RabbitMQ"><a href="#Spring-Boot-整合-RabbitMQ" class="headerlink" title="Spring Boot 整合 RabbitMQ"></a>Spring Boot 整合 <code>RabbitMQ</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.7</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><ol><li><p>创建生产者工程</p></li><li><p>导入<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-06-SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-06-Consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类 （常规）</p></li><li><p><code>RabbitMQ</code>配置类 </p><p>主要来配置交换机，队列，交换机以及队列之间的绑定关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-19:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">bootExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明一个topic类型的交换机</span></span><br><span class="line">        <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME)</span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">//是否持久化</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">bootQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列和交换机绑定关系 Binding</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 队列</span></span><br><span class="line"><span class="comment">     * 2. 交换机</span></span><br><span class="line"><span class="comment">     * 3. routing key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> binding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueueExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bootQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;bootQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;bootExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;boot.#&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> top.devildyw.consumer.config.RabbitMQConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line">    <span class="comment">//注入RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setExchange(RabbitMQConfig.EXCHANGE_NAME);<span class="comment">//设置交换机</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;boot.haha&quot;</span>,<span class="string">&quot;boot mq hello~~&quot;</span>); <span class="comment">//发送到指定交换机上的指定routingkey 队列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程：导入依赖–&gt;配置-&gt;编写配置类-&gt;注入<code>RabbitTemplate</code>发送消息</p><p><code>RabbitMQ</code>发送消息的流程: 生产者指定交换机,Routing key –&gt; 消息被发送到交换机 –&gt; 交换机转发到与之绑定却routing key相匹配的队列</p></blockquote></li></ol><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><ol><li><p>创建工程</p></li><li><p>导入<code>pom.xml</code>依赖 依赖于生产者相同</p></li><li><p><code>application.yml</code> 也与生产者相同</p></li><li><p>消费者没有过多配置</p></li><li><p>主启动类</p></li><li><p>创建<code>RabbitMQListener</code>类</p></li><li><p>在<code>RabbitMQListener</code>新建一个方法 叫做<code>ListenerQueue</code> 带上<code>@RabbitListener</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定queue的名称</span></span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;boot_topic_queue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">       System.out.println(message);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>监听queue中的消息，获取到消息后，会以Message对象的方式注入到该方法中。</p></li></ol><blockquote><p>流程：导入依赖–&gt;配置-&gt;在受到Spring容器管理的类中 –&gt; 编写方法来接受消息（带上注解，指定队列名称）</p><p><code>RabbitMQ</code>接收消息的流程: 消费者 –&gt; 监听队列 –&gt; 交换机将消息发送到队列中 –&gt; 消费者接收队列中的消息</p></blockquote><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>生产者使用 <code>Topic</code>类型交换机发送消息<code>boot mq hello~~</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208012010429.png" alt="image-20220801201014349"></p><p>消费者监听<code>boot_topic_queue</code>队列</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208012011953.png" alt="image-20220801201113895"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Spring Boot整合 <code>RabbitMQ</code> 减少了代码量、提供了配置类工厂供开发人员使用，配置完成后，只需要注入其提供了<code>RabbitTemplate</code>，即可轻松地发送消息；</p><p>消费端直接使用<code>@RabbitListener</code>完成消息接收</p><h3 id="消息转化器"><a href="#消息转化器" class="headerlink" title="消息转化器"></a>消息转化器</h3><p>Spring AMQP发送方法中，接收消息的类型是Object，也就是说我们可以发送任意对象类型的消息，是因为Spring AMQP默认会帮助我们序列化为字节后发送</p><p>当然我们也可以自定义序列化的方式，比如JSON格式</p><p>生产者消费者都引入JSON依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置新的消息转化器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者发送</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;ding&quot;</span>,<span class="string">&quot;丁杨维&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;message.queue&quot;</span>,map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者接收</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">        name = &quot;message.queue&quot;,</span></span><br><span class="line"><span class="meta">        durable = &quot;true&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenMessageJsonConverter</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071853550.png" alt="image-20220807185257378"></p><h2 id="消息的可靠性"><a href="#消息的可靠性" class="headerlink" title="消息的可靠性"></a>消息的可靠性</h2><h3 id="消息的可靠性问题"><a href="#消息的可靠性问题" class="headerlink" title="消息的可靠性问题"></a>消息的可靠性问题</h3><p>消费者从生产者发送到exchange，再到queue，再到消费者，有那些倒置消息丢失的可能性？</p><ul><li>发送时丢失：<ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li><code>MQ</code>宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071857452.png" alt="image-20220807185729375"></p><h3 id="生产者确认机制"><a href="#生产者确认机制" class="headerlink" title="生产者确认机制"></a>生产者确认机制</h3><p><code>RabbitMQ</code>提供了<code>publisher confirm</code>机制来避免消息发送到<code>MQ</code>过程中丢失。消息发送到<code>MQ</code>以后，会返回一个结果给发送者，表示消息是否处理成功。结果有两种请求：</p><ul><li><p><code>publisher-confirm</code>，发送者确认</p><ul><li>消息成功投递到交换机，返回<code>ack</code></li><li>消息未投递到交换机，返回<code>nack</code></li></ul></li><li><p><code>publisher-return</code>，发送者回执</p><ul><li><p>消息投递到交换机了，但是没有路由到队列。返回<code>ack</code>，及路由失败原因。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071905004.png" alt="image-20220807190521930"></p></li></ul></li></ul><blockquote><p>注意：确认机制发送消息时，需要每个消息设置一个全局唯一ID，以区分不同消息，避免<code>ack</code>冲突。</p></blockquote><h4 id="编码-工程基础配置"><a href="#编码-工程基础配置" class="headerlink" title="编码-工程基础配置"></a>编码-工程基础配置</h4><ol><li><p>创建生产者、消费者工程</p></li><li><p>pom.xml依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>application.yml</code>配置<code>rabbitMQ</code>的连接配置</li></ol><p>生产者</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>启动类编写</p></li><li><p>消费者编写监听类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;test_queue_confirm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="编码-SpringAMQP实现生产者确认"><a href="#编码-SpringAMQP实现生产者确认" class="headerlink" title="编码-SpringAMQP实现生产者确认"></a>编码-SpringAMQP实现生产者确认</h4><ol><li><p>publisher这个微服务的application.yml中添加配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="string">.....</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">CORRELATED</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置说明：</p><ul><li><code>publisher-confirm-type</code>：开启<code>publisher-confirm</code>，这里支持两种类型：<ul><li><code>simple</code>：同步等待<code>confirm</code>结果，直到超时（类似同步调用，等待消息发送到交换机中返回确认消息才继续执行）</li><li><code>correlated</code>：异步回调，定义<code>ConfirmCallback</code>，<code>MQ</code>返回时会回调这个<code>ConfirmCallback</code>（异步调用，发送后继续后续操作，当交换机中接收到并返回结果时会通知。）</li></ul></li><li><code>publisher-returns</code>：开启<code>publish-return</code>功能，同样是基于<code>callback</code>机制，不过是定义<code>ReturnCallback</code></li><li><code>template.mandatory</code>：定义消息路由失败时的策略。<code>true</code>，则调用<code>ReturnCallback</code>；<code>false</code>：则直接丢弃消息</li></ul></li><li><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此需要在项目启动过程中配置全局<code>ReturnCallback</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-07-19:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="comment">//实现ApplicationContextAware接口</span></span><br><span class="line">    <span class="comment">//在这里配置RabbitTemplate的全局ReturnCallBack</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//获取RabbitTemplate对象</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                <span class="comment">//记录日志</span></span><br><span class="line">                log.error(<span class="string">&quot;消息发送到队列失败，响应码：&#123;&#125;,失败原因：&#123;&#125;,交换机：&#123;&#125;,路由key：&#123;&#125;,消息msg：&#123;&#125;&quot;</span>,</span><br><span class="line">                        returned.getReplyCode(),returned.getReplyText(),returned.getExchange(),returned.getRoutingKey(),returned.getMessage());</span><br><span class="line">                <span class="comment">//更具需求可以配置消息重发</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>RabbitMQ</code>配置：交换机、队列、绑定关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-04-19:52</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;getExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">exchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(<span class="string">&quot;amp.topic&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;getQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;test_queue_confirm&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(<span class="meta">@Qualifier(&quot;getExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;getQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;simple.test&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用测试类完成消息的发送</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestConfirm</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1.准备消息</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//2. 准备CorrelationData</span></span><br><span class="line">       <span class="comment">//2.1 准备ConfirmCallback</span></span><br><span class="line">       <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">       correlationData.getFuture().addCallback(result -&gt; &#123;</span><br><span class="line">           <span class="comment">//判断结果</span></span><br><span class="line">           <span class="keyword">if</span> (result.isAck())&#123;</span><br><span class="line">               <span class="comment">//ACK</span></span><br><span class="line">               System.out.println(<span class="string">&quot;消息投递到交换机成功！消息ID:&quot;</span>+correlationData.getId());</span><br><span class="line">               log.info(<span class="string">&quot;消息投递到交换机成功！消息ID：&#123;&#125;&quot;</span>,correlationData.getId());</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//NACK</span></span><br><span class="line">               System.out.println(<span class="string">&quot;消息投递到交换机失败！消息ID:&quot;</span>+correlationData.getId());</span><br><span class="line">               log.error(<span class="string">&quot;消息投递到交换机失败！消息ID：&#123;&#125;&quot;</span>,correlationData.getId());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,ex -&gt; &#123; <span class="comment">//出现异常导致消息发送失败</span></span><br><span class="line">           <span class="comment">//发送消息失败</span></span><br><span class="line">           <span class="comment">//记录日志</span></span><br><span class="line">           log.error(<span class="string">&quot;消息发送失败！&quot;</span>,ex);</span><br><span class="line">           <span class="comment">//根据需求可以重发消息</span></span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;amp.topic&quot;</span>,<span class="string">&quot;simple.test&quot;</span>,message,correlationData);</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>想要完成<strong>异步回调</strong>，就需要在调用发送消息的方法中添加一个参数<code>correlationData</code>，在该参数中定义消息投递情况的回调方法以及发送消息失败的回调方法。当交换机接收到生产者的确认时，<code>CorrelateionData</code> 于 <code>ack/nack</code> 一起返回。</p></li><li><p>启动消费者监听，启动生产者生成消息，观察控制台日志情况。</p></li></ol><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>SpringAMQP中处理消息确认的集中情况：</p><ul><li>publisher-confirm：<ul><li>消息发送成功到exchange，返回ack</li><li>消息发送失败，没有到达交换机，返回nack</li><li>消息发送过程中出现异常，没有收到回执</li></ul></li><li>消息成功发送到exchange，但没有路由到queue，<ul><li>调用<code>ReturnCallback</code></li></ul></li></ul><hr><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p><code>MQ</code>默认时内存存储消息，开启持久化功能可以确保缓存在<code>MQ</code>中的消息不丢失。</p><p>消息持久化是指将消息刷到磁盘以达到持久化保存的目的。</p><p>根据 <a href="http://www.rabbitmq.com/blog/2011/01/20/rabbitmq-backing-stores-databases-and-disks/">官方博文</a> 的介绍，<code>RabbitMQ</code>在两种情况下会将消息写入磁盘：</p><ol><li>消息本身在publish的时候就要求消息写入磁盘；（后续惰性队列讲述）</li><li>内存紧张，需要将部分内存中的消息转移到磁盘；</li></ol><p>这里演示的就是内存中的消息到达一定阈值后，将消息转移到磁盘的情况。</p><p>将 exchange、queue 和 message 都进行持久化操作后，也不能保证消息一定不会丢失，消息存入<code>RabbitMQ</code> 之后，还需要一段时间才能存入硬盘。<code>RabbitMQ</code> 并不会为每条消息都进行同步存盘，如果在这段时间，服务器宕机或者重启，消息还没来得及保存到磁盘当中，就会丢失。</p><p>创建<strong>交换机</strong>或者<strong>队列</strong>时调用<strong>durable方法</strong></p><blockquote><p>注意：如果 exchange 和 queue 两者之间有一个持久化，一个非持久化，就不允许建立绑定。</p></blockquote><ol><li><p>交换机持久化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;getExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">exchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(<span class="string">&quot;amp.topic&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">       <span class="keyword">return</span> exchange;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>队列持久化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;getQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;test_queue_confirm&quot;</span>).build();</span><br><span class="line">       <span class="keyword">return</span> queue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>消息持久化，<code>Spring AMQP</code>中的消息<strong>默认是持久的</strong>，可以通过<code>MessageProperties</code>中的<code>DeliveryMode</code>来指定（指定持久或是不持久）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageBuilder.withBody(<span class="string">&quot;hello&quot;</span>.getBytes())</span><br><span class="line">                .setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">//持久化消息</span></span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></li></ol><p>在图形控制界面中**<code>Features</code>**为D表示该组件持久化</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072109883.png" alt="image-20220807210954806"></p><p>通过观察创建队列，交换机等组件的构造方法可以看出 <strong><code>RabbitMQ</code>中的各个组件都是默认持久化的</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072116707.png" alt="image-20220807211656649"></p><hr><h3 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h3><p><code>RabbitMQ</code>支持消费者确认机制，即：消费者处理消息后可以向<code>MQ</code>发送<code>ack</code>回执，<code>MQ</code>收到<code>ack</code>回执后才会删除此消息。而<code>Spring AMQP</code>则允许三种确认模式：</p><ul><li>manual：手动<code>ack</code>，需要在业务代码结束后，调用<code>api</code>发送<code>ack</code>。</li><li>auto：自动<code>ack</code>，由<code>spring</code>监控<code>listener</code>代码是否出现异常，没有异常则返回<code>ack</code>；抛出异常则返回<code>nack</code></li><li>none：关闭<code>ack</code>，<code>MQ</code>假定消费者获取消息后会成功处理，因此消息投递后立即被删除。</li></ul><p>配置方式是修改<strong>消费者</strong><code>application.yml</code>文件，添加下面配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="string">.....</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment">#每个消费者可以处理的未确认消息的最大数量。</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">NONE</span> <span class="comment">#none：关闭ack; manual：手动ack; auto: 自动ack</span></span><br></pre></td></tr></table></figure><p>当消费者因报错或网络波动导致消息发送给了消费者，却没有返回<code>ack</code>，该消息就会被<code>Rabbitmq</code>标为<code>unacked</code>，队列会重新向消费者发送。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072131847.png" alt="image-20220807213122791"></p><h3 id="消费者失败重试"><a href="#消费者失败重试" class="headerlink" title="消费者失败重试"></a>消费者失败重试</h3><p>当消费者出现异常后，消息会不断requeue（重新入队）到队列，再重新发送给消费者，然后再次异常，再次erqueue，无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072136310.png" alt="image-20220807213640249"></p><p>我们可以利用Spring的retry机制，在消费者出现异常时例用本地重试，而不是无限制的<code>requeue</code>到<code>mq</code>的队列。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">1000</span> <span class="comment"># 初始的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数,下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment">#true无状态;false有状态.如果业务中包含事务,这里改为false 决定重试是否是有状态</span></span><br></pre></td></tr></table></figure><p>这种方式，重试次数耗尽，如果消息依然失败，则消息会被抛弃。</p><h3 id="消费者失败消息处理策略"><a href="#消费者失败消息处理策略" class="headerlink" title="消费者失败消息处理策略"></a>消费者失败消息处理策略</h3><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有<code>MessageRecoverer</code>接口处理，它包含三种不同的实现：</p><ul><li><p><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</p></li><li><p><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，直接<code>nack</code>，消息重新入队</p></li><li><p><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072205329.png" alt="image-20220807220509233"></p></li></ul><p>测试<code>RepublishMessageRecoverer</code>处理模式</p><ul><li><p>首先定义接收失败消息的交换机、队列和其绑定关系：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>); <span class="comment">//创建一个交换机 用于专门处理(重发)消费失败的消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>,<span class="literal">true</span>); <span class="comment">//与上面专门处理消费失败的交换机相绑定的缓存消息的队列</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义队列与交换机绑定关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue()).to(directExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，定义<code>RepublishMessageRecoverer</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置消息重发模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate,<span class="string">&quot;error.direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>重新启动消费者，查看图形控制界面中观察error队列和交换机中的信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072223276.png" alt="image-20220807222317143"></p><p>可以看到，重试次数耗尽后的消息会进入到error交换机，发送到error队列中，其中信息内容会包含报错信息。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>任何保证RabbitMQ消息的可靠新？</p><ul><li>开启生产者确认机制，确保生产者的消息能够到达队列</li><li>开启持久功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置<code>MessageRecoverer</code>，多次重试失败后将消息投递到异常交换机，交由人工处理。</li></ul><h2 id="死信交换机"><a href="#死信交换机" class="headerlink" title="死信交换机"></a>死信交换机</h2><h3 id="初始死信交换机"><a href="#初始死信交换机" class="headerlink" title="初始死信交换机"></a>初始死信交换机</h3><p>当一个队列中的消息满足下列情况之一时，可以成为<strong>死信（dead letter）</strong>：</p><ul><li>消费者使用 <code>basic.reject</code> 或 <code>basic.nack</code> 声明消费失败，并且消息的 <code>requeue</code> 参数设置为 false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息堆积满了，最早的消息可能成为死信</li></ul><p>如果该队列配置了 dead-letter-exchange 属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong> （Dead Letter Exchange，简称 <code>DLX</code>）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081303775.png" alt="image-20220808130328413"></p><blockquote><p>死信交换机与error交换机最大的区别就是，error交换机是由消费者去投递消息，而死信交换机则是通过队列投递。初次之外死信交换机还有着其他功能。</p></blockquote><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>什么样的消息会成为死信？</p><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>如何给队列绑定死信交换机？</p><ul><li>给队列设置 dead-letter-exchange 属性，指定一个交换机</li><li>给队列设置 dead-letter-routing-key 属性，设置死信交换机与死信队里额的 <code>RoutingKey</code></li></ul><hr><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>TTL，也就是Time-To-Live。如果一个队列中的消息TTL结束仍未消费，则会变为死信，ttl超时分为两种情况：</p><ul><li>消息存在的队列设置了存活时间</li><li>消息本身设置了存活时间</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081309319.png" alt="image-20220808130910216"></p><h4 id="编码-实现延迟消息"><a href="#编码-实现延迟消息" class="headerlink" title="编码-实现延迟消息"></a>编码-实现延迟消息</h4><p><strong>思路：消息可以设置超时存活时间，不设置消费者监听该队列，一但消息超出存活时间，就会被队列投递到我们事先配置好的死信交换机中，此时监听死信队列的消费者就可以接收到消息并完成消费，就实现了消息的延迟消费。</strong></p><ul><li>消费者监听死信队列消息</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="comment">//使用注解声明队列、交换机、以及绑定关系</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;dl.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;dl.direct&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;dl&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDlQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者接收到了dl.queue的延迟消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TTL交换机、队列、绑定关系配置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTLMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">ttlDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;ttl.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;dl.queue&quot;</span>)</span><br><span class="line">                .ttl(<span class="number">10000</span>) <span class="comment">//设置消息的生存时间，在此之后它将被丢弃或路由到死信交换（如果已配置）。</span></span><br><span class="line">                .deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>) <span class="comment">//指定死信交换机 这里超过存活时间队列就会将消息投递到死信交换机中</span></span><br><span class="line">                .deadLetterRoutingKey(<span class="string">&quot;dl&quot;</span>) <span class="comment">//指定死信交换机与死信队列之间的routingkey 到时投递的消息都会发送到死信交换机绑定的routingkey对应的队列中</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">ttlBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlDirectExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动消费者监听</p></li><li><p>生产者发送消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1. 消息准备</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;ttl message&quot;</span>;</span><br><span class="line">       <span class="comment">//2. 发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>,<span class="string">&quot;ttl&quot;</span>,message);</span><br><span class="line">       <span class="comment">//记录日志</span></span><br><span class="line">       log.info(<span class="string">&quot;消息已经成功发送！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>这里消息可以不设置超时存活时间，因为队列中已经设置，如果消息也设置，则取两者最小值。</strong></p><p>控制台结果</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081337679.png" alt="image-20220808133702626"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081337895.png" alt="image-20220808133712476"></p><p><strong>延时成功</strong></p></li><li><p>发送消息时，给消息本省设置超时时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1. 消息准备</span></span><br><span class="line">       <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;ttl message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">               .setExpiration(<span class="string">&quot;5000&quot;</span>) <span class="comment">//设置5秒超时时间</span></span><br><span class="line">               .build();</span><br><span class="line">       <span class="comment">//2. 发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>,<span class="string">&quot;ttl&quot;</span>,message);</span><br><span class="line">       <span class="comment">//记录日志</span></span><br><span class="line">       log.info(<span class="string">&quot;消息已经成功发送！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时延时时间由10秒变为了5秒。证实了当队列和消息都设置了超时时间取之间最小值。</p></li></ul><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>消息超时的两种方式</p><ul><li>给队列设置 <code>ttl</code> 属性，进入队列后超过 <code>ttl</code> 时间的消息变为死信</li><li>给消息设置 <code>ttl</code> 属性，队列接收到消息超过<code>ttl</code>时间后变为死信</li><li>两者共存时，以时间短的 <code>ttl</code> 为准</li></ul><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p>例用TTL结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为<strong>延迟队列（Delay Queue）</strong>模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15分钟内未支付，则自动取消</li><li>预约工作会议，20秒后自动通知所有参会人员</li></ul><h4 id="延迟队列插件"><a href="#延迟队列插件" class="headerlink" title="延迟队列插件"></a>延迟队列插件</h4><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。</p><h4 id="安装延迟队列插件-DelayExchange"><a href="#安装延迟队列插件-DelayExchange" class="headerlink" title="安装延迟队列插件 DelayExchange"></a>安装延迟队列插件 DelayExchange</h4><ol><li><p>下载插件</p><p><code>RabbitMQ</code>有一个官方的插件社区，地址为：<a href="https://www.rabbitmq.com/community-plugins.html"><code>Community Plugins — RabbitMQ</code></a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081356517.png" alt="image-20220808135611458"></p></li><li><p>上传插件</p><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件对应的数据卷。如果没有数据卷，可以先创建一个。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume create mq-plugins</span><br></pre></td></tr></table></figure><p>删除原有容器，创建新容器挂载数据卷</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -v mq-plugins:/plugins -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:management</span><br></pre></td></tr></table></figure><p>查看数据卷信息查找数据卷目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure><p>将我们刚刚下载的插件上传到该目录</p></li><li><p>安装插件</p><p>最后就是安装了，需要进入<code>MQ</code>容器内部来执行安装。</p><p>进入容器内部后，执行下面命令开启插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081718986.png" alt="image-20220808171500479"></p><p>出现如下信息代表安装成功。</p></li></ol><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p><code>DelayExchange</code>插件原理是对官方原生的<code>Exchange</code>做了功能的升级：</p><ul><li>将<code>DelayExchange</code>接受到的消息暂存在内存中（官方的<code>Exchange</code>是无法存储消息的）</li><li>在<code>DelayExchange</code>中计时，超时后才投递消息到队列中</li></ul><h4 id="手动指定"><a href="#手动指定" class="headerlink" title="手动指定"></a>手动指定</h4><p>在 <code>RabbitMQ</code> 的管理平台声明一个 <code>DelayExchagne</code> ：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081730019.png" alt="image-20220808173004955"></p><h4 id="SpringAMQP使用延迟队列插件"><a href="#SpringAMQP使用延迟队列插件" class="headerlink" title="SpringAMQP使用延迟队列插件"></a>SpringAMQP使用延迟队列插件</h4><p><code>DelayExchange</code>的本质还是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机，交换机的类型可以是任意类型，然后设定**<code>delayed</code><strong>属性为</strong><code>true</code>**即可。</p><p>基于注解的方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;,delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayedQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 delay.queue的延迟消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于<code>Java</code>代码的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayedExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;delay.direct&quot;</span>)</span><br><span class="line">                .delayed() <span class="comment">//指定为有延迟功能的交换机</span></span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们相这个delay为true的交换机中发送消息，一定要给消息添加一个<code>header: x-delay</code>，值为延迟的时间，单位为毫秒</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelayedMsg</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//创建消息</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;hello,delayed message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            .setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="number">10000</span>) <span class="comment">//设置head 延迟属性 延迟10秒</span></span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//消息ID,需要封装到CorrelationData中</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>,<span class="string">&quot;delay&quot;</span>,message,correlationData);</span><br><span class="line">    log.debug(<span class="string">&quot;发送消息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的消息发送生产者端会报错，原因是我们的消息是发送到了交换机上暂存然后再发送到队列中，因为暂存所以消息没有一开始就被发送到队列，所以会报<code>NO_ROUTE</code>的错误。</p></blockquote><p>可以在全局<code>ReturnCallback</code>中添加判断是否是延时消息来避免。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081800548.png"></p><h4 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h4><p>延迟队列插件的使用步骤包括那些？</p><ul><li>声明一个交换机，添加delayed属性为true</li><li>发送消息时，添加x-delay头，值为超时时间</li></ul><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><h3 id="消息堆积问题"><a href="#消息堆积问题" class="headerlink" title="消息堆积问题"></a>消息堆积问题</h3><p>当生产者发送个消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息到达上限。最早接收到的消息，就可能会称为死信，会被丢弃，这就是<strong>消息堆积</strong>问题</p><p>解决消息堆积有三种思路：</p><ul><li>增加更多消费者，提高消费速度</li><li>在消费者内开启线程池加快消息处理速度（适合消息消费时间长的消息）</li><li>扩大队列容积，提高堆积上限</li></ul><h3 id="惰性队列-1"><a href="#惰性队列-1" class="headerlink" title="惰性队列"></a>惰性队列</h3><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li><strong>接收到消息后直接存入磁盘而非内存</strong>（消息默认存储到内存）</li><li><strong>消费者要消费消息时才会从磁盘中读取并加载到内存</strong></li><li><strong>支持数百万条的消息存储</strong></li></ul><h4 id="声明惰性队列的方式"><a href="#声明惰性队列的方式" class="headerlink" title="声明惰性队列的方式"></a>声明惰性队列的方式</h4><ul><li><strong>命令行方式</strong></li></ul><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rabbitmqctl <span class="built_in">set</span>——policy Lazy <span class="string">&quot;^lazy-queue$&quot;</span> <span class="string">&#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27;</span> --apply-to queues</span><br></pre></td></tr></table></figure><ul><li><p><strong>用<code>SpringAMQP</code>声明惰性队列</strong></p><ul><li><p>@Bean的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">                .lazy() <span class="comment">//开启x-queue-mode为lazy</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">           name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">           durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">           arguments = @Argument(name = &quot;x-queue-mode&quot;,value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">   ))</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;接收到 lazy,queue的消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>分别向将配置好的惰性队列和常规队列发送一百万条消息，<strong>可以观察到惰性队列的消息接收更平稳，而常规队列波动很大。</strong></p><blockquote><p>原因：惰性队列一接收到消息就会将消息写到磁盘，而不是内存；而常规队列是写到内存，一旦内存中的消息超过了<code>RabbitMQ</code>的一定阈值，就会暂停接收然后将消息写入磁盘（<strong>page-out</strong>）。</p></blockquote><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>给消费者开启线程池，提高消费速度</li><li>使用惰性队列，可以在MQ中保存更多的消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些?</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h1 id="MQ集群"><a href="#MQ集群" class="headerlink" title="MQ集群"></a><code>MQ</code>集群</h1><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h2><p>RabbitMQ是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><ul><li>普通集群：是一种分布式集群，将队列分散到集群的各个结点，从而提高整个集群的并发能力。</li><li>镜像集群：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>镜像集群虽然支持主从，但主从同步并不是强一致性的，某些请款下可能有数据丢失的风险。因此在<code>RabbitMQ</code>的3.8版本以后，退出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采取Raft协议确保主从的数据一致性。</p><h2 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群</h2><p>普通集群，或者叫做标准集群（classic cluster），具备下列特征：</p><ul><li><p>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包括队列中的消息。</p></li><li><p>当访问集群某个节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081852019.png"></p></li><li><p>队列所在的节点宕机，队列中的消息就会丢失</p></li></ul><p>​    </p><h3 id="搭建普通集群"><a href="#搭建普通集群" class="headerlink" title="搭建普通集群"></a>搭建普通集群</h3><p>我们的计划部署3节点的<code>mq</code>集群：</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 —&gt; 15672</td><td>8071 —&gt; 5672</td></tr><tr><td>mq2</td><td>8082 —&gt; 15672</td><td>8072 —&gt; 5672</td></tr><tr><td>mq3</td><td>8083 —&gt; 15672</td><td>8073  —&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><p>RabbitMQ底层依赖于Erlang，而Erlang虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的<code>mq</code>容器中获取一个cookie值，作为集群的cookie。执行下面的命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it MQ容器<span class="built_in">id</span> <span class="built_in">cat</span> /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>可以看到cookie值如下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CSKYABVGIEGXEZLHYGMR</span><br></pre></td></tr></table></figure><p>接下来，停止并删除当前的<code>MQ</code>容器，我们重新搭建集群。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f MQ容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>清理下docker的数据卷</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h4 id="准备集群配置"><a href="#准备集群配置" class="headerlink" title="准备集群配置"></a>准备集群配置</h4><p>在<code>/tmp</code>目录新建一个配置文件 <code>rabbitmq.conf</code>：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">touch</span> rabbitmq.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">loopback_users.<span class="attribute">guest</span> = <span class="literal">false</span> <span class="comment">#禁用默认的guest用户 防止不法之人访问</span></span><br><span class="line">listeners.tcp.default = <span class="number">5672</span>  <span class="comment">#mq消息通信端口</span></span><br><span class="line">cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config</span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">1</span> = rabbit<span class="variable">@mq1</span> <span class="comment">#节点名称</span></span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">2</span> = rabbit<span class="variable">@mq2</span></span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">3</span> = rabbit<span class="variable">@mq3</span></span><br></pre></td></tr></table></figure><p>再创建一个文件，记录cookie</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建cookie文件</span></span><br><span class="line"><span class="built_in">touch</span> .erlang.cookie</span><br><span class="line"><span class="comment"># 写入cookie</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CSKYABVGIEGXEZLHYGMR&quot;</span> &gt; .erlang.cookie</span><br><span class="line"><span class="comment"># 修改cookie文件的权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 .erlang.cookie</span><br></pre></td></tr></table></figure><p>准备三个目录,mq1、mq2、mq3：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> mq1 mq2 mq3</span><br></pre></td></tr></table></figure><p>然后拷贝rabbitmq.conf、cookie文件到mq1、mq2、mq3：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq1</span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq2</span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq3</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq1</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq2</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq3</span><br></pre></td></tr></table></figure><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><p>创建一个网络：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create mq-net</span><br></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq1 \</span><br><span class="line">--hostname mq1 \</span><br><span class="line">-p 8071:5672 \</span><br><span class="line">-p 8081:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq2 \</span><br><span class="line">--hostname mq2 \</span><br><span class="line">-p 8072:5672 \</span><br><span class="line">-p 8082:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq3 \</span><br><span class="line">--hostname mq3 \</span><br><span class="line">-p 8073:5672 \</span><br><span class="line">-p 8083:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><blockquote><p><code>--net</code>将容器添加进指定的网络</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081932654.png" alt="image-20220808193233523"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在<code>mq1</code>这个节点上添加一个队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081933893.png" alt="image-20220808193359818"></p><p>如图，在<code>mq2</code>和<code>mq3</code>两个控制台也都能看到：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081935633.png" alt="image-20220808193516554"></p><h4 id="数据共享测试"><a href="#数据共享测试" class="headerlink" title="数据共享测试"></a>数据共享测试</h4><p>点击这个队列，进入管理页面：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081937202.png" alt="image-20220808193700143"></p><p>然后利用控制台发送一条消息到这个队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081937482.png" alt="image-20220808193730351"></p><p>结果在<code>mq2</code>、<code>mq3</code>上都能看到这条消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081938791.png" alt="image-20220808193834711"></p><h4 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h4><p>我们让其中一台节点mq1宕机：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop mq1</span><br></pre></td></tr></table></figure><p>然后登录mq2或mq3的控制台，发现simple.queue也不可用了：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081941214.png" alt="image-20220808194107726"></p><p>说明队列是没有实现共享的。</p><h2 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h2><p>镜像集群：本质是主从模式，具备下面 的特性</p><ul><li><p>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</p></li><li><p>创建队列的节点被称为该队列的主节点，备份到的其他节点叫做该队列的镜像节点。</p></li><li><p>一个队列的主节点可能是另一个队列的镜像节点</p></li><li><p>所有操作都是主节点完成，然后同步给镜像节点</p></li><li><p>主节点宕机后，镜像节点会代替称为新的主节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081948314.png" alt="image-20220808194817144"></p></li></ul><blockquote><p>官方文档地址：<a href="https://www.rabbitmq.com/ha.html">https://www.rabbitmq.com/ha.html</a></p></blockquote><h3 id="搭建镜像集群"><a href="#搭建镜像集群" class="headerlink" title="搭建镜像集群"></a>搭建镜像集群</h3><p>镜像集群不需要重新搭建集群，只需要在原来普通集群节点上进行策略配置即可。<strong>镜像集群更形象地可以成为集群的镜像模式。</strong></p><h4 id="镜像集群的配置"><a href="#镜像集群的配置" class="headerlink" title="镜像集群的配置"></a>镜像集群的配置</h4><p>镜像模式的配置有3种模式：</p><table><thead><tr><th align="left">ha-mode</th><th align="left">ha-params</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">准确模式exactly</td><td align="left">队列的副本量count</td><td align="left">集群中队列副本（主服务器和镜像服务器之和）的数量。count如果为1意味着单个副本：即队列主节点。count值为2表示2个副本：1个队列主和1个队列镜像。换句话说：count &#x3D; 镜像数量 + 1。如果群集中的节点数少于count，则该队列将镜像到所有节点。如果有集群总数大于count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td></tr><tr><td align="left">all</td><td align="left">(none)</td><td align="left">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络I &#x2F; O，磁盘I &#x2F; O和磁盘空间使用情况。推荐使用exactly，设置副本数为（N &#x2F; 2 +1）。</td></tr><tr><td align="left">nodes</td><td align="left"><em>node names</em></td><td align="left">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td></tr></tbody></table><h5 id="exactly模式"><a href="#exactly模式" class="headerlink" title="exactly模式"></a>exactly模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-two &quot;^two\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是exactly模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是2，就是副本数量为2，1主1镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是manual，即新加入的镜像节点不会同步旧的消息。如果设置为automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul><hr><h5 id="all模式"><a href="#all模式" class="headerlink" title="all模式"></a>all模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-all &quot;^all\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;</code>：策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是all模式，即所有节点都会称为镜像节点</li></ul></li></ul><hr><h5 id="nodes模式"><a href="#nodes模式" class="headerlink" title="nodes模式"></a>nodes模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-nodes &quot;^nodes\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是nodes模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul><hr><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>我们使用镜像集群的exactly模式，因为集群节点数量为3，因此镜像数量就设置为2.</p><p>运行下面的指令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mq1 rabbitmqctl set_policy ha-two <span class="string">&quot;^two\.&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以在控制台上<code>admin</code>中的Policies中看到我们配置的镜像集群策略</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082151354.png" alt="image-20220808215158257"></p><p>下面，我们创建一个新的队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082149347.png" alt="image-20220808214913263"></p><p>在任意一个<code>mq</code>控制台查看队列：</p><p>将光标放在<code>+1</code>上可以看到镜像节点。也可点击队列进入队列详细信息中查看</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082154886.png" alt="image-20220808215441819"></p><p><img src="C:\Users\Devil\AppData\Roaming\Typora\typora-user-images\image-20220808221121927.png" alt="image-20220808221121927"></p><hr><h5 id="测试数据共享"><a href="#测试数据共享" class="headerlink" title="测试数据共享"></a>测试数据共享</h5><p>给<code>two.queue</code>发送一条消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082156571.png" alt="image-20220808215620484"></p><p>然后在<code>mq1</code>、<code>mq2</code>、<code>mq3</code>的任意控制台查看消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082157161.png" alt="image-20220808215717049"></p><h5 id="测试高可用"><a href="#测试高可用" class="headerlink" title="测试高可用"></a>测试高可用</h5><p>现在，我们让two.queue的主节点mq1宕机：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop mq1</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082158235.png" alt="image-20220808215810110"></p><p>查看队列状态：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082158135.png" alt="image-20220808215843071"></p><p>发现<code>two.queue</code>依然是健康的！并且其主节点切换到了<code>rabbit@mq2</code>上，而且<code>mq3</code>成为了新的镜像节点。</p><h2 id="仲裁队列"><a href="#仲裁队列" class="headerlink" title="仲裁队列"></a>仲裁队列</h2><p>从RabbitMQ 3.8版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。他是用来替代镜像模式的（因为镜像模式并非强一致性，可能会发生数据丢失即使概率不大）。</p><p>仲裁队列具有以下特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致性</li></ul><h3 id="添加仲裁队列"><a href="#添加仲裁队列" class="headerlink" title="添加仲裁队列"></a>添加仲裁队列</h3><p>在任意控制台添加一个队列，一定要选择队列类型为Quorum类型。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082207516.png" alt="image-20220808220717424"></p><p>在任意控制台查看队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082211923.png" alt="image-20220808221155857"></p><p>可以看到，仲裁队列的 + 2字样。代表这个队列有2个镜像节点。</p><p>因为仲裁队列默认的镜像数为5。如果你的集群有7个节点，那么镜像数肯定是5；而我们集群只有3个节点，因此镜像数量就是3.</p><p>查看队列详细信息</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082212023.png" alt="image-20220808221222923"></p><p>可以看到主节点和所有成员，除去主节点其余的都是从节点（镜像）。</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>测试情况参考镜像集群的测试，效果相同。</p><h3 id="SpringAMQP创建仲裁队列"><a href="#SpringAMQP创建仲裁队列" class="headerlink" title="SpringAMQP创建仲裁队列"></a>SpringAMQP创建仲裁队列</h3><p>在创建仲裁队列之前，首先需要配置连接集群。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line"><span class="string">.....</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8071,36.137.128.27:8072,36.137.128.27:8073</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="string">......</span></span><br></pre></td></tr></table></figure><p>创建仲裁队列</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuorumQueueConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">quorumQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;quorum.queue2&quot;</span>)</span><br><span class="line">                .quorum() <span class="comment">//设置为仲裁队列</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发送消息与正常向队列发送消息无异</strong></p><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><blockquote><p><code>github</code>示例代码地址：<a href="https://github.com/Devildyw/RabbitMQ-Study">https://github.com/Devildyw/RabbitMQ-Study</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="消息队列" scheme="https://devildyw.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="中间件" scheme="https://devildyw.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
</feed>
