<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devil的个人博客</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="https://devildyw.github.io/atom.xml" rel="self"/>
  
  <link href="https://devildyw.github.io/"/>
  <updated>2022-08-11T11:39:32.704Z</updated>
  <id>https://devildyw.github.io/</id>
  
  <author>
    <name>Devil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud-Sleuth</title>
    <link href="https://devildyw.github.io/2022/08/10/Spring%20Cloud-Sleuth/"/>
    <id>https://devildyw.github.io/2022/08/10/Spring%20Cloud-Sleuth/</id>
    <published>2022-08-10T15:24:45.000Z</published>
    <updated>2022-08-11T11:39:32.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud-Sleuth"></a>Spring Cloud-Sleuth</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经果多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或者错误都会引起整个请求最后的失败。因此，就需要一些能够帮助理解系统行为、分析系统性能问题的工具， 以便在系统发生故障的时候，快速定位和解决问题。这些工具就是<code>APM</code>（Application Performance Management）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111809578.png" alt="image-20220811180900496"></p><p>复杂的分布式服务调用链路</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111809444.png" alt="image-20220811180918384"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud Sleuth 能够跟踪你的请求和消息，以便你可以将该通信与相应的日志条目相关联。 你还可以将跟踪信息导出到外部系统以可视化延迟。</p><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p><p>在分布式系统中提供追踪解决方案并且兼容支持了<code>zipkin</code>。</p><p>通过Seuth产生的调用链监控信息，可以得知微服务之间的调用链路，但监控信息只输出到控制台不方便查看。我们需要一个<strong>图形化的工具zipkin</strong>。Zipkin是Twitter开源的分布式跟踪系统，<strong>主要用来收集系统的时许数据，从而追踪系统的调用问题。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111822397.png" alt="img"></p><blockquote><p>官方<code>Github</code>地址：<a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></p></blockquote><h2 id="Zipkin搭建安装"><a href="#Zipkin搭建安装" class="headerlink" title="Zipkin搭建安装"></a>Zipkin搭建安装</h2><p>**docker安装部署<code>Zipkin</code>**。</p><p>Spring Cloud 从F版起已不需要自己构建<code>Zipkin</code> server了，只需要调用jar包即可，所以用Docker部署更为简单，只需要一个命令即可安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111832618.png" alt="image-20220811183218576"></p><p>开启云服务器端口后，就算是部署完成了。</p><p>访问<code>http://ip:端口/zipkin/</code>即可看到<code>zipkin</code>图形化控制台。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>Spring Cloud Sleuth 借用了 Dapper 的术语。</p><ol><li><strong>Span</strong></li></ol><blockquote><p>基本工作单元，表示调用链路来源。 span用一个64位的id唯一标识。除ID外，span还包含其他数据，例如描述、时间戳事件、键值对的注解（标签）， spanID、span父 ID等。 span被启动和停止时，记录了时间信息。初始化 span被为”rootspan”，该 span的 id和 trace的 ID相等。<strong>通俗的理解span就是一次请求信息</strong></p></blockquote><ol start="2"><li><strong>Trace</strong></li></ol><blockquote><p>一组共享”rootspan”的 span组成的树状结构称为 trace， trace也用一个64位的 ID唯一标识， trace中的所有 span都共享该 trace的 ID</p></blockquote><ol start="3"><li><strong>Annotation&#x2F;Event</strong></li></ol><blockquote><p>用于及时记录某个事件的存在</p></blockquote><blockquote><ol><li><p>CS（ Client sent客户端发送）：客户端发起一个请求，该 annotation描述了span的开始。</p></li><li><p>SR（ server Received服务器端接收）：服务器端获得请求并准备处理它。如果用 SR减去 CS时间戳，就能得到网络延迟。</p></li><li><p>SS（ server sent服务器端发送）：该 annotation表明完成请求处理（当响应发回客户端时）。如果用 SS减去 SR时间戳，就能得到服务器端处理请求所需的时间。</p></li><li><p>CR（ Client Received客户端接收）： span结束的标识。客户端成功接收到服务器端的响应。如果 CR减去 CS时间戳，就能得到从客户端发送请求到服务器响应的所需的时间。</p></li></ol></blockquote><p>下图显示了Span和Trace在系统中的流转</p><p><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/main/docs/src/main/asciidoc/images/trace-id.jpg" alt="跟踪信息传播"></p><p>每个note色块代表着一个span，（有七个span - 从A到G），思考一下下面的note</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> D</span><br><span class="line">Client Sent</span><br></pre></td></tr></table></figure><p>此note表明当前span将Trace Id设置为X并将span Id设置为D。此外，从 <code>RPC</code> 的角度来看，发生了 Client Sent 事件。</p><p>再思考一下下面note，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> A</span><br><span class="line">(no custom span)</span><br><span class="line"></span><br><span class="line"><span class="type">Trace</span> <span class="variable">Id</span> <span class="operator">=</span> X</span><br><span class="line"><span class="type">Span</span> <span class="variable">Id</span> <span class="operator">=</span> C</span><br><span class="line">(custom span)</span><br></pre></td></tr></table></figure><p>您可以继续使用创建的span（带有no custom span指示的示例），也可以手动创建子span（带有custom span指示的示例）。 </p><p>下图显示了span的父子关系的流转：</p><p><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/main/docs/src/main/asciidoc/images/parents.jpg" alt="Parent child relationship"></p><h2 id="搭建链路监控"><a href="#搭建链路监控" class="headerlink" title="搭建链路监控"></a>搭建链路监控</h2><p>Spring Cloud Sleuth 的maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务消费者和服务生产者都新添加该依赖。</p><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p><code>Cloud-eureka-provider-payment8001</code></p><p>修改<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://36.137.128.27:9411/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="string">......</span>     </span><br></pre></td></tr></table></figure><p>修改业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">......   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/zipkin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi ,i&#x27;am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><code>Cloud-eureka-consumer-order80</code></p><p>修改<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://36.137.128.27:9411/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="string">......</span>     </span><br></pre></td></tr></table></figure><p>修改业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动eureka注册中心，生产者，消费者</p><p>调用接口<code>get: http://localhost:80/consumer/payment/zipkin</code>调用成功后，观察zipkin图形控制台信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111933098.png" alt="image-20220811193308993"></p><p>我们选择根据服务名称查询，选择好对应的服务名后，点击<code>RUN QUERY</code> 即可获得每次请求的链路跟踪信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111934252.png" alt="image-20220811193429168"></p><p>图上显示了每次调用的链路基本信息</p><p>点击SHOW还可以看到更多详细的信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208111935689.png" alt="image-20220811193542614"></p><p>包括请求持续时间，链路上的服务数量，TraceID等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Sleuth&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Sleuth&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Sleuth&quot;&gt;&lt;/a&gt;Spring Cloud-Sleuth&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="链路跟踪" scheme="https://devildyw.github.io/categories/%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Stream</title>
    <link href="https://devildyw.github.io/2022/08/10/Spring%20Cloud-Stream/"/>
    <id>https://devildyw.github.io/2022/08/10/Spring%20Cloud-Stream/</id>
    <published>2022-08-10T09:30:35.000Z</published>
    <updated>2022-08-11T07:26:23.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为什么要引入Spring Cloud Stream？</p><p>如今市场上有着4大流行的 <code>MQ</code> （消息中间件）如：<code>ActiveMQ</code>、<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>Kafka</code>。在不同系统中可能使用的消息中间件不同，这就需要程序员对每种的消息中间件去掌握，如果每一种消息中间件都去掌握的话，是一件费时又费力的事情，而且还要涉及到消息中间件的切换，维护，和开发。</p><p>有没有一种新的技术诞生？</p><p>让我们不再关注具体 <code>MQ</code> 的细节，我们只需要用一种适配绑定的方式，自动的给我们在各种 <code>MQ</code> 内切换。（类似于JDBC）</p><p><strong>Spring Cloud Stream 响应诞生</strong>，它是<strong>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p><p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream 中 binder 对象交互。</p><p>通过我们配置来binding（绑定），而Spring Cloud Stream 的 binder 对象负责于消息中间件交互。</p><p>所以，我们只需要搞清楚如何于 Spring Cloud Stream 交互就可以方便使用消息驱动方式。</p><p>通过使用 Spring Integration来连接消息代理中间件以实现消息事件驱动。</p><p>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了<strong>发布-订阅、消费组、分区</strong>的三个概念</p><p><strong>目前官方只支持 RabbitMQ、Kafka</strong></p><blockquote><p>Spring Cloud Stream 官方地址：<a href="https://spring.io/projects/spring-cloud-stream#overview">Spring Cloud Stream-Spring.io</a></p><p>Spring Cloud Stream 中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">Spring Cloud Stream 中文指导手册</a></p></blockquote><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="标准-MQ"><a href="#标准-MQ" class="headerlink" title="标准 MQ"></a>标准 <code>MQ</code></h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101804867.png" alt="image-20220810180406037"></p><p>标准的 <code>MQ</code> 中 生产者&#x2F;消费者之间靠Message（消息）媒介传递信息内容</p><p>消息必须走特定的通道–消息通道<code>MessageChannel</code></p><p>消息通道里的消息由<code>MessageChannel</code>的子接口<code>SubscribableChannel</code>转发，由<code>MessageHandler</code>消息处理器订阅消费</p><h3 id="为什么使用Spring-Cloud-Stream"><a href="#为什么使用Spring-Cloud-Stream" class="headerlink" title="为什么使用Spring Cloud Stream?"></a>为什么使用Spring Cloud Stream?</h3><p>假如说我们用到了<code>RabbitMQ</code>和<code>Kafka</code>，由于这两个消息中间件的架构上的不同，像<code>RabbitMQ</code>由exchange，<code>kafka</code>由Topic和Partitions分区。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101838002.png" alt="image-20220810183809938"></p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用两个消息队列的其中一种，后面的业务需求，我们向往另外一种消息队列进行迁移，这时无疑就是一个灾难性的，<strong>一大堆东西都要重新推倒重新做</strong>，因为它更我们的系统耦合了，这时候Spring Cloud Stream给我们提供了一种解耦合的方式。</p><h4 id="为什么Spring-Cloud-Stream可以统一底层差异"><a href="#为什么Spring-Cloud-Stream可以统一底层差异" class="headerlink" title="为什么Spring Cloud Stream可以统一底层差异"></a>为什么Spring Cloud Stream可以统一底层差异</h4><p>在没有绑定器这个概念的请款下，我们的Spring Boot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，他们的实现细节上会有较大的差异性</p><p>通过定义绑定器作为中间层，完美地实现了<strong>应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101849568.png" alt="image-20220810184906483"></p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>在没有绑定器这个概念的情况下，完美的Spring Boot应用要直接与消息中间件进行消息交互的时候，由于各个消息中间件构建的初衷哦那个不同，它们的实现细节上会有较大的差异性。通过定义绑定器作为中间层，完美地实现了<strong>应用程序与消息中间件细节之间的隔离</strong>。Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的动态的切换中间件（<code>rabbitMQ</code>切换为<code>Kafka</code>），使得微服务开发的高度解耦，服务可以关注更多自己的业务流程。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101938238.png" alt="img"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101937891.gif" alt="img"></p><p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p><blockquote><p><strong>INPUT对应于消费者</strong></p><p><strong>OUTPUT对应于生产者</strong></p></blockquote><p><strong>Spring Cloud Stream中的消息通信遵循了发布-订阅模式，使用Topic（主题）进行广播</strong>，主题这个概念在Kafka中就是Topic，在<code>RabbitMQ</code>中就是Exchange（交换机）</p><h2 id="Spring-Cloud-Stream-标准流程"><a href="#Spring-Cloud-Stream-标准流程" class="headerlink" title="Spring Cloud Stream 标准流程"></a>Spring Cloud Stream 标准流程</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101907035.png" alt="image-20220810190738980"></p><p>上述中展示了4种Spring Cloud Stream的组件，分别是<strong>Binder</strong>、<strong>Channel</strong>、<strong>Source</strong>和<strong>Sink</strong>。</p><p><strong>作用</strong></p><p><strong>Binder</strong>：很方便的连接中间件，屏蔽差异</p><p><strong>Channel</strong>：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p><p><strong>Source和Sink</strong>：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</p><h2 id="RabbitMQ-Binder-配置"><a href="#RabbitMQ-Binder-配置" class="headerlink" title="RabbitMQ Binder 配置"></a><code>RabbitMQ</code> Binder 配置</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>要使用 <code>RabbitMQ</code> binder，您可以使用以下 Maven 坐标将其添加到 Spring Cloud Stream 应用程序中：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者，您可以使用 Spring Cloud Stream RabbitMQ Starter，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><h4 id="RabbitMQ-Binder属性"><a href="#RabbitMQ-Binder属性" class="headerlink" title="RabbitMQ Binder属性"></a>RabbitMQ Binder属性</h4><p>默认情况下，<code>RabbitMQ</code> binder 使用 Spring Boot 的<code>ConnectionFactory</code>. 因此，它支持 <code>RabbitMQ</code> 的所有 Spring Boot 配置选项（<a href="https://devildyw.github.io/2022/07/29/RabbitMQ/">RabbitMQ</a>）。<code>RabbitMQ</code> 配置选项使用<code>spring.rabbitmq</code>前缀。</p><p>除了 Spring Boot 选项之外，<code>RabbitMQ</code> binder 还支持以下属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.adminAddresses</em></td><td align="center"></td><td align="center">空</td></tr><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.nodes</em></td><td align="center"></td><td align="center">空</td></tr><tr><td align="center"><em>spring.cloud.stream.rabbit.binder.compressionLevel</em></td><td align="center">压缩绑定的压缩级别。</td><td align="center">1(BEST_LEVEL)</td></tr><tr><td align="center"><em>spring.cloud.stream.binder.connection-name-prefix</em></td><td align="center">连接名称前缀，用于命名此绑定器创建的连接。名称是此前缀后跟<code>#n</code>，<code>n</code>每次打开新连接时都会递增。</td><td align="center">无（Spring AMQP 默认值）</td></tr></tbody></table><h4 id="RabbitMQ-消费者属性"><a href="#RabbitMQ-消费者属性" class="headerlink" title="RabbitMQ 消费者属性"></a>RabbitMQ 消费者属性</h4><p>以下属性仅适用于 Rabbit 消费者，并且必须以 <code>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.consumer. </code>为前缀</p><p>但是，如果需要将同一组属性应用于大多数绑定，为避免重复，Spring Cloud Stream 支持为所有通道设置值，格式为<code>spring.cloud.stream.rabbit.default.&lt;property&gt;=&lt;value&gt;</code>.</p><p>另外，请记住，<strong>绑定特定属性将在默认情况下覆盖为其配置的全局属性</strong>。</p><table><thead><tr><th align="center"><strong>属性</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><em>acknowledgeMode</em></td><td align="center">消费者端的<code>ACK</code>模式</td><td align="center"><code>AUTO</code></td></tr><tr><td align="center"><em>anonymousGroupPrefix</em></td><td align="center">当绑定没有<code>group</code>属性时，一个匿名且自动删除的队列被绑定到目标交换机上，此类队列会由默认命名策略生成一个名为<code>anonymous.&lt;base64 representation of a UUID&gt;</code>的属性值。设置此属性可将前缀更改为默认值以外的值。</td><td align="center"><code>anonymous.</code></td></tr><tr><td align="center"><em>autoBindDlq</em></td><td align="center">是否自动声明 DLQ（死信队列） 并将其绑定到 binder DLX（死信交换机）。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>bindingRoutingKey</em></td><td align="center">将队列绑定到交换器的路由键（如果<code>bindQueue</code>是<code>true</code>）。可以是多个键 - 请参阅<code>bindingRoutingKeyDelimiter</code>。对于分区目标，<code>-&lt;instanceIndex&gt;</code>附加到每个键。</td><td align="center"><code>#</code></td></tr><tr><td align="center"><em>bindingRoutingKeyDelimiter</em></td><td align="center">当该属性不为空时，<code>bindingRoutingKey</code> 被认为是由该值分隔的键列表；通常使用逗号。</td><td align="center"><code>null</code></td></tr><tr><td align="center"><em>bindQueue</em></td><td align="center">是否声明队列并将其绑定到目标交换机。如果您已经设置了自己的基础架构并且之前已经创建并绑定了队列，请将其设置为<code>false</code>。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>consumerTagPrefix</em></td><td align="center">用于创建消费者标签；将添加每个消费者创建的<code>#n</code>增量<code>n</code>。 示例：<code>$&#123;spring.application.name&#125;-$&#123;spring.cloud.stream.bindings.input.group&#125;-$&#123;spring.cloud.stream.instance-index&#125;</code>。</td><td align="center">无 - 代理将生成随机消费者标签</td></tr><tr><td align="center"><em>containerType</em></td><td align="center">选择要使用的侦听器容器的类型。</td><td align="center"><code>simple</code></td></tr><tr><td align="center"><em>deadLetterQueueName</em></td><td align="center">DLQ（死信队列） 的名称</td><td align="center"><code>prefix+destination.dlq</code></td></tr><tr><td align="center"><em>deadLetterExchange</em></td><td align="center">分配给队列的 DLX（死信交换机）。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。</td><td align="center"><code>prefix+DLX</code></td></tr><tr><td align="center"><em>deadLetterExchangeType</em></td><td align="center">要分配给队列的 DLX 的类型。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。</td><td align="center"><code>direct</code></td></tr><tr><td align="center"><em>deadLetterRoutingKey</em></td><td align="center">绑定交换机的死信路由键，仅当<code>autoBindDlq</code>为<code>true</code>才相关。</td><td align="center"><code>destination</code></td></tr><tr><td align="center"><em>declareDlx</em></td><td align="center">是否为指定<code>destination</code>声明 DLX，仅当<code>autoBindDlq</code>是<code>true</code>时才相关。如果你有与配置的 DLX 请设置为 <code>false</code></td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>declareExchange</em></td><td align="center">是否为指定<code>destination</code>声明交换机</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>delayedExchange</em></td><td align="center">是否为指定<code>destination</code>声明<code>Delayed Message Exchagne</code>（延迟交换机）。需要在broker上安装<code>Delayed Message Exchagne</code> 插件。将参数 <code>exchageType</code> 设置为 <code>x-delayed-type</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqBindingArguments</em></td><td align="center">将 dlq 绑定到死信交换时应用的参数；用于<code>headers</code> <code>deadLetterExchangeType</code>指定要匹配的标头。例如<code>…dlqBindingArguments.x-match=any</code>，<code>…dlqBindingArguments.someHeader=someValue</code>。</td><td align="center">空</td></tr><tr><td align="center"><em>dlqDeadLetterExchange</em></td><td align="center">如果声明了 DLQ，则分配给该队列一个 DLX。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqDeadLetterRoutingKey</em></td><td align="center">如果一个 DLQ 被声明了，会分配给该队列一个死信路由key</td><td align="center">无</td></tr><tr><td align="center"><em>dlqExpires</em></td><td align="center">一个死信队列超过多长时间后被删除。</td><td align="center">不过期</td></tr><tr><td align="center"><em>dlqLazy</em></td><td align="center">声明一个带有<code>x-queue-mode=lazy</code>参数的死信队列（即 <strong>惰性死信队列</strong>），考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqMaxLength</em></td><td align="center">死信队列中的可存储最大消息数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>dlqMaxLengthBytes</em></td><td align="center">死信队列中所有消息的最大总字节数和。</td><td align="center">不限制</td></tr><tr><td align="center"><em>dlqMaxPriority</em></td><td align="center">死信队列中消息的最大优先级</td><td align="center">无</td></tr><tr><td align="center"><em>dlqOverflowBehavior</em></td><td align="center">超过<code>dlqMaxLength</code>或<code>dlqMaxLengthBytes</code>时采取的行动；由<code>drop-head</code>和<code>reject-publish</code>两种</td><td align="center">无</td></tr><tr><td align="center"><em>dlqQuorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，邮件将被丢弃或死信。</td><td align="center">无  - 将应用代理默认值。</td></tr><tr><td align="center"><em>dlqQuorum.enabled</em></td><td align="center">如果为 true，则创建仲裁死信队列而不是普通队列。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqQuorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>dlqSingleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true，即<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqTtl</em></td><td align="center">声明时应用于死信队列的默认生存时间（以毫秒为单位）。</td><td align="center">不限制</td></tr><tr><td align="center"><em>durableSubscription</em></td><td align="center">订阅是否应该是持久的。仅当<code>group</code>也设置时才有效。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeAutoDelete</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机会被自动删除（即在最后一个队列被删除后删除）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeDurable</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机是持久的（即，它在broker重启后仍然存在）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeType</em></td><td align="center">交换类型：<code>direct</code>, <code>fanout</code>,<code>headers</code>或<code>topic</code>用于非分区<code>destination</code>和<code>direct</code>, 标头或<code>topic</code>用于分区<code>destination</code>。</td><td align="center"><code>topic</code></td></tr><tr><td align="center"><em>exclusive</em></td><td align="center">是否创建单一活动的消费者，如果该属性值为<code>true</code>，则最大消费者数为1。多个消费者同时监听同一个队列，同一时间只能有一个消费者去消费消息，其他的消费者都处于等待状态，当该消费者失败或者关闭时，另一个消费者才将成为“活跃”消费者并恢复消费。（原理参阅请参阅<code>recoveryInterval</code>，它控制备用实例尝试使用的频率。）在使用 <code>RabbitMQ 3.8</code> 或更高版本时考虑使用<code>singleActiveConsumer</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>expires</em></td><td align="center">队列未使用被删除的时间（存活时间）</td><td align="center">不过期</td></tr><tr><td align="center"><em>failedDeclarationRetryInterval</em></td><td align="center">如果队列丢失，重试消费的时间间隔</td><td align="center">5000</td></tr><tr><td align="center"><em>frameMaxHeadroom</em></td><td align="center">将堆栈跟踪添加到 DLQ 消息标头时为其他标头保留的字节数。所有标头必须适合<code>frame_max</code>代理上配置的大小。堆栈跟踪可能很大；如果大小加上此属性超过<code>frame_max</code>，则堆栈跟踪将被截断。将写入 WARN 日志；考虑<code>frame_max</code>通过捕获异常并抛出具有较小堆栈跟踪的异常来增加或减少堆栈跟踪。</td><td align="center">20000</td></tr><tr><td align="center"><em>headerPatterns</em></td><td align="center">标头模式</td><td align="center">&#96;&#96;[‘*’]<code>所有标题</code></td></tr><tr><td align="center"><em>lazy</em></td><td align="center">是否用参数声明队列<code>x-queue-mode=lazy</code>，惰性队列，考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>maxConcurrency</em></td><td align="center">最大消费者数。<code>containerType</code>是<code>direct</code>时不支持。</td><td align="center">1</td></tr><tr><td align="center"><em>maxLength</em></td><td align="center">普通队列中的最大消息数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>maxLengthBytes</em></td><td align="center">普通队列中所有消息的最大总字节数。</td><td align="center">不限制</td></tr><tr><td align="center"><em>maxPriority</em></td><td align="center">普通队列中消息的最大优先级 (0-255)</td><td align="center">无</td></tr><tr><td align="center"><em>missingQueuesFatal</em></td><td align="center">当找不到队列时，是否将条件视为致命并停止监听听器容器。默认为<code>false</code>使容器不断尝试从队列中消费</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>overflowBehavior</em></td><td align="center"><code>maxLength</code>超过或超过时采取的行动<code>maxLengthBytes</code>；目前有<code>drop-head</code>或<code>reject-publish</code>两种</td><td align="center">无</td></tr><tr><td align="center"><em>prefetch</em></td><td align="center">每个消费者可以处理的未确认消息的最大数量</td><td align="center">1</td></tr><tr><td align="center"><em>prefix</em></td><td align="center">要添加到<code>destination</code>和 队列名称的前缀。</td><td align="center">””</td></tr><tr><td align="center"><em>queueBindingArguments</em></td><td align="center">将队列绑定到交换器时应用的参数；用于<code>headers</code> <code>exchangeType</code>指定要匹配的标头。例如<code>…queueBindingArguments.x-match=any</code>，<code>…queueBindingArguments.someHeader=someValue</code>。</td><td align="center">空</td></tr><tr><td align="center"><em>queueDeclarationRetries</em></td><td align="center">如果队列丢失，则重试从队列消费的次数。仅当<code>missingQueuesFatal</code>是<code>true</code>时才相关。否则，容器会无限期地重试。<code>containerType</code>是<code>direct</code>时不支持。</td><td align="center">3</td></tr><tr><td align="center"><em>queueNameGroupOnly</em></td><td align="center">如果为 <code>true</code>，则从名称等于 <code>group</code> 的队列中消费。否则从队列名称为 <code>destination.group</code> 队列中消费。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，消息将被丢弃或死信。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>quorum.enabled</em></td><td align="center">如果为 true，则创建仲裁队列而不是普通队列。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>recoveryInterval</em></td><td align="center">连接恢复尝试之间的间隔，以毫秒为单位。</td><td align="center">5000</td></tr><tr><td align="center"><em>requeueRejected</em></td><td align="center">当消息消费失败重试机制被关闭或者<code>republishToDlq</code> 为 <code>false</code>时，重新入队失败后是否还应该重新入队，</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>republishDeliveryMode</em></td><td align="center">当<code>republishToDlq</code> 为 <code>false</code>时，指定重新发布消息的传递模式。</td><td align="center"><code>DeliveryMode.PERSISTENT</code></td></tr><tr><td align="center"><em>republishToDlq</em></td><td align="center">默认情况下，重试次数用尽后失败的消息将被拒绝。如果配置了死信队列 (DLQ)，RabbitMQ 会将失败的消息（未更改）路由到 DLQ。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>singleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true。称为<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>transacted</em></td><td align="center">是否使用channel-transacted，即是否在消息中使用事务</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>ttl</em></td><td align="center">声明时应用到队列的默认生存时间（以毫秒为单位）。</td><td align="center">无限制</td></tr><tr><td align="center"><em>txSize</em></td><td align="center">设置transaction-size的数量，当<code>acknowledgeMode</code>为AUTO时，容器会在处理txSize数目消息之后才开始应答,<code>containerType</code>是 <code>direct</code> 时不支持。</td><td align="center">1</td></tr></tbody></table><h4 id="RabbitMQ-生产者属性"><a href="#RabbitMQ-生产者属性" class="headerlink" title="RabbitMQ 生产者属性"></a>RabbitMQ 生产者属性</h4><p>以下属性仅适用于 Rabbit 生产者，并且必须以<code>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.producer.</code>作为前缀。</p><p>如果需要将同一组属性应用于大多数绑定，为避免重复，Spring Cloud Stream 支持为所有通道设置值，格式为<code>spring.cloud.stream.rabbit.default.&lt;property&gt;=&lt;value&gt;</code>.</p><p>另外，请记住，<strong>绑定特定属性将在默认情况下覆盖其全局配置属性。</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><em>autoBindDlq</em></td><td align="center">是否自动声明 DLQ（死信队列） 并将其绑定到 binder DLX（死信交换机）。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>batchingEnabled</em></td><td align="center">是否启用生产者的消息批处理。消息根据以下属性（在此列表的下三个条目中描述）被批处理为一条消息：<code>batchSize</code> <code>batchBufferLimit</code>、 和<code>batchTimeout</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>batchSize</em></td><td align="center">启用批处理时要缓冲的消息数。</td><td align="center">100</td></tr><tr><td align="center"><em>batchBufferLimit</em></td><td align="center">启用批处理时的最大缓冲区大小。</td><td align="center">10000</td></tr><tr><td align="center"><em>batchTimeout</em></td><td align="center">启用批处理时的批处理超时。</td><td align="center">5000</td></tr><tr><td align="center"><em>bindingRoutingKey</em></td><td align="center">将队列绑定到交换器的路由键（如果<code>bindQueue</code>是<code>true</code>）。可以是多个键 - 请参阅<code>bindingRoutingKeyDelimiter</code>。对于分区目标，<code>-&lt;instanceIndex&gt;</code>附加到每个键。</td><td align="center"><code>#</code></td></tr><tr><td align="center"><em>bindingRoutingKeyDelimiter</em></td><td align="center">当该属性不为空时，<code>bindingRoutingKey</code> 被认为是由该值分隔的键列表；通常使用逗号。</td><td align="center"><code>null</code></td></tr><tr><td align="center"><em>bindQueue</em></td><td align="center">是否声明队列并将其绑定到目标交换机。如果您已经设置了自己的基础架构并且之前已经创建并绑定了队列，请将其设置为<code>false</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>compress</em></td><td align="center">发送时是否应压缩数据。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>confirmAckChannel</em></td><td align="center">当 <code>errorChannelEnabled</code>为true时，向其发送肯定的交付确认（又名发布者确认）的通道。如果通道不存在，则<code>DirectChannel</code>使用此名称注册。连接工厂必须配置为<code>publisher confirms</code>为 <code>true</code></td><td align="center"><code>nullChannel</code>（<code>acks</code> are discarded）</td></tr><tr><td align="center"><em>deadLetterQueueName</em></td><td align="center">DLQ（死信队列） 的名称仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>prefix+destination.dlq</code></td></tr><tr><td align="center"><em>deadLetterExchange</em></td><td align="center">分配给队列的 DLX。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>prefix+DLX</code></td></tr><tr><td align="center"><em>deadLetterExchangeType</em></td><td align="center">分配给队列的 DLX。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>direct</code></td></tr><tr><td align="center"><em>deadLetterRoutingKey</em></td><td align="center">分配给队列的死信路由键。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>destination</code></td></tr><tr><td align="center"><em>declareDlx</em></td><td align="center">是否为<code>destination</code>申报死信交换机。仅当<code>autoBindDlq</code>是<code>true</code>时才相关。如果您有预配置的 DLX，请设置为<code>false</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>declareExchange</em></td><td align="center">是否为<code>destination</code>申报交换机</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>delayExpression</em></td><td align="center">一个 SpEL 表达式，用于评估应用于消息（<code>x-delay</code>标头）的延迟。如果交换机不是延迟消息交换机，则无效。</td><td align="center">不设置x-delay标头</td></tr><tr><td align="center"><em>delayedExchange</em></td><td align="center">是否将交易所声明为<code>Delayed Message Exchange</code>. 需要broker上安装延迟消息交换插件。将参数 <code>exchageType</code> 设置为 <code>x-delayed-type</code>。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>deliveryMode</em></td><td align="center">消息持久化</td><td align="center"><code>PERSISTENT</code></td></tr><tr><td align="center"><em>dlqBindingArguments</em></td><td align="center">将 dlq 绑定到死信交换时应用的参数；用于<code>headers</code> <code>deadLetterExchangeType</code>指定要匹配的标头。例如<code>…dlqBindingArguments.x-match=any</code>，<code>…dlqBindingArguments.someHeader=someValue</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">空</td></tr><tr><td align="center"><em>dlqDeadLetterExchange</em></td><td align="center">声明 DLQ 时，分配给该队列的 DLX。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqDeadLetterRoutingKey</em></td><td align="center">声明 DLQ 时，分配给该队列的死信路由键。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqExpires</em></td><td align="center">删除超过该事件的未使用的死信队列（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">不过期</td></tr><tr><td align="center"><em>dlqLazy</em></td><td align="center">声明一个带有<code>x-queue-mode=lazy</code>参数的死信队列（即 <strong>惰性死信队列</strong>），考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqMaxLength</em></td><td align="center">死信队列中的最大消息数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>dlqMaxLengthBytes</em></td><td align="center">所有消息的死信队列中的最大总字节数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>dlqMaxPriority</em></td><td align="center">死信队列中消息的最大优先级 (0-255) 仅在<code>requiredGroups</code>提供时适用，然后仅适用于那些组。</td><td align="center">无</td></tr><tr><td align="center"><em>dlqQuorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，邮件将被丢弃或死信。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>dlqQuorum.enabled</em></td><td align="center">如果为 true，则创建仲裁死信队列而不是普通队列。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqQuorum.initialQuorumSize</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置初始仲裁队列大小。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>dlqSingleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true，即<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>dlqTtl</em></td><td align="center">声明时应用于死信队列的默认生存时间（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>exchangeAutoDelete</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机会被自动删除（即在最后一个队列被删除后删除）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeDurable</em></td><td align="center">如果<code>declareExchange</code>为<code>true</code>，则交换机是持久的（即，它在broker重启后仍然存在）。</td><td align="center"><code>true</code></td></tr><tr><td align="center"><em>exchangeType</em></td><td align="center">交换类型：<code>direct</code>, <code>fanout</code>,<code>headers</code>或<code>topic</code>用于非分区<code>destination</code>和<code>direct</code>, 标头或<code>topic</code>用于分区<code>destination</code>。</td><td align="center"><code>topic</code></td></tr><tr><td align="center"><em>expires</em></td><td align="center">队列未使用被删除的时间（存活时间）</td><td align="center">不过期</td></tr><tr><td align="center"><em>headerPatterns</em></td><td align="center">标头模式</td><td align="center"><code>[&#39;*&#39;]</code>所有标题</td></tr><tr><td align="center"><em>lazy</em></td><td align="center">是否用参数声明队列<code>x-queue-mode=lazy</code>，惰性队列，考虑使用策略而不是此设置，因为使用策略允许在不删除队列的情况下更改设置。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>maxLength</em></td><td align="center">普通队列中的最大消息数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>maxLengthBytes</em></td><td align="center">普通队列中所有消息的最大总字节数。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>maxPriority</em></td><td align="center">普通队列中消息的最大优先级 (0-255)。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无</td></tr><tr><td align="center"><em>prefix</em></td><td align="center">要添加到<code>destination</code>交换机所名称的前缀。</td><td align="center">””</td></tr><tr><td align="center"><em>queueBindingArguments</em></td><td align="center">将队列绑定到交换器时应用的参数；用于<code>headers</code> <code>exchangeType</code>指定要匹配的标头。例如<code>…queueBindingArguments.x-match=any</code>，<code>…queueBindingArguments.someHeader=someValue</code>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">空</td></tr><tr><td align="center"><em>queueNameGroupOnly</em></td><td align="center">如果为 <code>true</code>，则从名称等于 <code>group</code> 的队列中消费。否则从队列名称为 <code>destination.group</code> 队列中消费。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.deliveryLimit</em></td><td align="center">当<code>quorum.enabled=true</code>时，设置投递限制，超过该限制后，消息将被丢弃或死信。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值</td></tr><tr><td align="center"><em>quorum.enabled</em></td><td align="center">如果为 true，则创建仲裁队列而不是普通队列。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>quorum.initialQuorumSize</em></td><td align="center">仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无 - 将应用代理默认值。</td></tr><tr><td align="center"><em>routingKeyExpression</em></td><td align="center">一个 SpEL 表达式，用于确定发布消息时要使用的路由键。对于固定路由键，请使用<code>routingKey</code>.</td><td align="center"><code>destination</code>或<code>destination-&lt;partition&gt;</code>用于分区目标。</td></tr><tr><td align="center"><em>routingKey</em></td><td align="center">定义发布消息时使用的固定路由键的字符串。</td><td align="center">见<code>routingKeyExpression</code></td></tr><tr><td align="center"><em>singleActiveConsumer</em></td><td align="center">设置为 true 将<code>x-single-active-consumer</code>队列属性设置为 true。称为<a href="https://www.cloudamqp.com/blog/rabbitmq-3-8-feature-focus-single-active-consumer.html">单一活动消费者</a>。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>transacted</em></td><td align="center">是否使用channel-transacted，即是否在消息中使用事务</td><td align="center"><code>false</code></td></tr><tr><td align="center"><em>ttl</em></td><td align="center">声明时应用到队列的默认生存时间（以毫秒为单位）。仅在<code>requiredGroups</code>提供时适用，然后仅适用于这些组。</td><td align="center">无限制</td></tr><tr><td align="center"><em>useConfirmHeader</em></td><td align="center">详情查看 <a href="https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit#publisher-confirms">Publisher Confirms</a>. 与 <code>confirmAckChannel</code> 互斥。</td><td align="center"></td></tr></tbody></table><h3 id="Publisher-Confirms"><a href="#Publisher-Confirms" class="headerlink" title="Publisher Confirms"></a>Publisher Confirms</h3><p>有两种机制可以获取发布消息的结果；在每种情况下，连接工厂都必须<code>publisherConfirmType</code>设置<code>ConfirmType.CORRELATED</code>。 “<strong>legacy</strong>” 机制是将 <code>confirmAckChannel</code> 设置为以消息通道为名称的bean。您可以从中异步检索确认；否定确认被发送到错误通道（如果启用）</p><p>3.1 版中添加的<code>preferred</code>机制是使用<code>correlation data header</code>并通过其属性 <code>Future&lt;Confirm&gt;</code> 等待结果。这对于批处理监听器特别有用，因为您可以在等待结果之前发送多条消息。要使用此技术，请将<code>useConfirmHeader</code>属性设置为 <code>true</code>。以下简单应用程序是使用此技术的示例：     </p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.group</span>=<span class="string">someGroup</span></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.consumer.batch-mode</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.source</span>=<span class="string">output</span></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.output-out-0.producer.error-channel-enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.output-out-0.producer.useConfirmHeader</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.auto-bind-dlq</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.batch-size</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-confirm-type</span>=<span class="string">correlated</span></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge bridge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Consumer&lt;List&lt;String&gt;&gt; <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list -&gt; &#123;</span><br><span class="line">            List&lt;MyCorrelationData&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.forEach(str -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Received: &quot;</span> + str);</span><br><span class="line">                <span class="type">MyCorrelationData</span> <span class="variable">corr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCorrelationData</span>(UUID.randomUUID().toString(), str);</span><br><span class="line">                results.add(corr);</span><br><span class="line">                <span class="built_in">this</span>.bridge.send(<span class="string">&quot;output-out-0&quot;</span>, MessageBuilder.withPayload(str.toUpperCase())</span><br><span class="line">                        .setHeader(AmqpHeaders.PUBLISH_CONFIRM_CORRELATION, corr)</span><br><span class="line">                        .build());</span><br><span class="line">            &#125;);</span><br><span class="line">            results.forEach(correlation -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Confirm</span> <span class="variable">confirm</span> <span class="operator">=</span> correlation.getFuture().get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">                    log.info(confirm + <span class="string">&quot; for &quot;</span> + correlation.getPayload());</span><br><span class="line">                    <span class="keyword">if</span> (correlation.getReturnedMessage() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Message for &quot;</span> + correlation.getPayload() + <span class="string">&quot; was returned &quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// try to re-publish, send a DLQ, etc</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (ExecutionException | TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationRunner <span class="title function_">runner</span><span class="params">(BatchingRabbitTemplate template)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; IntStream.range(<span class="number">0</span>, <span class="number">10</span>).forEach(i -&gt;</span><br><span class="line">                template.convertAndSend(<span class="string">&quot;input-in-0&quot;</span>, <span class="string">&quot;input-in-0.rbgh303&quot;</span>, <span class="string">&quot;foo&quot;</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BatchingRabbitTemplate <span class="title function_">template</span><span class="params">(CachingConnectionFactory cf, TaskScheduler taskScheduler)</span> &#123;</span><br><span class="line">        <span class="type">BatchingStrategy</span> <span class="variable">batchingStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBatchingStrategy</span>(<span class="number">10</span>, <span class="number">1000000</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BatchingRabbitTemplate</span>(cf, batchingStrategy, taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCorrelationData</span> <span class="keyword">extends</span> <span class="title class_">CorrelationData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String payload;</span><br><span class="line"></span><br><span class="line">    MyCorrelationData(String id, String payload) &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">        <span class="built_in">this</span>.payload = payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>correlation data必须具有唯一<code>id</code>性，以便框架可以执行关联。</strong></p></blockquote><p>你不能同时设置<code>useConfirmHeader </code>和<code>confirmAckChannel</code>，但是当<code>useConfirmHeader</code>为true时仍然可以在错误通道中接收返回的消息，但是使用<code>correlation header</code>更方便。</p><h3 id="接收批量消息的配置"><a href="#接收批量消息的配置" class="headerlink" title="接收批量消息的配置"></a>接收批量消息的配置</h3><p>使用 <code>RabbitMQ</code> binder，有两种类型的批处理由消费者 bindings 处理：</p><h5 id="生产者创建的批处理消息"><a href="#生产者创建的批处理消息" class="headerlink" title="生产者创建的批处理消息"></a>生产者创建的批处理消息</h5><p>通常，如果生产者 bindings 具有<code>batch-enabled=true</code>，或者<code>BatchingRabbitTemplate</code>创建一条消息，批次元素将作为一个对监听器方法的单独调用返回。从<code>RabbitMQ3.0</code>开始，如果<code>spring.cloud.stream.bindings.&lt;name&gt;.consumer.batch-mode</code> 为 <code>true </code> 则任何此类批次消息都将以<code>List&lt;?&gt;</code>的形式传递到监听方法中，</p><h5 id="消费端批处理"><a href="#消费端批处理" class="headerlink" title="消费端批处理"></a>消费端批处理</h5><p>从3.1版本开始，将消费者可以配置为将多个入站消息组装成一个批处理，该批处理作为<code>List&lt;?&gt;</code>转换后的有效负载呈现给应用程序。以下简单的应用程序演示了如何使用此技术：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.group</span>=<span class="string">someGroup</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.bindings.input-in-0.consumer.batch-mode</span>=<span class="string">true #开启批处理模式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.enable-batching</span>=<span class="string">true #是否开启批处理</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.batch-size</span>=<span class="string">10  #批处理大小</span></span><br><span class="line"><span class="attr">spring.cloud.stream.rabbit.bindings.input-in-0.consumer.receive-timeout</span>=<span class="string">200  #接收超时时间</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Consumer&lt;List&lt;Thing&gt;&gt; <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Received &quot;</span> + list.size());</span><br><span class="line">            list.forEach(thing -&gt; &#123;</span><br><span class="line">                System.out.println(thing);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationRunner <span class="title function_">runner</span><span class="params">(RabbitTemplate template)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            template.convertAndSend(<span class="string">&quot;input-in-0.someGroup&quot;</span>, <span class="string">&quot;&#123;\&quot;field\&quot;:\&quot;value1\&quot;&#125;&quot;</span>);</span><br><span class="line">            template.convertAndSend(<span class="string">&quot;input-in-0.someGroup&quot;</span>, <span class="string">&quot;&#123;\&quot;field\&quot;:\&quot;value2\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Thing</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Thing</span><span class="params">(String field)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getField</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(String field)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.field = field;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Thing [field=&quot;</span> + <span class="built_in">this</span>.field + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Received 2</span><br><span class="line">Thing [field=value1]</span><br><span class="line">Thing [field=value2]</span><br></pre></td></tr></table></figure><p>批处理中的消息数量由<code>batch-size</code>和<code>receive-timeout</code>属性指定；如果<code>receive-timeout</code>过去没有新消息，则发送“短”批次。</p><blockquote><p>仅使用<code>container-type=simple</code>（默认）才支持消费者端批处理。</p></blockquote><p><strong>如果您想检查消费者端批处理消息的Headers，您应该使用<code>Message&lt;List&lt;?&gt;&gt;</code>；</strong></p><h3 id="使用现有队列-x2F-交换机"><a href="#使用现有队列-x2F-交换机" class="headerlink" title="使用现有队列&#x2F;交换机"></a>使用现有队列&#x2F;交换机</h3><p>默认情况下，绑定器将自动提供一个主题交换，其名称源自目标绑定属性的值<code>&lt;prefix&gt;&lt;destination&gt;</code>。如果未提供，则<code>destination</code>默认为 <code>bindings</code> 名称。绑定消费者时，将自动为队列提供名称<code>&lt;prefix&gt;&lt;destination&gt;.&lt;group&gt;</code>（如果<code>group</code>指定了绑定属性），或者为一个匿名名称（没有指定group的匿名队列会被自动删除）。对于非分区绑定或分区绑定，队列将使用“match-all”通配符路由键 ( <code>#</code> ) 绑定到交换机<code>&lt;destination&gt;-&lt;instanceIndex&gt;</code>。前缀默认为空字符串。如果使用 <code>requiredGroups</code> 指定了输出绑定，将为每个组提供一个队列&#x2F;绑定。</p><p>有许多特定于 rabbit 的绑定属性允许您修改此默认行为。</p><p>如果你想要使用现有交换&#x2F;队列，你可以完全禁用自动配置，假设交换机被命名<code>myExchange</code>并且队列被命名<code>myQueue</code>：</p><p><code>myQueue</code>：</p><ul><li><code>spring.cloud.stream.bindings.&lt;binding name&gt;.destination=myExhange</code></li><li><code>spring.cloud.stream.bindings.&lt;binding name&gt;.group=myQueue</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.bindQueue=false</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.declareExchange=false</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.queueNameGroupOnly=true</code></li></ul><p>如果您希望binder提供 队列&#x2F;交换机，但您想使用此处讨论的默认值以外的其他内容来执行此操作，请使用以下属性。</p><ul><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.bindingRoutingKey=myRoutingKey</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.consumer.exchangeType=&lt;type&gt;</code></li><li><code>spring.cloud.stream.rabbit.bindings.&lt;binding name&gt;.producer.routingKeyExpression=&#39;myRoutingKey&#39;</code></li></ul><p>当 <code>autoBindDlq</code>为 <code>true</code>时，在声明死信交换&#x2F;队列时使用了类似的属性。</p><hr><h3 id="使用-RabbitMQ-Binder-重试"><a href="#使用-RabbitMQ-Binder-重试" class="headerlink" title="使用 RabbitMQ Binder 重试"></a>使用 RabbitMQ Binder 重试</h3><p>在 Binder 中启用重试后，监听器容器线程将在配置的周期的任何期间内暂停。当需要对<strong>单一消费者</strong>进行严格排序时，这时非常重要的。但是，对于其他用例，它会阻止在该线程上处理其他消息。</p><p>使用 Binder 重试的另一种方法是在死信队列 (DLQ) 上设置死信，以及在 DLQ 本身上设置死信配置。</p><ul><li>设置<code>autoBindDlq</code>为<code>true</code>。binder 创建一个 DLQ。或者，您可以在 <code>deadLetterQueueName</code> 中指定名称。</li><li>设置<code>dlqTtl</code>为重试等待时间。</li><li>将 <code>dlqDeadLetterExchange</code> 设置为默认交换。来自 DLQ 的过期消息被路由到原来的队列，因为默认<code>deadLetterRoutingKey</code>是队列名称 ( <code>destination.group</code>)。设置为默认交换机是通过将属性设置为无值来实现的，如下例所示。</li></ul><p>要强制消息为死信，请抛出一个<code>AmqpRejectAndDontRequeueException</code>或设置<code>requeueRejected</code>为<code>false</code>（默认值）并抛出任何异常。</p><p>循环无止境地继续，这对于暂时性问题很好，但您可能希望在尝试多次后放弃。幸运的是，RabbitMQ 提供了<code>x-death</code>标头，可以让您确定发生了多少个周期。</p><p>要在放弃后确认消息，请抛出<code>ImmediateAcknowledgeAmqpException</code>。</p><h2 id="编码案例"><a href="#编码案例" class="headerlink" title="编码案例"></a>编码案例</h2><p><strong>注意</strong>：在进行编码时至少需要完成<code>RabbitMQ</code>和<code>Kafka</code>种任意一个消息中间件的环境搭建 </p><p>这里我们演示Spring Cloud Stream RabbitMQ Binder 的案例</p><h3 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h3><ol><li><p>首先创建父工程<code>Cloud-09-Stream</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="子工程-消息驱动之生产者"><a href="#子工程-消息驱动之生产者" class="headerlink" title="子工程-消息驱动之生产者"></a>子工程-消息驱动之生产者</h3><ol><li><p>创建工程<code>Cloud-09-stream-rabbitMQ-provider8801</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-stream-rabbitMQ-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring Cloud Stream RabbitMQ Binder--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-out-0:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>  <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意<code>bingdings</code> 集合中的key由 通道名-out&#x2F;in-数字组成</p></blockquote></li><li><p>主启动类</p></li><li><p>业务类</p><p>消息发送接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.springcloud.serivce;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-10-19:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge streamBridge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> UUID.randomUUID().toString(); <span class="comment">//发送的消息</span></span><br><span class="line">        streamBridge.send(<span class="string">&quot;output&quot;</span>, serial);</span><br><span class="line">        log.debug(<span class="string">&quot;发送消息:&quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用<code>@Resource</code>注入<code>StreamBride</code>，<code>StreamBridge</code>的send方法第一个参数是binding的key名字，第二个参数是想要发送的消息</strong></p></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.devildyw.springcloud.serivce.IMessageProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="子工程-消息驱动之消费者"><a href="#子工程-消息驱动之消费者" class="headerlink" title="子工程-消息驱动之消费者"></a>子工程-消息驱动之消费者</h3><ol><li><p>创建工程<code>Cloud-09-stream-rabbitMQ-consumer8802</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-Stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw.Stream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-09-stream-rabbitMQ-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring Cloud Stream RabbitMQ Binder--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8803</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-in-0:</span> <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用Exchange名称定义</span></span><br><span class="line">          <span class="attr">contentType:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置为“text/plain”</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8803.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamConsumerService</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Consumer&lt;String&gt; <span class="title function_">myChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String message)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;message:&#123;&#125;&quot;</span>,message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述代码的方法名（即Consumer的bean实例名）需要是<code>yml</code>配置中的通道名，应用程序启动后会自动接收生产者发送的消息</strong></p></li></ol><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>启动eureka注册中心、生产者、消费者（8802）</p><p><code>RabbitMQ</code>图形控制界面新增了一个交换机，这个交换机也就是我们所设置的bindings 的 <code>myChannel</code> 的 <code>destination</code> ，在 <code>RabbitMQ</code> 中该 <code>destination</code> 值就是交换机</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102209425.png" alt="image-20220810220917325"></p><p>进入交换机查看详细信息，可以发现该交换机绑定了一个个队列，这个队列也就是我们消费者所监听的队列。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102203457.png" alt="image-20220810220306385"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102203631.png" alt="image-20220810220355584"></p><h2 id="消息重复消费问题"><a href="#消息重复消费问题" class="headerlink" title="消息重复消费问题"></a>消息重复消费问题</h2><p>将8802拷贝改名成为新的消费者8803，配置与业务类与8802完全相同</p><p>启动eureka注册中心、生产者、消费者（8802、8803）</p><p>可以看到交换机现在绑定了两个队列了，这两个队列就是我们消费者所监听的队列</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214091.png" alt="image-20220810221338704"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214171.png" alt="image-20220810220355584"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102214095.png" alt="image-20220810221438351"></p><p>我们会发现同一条消息被两个消费者同时消费了，这样的情况在某些场景下是毁灭级别的。</p><p>比如在如下场景下，订单系统我们坐集群部署，都会从RabbitMQ中获取订单信息，那<strong>如果一个订单同时被两个服务获取到</strong>，那么就会造成数据错误，我们得避免这种情况。</p><p>这时<strong>我们就可以使用Stream中的消息分组来解决</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102218046.png" alt="image-20220810221759981"></p><p>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同组是可以全面消费的</strong>（重复消费）。</p><p><strong>同一组内会发生竞争关系，只有其中一个可以消费</strong>。</p><h3 id="导致重复消费的原因"><a href="#导致重复消费的原因" class="headerlink" title="导致重复消费的原因"></a>导致重复消费的原因</h3><p>默认分组group是不同的，组流水号不一样，被认为不同组，（不同组）可以消费同一条消息（广播）。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。<strong>不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费</strong>。</p><blockquote><p>Stream概念中的group，对应在<code>RabbitMQ</code>中就是队列的含义，交换机默认创建是Topic类型，而消费者创建的队列默认<code>routingKey</code>为 #，在 <code>RabbitMQ</code> 中我们学过 # 可以匹配一个或多个词，所以基本上交换机会将消息转发到所有于其相连的队列上。</p></blockquote><blockquote><p>Stream在我们没有配置group时，为我们创建一个随机的唯一的group名称这样的消费者我们称为匿名消费者，它所监听的队列也会在消费者关闭时被删除。如果想要将多个消费者分为一组，就需要手动指定了。</p></blockquote><p>为每个消费者设置<code>group</code>，同一组的消费者group名称要相同。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">......</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="string">......</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">myChannel-in-0:</span> <span class="comment">#这个名字是一个通道的名字</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用Exchange名称定义</span></span><br><span class="line">          <span class="attr">contentType:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置为“text/plain”</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">receiveA</span> <span class="comment">#设置组名为receiveA</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure><p>配置完成后，重新启动消费者</p><p><code>RabbitMQ</code>图形界面可以发现交换机只绑定了一个队列，并且该队列的后缀就是我们所设置的组名。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102234521.png" alt="image-20220810223431446"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102301336.png" alt="image-20220810230132249"></p><p>调用接口<code>get: http://localhost:8801/sendMessage</code>发送消息</p><p>消费者控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208102232791.png" alt="image-20220810223258747"></p><p>这次只有8803接收到了，尝试多次后只有一个消费者能够接收。说明重复消费问题解决。</p><blockquote><p>我们也可以主动配置交换机和队列，交换机的名称就是<code>destination</code>的值，而队列的名称则是交换机名称.group即<code>destinnation.group</code> 可以自己手动配置队列和交换机的属性，前提是你了解不同的消息中间件</p></blockquote><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>因为 <code>RabbitMQ</code> 的消息都是默认持久化的，生产者发送的消息会率先到达交换机，交换机转发到队列中，此时的消息会存放在 <code>RabbitMQ</code> 虽在主机的内存中，持久化的目的就是防止消息的丢失。</p><p>但是消息持久化的前提是队列也要持久化，否则队列都没了还谈什么消息呢？</p><p>将 exchange、queue 和 message 都进行持久化操作后，也不能保证消息一定不会丢失，消息存入<code>RabbitMQ</code> 之后，还需要一段时间才能存入硬盘。<code>RabbitMQ</code> 并不会为每条消息都进行同步存盘，如果在这段时间，服务器宕机或者重启，消息还没来得及保存到磁盘当中，就会丢失。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Stream&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Stream&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Stream&quot;&gt;&lt;/a&gt;Spring Cloud Stream&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="消息驱动" scheme="https://devildyw.github.io/categories/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Eureka</title>
    <link href="https://devildyw.github.io/2022/07/29/Spring%20Cloud-Eureka/"/>
    <id>https://devildyw.github.io/2022/07/29/Spring%20Cloud-Eureka/</id>
    <published>2022-07-29T15:48:18.000Z</published>
    <updated>2022-07-29T15:49:21.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><blockquote><p>注：Eureka中各个节点都是平等的，没有<code>ZK</code>中角色的概念，即使N-1个节点挂掉也不会影响其他节点的正常运行。</p></blockquote><p>虽然Eureka已经停止维护了，但是并不代表我们不去学习它，理解它的思想也是后来为学习其他注册中心打下基础。</p><blockquote><p>以下所有Demo都是基于上述入门案例改编。</p></blockquote><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p><code>Spring Cloud</code>封装<code>NetFlix</code>公司开发的<code>Eureka</code>模块来实现服务治理</p><p>那么什么事服务治理呢？</p><p>当服务较少的时候，可能我们根本不需要什么所谓的服务治理，会觉得这不就是中间商赚差价吗，为什么我能直接调用还要再中间加个服务治理呢？其实啊在传统的<code>RPC</code>框架中当服务多到一定程度时，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，熔断等，实现服务的注册与发现。</p><h3 id="服务注册-x2F-发现"><a href="#服务注册-x2F-发现" class="headerlink" title="服务注册&#x2F;发现"></a>服务注册&#x2F;发现</h3><p><code>Eureka</code>采用了<code>C/S</code>的设计架构，<code>Eureka Server</code>作为服务注册功能的服务器，他是服务注册中心。而系统中的其他微服务，使用<code>Eureka</code>的客户端连接到<code>Eureka Server</code>并维持心跳连接。这样系统的维护人员就可以通过<code>Eureka Server</code>来监控系统中各个微服务是否可以正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己的信息比如服务地址通讯地址等以别名的方式注册到注册中心上。另一方（消费者服务的提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址（<code>ip</code>地址），然后在实现本地<code>RPC</code>调用<code>RPC</code>远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与每个服务之间的依赖关系（服务治理概念）。在任何<code>RPC</code>远程调用框架中，都会有一个注册中心存放服务地址相关信息（接口地址）。</p><p>注册中心会维护所有注册到注册中心上的健康的服务的信息，当有消费者消费对应服务时，注册中心会返回服务的<code>ip</code>地址等信息，消费者在通过这些信息去远程调用服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/3956561052b9dc3909f16f1ff26d01bb.png" alt="img"></p><h3 id="Eureka组件"><a href="#Eureka组件" class="headerlink" title="Eureka组件"></a>Eureka组件</h3><p>前面我们了解到，<code>Eureka</code>是<code>C/S</code>结构的，它有两个组件    <strong><code>Eureka Server</code> 和 <code>EurekaClient</code></strong></p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p>提供服务注册服务，就是我们所说的<code>Eureka</code>的服务端，提供服务治理的相关功能。</p><p>各个微服务节点通过配置启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表中将会存储所有可用的服务节点的信息，服务节点的信息可用在界面中直观的看到。</p><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>通过注册中心进行访问，<code>Eureka</code>的客户端，提供了与<code>Eureka</code>服务端交互的功能。</p><p>他是一个Java客户端，用于简化与<code>Eureka Server</code>的交互，客户端同时也具备一个内置的，使用轮询（<code>round-robin</code>）负载均衡算法的负载均衡器（用于同一个服务下多个提供者的情况），在应用启动后，将会</p><p>向<code>Eureka Server</code>发送心跳（默认周期30秒）。如果<code>Eureka Server</code>在多个心跳周期内没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除（默认90秒）。</p><h3 id="Eureka常用配置"><a href="#Eureka常用配置" class="headerlink" title="Eureka常用配置"></a>Eureka常用配置</h3><h4 id="Eureka-Server-1"><a href="#Eureka-Server-1" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p><code>Eureka Server</code>配置参数的格式：<code>eureka.server.xxx</code>。</p><ul><li><code>enable-self-preservation</code>：<ul><li>表示注册中心是否开启服务的自我保护能力（后面会介绍）。</li></ul></li><li><code>renewal-percent-threshold</code>：<ul><li>表示 Eureka Server 开启自我保护的系数，默认：0.85。</li></ul></li><li><code>eviction-interval-timer-in-ms</code>：<ul><li>表示 <code>Eureka Server</code> 清理无效节点的频率，默认 60000 毫秒（60 秒）。</li></ul></li></ul><h4 id="Eureka-Instance"><a href="#Eureka-Instance" class="headerlink" title="Eureka Instance"></a>Eureka Instance</h4><p><code>Eureka Instance</code> 的配置参数格式：<code>eureka.instance.xxx</code>。</p><ul><li><code>instance-id</code>：<ul><li>表示实例在注册中心注册的唯一ID。</li></ul></li><li><code>prefer-ip-address</code>：<ul><li><code>true</code>：实例以 <code>IP</code> 的形式注册</li><li><code>false</code>：实例以机器 <code>HOSTNAME</code> 形式注册</li></ul></li><li><code>lease-expiration-duration-in-seconds</code>：<ul><li>表示 <code>Eureka Server</code> 在接收到上一个心跳之后等待下一个心跳的秒数（默认 90 秒），若不能在指定时间内收到心跳，则移除此实例，并禁止此实例的流量。</li><li>此值设置太长，即使实例不存在，流量也能路由到该实例</li><li>此值设置太小，由于网络故障，实例会被取消流量</li><li><strong>需要设置为至少高于 <code>lease-renewal-interval-in-seconds</code> 的值，不然会被误移除了。</strong></li></ul></li><li><code>lease-renewal-interval-in-seconds</code>：<ul><li>表示 <code>Eureka Client</code> 向 <code>Eureka Server</code> 发送心跳的频率（默认 30 秒），如果在 <code>lease-expiration-duration-in-seconds</code> 指定的时间内未收到心跳，则移除该实例。</li></ul></li></ul><h4 id="Eureka-Client-1"><a href="#Eureka-Client-1" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>Eureka Client 的配置参数格式：<code>eureka.client.xxx</code>。</p><ul><li><code>register-with-eureka</code>：<ul><li>表示此实例是否注册到 Eureka Server 以供其他实例发现。在某些情况下，如果你不想自己的实例被发现，而只想发现其他实例，配置为 false 即可。</li></ul></li><li><code>fetch-registry</code>：<ul><li>表示客户端是否从 Eureka Server 获取实例注册信息。</li></ul></li><li><code>serviceUrl.defaultZone</code>：<ul><li>表示客户端需要注册的 Eureka Server 的地址。</li></ul></li></ul><h4 id="用到的其他参数"><a href="#用到的其他参数" class="headerlink" title="用到的其他参数"></a>用到的其他参数</h4><ul><li><code>spring.application.name</code>：<ul><li>表示应用名称，在注册中心中显示的服务注册名称。</li></ul></li><li><code>spring.cloud.client.ip-address</code>：<ul><li>获取客户端的 <code>IP</code> 地址。</li></ul></li></ul><p><strong>上面讲的 Eureka 某些参数都可以可以在 Eureka 控制台上面找到</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714140318475.png" alt="image-20220714140318475"></p><p>Eureka 控制台上面的其他参数都可以定制。</p><blockquote><p>Eureka详细配置：<a href="https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/">Eureka详细配置</a></p></blockquote><h3 id="搭建一个Eureka-服务端"><a href="#搭建一个Eureka-服务端" class="headerlink" title="搭建一个Eureka 服务端"></a>搭建一个Eureka 服务端</h3><p>根据前文我们可以知道要搭建一个<code>Eureka</code>服务器，需要用到<code>Eureka Server</code></p><p>父工程的话<code>pom.xml</code>与上述入门案例一致。</p><p>创建Eureka服务端工程<code>Cloud-eureka-server7001</code></p><p>项目结构：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141129475.png" alt="image-20220714141129475"></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-02-Eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表示该模块为Eureka的注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaMain7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在启动类的头上加上<code>@EnableEurekaServer</code>注解，表示该模块为Eureka服务端。 </p></li><li><p>启动</p><p>启动后访问yml中的<code>http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/</code>地址看到如下界面表示成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141438302.png" alt="image-20220714141438302"></p><p><strong>上述便是单机版Eureka注册中心的搭建了</strong></p><h3 id="支付微服务8001注册到Eureka-Server中"><a href="#支付微服务8001注册到Eureka-Server中" class="headerlink" title="支付微服务8001注册到Eureka Server中"></a>支付微服务8001注册到Eureka Server中</h3><p>将入门案例中的<code>Cloud-provide-payment-8001</code>复制粘贴到Eureka工程中并改名为<code>Cloud-eureka-provider-payment8001</code>业务部分不用更改 主要是<code>pom.xml</code>和<code>application.yml</code>的修改</p><ol><li><p>改<code>pom.xml</code>新增依赖<code>spring-cloud-starter-netflix-eureka-client</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>改<code>application.yml</code> 新增Eureka配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#要注册到的注册中心的地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#指定实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示ip</span></span><br></pre></td></tr></table></figure></li><li><p>启动类修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是将服务注册到注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714154834760.png" alt="image-20220714154834760"></p><p>可以通过<code>Eureka DashBoard</code>发现服务已经注册进了注册中心，实例的名称也是我们yml中指定的，服务名则是我们<code>spring.application.name</code>。</p></li></ol></li></ol><h3 id="订单微服务80入驻进Eureka-Server中"><a href="#订单微服务80入驻进Eureka-Server中" class="headerlink" title="订单微服务80入驻进Eureka Server中"></a>订单微服务80入驻进Eureka Server中</h3><p>将入门案例中的<code>Cloud-consumer-order80</code>复制到Eureka工程中，改名为<code>Cloud-eureka-consumer-order80</code>我们要做的也是修改<code>pom.xml</code>和<code>application.yml</code></p><ol><li><p>修改<code>pom.xml</code> 添加<code>spring-cloud-starter-netflix-eureka-client</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code> 添加Eureka相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#指定实例id 不指定注册中心中显示的就是ip的格式</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是消费注册中心中的服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改业务类<code>Controller</code></p><p>注册到注册中心上的服务，需要使用服务提供者注册到注册中心的服务名称代替<code>ip地址:端口</code>的方式调用。单个提供者时，使用真实<code>ip地址:端口</code>与使用服务名称是没有区别的，但是当服务提供者是以集群的方式提供服务，那么这是想要使用负载均衡功能时，就必须使用这种方式了。均衡算法会返回一个正确<code>ip:端口</code>。</p><p><code>OrderController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里配置成服务名称其实也是一种规范，从一开始我们就提到了 <strong>约定 &gt; 配置 &gt; 编码</strong></p></li><li><p>启动测试</p><p><code>GET : http://localhost:80/consumer/payment/get/1547118279208656900</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h3><p>​    <img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/14570c4b7c4dd8653be6211da2675e45.png" alt="img"></p><p><strong>Eureka 集群，实际上就是启动多个 Eureka 实例，多个 Eureka 实例之间，互相注册，互相同步数据，共同组成一个 Eureka 集群。</strong></p><p>得到8个字<strong>互相注册，相互守望</strong>。</p><p>问题:微服务<code>RPC</code>远程服务调用最核心的是什么？<br>高可用，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。</p><p>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。</p><h3 id="搭建Eureka集群"><a href="#搭建Eureka集群" class="headerlink" title="搭建Eureka集群"></a>搭建Eureka集群</h3><p>本地机为了演示Eureka集群 需要修改电脑的hosts文件</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714161642589.png" alt="image-20220714161642589"></p><p>原理我们已经直到，就是需要再搭建一个Eureka注册中心<code>Cloud-eureka-server7002</code>，让我们原来搭建的Eureka注册中心和现在这个相互注册，使其相互同步数据。 </p><p>搭建步骤这里不再演示只说这里需要更改的地方</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7002.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><hr><p><code>Cloud-eureka-server7002</code></p><p> <code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7001.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>启动后观看Eureka Dashboard</p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162757151.png" alt="image-20220714162757151"></p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162843103.png" alt="image-20220714162843103"></p><p>可用发现两个注册中心的<code>DS Replicas</code>出现了对方的注册的实例名称，说明集群搭建成功。</p><p>这里我们启动<code>Cloud-eureka-provider-payment8001</code>使其<code>eureka7001.com</code>对应的注册中心上。</p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163426520.png" alt="image-20220714163426520"></p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163501059.png" alt="image-20220714163501059"></p><p>可用发现<code>http://eureka7002.com:7002/</code>上同样出现了我们注册的服务。这就是集群，集群的各个节点之间相互同步信息，防止单一节点宕机的问题。</p><hr><h3 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h3><p>在实际开发中，不仅需要防止注册中心的单一节点宕机问题，服务提供者同样需要，不仅仅是为了防止宕机，同样也是为了提升服务的性能，服务提供者的集群不需要相互同步之间的信息，而是需要避免单一节点承受不住大量请求，导致反应慢或是请求失败等情况，同一服务新增节点集群 搭配上负载均衡，可以提升性能提高用户体验。</p><p>与Eureka搭建集群相似，没有什么特殊的改变，就是简单创建一个与之前服务相同工程<code>Cloud-eureka-provider-payment8002</code></p><p>修改部分<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"> <span class="string">...</span> <span class="comment">#其他部分相同这里省略</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span> <span class="comment">#实例名称 如果不配置 到时Eureka注册中心中显示的就是IP的格式</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-provider-payment8002</code>和<code>Cloud-eureka-provider-payment8001</code>以及Eureka注册中心。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714164450602.png" alt="image-20220714164450602"></p><p>可以发现同一个服务名称下面出现了两个服务实例，这也正是我们所配置的名称。</p><p>测试</p><p><strong>注意： 当服务以集群出现时如果采用了用服务名称代替<code>ip</code>+端口的格式的话 需要在<code>RestTemplate</code>配置类下配置<code>@LoadBalanced</code> 实现负载均衡 否则会出现访问报错</strong></p><p><code>RestTemplateConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//开启RestTemplate的负载均衡功能</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且为了方便查看负载均衡，我们在Controller的返回结果中加上了他们各自的端口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8002</span>; <span class="comment">//Cloud-eureka-provider-payment8002</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8001</span>; <span class="comment">//Cloud-eureka-provider-payment8001</span></span><br></pre></td></tr></table></figure><p>访问接口 <code>POST : http://localhost:80/consumer/payment/create</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="DiscoveryClient"><a href="#DiscoveryClient" class="headerlink" title="DiscoveryClient"></a><code>DiscoveryClient</code></h3><p>对于注册进eureka里面的微服务，可以通过<code>DiscoveryClient</code>来获得该服务的信息</p><p><code>DiscoveryClient</code>提供了获取注册中心中注册服务信息的<code>API</code></p><p><strong>使用</strong></p><p>修改<code>Cloud-eureka-provider-payment8002</code>的<code>Controller</code> 新增</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增接口 查看注册中心服务信息</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取注册中心里面的所有暴露的服务</span></span><br><span class="line">       List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">       <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;*****element:&#123;&#125;&quot;</span>,service);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//获取指定服务实例名称对应的实例信息</span></span><br><span class="line">       List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">           log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getInstanceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getUri()+<span class="string">&quot;\t&quot;</span>+instance.getPort());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动类新增注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//添加该注解 使其该微服务支持Discovery</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试</p><p><code>GET : http://localhost:8002/payment/discovery</code> </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;services&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;cloud-payment-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cloud-order-service&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170357151.png" alt="image-20220714170357151"></p><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><p><strong>概述</strong></p><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区（由于网络波动等原因引起）场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p><strong>官方对于自我保护机制的定义</strong></p><blockquote><p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p></blockquote><p><strong>自我保护机制的工作机制</strong></p><p>自我保护机制的工作机制是：<strong>如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</strong>，此时会出现以下几种情况：</p><ol><li>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li><li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可用。</li><li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</li></ol><p>因此<code>Eureka Server</code>可以很好的应对因网络故障导致部分节点失联的情况，而不会像<code>ZK</code>那样如果有一半不可用的情况会导致整个集群不可用而变成瘫痪。</p><p><strong>为什么会产生Eureka自我保护机制?</strong></p><p>该功能防止节点因为网络波动导致心跳检测信息不能及时发送到注册中心，但节点本身没有问题的情况。如果关闭了自我保护机制，一旦检测到某个节点没有在指定时间内发送心跳包，就会将该节点剔除。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170747792.png" alt="image-20220714170747792"></p><p>从这个机制可以看出Eureka满足了CAP理论中的AP分支。即达到了100%可用性和100%分区容错性。</p><p><strong>什么是自我保护机制?</strong></p><p>默认情况下，如果<code>EurekaServer</code>在一定时间内没有接收到某个微服务实例的心跳，<code>EurekaServer</code>将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与<code>EurekaServer</code>之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。<code>Eureka</code>通过“自我保护模式”来解决这个问题——当<code>EurekaServer</code>节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。</p><p>自我保护机制∶默认情况下<code>EurekaClient</code>定时向<code>EurekaServer</code>端发送心跳包，如果Eureka在server端在一定时间内(默认90秒)没有收到<code>EurekaClient</code>发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，这时候<code>Eurekaserver</code>会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是<code>EurekaClient</code>为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。也正如官方所说的使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p><hr><h3 id="自我保护开关"><a href="#自我保护开关" class="headerlink" title="自我保护开关"></a>自我保护开关</h3><p>Eureka自我保护机制，通过配置 <code>eureka.server.enable-self-preservation</code> 来<code>true</code>打开&#x2F;<code>false</code>禁用自我保护机制，默认打开状态，建议生产环境打开此配置。</p><p>如果要实现服务失效自动移除，只需要修改以下配置</p><h5 id="1、-注册中心关闭自我保护机制，修改检查失效服务的时间。"><a href="#1、-注册中心关闭自我保护机制，修改检查失效服务的时间。" class="headerlink" title="1、 注册中心关闭自我保护机制，修改检查失效服务的时间。"></a>1、 注册中心关闭自我保护机制，修改检查失效服务的时间。</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">     <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">     <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h5 id="2、-微服务修改减短服务心跳的时间。"><a href="#2、-微服务修改减短服务心跳的时间。" class="headerlink" title="2、 微服务修改减短服务心跳的时间。"></a>2、 微服务修改减短服务心跳的时间。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认90秒</span></span><br><span class="line">lease-expiration-duration-in-seconds:  10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认30秒</span></span><br><span class="line">lease-renewal-interval-in-seconds:  3</span><br></pre></td></tr></table></figure><blockquote><p>以上配置建议在生产环境使用默认的时间配置。</p></blockquote><p>根据如上我们可以根据需求关闭注册中心的自我保护机制。</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#关闭节点自我保护机制 默认是开启 关闭后如果在有限的心跳检测时间范围内节点没有及时发送心跳包 就将该服务节点从服务列表中踢出</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置心跳检测时间</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p><code>Cloud-eureka-provider-payment8002</code></p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="string">....</span> <span class="comment"># 省略配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认为30秒)</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限,单位为秒(默认是90秒),超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line"><span class="string">...</span> <span class="comment">#省略配置</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-server7001</code> 和<code>Cloud-eureka-provider-payment8002</code></p><p>界面中会出现这么一句话</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714173719274.png" alt="image-20220714173719274"></p><p>表示自我保护机制以及关闭</p><p>此时关闭<code>Cloud-eureka-provider-payment8002</code>Eureka会立刻剔除该服务。</p><h3 id="Eureka停更说明"><a href="#Eureka停更说明" class="headerlink" title="Eureka停更说明"></a>Eureka停更说明</h3><p><a href="https://github.com/Netflix/eureka/wiki">Netflix-eureka</a></p><blockquote><p>Eureka 2.0 (Discontinued)</p><p>The existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.</p><p>Eureka 1.x is a core part of Netflix’s service discovery system and is still an active project.</p></blockquote><p>虽然Eureka停更了，但是<code>Spring Cloud</code>也有着许多其他功能更为丰富更为优秀的服务治理组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注：Eureka中各个节点都是平等的，没有&lt;code&gt;ZK&lt;/code&gt;中角色的概</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://devildyw.github.io/2022/07/29/RabbitMQ/"/>
    <id>https://devildyw.github.io/2022/07/29/RabbitMQ/</id>
    <published>2022-07-29T15:42:17.000Z</published>
    <updated>2022-08-10T15:23:27.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>**<code>MQ</code>**全称 <strong>Message Queue</strong>（消息队列）,是在消息传输过程中保存消息的容器。多用于分布式系统之间进行通信。</p><ul><li>分布式系统通信两种方式：直接远程调用 和 借助第三方完成间接通信</li><li>发送方称为生产者，接收方称为消费者</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311844564.png" alt="image-20220731133612671"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311844215.png" alt="image-20220731134217286"></p><h2 id="MQ的优势与劣势"><a href="#MQ的优势与劣势" class="headerlink" title="MQ的优势与劣势"></a><code>MQ</code>的优势与劣势</h2><p><strong>优势</strong></p><ul><li>应用解耦</li><li>异步提速</li><li>削峰填谷</li></ul><p><strong>劣势</strong></p><ul><li>系统可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ul><h3 id="MQ的优势"><a href="#MQ的优势" class="headerlink" title="MQ的优势"></a><code>MQ</code>的优势</h3><h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311907908.png" alt="image-20220731190749880"></p><p><strong>系统的耦合性越高，容错性就越低，可维护性就越低。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311859119.png" alt="image-20220731185909084"></p><p>有了<code>MQ</code>服务订单服务不需要集成库存服务、支付系统、物流系统或者其他系统，而是将系统全部解耦，拆分成不同的分布式微服务。微服务们通过监听<code>MQ</code>的信息，获取到符合的消息，然后消费。解耦也避免了某一个服务无法使用导致的整个系统崩溃问题。 同时多个服务耦合在一起也比解耦成单个服务的维护好做的多。</p><p><strong>使用<code>MQ</code>使得应用间解耦，提升容错性和可维护性。</strong></p><h4 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311910913.png" alt="image-20220731191009885"></p><p>如果不适用<code>MQ</code>服务就必须等待服务远程调用到返回结果在响应。但是使用了<code>MQ</code>我们只需要将消息放入<code>MQ</code>中即可返回响应，分布式的系统只需要监听<code>MQ</code>，消费其中的消息即可。</p><p>用户点击完下单按钮后，只需等待<code>25ms</code>就能得到下单响应 (20 + 5 &#x3D; <code>25ms</code>)。</p><p><strong>提升用户体验和系统吞吐量（单位时间内处理请求的数目）。</strong></p><h4 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h4><p><strong>未使用<code>MQ</code></strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311915309.png" alt="image-20220731191521273"></p><p><strong>使用<code>MQ</code></strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311916674.png" alt="image-20220731191602635"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311917433.png" alt="image-20220731191729405"></p><p>使用了 <code>MQ</code> 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 <code>MQ</code> 中，高峰</p><p>就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直</p><p>到消费完积压的消息，这就叫做“填谷”。</p><p><strong>使用<code>MQ</code>后，可以提高系统稳定性。</strong></p><h3 id="MQ的劣势"><a href="#MQ的劣势" class="headerlink" title="MQ的劣势"></a><code>MQ</code>的劣势</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311919717.png" alt="image-20220731191959687"></p><ul><li><p><strong>系统可用性降低</strong></p><p>系统引入的外部依赖越多，系统稳定性越差。一旦 <code>MQ</code> 宕机，就会对业务造成影响。如何保证<code>MQ</code>的高可用？</p></li><li><p><strong>系统复杂度提高</strong></p><p><code>MQ</code> 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 <code>MQ</code> 进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p></li><li><p><strong>一致性问题</strong></p><p>A 系统处理完业务，通过 <code>MQ</code> 给B、C、D三个系统发消息数据，如果 B 系统、C 系统处理成功，D 系统处理失败。如何保证消息数据处理的一致性？</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>既然 <code>MQ</code> 有优势也有劣势，那么使用 <code>MQ</code> 需要满足什么条件呢？</p><ol><li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li><li>容许短暂的不一致性。</li><li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入<code>MQ</code>，管理<code>MQ</code>这些成本。</li></ol><h2 id="常见的MQ产品"><a href="#常见的MQ产品" class="headerlink" title="常见的MQ产品"></a>常见的<code>MQ</code>产品</h2><p>目前业界有很多的 <code>MQ</code> 产品，例如 <code>RabbitMQ</code>、<code>RocketMQ</code>、<code>ActiveMQ</code>、<code>Kafka</code>、<code>ZeroMQ</code>、<code>MetaMq</code>等，也有直接使用 <code>Redis</code> 充当消息队列的案例，而这些消息队列产品，各有侧重，在实际选型时，需要结合自身需求及 <code>MQ</code> 产品特征，综合考虑。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311938809.png" alt="image-20220731193822769"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong><code>RabbitMQ</code> 是基于 <code>AMQP</code> 协议使用 Erlang 语言开发的一款消息队列产品。</strong></p><p><code>AMQP</code>，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。2006年，**<code>AMQP</code> 规范发布。类比HTTP。** </p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311940089.png" alt="image-20220731194023059"></p><p>2007年，Rabbit 技术公司基于 <code>AMQP</code> 标准开发的 <code>RabbitMQ</code> 1.0 发布。<code>RabbitMQ</code> 采用 Erlang 语言开发。Erlang 语言由 <code>Ericson</code> 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</p><p><code>RabbitMQ</code> 基础架构如下图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311942381.png" alt="image-20220731194224348"></p><h3 id="RabbitMQ-中的相关概念："><a href="#RabbitMQ-中的相关概念：" class="headerlink" title="RabbitMQ 中的相关概念："></a><strong><code>RabbitMQ</code> 中的相关概念：</strong></h3><ul><li><p><strong>Broker</strong>：接收和分发消息的应用，<code>RabbitMQ</code> Server就是Message Broker</p></li><li><p><strong>Virtual host</strong>：出于多租户和安全因素设计的，把<code>AMQP</code> 的基本组件划分到一个虚拟的分组中，类似于网络中的<code>namespace</code> 概念。当多个不同的用户使用同一个<code>RabbitMQ</code> server 提供的服务时，可以划分出多个<code>vhost</code>，每个用户在自己的<code>vhost</code> 创建exchange／queue 等</p></li><li><p>**<code>Connection</code>**：publisher／consumer 和broker 之间的TCP 连接</p></li><li><p><strong>Channel</strong>：如果每一次访问<code>RabbitMQ</code> 都建立一个Connection，在消息量大的时候建立TCP Connection的开销将是巨大的，效率也较低。Channel 是在connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的channel 进行通讯，<code>AMQP</code> method 包含了channel id 帮助客户端和message broker 识别channel，所以channel 之间是完全隔离的。Channel 作为轻量级的Connection 极大减少了操作系统建立TCP connection 的开销</p></li><li><p>**<code>Exchange</code>**：message 到达broker 的第一站，根据分发规则，匹配查询表中的routing key，分发消息到queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (<code>multicast</code>)</p></li><li><p><strong>Queue</strong>：消息最终被送到这里等待consumer 取走</p></li><li><p>**<code>Binding</code>**：exchange 和queue 之间的虚拟连接，binding 中可以包含routing key。Binding 信息被保存到exchange 中的查询表中，用于message 的分发依据</p></li></ul><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><strong><code>RabbitMQ</code>提供了6种工作模式</strong>：简单模式、<code>workqueues</code>、<code>Publish/Subscribe</code>发布与订阅模式、Routing 路由模式、Topics主题模式、<code>RPC</code>远程调用模式（远程调用，不太算<code>MQ</code>；暂不作介绍）。官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html"><code>RabbitMQ</code>模式介绍</a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207311957220.png" alt="image-20220731195754182"></p><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a><code>JMS</code></h3><ul><li><p><code>JMS</code> 即 Java 消息服务（<code>JavaMessage</code> Service）应用程序接口，是一个 Java 平台中关于面向消息中间件</p><p>的<code>API</code></p></li><li><p><strong><code>JMS</code> 是 <code>JavaEE</code> 规范中的一种，类比<code>JDBC</code></strong></p></li><li><p>很多消息中间件都实现了<code>JMS</code>规范，例如：<code>ActiveMQ</code>。<code>RabbitMQ</code> 官方没有提供 <code>JMS </code>的实现包，但是开源社区有。</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>使用Docker安装</strong></p><p><strong>不指定账号密码的启动方式</strong> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li><strong>-d</strong>：容器后台运行</li><li><strong>-p</strong>：映射端口 5672 <code>RabbitMQ</code>服务器端口号，15672是图形界面端口号</li><li><strong>–name</strong>：指定<code>RabbitMQ</code>名称</li></ul><blockquote><p>调用docker run后如果没有该镜像会自动拉取 不指定版本号默认拉取最新版<code>lastest</code></p></blockquote><p><strong>指定账户密码的启动方式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li><strong>-d</strong>： 后台运行</li><li><strong>-p</strong>： 隐射端口</li><li><strong>–name</strong>： 指定<code>rabbitMQ</code>名称</li><li>**<code>RABBITMQ_DEFAULT_USER</code>**： 指定用户账号</li><li>**<code>RABBITMQ_DEFAULT_PASS</code>**： 指定账号密码</li></ul><p>安装好后，访问<code>http://ip:15672</code>如果安装无误可以看到以下界面</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207312038049.png" alt="image-20220731203834936"></p><p>输入我们启动容器时设置的账号密码，如果没有指定默认<code>guest/guest</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202207312039266.png" alt="image-20220731203915173"></p><p><strong>得到以上界面表示你的安装无误。</strong></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><p>创建工程（生产者，消费者）</p><p><code>rabbitMQ-01-HellWord</code>、<code>rabbitMQ-01-comsumer</code>、<code>rabbitMQ-01-producer</code></p></li><li><p>分别添加依赖</p><ol><li><p><code>rabbitMQ-01-HellWord</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitMQ-01-consuemr<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rabbitMQ-01-producer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amqp.client.version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">amqp.client.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;amqp.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rabbitMQ-01-comsumer</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-consuemr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rabbitMQ-01-producer</code> <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-HelloWord<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-01-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rabbitmq java客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写生产者发送消息</p><p><code>Producer_HelloWorld</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.dvildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-12:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_HelloWord</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">                                 Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment">         参数：</span></span><br><span class="line"><span class="comment">         1. queue: 队列名称</span></span><br><span class="line"><span class="comment">         2. durable: 是否持久化，当mq重启之后,还在</span></span><br><span class="line"><span class="comment">         3. exclusive:</span></span><br><span class="line"><span class="comment">            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)</span></span><br><span class="line"><span class="comment">         4. autoDelete: 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">         5. argument: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫作“hello_world”的队列,则会创建该队列,如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6.发送消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        void basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">            throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称。简单模式下交换机会使用默认的 “”</span></span><br><span class="line"><span class="comment">        2. routingKey: 路由配置</span></span><br><span class="line"><span class="comment">        3. props: 配置信息</span></span><br><span class="line"><span class="comment">        4. body: 发送消息数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq~~~&quot;</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello_word&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者的编写大致可以分为7个步骤</strong></p><ol><li>创建连接工厂</li><li>设置连接参数</li><li>获取对应连接</li><li>创建Channel</li><li>声明队列Queue</li><li>发送消息</li><li>关闭连接</li></ol><hr><p>其中我们创建队列使用的方法是</p><p><code>Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments) throws IOException;</code></p><blockquote><p>参数：<br>            1. <code>queue</code>: 队列名称<br>            2. ·durable<code>: 是否持久化，当mq重启之后,还在</code><br>            3. exclusive<code>:</code><br>            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)<br>            4. <code>autoDelete</code>: 是否自动删除。当没有Consumer时，自动删除掉<br>            5. <code>argument</code>: 参数</p></blockquote><hr><p>发送消息则使用的是</p><p><code>void basicPublish(String exchange, String routingKey, boolean mandatory, BasicProperties props, byte[] body) throws IOException;</code></p><blockquote><p> 参数:<br>           1. <code>exchange</code>: 交换机名称。简单模式下交换机会使用默认的 “”<br>           2. <code>routingKey</code>: 路由配置<br>           3. <code>props</code>: 配置信息<br>           4. <code>body</code>: 发送消息数据</p></blockquote><p>启动查看图形控制界面 发现新增了队列<code>Hello_world</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011247536.png" alt="image-20220801124706439"></p></li><li><p>编写消费者接收消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-12:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer_HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 声明队列Queue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.DeclareOk queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">                                 Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment">         参数：</span></span><br><span class="line"><span class="comment">         1. queue: 队列名称</span></span><br><span class="line"><span class="comment">         2. durable: 是否持久化，当mq重启之后,还在</span></span><br><span class="line"><span class="comment">         3. exclusive:</span></span><br><span class="line"><span class="comment">            * 是否独占。只能能有一个消费者监听这个队列(仅限于此连接 如果该链接关闭队列也会删除)</span></span><br><span class="line"><span class="comment">         4. autoDelete: 是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">         5. argument: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫作“hello_world”的队列,则会创建该队列,如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String basicConsume(String queue, boolean autoAck, Consumer callback) throws IOException;</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. autoAck: 是否自动确认</span></span><br><span class="line"><span class="comment">        3. callback: 回调对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">            1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">            2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">            3. properties: 配置信息</span></span><br><span class="line"><span class="comment">            4. body: 数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;consumerTag: &quot;</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">&quot;Exchange: &quot;</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">&quot;RoutingKey: &quot;</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">&quot;Properties: &quot;</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者会去一直监听队列中的信息,不能够关闭资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者的编写大致可以分为6个步骤</strong></p><ol><li>创建连接工厂</li><li>设置连接参数</li><li>获取对应连接</li><li>创建Channel</li><li>声明队列Queue</li><li>接收消息</li></ol><p><strong>这里之所以还要声明队列是为了防止该队列还未声明导致消费者监听报错。</strong></p><p><strong>之所以不在最后关闭连接，是因为消费者需要一直监听队列中的信息。</strong></p><p><strong>接收消息这里使用的方法是</strong></p><p><code>String basicConsume(String queue, boolean autoAck, Consumer callback) throws IOException;</code></p><blockquote><p>参数:<br>           1. <code>queue</code>: 队列名称<br>           2. <code>autoAck</code>: 是否自动确认<br>           3. <code>callback</code>: 回调对象</p></blockquote><p>回调对象则是使用的<code>DefaultConsumer</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">           1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">           2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">           3. properties: 配置信息</span></span><br><span class="line"><span class="comment">           4. body: 数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;consumerTag: &quot;</span>+consumerTag);</span><br><span class="line">               System.out.println(<span class="string">&quot;Exchange: &quot;</span>+envelope.getExchange());</span><br><span class="line">               System.out.println(<span class="string">&quot;RoutingKey: &quot;</span>+envelope.getRoutingKey());</span><br><span class="line">               System.out.println(<span class="string">&quot;Properties: &quot;</span>+properties);</span><br><span class="line">               System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><p>实现其中的回调方法<code>public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException;</code></p><blockquote><p>回调方法,当收到消息后,会自动执行该方法<br>               1. <code>consumerTag</code>: 标识<br>               2. <code>envelope</code>: 获取一些信息,交换机,路由key<br>               3. <code>properties</code>: 配置信息<br>               4. <code>body</code>: 数据</p></blockquote></li></ol><hr><p>上述的入门案例中其实使用的是如下的简单模模式：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011216044.png" alt="image-20220801121453365"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接收者，会一直等待消息的到来</li><li>queue：消息队列，途中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li></ul><h2 id="RabbitMQ工作模式"><a href="#RabbitMQ工作模式" class="headerlink" title="RabbitMQ工作模式"></a><code>RabbitMQ</code>工作模式</h2><p>在<strong>快速开始</strong>中我们已经演示第一种工作模式<code>HelloWorld</code>模式了，下面我们会介绍其他几种模式。</p><h3 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h3><p><strong>模式说明</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011313383.png" alt="image-20220801131354336"></p><ul><li>Work Queues：与入门程序的简单模式相比，<strong>多了一个或一些消费者，多个消费端共同消费同一个队列中的消息（竞争关系）</strong>。</li><li>应用场景：对于任务过重或任务较多情况使用工作队列可以<strong>提高任务处理的速率</strong>。</li></ul><p><strong>Work Queues</strong> 与入门程序的简单模式的代码几乎是一样的。可以完全复制，并多复制一个消费者进行多</p><p>个消费者同时对消费消息的测试。</p><p><strong>为了区分将队列名称修改为work_queues</strong></p><p>为了方便测试我们对生产者做了些许修改，使其可以一次发送大量的消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> i+<span class="string">&quot; hello rabbitmq~~~&quot;</span>; <span class="comment">//数字编号 1~10</span></span><br><span class="line">    <span class="comment">//发送</span></span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello_word&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于消费者我们对其进行了多个复制，来演示他们竞争的关系。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011413495.png" alt="image-20220801141331431"></p><p>方便展示注释掉了回调方法中其他无关参数的打印。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            回调方法,当收到消息后,会自动执行该方法</span></span><br><span class="line"><span class="comment">            1. consumerTag: 标识</span></span><br><span class="line"><span class="comment">            2. envelope: 获取一些信息,交换机,路由key</span></span><br><span class="line"><span class="comment">            3. properties: 配置信息</span></span><br><span class="line"><span class="comment">            4. body: 数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;consumerTag: &quot;+consumerTag);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Exchange: &quot;+envelope.getExchange());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;RoutingKey: &quot;+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;Properties: &quot;+properties);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;body: &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello_world&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动测试(先启动两个消费者监听队列)</p><p><code>consumer1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011419621.png" alt="image-20220801141945564"></p><p><code>consumer2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011420513.png" alt="image-20220801142010458"></p><p><strong>小结</strong></p><ol><li>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的消费关系是<strong>竞争</strong>的关系。</li><li><strong>Work Queues</strong> 对于任务过重或人物较多情况使用工作队列可以提高人物处理的速度。例如：短信服务部署多个，只需要有一个节点发送成功即可。</li></ol><h3 id="Pub-x2F-Sub-订阅模式"><a href="#Pub-x2F-Sub-订阅模式" class="headerlink" title="Pub&#x2F;Sub 订阅模式"></a>Pub&#x2F;Sub 订阅模式</h3><p><strong>模式说明</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011429714.png" alt="image-20220801142920660"></p><p>在订阅模型中，多了一个 Exchange 角色，而且过程略有变化</p><ul><li><p>P：生产者，也就是要发送消息的程序，但不再发送到队列中，而是发给X（交换机）</p></li><li><p>C：消费者，消息的接收者，会一直等待消息到来</p></li><li><p>Queue：消息队列，接收消息，缓存消息</p></li><li><p>Exchange：交换机（X）。一方面接受生产者放的消息，另一方面，直到如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。Exchange有常见以下三种类型：</p><ul><li>Fanout：广播，将信息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合所有指定routing key的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式）的队列</li></ul><p>Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p></li></ul><p><strong>代码实现</strong></p><p><strong>生产者<code>Producer_PubSub</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_PubSub</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如上所述编写pub&#x2F;sub模式的生产者需要9步</strong></p><ol><li>创建连接工厂</li><li>设置参数</li><li>获取对应连接 Connection</li><li>创建Channel</li><li>声明交换机</li><li>创建队列</li><li>绑定队列和交换机</li><li>发送消息</li><li>释放资源</li></ol><p><strong>声明交换机</strong></p><p><code>Exchange.DeclareOk exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments) throws IOException;</code></p><blockquote><ol><li><code>exchange</code>: 交换机名称</li><li><code>type</code>: 交换机类型 枚举类型<ol><li><code>DIRECT</code>(“direct”): 定向</li><li><code>FANOUT</code>(“fanout”): 扇形(广播),发送消息到每一个与之绑定的队列</li><li><code>TOPIC</code>(“topic”): 通配符的方式</li><li><code>HEADERS</code>(“headers”): 参数匹配</li></ol></li><li><code>durable</code>: 是否持久化</li><li><code>autoDelete</code>: 自动删除</li><li><code>internal</code>: 内部使用.-一般为false</li><li><code>arguments</code>: 参数</li></ol></blockquote><p><strong>绑定队列和交换机</strong></p><p><code>Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</code></p><blockquote><ol><li><code>queue</code>: 队列名称</li><li><code>exchange</code>: 交换机名称</li><li><code>routingKey</code>: 路由键,绑定规则 如果交换机类型为fanout, <code>routingKey</code>设置为””</li></ol></blockquote><p><strong><code>FANOUT</code>类型的交换机绑定<code>queue</code>是不需要设置<code>routingKey</code>的</strong></p><p><strong>消费者<code>Consuemr_PubSub1</code> <code>Consuemr_PubSub2</code></strong></p><p>消费者没有太大的变换 只是分别绑定上述生产者创建的两个队列的队列名即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(queue1Name,<span class="literal">true</span>,consumer);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicConsume(queue2Name,<span class="literal">true</span>,consumer);</span><br></pre></td></tr></table></figure><p><strong>启动测试</strong></p><p><code>Consumer_PubSub1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011522423.png" alt="image-20220801152237353"></p><p><code>Consumer_PubSub2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011523900.png" alt="image-20220801152301842"></p><p><strong>小结</strong></p><ol><li>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都接收到（俗称广播）</li><li>发布订阅模式和工作队列模式的区别：<ul><li>工作队列模式不用定义交换机，而发布&#x2F;订阅模式需要定义交换机</li><li><strong>发布&#x2F;订阅模式的生产方是面向交换机发送消息，工作队列模式的生方式面向队列发送消息（底层使用默认交换机）</strong></li><li><strong>发布&#x2F;订阅模式需要设置队列和交换机的绑定</strong>，工作队列模式不需要设置，实际上工作队列模式会将队列绑定到默认的交换机。</li></ul></li></ol><hr><h3 id="Routing-路由模式"><a href="#Routing-路由模式" class="headerlink" title="Routing 路由模式"></a>Routing 路由模式</h3><p><strong>模式说明</strong></p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在向<code>Exchagne</code>发送消息时，也必须指定消息的<code>RoutingKey</code></li><li>Exchange 不再把消息发送给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的<code>RoutingKey</code> 与消息的<code>RoutingKey</code> 完全一致，才会接收到消息。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011535573.png" alt="image-20220801153109158"></p><p>图解：</p><ul><li><code>P</code>：生产者，向Exchange发送消息，发送消息时，会指定一个<code>RoutingKey</code></li><li><code>X</code>：Exchange（交换机），接收生产者的消息，然后把消息递交给<code>RoutingKey</code>完全匹配的队列</li><li><code>C1</code>：消费者，其所在队列指定了需要routing key 为error的消息</li><li><code>C2</code>：消费者，其所在队列指定了需要routing key为info、error、warning 的消息</li></ul><blockquote><p>在Direct类型下交换机下。交换机与队列绑定需要Routing Key，当生产者向交换机发送消息时也需要指定Routing Key，只有指定了Routing Key 交换机才可以确定将消息存入那个绑定的队列中。<strong>相当于Routing Key只是生产者与队列之间的关系（生产者通过这种关系将消息存入指定的队列中），而消费者只需要去对应队列名中的队列中获取消息消费即可。</strong></p></blockquote><p><strong>代码编写</strong></p><p>一般业务中要存到数据库中保存的日志 一般日志级别都是**<code>error</code>**</p><p><strong>设置Exchange类型为<code>Direct</code></strong></p><p>生产者绑定两个队列，队列一绑定了Routing key 为 <code>error</code>， 队列二绑定了3个Routing Key ，分别为 <code>error</code>、<code>info</code>、<code>warning</code></p><p><strong>生产者<code>Producer_Routing</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Routing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_direct&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//队列1的绑定</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//队列2的绑定</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者<code>Consumer_Routing1</code>、<code>Consumer_Routing2</code></strong></p><p>两个消费者去监听不同名称的队列即可</p><p><code>Consumer_Routing1</code>用于存储日志级别为error的日志，<code>Consumer_Routing2</code>用来将个级别日志打印在控制台上。</p><p>启动测试</p><p><strong>生产者发送 routing key 为 <code>info</code>的消息</strong></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011610208.png" alt="image-20220801161056145"></p><p><code>Consumer_Routing2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011610389.png" alt="image-20220801161048325"></p><p><strong>生产者发送 routing key 为<code>error</code>的消息</strong></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011616105.png" alt="image-20220801161615050"></p><p><code>Consumer_Routing1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011616571.png" alt="image-20220801161628521"></p><p><strong>小结</strong></p><p><strong><code>Routing</code></strong> 模式要求队列在绑定交换机时要指定 <strong>routing key</strong>，消息会转发到符合 routing key 的队列</p><h3 id="Topics-通配符模式"><a href="#Topics-通配符模式" class="headerlink" title="Topics 通配符模式"></a>Topics 通配符模式</h3><p><strong>模式说明</strong></p><ul><li>Topic 类型与 Direct 相比，都是可以根据 Routing Key把消息路由到不同的队列。只不过 Topic 类型 Exchange 可以让队列在绑定 Routing key的 时候使用<strong>通配符</strong>！</li><li><code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以 ”.“ 分割，例如：item.insert</li><li>通配符规则：# 匹配一个或多个词，* 匹配不多不少恰好一个词，例如：item.# 能够匹配 item.insert.abc  或者 item.insert，item.* 只能匹配 item.insert</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011628500.png" alt="image-20220801162829423"></p><p>图解：</p><ul><li>红色 Queue：绑定的是 usa.# ，因此凡是以 usa.开头的 routing key 都会被匹配到</li><li>黄色 Queue：绑定的是 #.news ,因此凡是以 .news 结尾的 routing key 都会被匹配到</li></ul><p><strong>代码编写</strong></p><p><strong>需求:  所有error级别的日志存入数据库，所有order系统的日志存入数据库</strong></p><p>生产者<code>Producer_Topic</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-14:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer_Topic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;36.137.128.27&quot;</span>); <span class="comment">//端口默认值 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>); <span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>); <span class="comment">//用户名 默认guest</span></span><br><span class="line">        <span class="comment">//3. 获取对应连接 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 声明交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Exchange.DeclareOk exchangeDeclare(String exchange,</span></span><br><span class="line"><span class="comment">        BuiltinExchangeType type,</span></span><br><span class="line"><span class="comment">        boolean durable,</span></span><br><span class="line"><span class="comment">        boolean autoDelete,</span></span><br><span class="line"><span class="comment">        boolean internal,</span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments) throws IOException;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        1. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        2. type: 交换机类型 枚举类型</span></span><br><span class="line"><span class="comment">            DIRECT(&quot;direct&quot;): 定向</span></span><br><span class="line"><span class="comment">            FANOUT(&quot;fanout&quot;): 扇形(广播),发送消息到每一个与之绑定的队列</span></span><br><span class="line"><span class="comment">            TOPIC(&quot;topic&quot;): 通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS(&quot;headers&quot;): 参数匹配</span></span><br><span class="line"><span class="comment">        3. durable: 是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete: 自动删除</span></span><br><span class="line"><span class="comment">        5. internal: 内部使用.-一般为false</span></span><br><span class="line"><span class="comment">        6. arguments: 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试广播模式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_topic&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Queue.BindOk queueBind(String queue, String exchange, String routingKey) throws IOException;</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">        1. queue: 队列名称</span></span><br><span class="line"><span class="comment">        2. exchange: 交换机名称</span></span><br><span class="line"><span class="comment">        3. routingKey: 路由键,绑定规则</span></span><br><span class="line"><span class="comment">            如果交换机类型为fanout, routingKey设置为&quot;&quot;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//routing key 格式 系统的名称.日志的级别</span></span><br><span class="line">        <span class="comment">//需求: 所有error级别的日志存入数据库，所有order系统的日志存入数据库</span></span><br><span class="line">        <span class="comment">//队列1的绑定</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">        <span class="comment">//队列2的绑定</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息: 这是一条日志 日志级别:error&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">&quot;order.info&quot;</span>,<span class="literal">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以 ”.“ 分割，例如：item.insert</p></blockquote><p>交换机与队列的绑定（通配符的配置）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">      channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">      <span class="comment">//队列2的绑定</span></span><br><span class="line">      channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>消费者 <code>Consumer_Topic1</code>、<code>Consumer_Topic2</code></strong></p><p>修改部分：修改两个消费者监听的队列名称</p><p>启动测试</p><p>生产者发送 <code>routingKey</code> 为 <code>order.info</code> 的消息</p><p><code>Consumer_Topic1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011658734.png" alt="image-20220801165834676"></p><p><code>Consumer_Topic2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011658384.png" alt="image-20220801165818326"></p><p>生产者发送 <code>routingKey</code> 为 <code>goods.info</code> 的消息</p><p><code>Consumer_Topic1</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011702595.png" alt="image-20220801170213533"></p><p><code>Consumer_Topic2</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208011701487.png" alt="image-20220801170152429"></p><p>根据发送的routing key<code>goods.info</code>无法匹配队列一 通配符，但可以匹配队列二得通配符。</p><p><strong>小结</strong></p><p>Topic 主题模式可以实现 Pub&#x2F;Sub 发布于订阅模式和 Routing 路由模式的功能， 只能是 Topic 在配置 routing key 的时候可以使用通配符，显得更加灵活。</p><h3 id="工作模式总结"><a href="#工作模式总结" class="headerlink" title="工作模式总结"></a>工作模式总结</h3><ol><li>简单模式 Hello World<ul><li>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。</li></ul></li><li>工作队列模式 Work Queue<ul><li>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。</li></ul></li><li>发布订阅模式 Publish&#x2F;subscribe<ul><li>需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</li></ul></li><li>路由模式 Routing<ul><li>需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li></ul></li><li>通配符模式 Topic<ul><li>需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。</li></ul></li></ol><hr><h2 id="Spring-Boot-整合-RabbitMQ"><a href="#Spring-Boot-整合-RabbitMQ" class="headerlink" title="Spring Boot 整合 RabbitMQ"></a>Spring Boot 整合 <code>RabbitMQ</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.7</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><ol><li><p>创建生产者工程</p></li><li><p>导入<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-06-SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitMQ-06-Consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类 （常规）</p></li><li><p><code>RabbitMQ</code>配置类 </p><p>主要来配置交换机，队列，交换机以及队列之间的绑定关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-19:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">bootExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明一个topic类型的交换机</span></span><br><span class="line">        <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME)</span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">//是否持久化</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">bootQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列和交换机绑定关系 Binding</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 队列</span></span><br><span class="line"><span class="comment">     * 2. 交换机</span></span><br><span class="line"><span class="comment">     * 3. routing key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> binding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueueExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bootQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;bootQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;bootExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;boot.#&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> top.devildyw.consumer.config.RabbitMQConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-01-19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line">    <span class="comment">//注入RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setExchange(RabbitMQConfig.EXCHANGE_NAME);<span class="comment">//设置交换机</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;boot.haha&quot;</span>,<span class="string">&quot;boot mq hello~~&quot;</span>); <span class="comment">//发送到指定交换机上的指定routingkey 队列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程：导入依赖–&gt;配置-&gt;编写配置类-&gt;注入<code>RabbitTemplate</code>发送消息</p><p><code>RabbitMQ</code>发送消息的流程: 生产者指定交换机,Routing key –&gt; 消息被发送到交换机 –&gt; 交换机转发到与之绑定却routing key相匹配的队列</p></blockquote></li></ol><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><ol><li><p>创建工程</p></li><li><p>导入<code>pom.xml</code>依赖 依赖于生产者相同</p></li><li><p><code>application.yml</code> 也与生产者相同</p></li><li><p>消费者没有过多配置</p></li><li><p>主启动类</p></li><li><p>创建<code>RabbitMQListener</code>类</p></li><li><p>在<code>RabbitMQListener</code>新建一个方法 叫做<code>ListenerQueue</code> 带上<code>@RabbitListener</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定queue的名称</span></span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;boot_topic_queue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">       System.out.println(message);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>监听queue中的消息，获取到消息后，会以Message对象的方式注入到该方法中。</p></li></ol><blockquote><p>流程：导入依赖–&gt;配置-&gt;在受到Spring容器管理的类中 –&gt; 编写方法来接受消息（带上注解，指定队列名称）</p><p><code>RabbitMQ</code>接收消息的流程: 消费者 –&gt; 监听队列 –&gt; 交换机将消息发送到队列中 –&gt; 消费者接收队列中的消息</p></blockquote><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>生产者使用 <code>Topic</code>类型交换机发送消息<code>boot mq hello~~</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208012010429.png" alt="image-20220801201014349"></p><p>消费者监听<code>boot_topic_queue</code>队列</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208012011953.png" alt="image-20220801201113895"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Spring Boot整合 <code>RabbitMQ</code> 减少了代码量、提供了配置类工厂供开发人员使用，配置完成后，只需要注入其提供了<code>RabbitTemplate</code>，即可轻松地发送消息；</p><p>消费端直接使用<code>@RabbitListener</code>完成消息接收</p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071853550.png" alt="image-20220807185257378"></p><h2 id="消息的可靠性"><a href="#消息的可靠性" class="headerlink" title="消息的可靠性"></a>消息的可靠性</h2><h3 id="消息的可靠性问题"><a href="#消息的可靠性问题" class="headerlink" title="消息的可靠性问题"></a>消息的可靠性问题</h3><p>消费者从生产者发送到exchange，再到queue，再到消费者，有那些倒置消息丢失的可能性？</p><ul><li>发送时丢失：<ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li><code>MQ</code>宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071857452.png" alt="image-20220807185729375"></p><h3 id="生产者确认机制"><a href="#生产者确认机制" class="headerlink" title="生产者确认机制"></a>生产者确认机制</h3><p><code>RabbitMQ</code>提供了<code>publisher confirm</code>机制来避免消息发送到<code>MQ</code>过程中丢失。消息发送到<code>MQ</code>以后，会返回一个结果给发送者，表示消息是否处理成功。结果有两种请求：</p><ul><li><p><code>publisher-confirm</code>，发送者确认</p><ul><li>消息成功投递到交换机，返回<code>ack</code></li><li>消息未投递到交换机，返回<code>nack</code></li></ul></li><li><p><code>publisher-return</code>，发送者回执</p><ul><li><p>消息投递到交换机了，但是没有路由到队列。返回<code>ack</code>，及路由失败原因。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208071905004.png" alt="image-20220807190521930"></p></li></ul></li></ul><blockquote><p>注意：确认机制发送消息时，需要每个消息设置一个全局唯一ID，以区分不同消息，避免<code>ack</code>冲突。</p></blockquote><h4 id="编码-工程基础配置"><a href="#编码-工程基础配置" class="headerlink" title="编码-工程基础配置"></a>编码-工程基础配置</h4><ol><li><p>创建生产者、消费者工程</p></li><li><p>pom.xml依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>application.yml</code>配置<code>rabbitMQ</code>的连接配置</li></ol><p>生产者</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>启动类编写</p></li><li><p>消费者编写监听类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;test_queue_confirm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="编码-SpringAMQP实现生产者确认"><a href="#编码-SpringAMQP实现生产者确认" class="headerlink" title="编码-SpringAMQP实现生产者确认"></a>编码-SpringAMQP实现生产者确认</h4><ol><li><p>publisher这个微服务的application.yml中添加配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="string">.....</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">CORRELATED</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置说明：</p><ul><li><code>publisher-confirm-type</code>：开启<code>publisher-confirm</code>，这里支持两种类型：<ul><li><code>simple</code>：同步等待<code>confirm</code>结果，直到超时（类似同步调用，等待消息发送到交换机中返回确认消息才继续执行）</li><li><code>correlated</code>：异步回调，定义<code>ConfirmCallback</code>，<code>MQ</code>返回时会回调这个<code>ConfirmCallback</code>（异步调用，发送后继续后续操作，当交换机中接收到并返回结果时会通知。）</li></ul></li><li><code>publisher-returns</code>：开启<code>publish-return</code>功能，同样是基于<code>callback</code>机制，不过是定义<code>ReturnCallback</code></li><li><code>template.mandatory</code>：定义消息路由失败时的策略。<code>true</code>，则调用<code>ReturnCallback</code>；<code>false</code>：则直接丢弃消息</li></ul></li><li><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此需要在项目启动过程中配置全局<code>ReturnCallback</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-07-19:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="comment">//实现ApplicationContextAware接口</span></span><br><span class="line">    <span class="comment">//在这里配置RabbitTemplate的全局ReturnCallBack</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//获取RabbitTemplate对象</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                <span class="comment">//记录日志</span></span><br><span class="line">                log.error(<span class="string">&quot;消息发送到队列失败，响应码：&#123;&#125;,失败原因：&#123;&#125;,交换机：&#123;&#125;,路由key：&#123;&#125;,消息msg：&#123;&#125;&quot;</span>,</span><br><span class="line">                        returned.getReplyCode(),returned.getReplyText(),returned.getExchange(),returned.getRoutingKey(),returned.getMessage());</span><br><span class="line">                <span class="comment">//更具需求可以配置消息重发</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>RabbitMQ</code>配置：交换机、队列、绑定关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.producer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-08-04-19:52</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;getExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">exchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(<span class="string">&quot;amp.topic&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;getQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;test_queue_confirm&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(<span class="meta">@Qualifier(&quot;getExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;getQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;simple.test&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用测试类完成消息的发送</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestConfirm</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1.准备消息</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//2. 准备CorrelationData</span></span><br><span class="line">       <span class="comment">//2.1 准备ConfirmCallback</span></span><br><span class="line">       <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">       correlationData.getFuture().addCallback(result -&gt; &#123;</span><br><span class="line">           <span class="comment">//判断结果</span></span><br><span class="line">           <span class="keyword">if</span> (result.isAck())&#123;</span><br><span class="line">               <span class="comment">//ACK</span></span><br><span class="line">               System.out.println(<span class="string">&quot;消息投递到交换机成功！消息ID:&quot;</span>+correlationData.getId());</span><br><span class="line">               log.info(<span class="string">&quot;消息投递到交换机成功！消息ID：&#123;&#125;&quot;</span>,correlationData.getId());</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//NACK</span></span><br><span class="line">               System.out.println(<span class="string">&quot;消息投递到交换机失败！消息ID:&quot;</span>+correlationData.getId());</span><br><span class="line">               log.error(<span class="string">&quot;消息投递到交换机失败！消息ID：&#123;&#125;&quot;</span>,correlationData.getId());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,ex -&gt; &#123; <span class="comment">//出现异常导致消息发送失败</span></span><br><span class="line">           <span class="comment">//发送消息失败</span></span><br><span class="line">           <span class="comment">//记录日志</span></span><br><span class="line">           log.error(<span class="string">&quot;消息发送失败！&quot;</span>,ex);</span><br><span class="line">           <span class="comment">//根据需求可以重发消息</span></span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;amp.topic&quot;</span>,<span class="string">&quot;simple.test&quot;</span>,message,correlationData);</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>想要完成<strong>异步回调</strong>，就需要在调用发送消息的方法中添加一个参数<code>correlationData</code>，在该参数中定义消息投递情况的回调方法以及发送消息失败的回调方法。当交换机接收到生产者的确认时，<code>CorrelateionData</code> 于 <code>ack/nack</code> 一起返回。</p></li><li><p>启动消费者监听，启动生产者生成消息，观察控制台日志情况。</p></li></ol><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>SpringAMQP中处理消息确认的集中情况：</p><ul><li>publisher-confirm：<ul><li>消息发送成功到exchange，返回ack</li><li>消息发送失败，没有到达交换机，返回nack</li><li>消息发送过程中出现异常，没有收到回执</li></ul></li><li>消息成功发送到exchange，但没有路由到queue，<ul><li>调用<code>ReturnCallback</code></li></ul></li></ul><hr><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p><code>MQ</code>默认时内存存储消息，开启持久化功能可以确保缓存在<code>MQ</code>中的消息不丢失。</p><p>消息持久化是指将消息刷到磁盘以达到持久化保存的目的。</p><p>根据 <a href="http://www.rabbitmq.com/blog/2011/01/20/rabbitmq-backing-stores-databases-and-disks/">官方博文</a> 的介绍，<code>RabbitMQ</code>在两种情况下会将消息写入磁盘：</p><ol><li>消息本身在publish的时候就要求消息写入磁盘；（后续惰性队列讲述）</li><li>内存紧张，需要将部分内存中的消息转移到磁盘；</li></ol><p>这里演示的就是内存中的消息到达一定阈值后，将消息转移到磁盘的情况。</p><p>将 exchange、queue 和 message 都进行持久化操作后，也不能保证消息一定不会丢失，消息存入<code>RabbitMQ</code> 之后，还需要一段时间才能存入硬盘。<code>RabbitMQ</code> 并不会为每条消息都进行同步存盘，如果在这段时间，服务器宕机或者重启，消息还没来得及保存到磁盘当中，就会丢失。</p><p>创建<strong>交换机</strong>或者<strong>队列</strong>时调用<strong>durable方法</strong></p><blockquote><p>注意：如果 exchange 和 queue 两者之间有一个持久化，一个非持久化，就不允许建立绑定。</p></blockquote><ol><li><p>交换机持久化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;getExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">exchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Exchange</span> <span class="variable">exchange</span> <span class="operator">=</span> ExchangeBuilder.topicExchange(<span class="string">&quot;amp.topic&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">       <span class="keyword">return</span> exchange;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>队列持久化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;getQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;test_queue_confirm&quot;</span>).build();</span><br><span class="line">       <span class="keyword">return</span> queue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>消息持久化，<code>Spring AMQP</code>中的消息<strong>默认是持久的</strong>，可以通过<code>MessageProperties</code>中的<code>DeliveryMode</code>来指定（指定持久或是不持久）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageBuilder.withBody(<span class="string">&quot;hello&quot;</span>.getBytes())</span><br><span class="line">                .setDeliveryMode(MessageDeliveryMode.PERSISTENT) <span class="comment">//持久化消息</span></span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></li></ol><p>在图形控制界面中**<code>Features</code>**为D表示该组件持久化</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072109883.png" alt="image-20220807210954806"></p><p>通过观察创建队列，交换机等组件的构造方法可以看出 <strong><code>RabbitMQ</code>中的各个组件都是默认持久化的</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072116707.png" alt="image-20220807211656649"></p><hr><h3 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h3><p><code>RabbitMQ</code>支持消费者确认机制，即：消费者处理消息后可以向<code>MQ</code>发送<code>ack</code>回执，<code>MQ</code>收到<code>ack</code>回执后才会删除此消息。而<code>Spring AMQP</code>则允许三种确认模式：</p><ul><li>manual：手动<code>ack</code>，需要在业务代码结束后，调用<code>api</code>发送<code>ack</code>。</li><li>auto：自动<code>ack</code>，由<code>spring</code>监控<code>listener</code>代码是否出现异常，没有异常则返回<code>ack</code>；抛出异常则返回<code>nack</code></li><li>none：关闭<code>ack</code>，<code>MQ</code>假定消费者获取消息后会成功处理，因此消息投递后立即被删除。</li></ul><p>配置方式是修改<strong>消费者</strong><code>application.yml</code>文件，添加下面配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="string">.....</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment">#每个消费者可以处理的未确认消息的最大数量。</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">NONE</span> <span class="comment">#none：关闭ack; manual：手动ack; auto: 自动ack</span></span><br></pre></td></tr></table></figure><p>当消费者因报错或网络波动导致消息发送给了消费者，却没有返回<code>ack</code>，该消息就会被<code>Rabbitmq</code>标为<code>unacked</code>，队列会重新向消费者发送。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072131847.png" alt="image-20220807213122791"></p><h3 id="消费者失败重试"><a href="#消费者失败重试" class="headerlink" title="消费者失败重试"></a>消费者失败重试</h3><p>当消费者出现异常后，消息会不断requeue（重新入队）到队列，再重新发送给消费者，然后再次异常，再次erqueue，无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072136310.png" alt="image-20220807213640249"></p><p>我们可以利用Spring的retry机制，在消费者出现异常时例用本地重试，而不是无限制的<code>requeue</code>到<code>mq</code>的队列。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">1000</span> <span class="comment"># 初始的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数,下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment">#true无状态;false有状态.如果业务中包含事务,这里改为false 决定重试是否是有状态</span></span><br></pre></td></tr></table></figure><p>这种方式，重试次数耗尽，如果消息依然失败，则消息会被抛弃。</p><h3 id="消费者失败消息处理策略"><a href="#消费者失败消息处理策略" class="headerlink" title="消费者失败消息处理策略"></a>消费者失败消息处理策略</h3><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有<code>MessageRecoverer</code>接口处理，它包含三种不同的实现：</p><ul><li><p><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</p></li><li><p><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，直接<code>nack</code>，消息重新入队</p></li><li><p><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072205329.png" alt="image-20220807220509233"></p></li></ul><p>测试<code>RepublishMessageRecoverer</code>处理模式</p><ul><li><p>首先定义接收失败消息的交换机、队列和其绑定关系：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>); <span class="comment">//创建一个交换机 用于专门处理(重发)消费失败的消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>,<span class="literal">true</span>); <span class="comment">//与上面专门处理消费失败的交换机相绑定的缓存消息的队列</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义队列与交换机绑定关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue()).to(directExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，定义<code>RepublishMessageRecoverer</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置消息重发模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate,<span class="string">&quot;error.direct&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>重新启动消费者，查看图形控制界面中观察error队列和交换机中的信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208072223276.png" alt="image-20220807222317143"></p><p>可以看到，重试次数耗尽后的消息会进入到error交换机，发送到error队列中，其中信息内容会包含报错信息。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>任何保证RabbitMQ消息的可靠新？</p><ul><li>开启生产者确认机制，确保生产者的消息能够到达队列</li><li>开启持久功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置<code>MessageRecoverer</code>，多次重试失败后将消息投递到异常交换机，交由人工处理。</li></ul><h2 id="死信交换机"><a href="#死信交换机" class="headerlink" title="死信交换机"></a>死信交换机</h2><h3 id="初始死信交换机"><a href="#初始死信交换机" class="headerlink" title="初始死信交换机"></a>初始死信交换机</h3><p>当一个队列中的消息满足下列情况之一时，可以成为<strong>死信（dead letter）</strong>：</p><ul><li>消费者使用 <code>basic.reject</code> 或 <code>basic.nack</code> 声明消费失败，并且消息的 <code>requeue</code> 参数设置为 false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息堆积满了，最早的消息可能成为死信</li></ul><p>如果该队列配置了 dead-letter-exchange 属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong> （Dead Letter Exchange，简称 <code>DLX</code>）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081303775.png" alt="image-20220808130328413"></p><blockquote><p>死信交换机与error交换机最大的区别就是，error交换机是由消费者去投递消息，而死信交换机则是通过队列投递。初次之外死信交换机还有着其他功能。</p></blockquote><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>什么样的消息会成为死信？</p><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>如何给队列绑定死信交换机？</p><ul><li>给队列设置 dead-letter-exchange 属性，指定一个交换机</li><li>给队列设置 dead-letter-routing-key 属性，设置死信交换机与死信队里额的 <code>RoutingKey</code></li></ul><hr><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>TTL，也就是Time-To-Live。如果一个队列中的消息TTL结束仍未消费，则会变为死信，ttl超时分为两种情况：</p><ul><li>消息存在的队列设置了存活时间</li><li>消息本身设置了存活时间</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081309319.png" alt="image-20220808130910216"></p><h4 id="编码-实现延迟消息"><a href="#编码-实现延迟消息" class="headerlink" title="编码-实现延迟消息"></a>编码-实现延迟消息</h4><p><strong>思路：消息可以设置超时存活时间，不设置消费者监听该队列，一但消息超出存活时间，就会被队列投递到我们事先配置好的死信交换机中，此时监听死信队列的消费者就可以接收到消息并完成消费，就实现了消息的延迟消费。</strong></p><ul><li>消费者监听死信队列消息</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="comment">//使用注解声明队列、交换机、以及绑定关系</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;dl.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;dl.direct&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;dl&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDlQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者接收到了dl.queue的延迟消息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TTL交换机、队列、绑定关系配置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTLMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">ttlDirectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;ttl.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ttlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;dl.queue&quot;</span>)</span><br><span class="line">                .ttl(<span class="number">10000</span>) <span class="comment">//设置消息的生存时间，在此之后它将被丢弃或路由到死信交换（如果已配置）。</span></span><br><span class="line">                .deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>) <span class="comment">//指定死信交换机 这里超过存活时间队列就会将消息投递到死信交换机中</span></span><br><span class="line">                .deadLetterRoutingKey(<span class="string">&quot;dl&quot;</span>) <span class="comment">//指定死信交换机与死信队列之间的routingkey 到时投递的消息都会发送到死信交换机绑定的routingkey对应的队列中</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">ttlBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlDirectExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动消费者监听</p></li><li><p>生产者发送消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1. 消息准备</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;ttl message&quot;</span>;</span><br><span class="line">       <span class="comment">//2. 发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>,<span class="string">&quot;ttl&quot;</span>,message);</span><br><span class="line">       <span class="comment">//记录日志</span></span><br><span class="line">       log.info(<span class="string">&quot;消息已经成功发送！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>这里消息可以不设置超时存活时间，因为队列中已经设置，如果消息也设置，则取两者最小值。</strong></p><p>控制台结果</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081337679.png" alt="image-20220808133702626"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081337895.png" alt="image-20220808133712476"></p><p><strong>延时成功</strong></p></li><li><p>发送消息时，给消息本省设置超时时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1. 消息准备</span></span><br><span class="line">       <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;ttl message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">               .setExpiration(<span class="string">&quot;5000&quot;</span>) <span class="comment">//设置5秒超时时间</span></span><br><span class="line">               .build();</span><br><span class="line">       <span class="comment">//2. 发送消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;ttl.direct&quot;</span>,<span class="string">&quot;ttl&quot;</span>,message);</span><br><span class="line">       <span class="comment">//记录日志</span></span><br><span class="line">       log.info(<span class="string">&quot;消息已经成功发送！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时延时时间由10秒变为了5秒。证实了当队列和消息都设置了超时时间取之间最小值。</p></li></ul><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>消息超时的两种方式</p><ul><li>给队列设置 <code>ttl</code> 属性，进入队列后超过 <code>ttl</code> 时间的消息变为死信</li><li>给消息设置 <code>ttl</code> 属性，队列接收到消息超过<code>ttl</code>时间后变为死信</li><li>两者共存时，以时间短的 <code>ttl</code> 为准</li></ul><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p>例用TTL结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为<strong>延迟队列（Delay Queue）</strong>模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15分钟内未支付，则自动取消</li><li>预约工作会议，20秒后自动通知所有参会人员</li></ul><h4 id="延迟队列插件"><a href="#延迟队列插件" class="headerlink" title="延迟队列插件"></a>延迟队列插件</h4><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。</p><h4 id="安装延迟队列插件-DelayExchange"><a href="#安装延迟队列插件-DelayExchange" class="headerlink" title="安装延迟队列插件 DelayExchange"></a>安装延迟队列插件 DelayExchange</h4><ol><li><p>下载插件</p><p><code>RabbitMQ</code>有一个官方的插件社区，地址为：<a href="https://www.rabbitmq.com/community-plugins.html"><code>Community Plugins — RabbitMQ</code></a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081356517.png" alt="image-20220808135611458"></p></li><li><p>上传插件</p><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件对应的数据卷。如果没有数据卷，可以先创建一个。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume create mq-plugins</span><br></pre></td></tr></table></figure><p>删除原有容器，创建新容器挂载数据卷</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -v mq-plugins:/plugins -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:management</span><br></pre></td></tr></table></figure><p>查看数据卷信息查找数据卷目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure><p>将我们刚刚下载的插件上传到该目录</p></li><li><p>安装插件</p><p>最后就是安装了，需要进入<code>MQ</code>容器内部来执行安装。</p><p>进入容器内部后，执行下面命令开启插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081718986.png" alt="image-20220808171500479"></p><p>出现如下信息代表安装成功。</p></li></ol><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p><code>DelayExchange</code>插件原理是对官方原生的<code>Exchange</code>做了功能的升级：</p><ul><li>将<code>DelayExchange</code>接受到的消息暂存在内存中（官方的<code>Exchange</code>是无法存储消息的）</li><li>在<code>DelayExchange</code>中计时，超时后才投递消息到队列中</li></ul><h4 id="手动指定"><a href="#手动指定" class="headerlink" title="手动指定"></a>手动指定</h4><p>在 <code>RabbitMQ</code> 的管理平台声明一个 <code>DelayExchagne</code> ：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081730019.png" alt="image-20220808173004955"></p><h4 id="SpringAMQP使用延迟队列插件"><a href="#SpringAMQP使用延迟队列插件" class="headerlink" title="SpringAMQP使用延迟队列插件"></a>SpringAMQP使用延迟队列插件</h4><p><code>DelayExchange</code>的本质还是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机，交换机的类型可以是任意类型，然后设定**<code>delayed</code><strong>属性为</strong><code>true</code>**即可。</p><p>基于注解的方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;,delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayedQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 delay.queue的延迟消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于<code>Java</code>代码的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayedExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;delay.direct&quot;</span>)</span><br><span class="line">                .delayed() <span class="comment">//指定为有延迟功能的交换机</span></span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们相这个delay为true的交换机中发送消息，一定要给消息添加一个<code>header: x-delay</code>，值为延迟的时间，单位为毫秒</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelayedMsg</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//创建消息</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;hello,delayed message&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">            .setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="number">10000</span>) <span class="comment">//设置head 延迟属性 延迟10秒</span></span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//消息ID,需要封装到CorrelationData中</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>,<span class="string">&quot;delay&quot;</span>,message,correlationData);</span><br><span class="line">    log.debug(<span class="string">&quot;发送消息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的消息发送生产者端会报错，原因是我们的消息是发送到了交换机上暂存然后再发送到队列中，因为暂存所以消息没有一开始就被发送到队列，所以会报<code>NO_ROUTE</code>的错误。</p></blockquote><p>可以在全局<code>ReturnCallback</code>中添加判断是否是延时消息来避免。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081800548.png"></p><h4 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h4><p>延迟队列插件的使用步骤包括那些？</p><ul><li>声明一个交换机，添加delayed属性为true</li><li>发送消息时，添加x-delay头，值为超时时间</li></ul><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><h3 id="消息堆积问题"><a href="#消息堆积问题" class="headerlink" title="消息堆积问题"></a>消息堆积问题</h3><p>当生产者发送个消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息到达上限。最早接收到的消息，就可能会称为死信，会被丢弃，这就是<strong>消息堆积</strong>问题</p><p>解决消息堆积有三种思路：</p><ul><li>增加更多消费者，提高消费速度</li><li>在消费者内开启线程池加快消息处理速度（适合消息消费时间长的消息）</li><li>扩大队列容积，提高堆积上限</li></ul><h3 id="惰性队列-1"><a href="#惰性队列-1" class="headerlink" title="惰性队列"></a>惰性队列</h3><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li><strong>接收到消息后直接存入磁盘而非内存</strong>（消息默认存储到内存）</li><li><strong>消费者要消费消息时才会从磁盘中读取并加载到内存</strong></li><li><strong>支持数百万条的消息存储</strong></li></ul><h4 id="声明惰性队列的方式"><a href="#声明惰性队列的方式" class="headerlink" title="声明惰性队列的方式"></a>声明惰性队列的方式</h4><ul><li><strong>命令行方式</strong></li></ul><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rabbitmqctl <span class="built_in">set</span>——policy Lazy <span class="string">&quot;^lazy-queue$&quot;</span> <span class="string">&#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27;</span> --apply-to queues</span><br></pre></td></tr></table></figure><ul><li><p><strong>用<code>SpringAMQP</code>声明惰性队列</strong></p><ul><li><p>@Bean的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">                .lazy() <span class="comment">//开启x-queue-mode为lazy</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">           name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">           durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">           arguments = @Argument(name = &quot;x-queue-mode&quot;,value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">   ))</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;接收到 lazy,queue的消息：&#123;&#125;&quot;</span>,msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>分别向将配置好的惰性队列和常规队列发送一百万条消息，<strong>可以观察到惰性队列的消息接收更平稳，而常规队列波动很大。</strong></p><blockquote><p>原因：惰性队列一接收到消息就会将消息写到磁盘，而不是内存；而常规队列是写到内存，一旦内存中的消息超过了<code>RabbitMQ</code>的一定阈值，就会暂停接收然后将消息写入磁盘（<strong>page-out</strong>）。</p></blockquote><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>给消费者开启线程池，提高消费速度</li><li>使用惰性队列，可以在MQ中保存更多的消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些?</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h1 id="MQ集群"><a href="#MQ集群" class="headerlink" title="MQ集群"></a><code>MQ</code>集群</h1><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h2><p>RabbitMQ是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><ul><li>普通集群：是一种分布式集群，将队列分散到集群的各个结点，从而提高整个集群的并发能力。</li><li>镜像集群：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>镜像集群虽然支持主从，但主从同步并不是强一致性的，某些请款下可能有数据丢失的风险。因此在<code>RabbitMQ</code>的3.8版本以后，退出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采取Raft协议确保主从的数据一致性。</p><h2 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群</h2><p>普通集群，或者叫做标准集群（classic cluster），具备下列特征：</p><ul><li><p>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包括队列中的消息。</p></li><li><p>当访问集群某个节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081852019.png"></p></li><li><p>队列所在的节点宕机，队列中的消息就会丢失</p></li></ul><p>​    </p><h3 id="搭建普通集群"><a href="#搭建普通集群" class="headerlink" title="搭建普通集群"></a>搭建普通集群</h3><p>我们的计划部署3节点的<code>mq</code>集群：</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 —&gt; 15672</td><td>8071 —&gt; 5672</td></tr><tr><td>mq2</td><td>8082 —&gt; 15672</td><td>8072 —&gt; 5672</td></tr><tr><td>mq3</td><td>8083 —&gt; 15672</td><td>8073  —&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><p>RabbitMQ底层依赖于Erlang，而Erlang虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的<code>mq</code>容器中获取一个cookie值，作为集群的cookie。执行下面的命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it MQ容器<span class="built_in">id</span> <span class="built_in">cat</span> /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>可以看到cookie值如下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CSKYABVGIEGXEZLHYGMR</span><br></pre></td></tr></table></figure><p>接下来，停止并删除当前的<code>MQ</code>容器，我们重新搭建集群。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f MQ容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>清理下docker的数据卷</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h4 id="准备集群配置"><a href="#准备集群配置" class="headerlink" title="准备集群配置"></a>准备集群配置</h4><p>在<code>/tmp</code>目录新建一个配置文件 <code>rabbitmq.conf</code>：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">touch</span> rabbitmq.conf</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">loopback_users.<span class="attribute">guest</span> = <span class="literal">false</span> <span class="comment">#禁用默认的guest用户 防止不法之人访问</span></span><br><span class="line">listeners.tcp.default = <span class="number">5672</span>  <span class="comment">#mq消息通信端口</span></span><br><span class="line">cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config</span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">1</span> = rabbit<span class="variable">@mq1</span> <span class="comment">#节点名称</span></span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">2</span> = rabbit<span class="variable">@mq2</span></span><br><span class="line">cluster_formation.classic_config.nodes.<span class="number">3</span> = rabbit<span class="variable">@mq3</span></span><br></pre></td></tr></table></figure><p>再创建一个文件，记录cookie</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建cookie文件</span></span><br><span class="line"><span class="built_in">touch</span> .erlang.cookie</span><br><span class="line"><span class="comment"># 写入cookie</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CSKYABVGIEGXEZLHYGMR&quot;</span> &gt; .erlang.cookie</span><br><span class="line"><span class="comment"># 修改cookie文件的权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 .erlang.cookie</span><br></pre></td></tr></table></figure><p>准备三个目录,mq1、mq2、mq3：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> mq1 mq2 mq3</span><br></pre></td></tr></table></figure><p>然后拷贝rabbitmq.conf、cookie文件到mq1、mq2、mq3：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入/tmp</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq1</span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq2</span><br><span class="line"><span class="built_in">cp</span> rabbitmq.conf mq3</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq1</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq2</span><br><span class="line"><span class="built_in">cp</span> .erlang.cookie mq3</span><br></pre></td></tr></table></figure><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><p>创建一个网络：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create mq-net</span><br></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq1 \</span><br><span class="line">--hostname mq1 \</span><br><span class="line">-p 8071:5672 \</span><br><span class="line">-p 8081:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq2 \</span><br><span class="line">--hostname mq2 \</span><br><span class="line">-p 8072:5672 \</span><br><span class="line">-p 8082:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --net mq-net \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf \</span><br><span class="line">-v <span class="variable">$&#123;PWD&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--name mq3 \</span><br><span class="line">--hostname mq3 \</span><br><span class="line">-p 8073:5672 \</span><br><span class="line">-p 8083:15672 \</span><br><span class="line">rabbitmq:3.10-management</span><br></pre></td></tr></table></figure><blockquote><p><code>--net</code>将容器添加进指定的网络</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081932654.png" alt="image-20220808193233523"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在<code>mq1</code>这个节点上添加一个队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081933893.png" alt="image-20220808193359818"></p><p>如图，在<code>mq2</code>和<code>mq3</code>两个控制台也都能看到：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081935633.png" alt="image-20220808193516554"></p><h4 id="数据共享测试"><a href="#数据共享测试" class="headerlink" title="数据共享测试"></a>数据共享测试</h4><p>点击这个队列，进入管理页面：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081937202.png" alt="image-20220808193700143"></p><p>然后利用控制台发送一条消息到这个队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081937482.png" alt="image-20220808193730351"></p><p>结果在<code>mq2</code>、<code>mq3</code>上都能看到这条消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081938791.png" alt="image-20220808193834711"></p><h4 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h4><p>我们让其中一台节点mq1宕机：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop mq1</span><br></pre></td></tr></table></figure><p>然后登录mq2或mq3的控制台，发现simple.queue也不可用了：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081941214.png" alt="image-20220808194107726"></p><p>说明队列是没有实现共享的。</p><h2 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h2><p>镜像集群：本质是主从模式，具备下面 的特性</p><ul><li><p>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</p></li><li><p>创建队列的节点被称为该队列的主节点，备份到的其他节点叫做该队列的镜像节点。</p></li><li><p>一个队列的主节点可能是另一个队列的镜像节点</p></li><li><p>所有操作都是主节点完成，然后同步给镜像节点</p></li><li><p>主节点宕机后，镜像节点会代替称为新的主节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208081948314.png" alt="image-20220808194817144"></p></li></ul><blockquote><p>官方文档地址：<a href="https://www.rabbitmq.com/ha.html">https://www.rabbitmq.com/ha.html</a></p></blockquote><h3 id="搭建镜像集群"><a href="#搭建镜像集群" class="headerlink" title="搭建镜像集群"></a>搭建镜像集群</h3><p>镜像集群不需要重新搭建集群，只需要在原来普通集群节点上进行策略配置即可。<strong>镜像集群更形象地可以成为集群的镜像模式。</strong></p><h4 id="镜像集群的配置"><a href="#镜像集群的配置" class="headerlink" title="镜像集群的配置"></a>镜像集群的配置</h4><p>镜像模式的配置有3种模式：</p><table><thead><tr><th align="left">ha-mode</th><th align="left">ha-params</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">准确模式exactly</td><td align="left">队列的副本量count</td><td align="left">集群中队列副本（主服务器和镜像服务器之和）的数量。count如果为1意味着单个副本：即队列主节点。count值为2表示2个副本：1个队列主和1个队列镜像。换句话说：count &#x3D; 镜像数量 + 1。如果群集中的节点数少于count，则该队列将镜像到所有节点。如果有集群总数大于count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td></tr><tr><td align="left">all</td><td align="left">(none)</td><td align="left">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络I &#x2F; O，磁盘I &#x2F; O和磁盘空间使用情况。推荐使用exactly，设置副本数为（N &#x2F; 2 +1）。</td></tr><tr><td align="left">nodes</td><td align="left"><em>node names</em></td><td align="left">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td></tr></tbody></table><h5 id="exactly模式"><a href="#exactly模式" class="headerlink" title="exactly模式"></a>exactly模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-two &quot;^two\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是exactly模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是2，就是副本数量为2，1主1镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是manual，即新加入的镜像节点不会同步旧的消息。如果设置为automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul><hr><h5 id="all模式"><a href="#all模式" class="headerlink" title="all模式"></a>all模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-all &quot;^all\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;</code>：策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是all模式，即所有节点都会称为镜像节点</li></ul></li></ul><hr><h5 id="nodes模式"><a href="#nodes模式" class="headerlink" title="nodes模式"></a>nodes模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-nodes &quot;^nodes\.&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;&#39;</code>: 策略内容<ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是nodes模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul><hr><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>我们使用镜像集群的exactly模式，因为集群节点数量为3，因此镜像数量就设置为2.</p><p>运行下面的指令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mq1 rabbitmqctl set_policy ha-two <span class="string">&quot;^two\.&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以在控制台上<code>admin</code>中的Policies中看到我们配置的镜像集群策略</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082151354.png" alt="image-20220808215158257"></p><p>下面，我们创建一个新的队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082149347.png" alt="image-20220808214913263"></p><p>在任意一个<code>mq</code>控制台查看队列：</p><p>将光标放在<code>+1</code>上可以看到镜像节点。也可点击队列进入队列详细信息中查看</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082154886.png" alt="image-20220808215441819"></p><p><img src="C:\Users\Devil\AppData\Roaming\Typora\typora-user-images\image-20220808221121927.png" alt="image-20220808221121927"></p><hr><h5 id="测试数据共享"><a href="#测试数据共享" class="headerlink" title="测试数据共享"></a>测试数据共享</h5><p>给<code>two.queue</code>发送一条消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082156571.png" alt="image-20220808215620484"></p><p>然后在<code>mq1</code>、<code>mq2</code>、<code>mq3</code>的任意控制台查看消息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082157161.png" alt="image-20220808215717049"></p><h5 id="测试高可用"><a href="#测试高可用" class="headerlink" title="测试高可用"></a>测试高可用</h5><p>现在，我们让two.queue的主节点mq1宕机：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop mq1</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082158235.png" alt="image-20220808215810110"></p><p>查看队列状态：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082158135.png" alt="image-20220808215843071"></p><p>发现<code>two.queue</code>依然是健康的！并且其主节点切换到了<code>rabbit@mq2</code>上，而且<code>mq3</code>成为了新的镜像节点。</p><h2 id="仲裁队列"><a href="#仲裁队列" class="headerlink" title="仲裁队列"></a>仲裁队列</h2><p>从RabbitMQ 3.8版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。他是用来替代镜像模式的（因为镜像模式并非强一致性，可能会发生数据丢失即使概率不大）。</p><p>仲裁队列具有以下特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致性</li></ul><h3 id="添加仲裁队列"><a href="#添加仲裁队列" class="headerlink" title="添加仲裁队列"></a>添加仲裁队列</h3><p>在任意控制台添加一个队列，一定要选择队列类型为Quorum类型。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082207516.png" alt="image-20220808220717424"></p><p>在任意控制台查看队列：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082211923.png" alt="image-20220808221155857"></p><p>可以看到，仲裁队列的 + 2字样。代表这个队列有2个镜像节点。</p><p>因为仲裁队列默认的镜像数为5。如果你的集群有7个节点，那么镜像数肯定是5；而我们集群只有3个节点，因此镜像数量就是3.</p><p>查看队列详细信息</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208082212023.png" alt="image-20220808221222923"></p><p>可以看到主节点和所有成员，除去主节点其余的都是从节点（镜像）。</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>测试情况参考镜像集群的测试，效果相同。</p><h3 id="SpringAMQP创建仲裁队列"><a href="#SpringAMQP创建仲裁队列" class="headerlink" title="SpringAMQP创建仲裁队列"></a>SpringAMQP创建仲裁队列</h3><p>在创建仲裁队列之前，首先需要配置连接集群。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line"><span class="string">.....</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8071,36.137.128.27:8072,36.137.128.27:8073</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="string">......</span></span><br></pre></td></tr></table></figure><p>创建仲裁队列</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuorumQueueConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">quorumQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;quorum.queue2&quot;</span>)</span><br><span class="line">                .quorum() <span class="comment">//设置为仲裁队列</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发送消息与正常向队列发送消息无异</strong></p><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><blockquote><p><code>github</code>示例代码地址：<a href="https://github.com/Devildyw/RabbitMQ-Study">https://github.com/Devildyw/RabbitMQ-Study</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="消息队列" scheme="https://devildyw.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="中间件" scheme="https://devildyw.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Bus</title>
    <link href="https://devildyw.github.io/2022/07/29/Spring%20Cloud-Bus/"/>
    <id>https://devildyw.github.io/2022/07/29/Spring%20Cloud-Bus/</id>
    <published>2022-07-29T14:58:23.000Z</published>
    <updated>2022-08-10T06:10:57.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud-Bus"></a>Spring Cloud-Bus</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由<code>Spring Cloud Config</code>我们知道单单靠它之能实现手动的分布式微服务配置的动态刷新，但这依然够大部分项目的使用。如果想要提高灵活度，让配置更加方便的更新就需要引入我们的消息总线了—–Spring Cloud Bus</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Spring Cloud Bus</code> 配合 <code>Spring Cloud Config</code>使用可以真正意义上实现分布式微服务配置的自动动态刷新。</p><p>Spring Cloud-Bus 支持两种消息代理：<code>RibbitMQ</code>和<code>Kafka</code></p><blockquote><p>利用消息总线触发一个<strong>客户端 &#x2F;busrefresh</strong> ，而刷新所有的 <code>Config</code> 客户端的配置，如下图：</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729230739446.png" alt="image-20220729230739446"></p><p><code>Spring Cloud Bus</code>是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。<code>Spring Cloud Bus</code>目前支持<code>RabbitMQ</code>和<code>Kafka</code>。</p><h3 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h3><p><code>Spring Cloud Bus</code>能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><blockquote><p>利用消息总线触发一个<strong>服务端 <code>Config</code> Server 的 &#x2F;busrefresh</strong> ，而刷新所有的 <code>Config</code> 客户端的配置，如下：</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/g0txxiwx8h.jpeg" alt="img"></p><h3 id="为什么被称作总线"><a href="#为什么被称作总线" class="headerlink" title="为什么被称作总线"></a>为什么被称作总线</h3><h4 id="什么是总线"><a href="#什么是总线" class="headerlink" title="什么是总线"></a>什么是总线</h4><p>在微服务架构的系统中，通常会使用<strong>轻量级的消息代理</strong>来构建一个<strong>共用的消息主题</strong>，并让系统中所有微服务示例都连接上来。由于<strong>该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。</strong>在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p><code>ConfigClient</code>实例都监听<code>MQ</code>中同一个topic(默认是<code>Spring Cloud Bus</code>)。当一个服务刷新数据的时候，他会把这个信息放入到Topic中，这样其它监听统一Topic的服务就能得到通知，然后去更新自身的配置。</p><h2 id="RabbitMQ-环境配置"><a href="#RabbitMQ-环境配置" class="headerlink" title="RabbitMQ 环境配置"></a>RabbitMQ 环境配置</h2><p>Docker搭建<code>RabbitMQ</code>环境：<a href="https://devildyw.github.io/2022/07/29/RabbitMQ/#%E5%AE%89%E8%A3%85"><code>RabbitMQ</code>环境搭建</a></p><h2 id="Spring-Cloud-Bus-动态刷新全局广播"><a href="#Spring-Cloud-Bus-动态刷新全局广播" class="headerlink" title="Spring Cloud Bus 动态刷新全局广播"></a>Spring Cloud Bus 动态刷新全局广播</h2><blockquote><p>Spring Cloud Bus 提供了两个端点，<code>/actuator/busrefresh</code>分别<code>/actuator/busenv</code> 对应于 Spring Cloud Commons 中的各个执行器 <code>/actuator/refresh</code>端点<code>/actuator/env</code>。</p></blockquote><p>为了演示广播效果，以Spring Cloud Config 的客户端为准，再创建一个客户端<code>Cloud-config-client3366</code></p><ol><li><p>创建工程<code>Cloud-config-client3366</code></p></li><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-08-Config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-config-client3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bootstrap--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">application</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称  上述三个综合：master分支上application-dev.yml的配置文件被</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k 上述综合 == http://localhost:3344/master/application-dev.yml</span></span><br><span class="line">  <span class="comment">#rabbitmq配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="comment">#暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类以及控制器类都与3355一致。</p></li></ol><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>有两种设计思想</p><ol><li><p>利用消息总线<strong>触发一个客户端&#x2F;busrefresh</strong>,而刷新所有客户端的配置</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101254513.png" alt="image-20220810125426474"></p></li><li><p>利用消息总线**触发一个服务端<code>ConfigServer</code>**的&#x2F;busrefresh端点,而刷新所有客户端的配置（更加推荐）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101254564.png" alt="image-20220810125421521"></p></li></ol><p>第二种架构显然更加合适，第一种不合适的原因如下：</p><blockquote><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新职责</li><li>破坏了微服务各节点的对等性</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li></ul></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置中心添加消息总线支持"><a href="#配置中心添加消息总线支持" class="headerlink" title="配置中心添加消息总线支持"></a>配置中心添加消息总线支持</h4><ol><li><p><code>pom.xml</code>添加依赖<code>spring-boot-starter-amqp</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>添加<code>rabbitmq</code>相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmq配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置 暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">busrefresh</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3355客户端添加消息总线的支持"><a href="#3355客户端添加消息总线的支持" class="headerlink" title="3355客户端添加消息总线的支持"></a>3355客户端添加消息总线的支持</h4><ol><li><p><code>pom.xml</code>添加依赖<code>spring-boot-starter-amqp</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>添加<code>rabbitmq</code>相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmq配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3366客户端添加消息总线的支持"><a href="#3366客户端添加消息总线的支持" class="headerlink" title="3366客户端添加消息总线的支持"></a>3366客户端添加消息总线的支持</h4><ol><li><p><code>pom.xml</code>添加依赖<code>spring-boot-starter-amqp</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>添加<code>rabbitmq</code>相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmq配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8071</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动注册中心，配置中心，客户端（3355、3366）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101308053.png" alt="image-20220810130845013"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101311029.png" alt="image-20220810131100993"></p><p>测试当前未修改值，客户端是否都能拿到配置文件信息</p><p><code>get:http://localhost:3366/configInfo</code></p><p><code>get:http://localhost:3355/configInfo</code></p><p>结果</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=4</span><br></pre></td></tr></table></figure><p>修改<code>Github</code>上配置文件增加版本号到5</p><p>调用接口<code>post:http://localhost:3344/actuator/busrefresh</code>刷新配置</p><p>再次测试</p><p><code>get:http://localhost:3366/configInfo</code></p><p><code>get:http://localhost:3355/configInfo</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=5</span><br></pre></td></tr></table></figure><p>通过调用调用接口<code>http://localhost:3344/actuator/busrefresh</code>接口，成功的刷新了配置中心下所有的服务的配置文件。<strong>一次发送，处处生效</strong></p><h2 id="Spring-Cloud-Bus-动态刷新定点通知"><a href="#Spring-Cloud-Bus-动态刷新定点通知" class="headerlink" title="Spring Cloud Bus 动态刷新定点通知"></a>Spring Cloud Bus 动态刷新定点通知</h2><p>指定具体某一个实例生效而不是全部，对个别微服务进行差异化配置。</p><p>应用程序的每个实例都有一个服务 ID，它的值可以设置， <code>spring.cloud.bus.id</code>并且它的值应该是一个以冒号分隔的标识符列表，从最不具体到最具体。默认值是从环境构造的<code>spring.application.name</code>和 <code>server.port</code>（或<code>spring.application.index</code>，如果设置）的组合。ID 的默认值以 的形式构造<code>app:index:id</code>，其中：</p><ul><li><code>app</code>是<code>vcap.application.name</code>（如果它存在），或者<code>spring.application.name</code></li><li><code>index</code>是<code>vcap.application.instance_index</code>（ 如果存在）, <code>spring.application.index</code>, <code>local.server.port</code>, <code>server.port</code>, 或<code>0</code>(按顺序)。</li><li><code>id</code>是<code>vcap.application.instance_id</code>（如果存在）或随机值。</li></ul><p>Spring Cloud Bus 的 <strong>HTTP restful接口</strong> 接受<strong>“目标”</strong>路径参数，例如 <code>/busrefresh/customers:9000</code>，其中<code>destination</code>是服务 ID。如果 ID 由总线上的一个实例拥有，它会处理该消息，而所有其他实例都会忽略它。依次做到配置的差异化处理</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>获取3355、3366初始的配置信息</p><p><code>get: http://localhost:3355/configInfo</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=6</span><br></pre></td></tr></table></figure><p><code>get: http://localhost:3366/configInfo</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=6</span><br></pre></td></tr></table></figure><p>修改<code>github</code>中配置文件的版本号</p><p>我们这里只修改3366客户端的配置文件，与3355做对比；<strong>调用Spring Cloud Bus提供的<code>RestFul</code>接口 <code>post:http://localhost:3344/actuator/busrefresh/config-client:3366</code>对3366客户端做差异化更新配置。</strong></p><blockquote><p>这里的<code>destination</code>由<code>$&#123;spring.application.name&#125;:ip</code>组成</p></blockquote><p>更新完成后再次获取3355、3366配置信息</p><p><code>get: http://localhost:3355/configInfo</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=6</span><br></pre></td></tr></table></figure><p><code>get: http://localhost:3366/configInfo</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">master branch,springcloud-config/config-dev.yml version=7</span><br></pre></td></tr></table></figure><p><strong>成功完成动态更新定点通知</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208101407344.png" alt="image-20220810140731282"></p><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><blockquote><p><code>github</code>示例代码地址：<a href="https://github.com/Devildyw/SpringCloud-demo/tree/master/Cloud-08-Config">https://github.com/Devildyw/SpringCloud-demo/tree/master/Cloud-08-Config</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Bus&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Bus&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Bus&quot;&gt;&lt;/a&gt;Spring Cloud-Bus&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="消息总线" scheme="https://devildyw.github.io/categories/%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Config</title>
    <link href="https://devildyw.github.io/2022/07/29/Spring%20Cloud-Config/"/>
    <id>https://devildyw.github.io/2022/07/29/Spring%20Cloud-Config/</id>
    <published>2022-07-29T10:16:47.000Z</published>
    <updated>2022-07-29T15:45:12.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud-Config"></a>Spring Cloud-Config</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>分布式系统面临的配置问题</strong></p><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设置是必不可少的。</p><p><strong>Spring Cloud提供了<code>ConfigServer</code>来解决这个问题。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729182943814.png" alt="image-20220729182943814"></p><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a><strong>是什么？</strong></h3><p>Spring Cloud <code>Config</code>为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong>。</p><h3 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a><strong>能干嘛？</strong></h3><ul><li><p>集中管理配置文件</p></li><li><p>不同环境不同配置，动态化的配置更新，分环境部署比如<code>dev/test/prod/beta/release</code></p></li><li><p>运行期间动态调整配置，不再需要在每个服务部署的机器上配置文件，服务回向配置中心统一拉取配置自己的信息</p></li><li><p>当配置发生变动，服务不需要重启即可感知到配置的变化并应用新的配置。</p></li><li><p><strong>将配置信息以REST接口的形式暴露</strong></p><p>post、curl访问刷新即可</p></li></ul><h3 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><strong>怎么使用？</strong></h3><p>Spring Cloud <code>Config</code>分为<strong>客户端和服务端两个部分</strong>。</p><p>服务端也称为<strong>分布式配置中心，他是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息，加密&#x2F;解密信息等访问接口。</p><p>客户端则是通过指定的配置信息来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置，服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端供来方便的管理和访问配置内容。</p><blockquote><p>分布式配置中心，将微服务们共有的配置信息集中管理起来，微服务通过在配置中心中获取这部分配置信息，特有的部分配置信息则自己维护。</p></blockquote><h2 id="Spring-Cloud-Config配置总控中心搭建"><a href="#Spring-Cloud-Config配置总控中心搭建" class="headerlink" title="Spring Cloud Config配置总控中心搭建"></a>Spring Cloud Config配置总控中心搭建</h2><blockquote><p>由于<code>SpringCloud Config</code>默认使用Git来存储配置文件（也有其它方式，比如支持<code>svn</code>和本地文件，但最推荐的还是Git，而且使用的是<code>http/https</code>访问的形式），所以我们选择于<code>Github</code>整合。</p></blockquote><ol><li><p>使用自己的账号在<code>Github</code>上创建一个名为<code>springcloud-config</code>的新<code>Repository</code></p></li><li><p>由上一步获得刚建的git远程仓库地址</p><p><code>git@github.com:Devildyw/springcloud-config.git</code></p></li><li><p>本地硬盘目录上新建git仓库并clone</p><ul><li>本地地址：<code>E:\config\SpringCloud</code></li></ul></li><li><p>此时在本地E盘符下<code>E:\config\SpringCloud、springcloud-config</code></p><ul><li><p>创建表示多环境的配置文件</p></li><li><p>保存格式必须为<code>UTF-8</code></p></li><li><p>如果需要修改，此处模拟运维人员操作<code>git</code>和<code>github</code></p></li><li><p><code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-dev.yml version=1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-prod.yml version=1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-test.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-test.yml version=1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>新建后<code>git push</code>上传到远程仓库</p></li></ul></li><li><p>新建父工程模块<code>Cloud-08-Config</code></p></li><li><p><code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-08-Config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建子工程模块<code>Cloud-config-center3344</code></p></li><li><p><code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-08-Config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-config-center334<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/Devildyw/springcloud-config.git</span> <span class="comment">#Github上面git仓库的名字</span></span><br><span class="line">          <span class="attr">skipSslValidation:</span> <span class="literal">true</span> <span class="comment"># 跳过 SSL 证书验证</span></span><br><span class="line">        <span class="comment">#### 搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><p><code>ConfigCenterMain3344</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//关键</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigCenterMain3344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试<code>Cloud-config-center3344</code> <code>Cloud-eureka-server7001</code></p><p>访问<code>http://localhost:3344/master/application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">master</span> <span class="string">branch,springcloud-config/config-dev.yml</span> <span class="string">version=1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取成功</p></li></ol><h2 id="配置读取规则"><a href="#配置读取规则" class="headerlink" title="配置读取规则"></a>配置读取规则</h2><p>Spring Cloud官网</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><p><strong><code>/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</code></strong></p><p><strong>该方式最为推荐</strong></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">示例</span><br><span class="line">http://localhost:3344/master/application-dev.yml</span><br><span class="line">http://localhost:3344/master/application-test.yml</span><br><span class="line">http://localhost:3344/master/application-prod.yml</span><br></pre></td></tr></table></figure><p><strong><code>/&#123;application&#125;-&#123;profile&#125;.yml</code></strong></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">示例</span><br><span class="line">http://localhost:3344/application-test.yml</span><br><span class="line">http://localhost:3344/application-dev.yml</span><br><span class="line">http://localhost:3344/application-prod.yml</span><br></pre></td></tr></table></figure><p><strong><code>/&#123;application&#125;-&#123;profile&#125;[/&#123;label&#125;]</code></strong></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">示例</span><br><span class="line">http://localhost:3344/application/dev/master</span><br><span class="line">http://localhost:3344/application/test/master</span><br><span class="line">http://localhost:3344/application/prod/master</span><br></pre></td></tr></table></figure><p>该方式获取到的配置的返回结果也不相同。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5bba7057164c82bf3f4857d8e3992c8187faadad&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;propertySources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Devildyw/springcloud-config.git/file:C:\\Users\\Devil\\AppData\\Local\\Temp\\config-repo-4675055522948308019\\application-test.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;config.info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master branch,springcloud-config/config-test.yml version=1&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p><strong>其余两种就是<code>properites</code>配置文件的版本只是在后缀上有所区别。</strong></p><h2 id="Bootstrap-yml"><a href="#Bootstrap-yml" class="headerlink" title="Bootstrap.yml"></a><code>Bootstrap.yml</code></h2><p>我们平时编写<code>SpringBoot</code>项目都会使用<code>application.yml</code>配置文件来配置项目中所需要的配置。</p><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>若<code>application.yml</code> 和<code>bootstrap.yml</code> 在<strong>同一目录下</strong>：**<code>bootstrap.yml</code> 先加载 <code>application.yml</code>后加载**</p><p><code>bootstrap.yml</code> 用于应用程序上下文的引导阶段。<code>bootstrap.yml</code>由父Spring <code>ApplicationContext</code>加载。</p><blockquote><p><code>application.yml</code>是用户级的资源配置项</p><p><code>bootstrap.yml</code>是系统级的，<strong>优先级更加高</strong></p></blockquote><h3 id="配置区别"><a href="#配置区别" class="headerlink" title="配置区别"></a>配置区别</h3><p><strong>bootstrap是spring cloud的配置上下文加载。由spring-cloud-content包加载。</strong></p><p><strong>application是spring boot的配置加载。</strong></p><p><code>bootstrap.yml</code> 和 <code>application.yml</code> 都可以用来配置参数。</p><p><code>bootstrap.yml</code> <strong>用来程序引导时执行，应用于更加早期配置信息读取。可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。一旦<code>bootStrap.yml</code> 被加载，则内容不会被覆盖。</strong></p><p><code>application.yml</code> <strong>可以用来定义应用级别的， 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</strong></p><h3 id="属性覆盖问题"><a href="#属性覆盖问题" class="headerlink" title="属性覆盖问题"></a>属性覆盖问题</h3><ul><li><p>启动上下文时，Spring Cloud 会创建一个 Bootstrap Context，作为 Spring 应用的 Application Context 的父上下文。</p></li><li><p>初始化的时候，Bootstrap Context 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Environment。Bootstrap 属性有高优先级，默认情况下，<strong>它们不会被本地配置覆盖</strong>。</p></li><li><p>也就是说如果加载的 <code>application.yml</code> 的内容标签与 bootstrap 的标签一致，<strong>application 也不会覆盖 bootstrap</strong>，而 <code>application.yml</code> 里面的内容可以动态替换。</p></li></ul><h3 id="为什么Spring-Cloud-Config-Client使用bootstrap-yml来编写配置"><a href="#为什么Spring-Cloud-Config-Client使用bootstrap-yml来编写配置" class="headerlink" title="为什么Spring Cloud Config Client使用bootstrap.yml来编写配置"></a>为什么Spring Cloud <code>Config</code> Client使用<code>bootstrap.yml</code>来编写配置</h3><p><strong>当使用Spring Cloud的时候，配置信息一般是从配置中心获取加载的，为了取得配置信息（比如密码等），你需要一些提早的或引导配置。因此把配置中心信息放在<code>bootstrap.yml</code>中，用来加载真正需要的配置信息。同时也不容易让这些配置信息被新的配置信息所覆盖。</strong></p><p>比如：</p><p>客户端的服务需要数据库的配置信息，而数据库的配置信息是统一由配置中心管理的，我们必须要现在<code>bootstrap.yml</code>配置了配置中心中的信息，才能在服务启动之前的程序引导阶段将类似数据库配置之类的信息加载。否则程序会因为缺少配置而报错。</p><h2 id="Config客户端配置与测试"><a href="#Config客户端配置与测试" class="headerlink" title="Config客户端配置与测试"></a><code>Config</code>客户端配置与测试</h2><ol><li><p>创建子工程<code>Cloud-config-client3355</code></p></li><li><p><code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-08-Config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-config-client3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bootstrap--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>bootstrap.yml</code>配置</p><p><strong>要将Client模块下的<code>application.yml</code>文件改为<code>bootstrap.yml</code>，这是很关键的</strong></p><p>因为<code>bootstrap.yml</code>是比<code>application.yml</code>先加载的。<code>bootstrap.yml</code>优先级高于<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">application</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称  上述三个综合：master分支上application-dev.yml的配置文件被</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k 上述综合 == http://localhost:3344/master/application-dev.yml</span></span><br><span class="line"><span class="comment"># 服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>主启动类<code>ConfigClientMain3355</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientMain3355</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务类 <code>ConfigClientController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-29-21:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p>测试接口 <code>http://localhost:3355/configInfo</code> 通过该接口获取配置信息<code>config.info</code>并将其返回。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">master branch<span class="punctuation">,</span>springcloud-config/config-dev.yml version=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>成功获取了配置文件中的<code>config.info</code>信息</p></li></ol><h3 id="分布式配置的动态刷新问题"><a href="#分布式配置的动态刷新问题" class="headerlink" title="分布式配置的动态刷新问题"></a>分布式配置的动态刷新问题</h3><p>我们的运维人员对<code>github</code>上的配置文件进行了修改，访问我们的配置中心能够时刻获取到最新的数据，但是当我们再次访问客户端时却还是修改前的数据。<strong>问题随时而来，分布式配置的动态刷新。</strong></p><ol><li>Linux运维修改<code>Github</code>上的配置文件内容做调整</li><li>刷新3344，发现<code>ConfigServer</code>配置中心立刻响应</li><li>刷新3355，发现<code>ConfigClient</code>客户端没有任何响应（指获取的配置文件信息并没有改变）</li><li>3355没有变化除非自己重启或者重新加载</li><li>难道每次运维修改配置文件，客户端都要重启？？</li></ol><h2 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a><code>Config</code>客户端之动态刷新</h2><p>为了避免每次修改配置文件都要重新启动服务，我们配置<code>Config</code>客户端动态刷新</p><p>修改<code>Cloud-config-client3355</code></p><ol><li><p>检查<code>pom.xml</code>是否加入<code>actuator</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>bootstrap.yml</code>暴露监控端口</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>完整的配置文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">application</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称  上述三个综合：master分支上application-dev.yml的配置文件被</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k 上述综合 == http://localhost:3344/master/application-dev.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在业务类<code>ConfigClentController</code>类头上添加<code>@RefreshScope</code>用以带有该注解的Bean可以在运行时刷新。</p></li><li><p><strong>但是光加这些还没有用，启动过后它还是不会自动地更新配置，此时想起我们刚刚提到的<code>actuator</code>。为了动态更新配置，运维人员需要以<code>post</code>请求调用<code>http://localhost:3355/actuator/refresh</code>手动刷新客户端获取新的配置信息，客户端再通过<code>@RefreshScope</code>的功能在客户端执行&#x2F;refresh的时候就会更新此类下面的变量值。</strong></p></li><li><p>此时我们修改<code>github</code>中的数据将<code>application-dev.yml</code>版本号改为4</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729221744155.png" alt="image-20220729221744155"></p><p>在不刷新3355的情况下调用<code>http://localhost:3355/configInfo</code> </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">master branch<span class="punctuation">,</span>springcloud-config/config-dev.yml version=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以发现并没有获得最新的配置信息</p></li><li><p>调用<code>http://localhost:3355/actuator/refresh</code>刷新3355</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;config.client.version&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;config.info&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>再次访问<code>http://localhost:3355/configInfo</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">master branch<span class="punctuation">,</span>springcloud-config/config-dev.yml version=<span class="number">4</span></span><br></pre></td></tr></table></figure><p>配置信息更新了。</p></li></ol><h3 id="手动动态刷新有什么问题"><a href="#手动动态刷新有什么问题" class="headerlink" title="手动动态刷新有什么问题"></a>手动动态刷新有什么问题</h3><ol><li>假如有多个微服务客户端，每个微服务更新配置都要手动执行一次<code>post</code>请求来刷新，这样还是会十分麻烦。</li><li>能否广播，一次通知，处处生效？</li><li>如何大范围的自动刷新？</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Config&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Config&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Config&quot;&gt;&lt;/a&gt;Spring Cloud-Config&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="配置中心" scheme="https://devildyw.github.io/categories/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Gateway</title>
    <link href="https://devildyw.github.io/2022/07/27/Spring%20Cloud-Gateway/"/>
    <id>https://devildyw.github.io/2022/07/27/Spring%20Cloud-Gateway/</id>
    <published>2022-07-27T15:50:37.000Z</published>
    <updated>2022-07-29T15:45:40.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud-Gateway"></a>Spring Cloud-Gateway</h1><blockquote><p>Spring Cloud全家桶中有一个很重要的组件就是网关，在1.x版本中都是采用Zuul网关; 但在2.x版本中，zuul的升级一直跳票，Spring Cloud最后自己研发了一个网关替代Zuul。Gateway是原Zuul1.x版的替代。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/cloud-diagram-1a4cad7294b4452864b5ff57175dd983.svg" alt="Spring Cloud diagram"></p><blockquote><p>zuul官网：<a href="https://github.com/Netflix/zuul/wiki">zuul-wiki</a></p><p>Gateway官网：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">Spring Cloud Gateway</a></p></blockquote><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gateway是在Spring生态系统之上构建的<code>API</code>网关服务，基于Spring 5，<code>Spring Boot2</code>和 Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对<code>API</code>进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p><blockquote><p>This project provides an <code>API </code>Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to <code>APIs</code> and provide cross cutting concerns to them such as: security, monitoring&#x2F;metrics, and resiliency.</p><p>翻译： </p><p>Spring Cloud Gateway 是Spring Cloud的一个全新项目，基于<code>Spring5.0</code>+<code>Spring Boot 2.0</code>和<code>Project Reactor </code>等技术开发的网关，它旨在为微服务提供一种简单有效的统一的<code>API</code>路由管理方式。例如：安全性、监控&#x2F;指标和弹性。</p></blockquote><p>Spring Cloud Gateway 作为Spring Cloud生态系统中的网关，目标是替代<code>Zuul</code>，在Spring Cloud 2.0以上的版本中，没有对新版本的<code>Zuul</code> 2.0以上最新高性能版本进行集成，仍然还是使用的<code>Zuul 1.x</code>非Reactor模式的老版本。而为了提升网关的性能，Spring Cloud Gateway是基于<code>WebFlux</code>框架实现的，而<code>WebFlux</code>框架底层则使用了高性能的Reactor模式通信框架Netty。</p><h3 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h3><p>在微服务架构中，一个系统往往由多个微服务组成，而这些服务可能部署在不同机房、不同地区、不同域名下。这种情况下，客户端（例如浏览器、手机、软件工具等）想要直接请求这些服务，就需要知道它们具体的地址信息，例如 IP 地址、端口号等。</p><p>这种客户端直接请求服务的方式存在以下问题：</p><ul><li>当服务数量众多时，客户端需要维护大量的服务地址，这对于客户端来说，是非常繁琐复杂的。</li><li>在某些场景下可能会存在跨域请求的问题。</li><li>身份认证的难度大，每个微服务需要独立认证。</li></ul><p><strong>我们可以通过 API 网关来解决这些问题</strong></p><hr><h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><p>API 网关是一个搭建在客户端和微服务之间的服务，我们可以在 API 网关中处理一些非业务功能的逻辑，例如权限验证、监控、缓存、请求路由等。</p><p>API 网关就像整个微服务系统的门面一样，是系统对外的唯一入口。有了它，客户端会先将请求发送到 API 网关，然后由 API 网关根据请求的标识信息将请求转发到微服务实例。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/101P46212-0.png" alt="img"></p><hr><h3 id="网关能干嘛"><a href="#网关能干嘛" class="headerlink" title="网关能干嘛"></a>网关能干嘛</h3><ol><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li></ol><p>​    …….</p><p><strong>网关在服务中所处的位置</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220728202107925.png" alt="image-20220728202107925"></p><h3 id="为什么要选择Gateway"><a href="#为什么要选择Gateway" class="headerlink" title="为什么要选择Gateway"></a>为什么要选择Gateway</h3><ol><li><p><code>netflix</code>不太靠谱，<code>zuul2.0</code>一直跳票，迟迟不发布</p><ul><li>一方面因为<code>Zuul1.0</code>已经进入维护阶段，而且Gateway是Spring Cloud团队研发的，是重点关注产品，而且很多功能<code>Zuul</code>都没有，用起来也非常的简单便捷。</li><li>Gateway是基于异步非阻塞模型上进行开发的，性能十分优秀。虽然<code>Netflix</code>早就发布了最新的<code>Zuul 2.x</code>，但Spring Cloud貌似没有整合计划。而且<code>Netflix</code>相关组件都宣布进入维护期；不知前景如何？</li><li>多方面综合考虑Gateway是很理想的网关选择。</li></ul></li><li><p>Spring Cloud Gateway具有如下特性</p><ul><li><strong>基于Spring Framework 5，Project Reactor和Spring Boot 2.0+进行构建。</strong>天生对Spring框架的支持好；</li><li>动态路由：能够匹配任何请求属性；</li><li>可以对路由执行Predicate（断言）和Filter（过滤器）；</li><li>集成<code>Hystrix</code>的断路器功能；</li><li>集成Spring Cloud服务发现功能；</li><li>易于编写的Predicate（断言）和Filter（过滤器）；</li><li>请求限流功能；</li><li>支持路径重写；</li></ul></li><li><p>Spring Cloud Gateway与<code>Zuul</code>的区别</p><p>在Spring Cloud <code>Finchley</code>正式版之前,Spring Cloud的推荐网关是<code>Netflix</code>提供的<code>Zuul</code>：</p><ol><li><code>Zuul1.x</code>，是一个基于阻塞I&#x2F;O的<code>API</code> Gateway</li><li><code>Zuul1.x</code>基于<code>Servlet2.5</code>使用阻塞架构它不支持任何长连接(如 <code>WebSocket</code>)<code>Zuul</code>的设计模式和<code>Nginx</code>较像，每次I&#x2F;O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是<code>Nginx</code>用C++实现，<code>Zuul</code>用Java实现，而<code>JVM</code>本身会有第一次加载较慢的情况，是的<code>Zuul</code>的性能相对较差。</li><li><code>Zuul2.x</code>理念更先进，想基于Netty非阻塞和支持长连接，但Spring Cloud目前还没有整合。<code>Zuul2.x</code>的性能较<code>Zuul1.x</code>有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway的RPS（每秒请求数）是<code>Zuul</code>的1.6倍。</li><li>Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot 2 之上，使用非阻塞<code>API</code>。</li><li>Spring Cloud Gateway 还支持 <code>WebSocket</code>，并且与Spring紧密集成拥有更好的开发体验。</li></ol></li></ol><h3 id="Zuul1-x模型"><a href="#Zuul1-x模型" class="headerlink" title="Zuul1.x模型"></a><code>Zuul1.x</code>模型</h3><p>Spring Cloud中集成的<code>Zuul</code>版本，采用的是Tomcat容器，使用的是传统的<code>Servlet</code> IO处理模型</p><p><strong><code>Servlet</code>的生命周期</strong></p><p><code>Servlet</code>由<code>Servlet</code> container进行生命周期管理。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220728213928259.png" alt="image-20220728213928259"></p><p>container启动时创建<code>servlet</code>对象并调用<code>servlet</code> <code>init()</code>进行初始化；</p><p>container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用<code>service()</code>。</p><p>container关闭时调用<code>servlet</code> <code>destory()</code>销毁<code>servlet</code>；</p><p><strong>上述模式的缺点：</strong></p><p><code>servlet</code>是一个简单的网络IO模型，当请求进入<code>servlet</code> container时，<code>servlet</code> container就会为其绑定一个线程，并在<strong>并发不高的场景下</strong>这种模型是适用的。但是一旦高并发（比如使用<code>jmeter</code>进行高并发测压）,线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个request分配一个线程（servlet模型），只需要一个或者几个线程就能应对极大并发的请求，这种业务场景下<code>servlet</code>模型没有优势。</p><p>所以<code>Zuul1.x</code>是基于<code>servlet</code>之上德一个阻塞式处理模型，即Spring实现了处理所有request请求的一个<code>servlet</code>（<code>DispatchServlet</code>）并由该<code>servlet</code>阻塞式处理请求。所以Spring Cloud <code>Zuul</code>无法摆脱<code>servlet</code>模型的弊端。</p><h3 id="Gateway模型"><a href="#Gateway模型" class="headerlink" title="Gateway模型"></a>Gateway模型</h3><p>Spring Cloud Gateway是基于<code>WebFlux</code>框架实现的，而<code>WebFlux</code>框架底层则使用了高性能的Reactor模式通信框架Netty。</p><h4 id="Spring-WebFlux"><a href="#Spring-WebFlux" class="headerlink" title="Spring WebFlux"></a>Spring <code>WebFlux</code></h4><blockquote><p>The original web framework included in the Spring Framework, Spring Web <code>MVC</code>, was purpose-built for the <code>Servlet API </code>and <code>Servlet</code> containers. The reactive-stack web framework, Spring<code> WebFlux</code>, was added later in version 5.0. It is fully non-blocking, supports <a href="https://www.reactive-streams.org/">Reactive Streams</a> back pressure, and runs on such servers as Netty, Undertow, and <code>Servlet</code> 3.1+ containers.</p><p>Both web frameworks mirror the names of their source modules (<a href="https://github.com/spring-projects/spring-framework/tree/main/spring-webmvc"><code>spring-webmvc</code></a> and <a href="https://github.com/spring-projects/spring-framework/tree/main/spring-webflux"><code>spring-webflux</code></a>) and co-exist side by side in the Spring Framework. Each module is optional. Applications can use one or the other module or, in some cases, both — for example, Spring <code>MVC</code> controllers with the reactive <code>WebClient</code>.</p><p>翻译：</p><p>Spring Framework 中包含的原始 Web 框架 Spring Web <code>MVC</code> 是专门为 <code>Servlet API</code> 和 <code>Servlet</code> 容器构建的。反应式堆栈 Web 框架 Spring <code>WebFlux</code> 是在 5.0 版中添加的。它是完全无阻塞的，支持 <a href="https://www.reactive-streams.org/"><code>Reactive Streams</code></a>背压，并且可以在 Netty、Undertow 和 <code>Servlet</code> 3.1+ 容器等服务器上运行。</p><p>两个 Web 框架都反映了它们的源模块（<a href="https://github.com/spring-projects/spring-framework/tree/main/spring-webmvc"><code>spring-webmvc</code></a>和 <a href="https://github.com/spring-projects/spring-framework/tree/main/spring-webflux"><code>spring-webflux</code></a>）的名称，并在 Spring 框架中并存。每个模块都是可选的。应用程序可以使用一个或另一个模块，或者在某些情况下，两者都使用——例如，带有响应式的 Spring <code>MVC</code> 控制器<code>WebClient</code>。</p></blockquote><p>传统的Web框架，比如说：<code>struts2</code>，<code>springmvc</code>等都是基于<code>Servlet API</code>与<code>Servlet</code>容器基础之上运行的。</p><p>在<code>Servlet3.1</code>之后有了异步非阻塞的支持。而<code>WebFlux</code>是一个典型非阻塞异步的框架，它的核心式基于Reactor的相关<code>API</code>实现的。相对于传统的web框架来说，它可以运行咋i注入Netty，Undertow和<code>Servlet3.1</code>的容器上。非阻塞式+函数式编程（<code>Spring5</code>必须让你使用<code>jdk1.8</code>）</p><p>Spring <code>WebFlux</code>是Spring 5.0引入的新的响应式框架，区别于Spring <code>MVC</code>，它不需要依赖<code>Servlet API</code>，他是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p><h2 id="Gateway三大核心概念"><a href="#Gateway三大核心概念" class="headerlink" title="Gateway三大核心概念"></a>Gateway三大核心概念</h2><ol><li><p><strong>Route（路由）</strong></p><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p></li><li><p><strong>Predicate（断言</strong>）</p><p>参考的是<code>java8</code>的<code>java.util.function.Predicate</code>开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p></li><li><p><strong>Filter（过滤）</strong></p><p>指的是Spring框架中<code>GatewayFilter</code>的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p></li></ol><p>即Route（路由）包含了Predicate（断言）和Filter（过滤器），如果断言为真才会将请求转发到指定的服务上进行处理，Filter则作为路由成功请求前后对请求的一些列操作。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220728222810287.png" alt="image-20220728222810287"></p><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p><p>predicate就是我们的匹配条件</p><p>而filter，就可以理解为一个无所不能的拦截器。有了这个两个元素，再加上目标<code>uri</code>，就可以实现一个具体的路由了。</p><h2 id="Gateway工作流程"><a href="#Gateway工作流程" class="headerlink" title="Gateway工作流程"></a>Gateway工作流程</h2><p>官网流程图</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/spring_cloud_gateway_diagram.png" alt="Spring Cloud Gateway Diagram"></p><blockquote><p>Clients make requests to Spring Cloud Gateway. If the Gateway Handler Mapping determines that a request matches a route, it is sent to the Gateway Web Handler. This handler runs the request through a filter chain that is specific to the request. The reason the filters are divided by the dotted line is that filters can run logic both before and after the proxy request is sent. All “pre” filter logic is executed. Then the proxy request is made. After the proxy request is made, the “post” filter logic is run.</p><p>翻译：</p><p>客户端向Spring Cloud Gateway 发出请求。然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。</p><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><p>Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转化等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p></blockquote><p>总而言之，客户端发送到 Spring Cloud Gateway 的请求需要通过一定的匹配条件，才能定位到真正的服务节点。在将请求转发到服务进行处理的过程前后（pre 和 post），我们还可以对请求和响应进行一些精细化控制。</p><p>Predicate 就是路由的匹配条件，而 Filter 就是对请求和响应进行精细化控制的工具。有了这两个元素，再加上目标 URI，就可以实现一个具体的路由了。</p><hr><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><p>创建父工程<code>Cloud-07-Gateway</code></p><p><code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-07-Gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建子工程<code>Cloud-gateway-gateway9527</code></p><p><code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-07-Gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类<code>GatewayMain9527</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayMain9527</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为微服务配置网关</p><p>为<code>cloud-provider-payment8001</code>配置网关，我们目前不想暴露8001端口，希望在8001外面套一层9527，<strong>反向代理</strong>；</p><p>将请求发送到网关，网关根据路由断言再过滤器到指定的服务接口上。</p><p>配置如下，<code>application.yml</code>中添加如下配置。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>         <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br><span class="line">   </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route2   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>         <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure><p>完整配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>         <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route2   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>         <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-server7001</code>、<code>Cloud-eureka-provider-payment8001</code> 、<code>Cloud-gateway-gateway9527</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220728232306135.png" alt="image-20220728232306135"></p><p>测试反向代理</p><p><code>http://localhost:9527/payment/lb</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">8001</span></span><br></pre></td></tr></table></figure><p><code>http://localhost:9527/payment/get/1547504748557492225</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547504748557492225</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编程式配置"><a href="#编程式配置" class="headerlink" title="编程式配置"></a>编程式配置</h3><p>通过配置类中配置<code>RouteLocator</code>来配置路由</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWatConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span>&#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> routeLocatorBuilder.routes();</span><br><span class="line">        <span class="type">RouteLocator</span> <span class="variable">build</span> <span class="operator">=</span> routes.route(<span class="string">&quot;path_routh_dyw&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置之后 只要我们访问<code>localhost:9527/guonei</code>就会将请求转发到<code>http://news.baidu.com/guonei</code>上了。</p><p>编程式配置路由的核心代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">routes.route(<span class="string">&quot;path_routh_dyw&quot;</span>, <span class="comment">//id</span></span><br><span class="line">              r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>) <span class="comment">//路径</span></span><br><span class="line">                      .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)) <span class="comment">//转发路径</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//函数签名</span></span><br><span class="line"><span class="keyword">public</span> Builder <span class="title function_">route</span><span class="params">(String id, Function&lt;PredicateSpec, Buildable&lt;Route&gt;&gt; fn)</span> &#123;</span><br><span class="line">Buildable&lt;Route&gt; routeBuilder = fn.apply(<span class="keyword">new</span> <span class="title class_">RouteSpec</span>(<span class="built_in">this</span>).id(id));</span><br><span class="line">add(routeBuilder);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p><blockquote><p>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p><p>lb:&#x2F;&#x2F;serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</p></blockquote><p>开启动态路由</p><p>修改<code>Cloud-gateway-gateway9527</code> <code>application.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">locator:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改原路由uri为lb:&#x2F;&#x2F;serviceName的格式</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">uri:</span> <span class="string">lb://CLOUD-PAYMENT-SERVICE</span></span><br></pre></td></tr></table></figure><p>完整配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://CLOUD-PAYMENT-SERVICE</span>        <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route2   #路由的ID,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://CLOUD-PAYMENT-SERVICE</span>         <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>          <span class="comment">#断言, 路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><p>重新启动服务<code>Cloud-eureka-server7001</code>、<code>Cloud-eureka-provider-payment8001</code> 、<code>Cloud-gateway-gateway9527</code>、<code>Cloud-eureka-provider-payment8002</code></p><p>测试 <code>http://localhost:9527/payment/lb</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">8001</span></span><br><span class="line"><span class="number">8002</span></span><br><span class="line"><span class="number">8001</span></span><br><span class="line"><span class="number">8002</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>测试成功。</p><hr><h2 id="Predicate-断言"><a href="#Predicate-断言" class="headerlink" title="Predicate 断言"></a>Predicate 断言</h2><p>Spring Cloud Gateway 通过 Predicate 断言来实现 Route 路由的匹配规则。简单点说，Predicate 是路由转发的判断条件，请求只有满足了 Predicate 的条件，才会被转发到指定的服务上进行处理。</p><p>使用 Predicate 断言需要注意以下 3 点：</p><ul><li>Route 路由与 Predicate 断言的对应关系为“一对多”，一个路由可以包含多个不同断言。</li><li>一个请求想要转发到指定的路由上，就必须同时匹配路由上的所有断言。</li><li>当一个请求同时满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/101P42B6-2.png" alt="img"></p><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p><p>Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求得不同属性匹配。多个Route Predicate工厂可以进行组合。</p><p>Spring Cloud Gateway创建Route对象时，使用RoutePredicateFactory创建Predicate对象，Predicate对象可以赋值给Route。Spring Cloud Gateway包含了许多内置得Route Predicate Factories。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729152720990.png" alt="image-20220729152720990"></p><blockquote><p>所有这些为此都匹配HTTP请求得不同属性。多种谓词工厂可以组合，并通过逻辑and。</p></blockquote><p><strong>常见的 Predicate 断言如下表</strong>（假设转发的 URI 为 <code>http://localhost:8001</code>）。</p><table><thead><tr><th align="center">断言</th><th align="center">示例</th><th align="center">说明</th><th>参数</th></tr></thead><tbody><tr><td align="center">Path</td><td align="center">- Path&#x3D;&#x2F;dept&#x2F;list&#x2F;**</td><td align="center">当请求路径与 &#x2F;dept&#x2F;list&#x2F;** 匹配时，该请求才能被转发到 <code>http://localhost:8001</code> 上。</td><td>路径匹配字段</td></tr><tr><td align="center">Before</td><td align="center">- Before&#x3D;2021-10-20T11:47:34.255+08:00[Asia&#x2F;Shanghai]</td><td align="center">在 2021 年 10 月 20 日 11 时 47 分 34.255 秒之前的请求，才会被转发到 <code>http://localhost:8001</code> 上。</td><td>一个参数datetime</td></tr><tr><td align="center">After</td><td align="center">- After&#x3D;2021-10-20T11:47:34.255+08:00[Asia&#x2F;Shanghai]</td><td align="center">在 2021 年 10 月 20 日 11 时 47 分 34.255 秒之后的请求，才会被转发到 <code>http://localhost:8001</code> 上。</td><td>一个参数datetime</td></tr><tr><td align="center">Between</td><td align="center">- Between&#x3D;2021-10-20T15:18:33.226+08:00[Asia&#x2F;Shanghai],2021-10-20T15:23:33.226+08:00[Asia&#x2F;Shanghai]</td><td align="center">在 2021 年 10 月 20 日 15 时 18 分 33.226 秒 到 2021 年 10 月 20 日 15 时 23 分 33.226 秒之间的请求，才会被转发到 <code>http://localhost:8001</code> 服务器上。</td><td>两个参数datetime</td></tr><tr><td align="center">Cookie</td><td align="center">- Cookie&#x3D;name,c.biancheng.net</td><td align="center">携带 Cookie 且 Cookie 的内容为 name&#x3D;c.biancheng.net 的请求，才会被转发到 <code>http://localhost:8001 </code>上。</td><td>两个参数，cookie的name和一个<code>Java</code>正则表达式</td></tr><tr><td align="center">Header</td><td align="center">- Header&#x3D;X-Request-Id,\d+</td><td align="center">请求头上携带属性 X-Request-Id 且属性值为整数的请求，才会被转发到 <code>http://localhost:8001</code> 上。</td><td>两个参数，标头和<code>Java</code>正则表达式</td></tr><tr><td align="center">Method</td><td align="center">- Method&#x3D;GET</td><td align="center">只有 GET 请求才会被转发到 <code>http://localhost:8001</code> 上。</td><td>一个参数，请求方法</td></tr><tr><td align="center">Host</td><td align="center">- Host&#x3D;** .somehost.org, **.anotherhost.org</td><td align="center">只有请求的<code>Host</code>满足匹配规则才会被转发到<code>http://localhost:8001</code> 上。</td><td>一个参数，模式匹配的Host字符串</td></tr><tr><td align="center">RemoteAddr</td><td align="center">- RemoteAddr&#x3D;192.168.1.1&#x2F;24 （192.168.1.1是ip地址，24是子网掩码）</td><td align="center">只有请求的IP地址段在所设置的地址段中才会被转发<code>http://localhost:8001</code> 上。</td><td>一个参数，ip地址段</td></tr><tr><td align="center">Query</td><td align="center">- Query&#x3D;green</td><td align="center">只有请求的参数具有给定的名称且值与正则表达式匹配才会被转发<code>http://localhost:8001</code> 上。</td><td>两个参数，一个必须的param和一个可选的<code>Java</code>正则表达式</td></tr></tbody></table><hr><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><p>路由过滤器可用于修改进入得HTTP请求和返回HTTP响应，路由过滤器只能指定路由进行使用。</p><p>Spring Cloud Gateway内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p><p><strong>实际业务编写常常使用自定义过滤器。</strong></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>pre：在业务逻辑之前</li><li>post：在业务逻辑之后</li></ul><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><ul><li>GatewayFilter：单一</li><li>GlobalFilter：全局</li></ul><h3 id="常用的GatewayFilter"><a href="#常用的GatewayFilter" class="headerlink" title="常用的GatewayFilter"></a>常用的GatewayFilter</h3><p>Spring Cloud自带的过滤器</p><p>未完待续。。。</p><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>能干嘛？</p><ul><li>全局日志记录</li><li>统一网关鉴权</li></ul><h4 id="自定义GlobalFilter"><a href="#自定义GlobalFilter" class="headerlink" title="自定义GlobalFilter"></a>自定义GlobalFilter</h4><p>修改<code>Cloud-gateway-gateway9527</code><strong>自定义过滤器实现接口<code>GlobalFilter，Ordered</code></strong></p><p><strong>自定义过滤器的编写类似于Servlet的过滤器编写。</strong></p><ol><li><p>新建包<code>filter</code></p></li><li><p>新建类<code>MyLogGatewayFilter</code>实现GlobalFilter，Ordered接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-29-17:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义全局过滤器演示类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogGatewayFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;***************com in MyLogGatewayFilter:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//获取请求头中“uname”对应值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果为空 则返回响应 状态码为请求未被接受对应的状态码</span></span><br><span class="line">            log.info(<span class="string">&quot;************用户名为null,非法用户  ┭┮﹏┭┮&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="comment">//返回</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不为空 放行请求 请求进入后续过滤器链</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p>测试接口<code>http://localhost:9527/payment/lb?uname=张三</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">8001</span></span><br><span class="line"><span class="number">8002</span></span><br><span class="line"><span class="number">8001</span></span><br><span class="line"><span class="number">8002</span></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729180656549.png" alt="image-20220729180656549"></p><p>测试接口<code>http://localhost:9527/payment/lb</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729180854125.png" alt="image-20220729180854125"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220729180912942.png" alt="image-20220729180912942"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Gateway&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Gateway&quot;&gt;&lt;/a&gt;Spring Cloud-Gateway&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="服务网关" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Hystrix</title>
    <link href="https://devildyw.github.io/2022/07/26/Spring%20Cloud-Hystrix/"/>
    <id>https://devildyw.github.io/2022/07/26/Spring%20Cloud-Hystrix/</id>
    <published>2022-07-26T11:06:41.000Z</published>
    <updated>2022-07-29T15:46:55.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud-Hystrix"></a>Spring Cloud-<code>Hystrix</code></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>分布式系统面临的问题</strong></p><p>复杂分布式体系结构中的应用有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727130210026.png" alt="image-20220727130210026"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727130219748.png" alt="image-20220727130219748"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727130235875.png" alt="image-20220727130235875"></p><h3 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h3><p>多个微服务之间调用的时候，假设微服务A调用微服务B和C，微服务B和微服务C又调用其他的微服务，这就是所谓的<strong>“扇出”</strong>。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的<strong>“雪崩效应”</strong>。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的时，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用或系统。</p><p>所以，</p><p>通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题得模块还调用了其他得模块，这样就会发生级联故障，或者叫<strong>雪崩</strong>。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Hystrix</code>是一个用于处理分布式系统的<code>延迟</code>和<code>容错</code>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，<code>Hystrix</code>能够保障在一个依赖出现问题下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式提供的弹性。</strong></p><p><strong>“断路器”</strong>本身是一种开关装置，当某个服务单元发生故障后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用发那个返回一个符合预期的，可处理的备选响应（<code>FallBack</code>）,而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><blockquote><p><code>Github</code>官网：<a href="https://github.com/Netflix/Hystrix"><code>Netflix</code>&#x2F;<code>Hystrix</code></a></p></blockquote><p>目前<code>Hystrix</code>已经停止维护了，但其的思想是非常超前的，非常值得学习的，后续<code>Spring Cloud</code>大力推广的作为服务熔断的组件也都有借鉴<code>Hystrix</code>的思想。</p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p><em><strong>熔断</strong></em>这一概念来源于电子工程中的<em><strong>断路器</strong></em>（Circuit Breaker）。</p><p>​     在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。</p><p>​     <strong>这种牺牲局部，保全整体的措施就叫做熔断。</strong></p><p>就是保险丝。服务的降级-&gt;进而熔断-&gt;恢复调用链路</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，<code>fallback</code></p><blockquote><p>服务降级在业务中就是指正常流程跑不通，先记录下来，然后再用程序去根据这些数据做补救</p></blockquote><p>那些情况会触发降级？</p><blockquote><p>程序运行异常、超时、服务熔断触发服务降级、线程池&#x2F;信号量打满也会导致服务降级。</p></blockquote><h2 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h2><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="新建父工程"><a href="#新建父工程" class="headerlink" title="新建父工程"></a>新建父工程</h3><ol><li><p>创建工程<code>Cloud-06-Hystrix</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-06-Hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="创建子工程–服务生产者"><a href="#创建子工程–服务生产者" class="headerlink" title="创建子工程–服务生产者"></a>创建子工程–服务生产者</h3><ol><li><p>创建工程<code>Cloud-provider-hystrix-payment8001</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-06-Hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-provider-hystrix-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixPaymentMain8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixPaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用正常的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;paymentInfo_OK,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用延时的方法 用于后续根据延迟而发生服务熔断等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeNumber</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Timeout,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Controller</code>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span>  paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result: &#123;&#125;&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span>  paymentService.paymentInfo_Timeout(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result: &#123;&#125;&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p><code>http://localhost:8001/payment/hystrix/timeout/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">线程池<span class="punctuation">:</span> http-nio<span class="number">-8001</span>-exec<span class="number">-2</span> paymentInfo_Timeout<span class="punctuation">,</span>id<span class="punctuation">:</span> <span class="number">1</span>O(∩_∩)O哈哈~耗时<span class="punctuation">:</span>(秒) <span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>http://localhost:8001/payment/hystrix/ok/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">线程池<span class="punctuation">:</span> http-nio<span class="number">-8001</span>-exec<span class="number">-3</span>paymentInfo_OK<span class="punctuation">,</span>id<span class="punctuation">:</span> <span class="number">1</span>O(∩_∩)O哈哈~</span><br></pre></td></tr></table></figure></li></ol><p><strong>以上述为根基平台，从正确-&gt;错误-&gt;降级熔断-&gt;恢复</strong> </p><h2 id="JMeter高并发测压"><a href="#JMeter高并发测压" class="headerlink" title="JMeter高并发测压"></a><code>JMeter</code>高并发测压</h2><p>上述代码中我们有一个接口会在3秒中之后才会访问，我们并发量较小的时候访问，服务器是可以正常响应得，但是在分布式微服务的场景中会有大量得请求访问，此时会有大量得请求都会聚集在该接口等待3秒，请求量大又有大量得请求正在执行，就容易导致服务崩溃扛不住压力，所以这里我们用<code>JMeter</code>来测压演示一下。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727131258444.png" alt="image-20220727131258444"></p><p><strong>创建线程组</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727131357064.png" alt="image-20220727131357064"></p><p><strong>配置线程组得参数</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727131447781.png" alt="image-20220727131447781"></p><p><strong>创建<code>Http</code>请求取样器</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727131906737.png" alt="image-20220727131906737"></p><p><strong>设置请求参数</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727132342332.png" alt="image-20220727132342332"></p><p><strong>启动</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727132440011.png" alt="image-20220727132440011"></p><p>此时我们再去访问另一个接口<code>http://localhost:8001/payment/hystrix/ok/1</code>，会发现访问这个接口响应会有明显得延迟。</p><p><strong>这是因为tomcat得默认工作线程数被打满了，没有多余得线程来分解压力和处理。</strong></p><blockquote><p>Tomcat默认线程池有十个线程。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>上面那个服务<strong>提供者8001自己测试</strong>，加入此时外部得消费者80也来访问，那<strong>消费者</strong>只能干等，最终导致消费端80不满意，服务端8001直接被拖死，</p><h2 id="创建子工程–服务消费者"><a href="#创建子工程–服务消费者" class="headerlink" title="创建子工程–服务消费者"></a>创建子工程–服务消费者</h2><p><strong>将消费者加入正在进行压测的服务调用。</strong></p><ol><li><p>新建工程<code>Cloud-consumer-feign-hystrix-order80</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-06-Hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># Eureka服务注册中心会将自己作为客户端来尝试注册它自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 我们要访问注册中心的服务所以这里必须为true 获取注册中心的服务列表信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span> <span class="comment">#连接超时的最大时限</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span> <span class="comment">#访问服务的最大时限 访问服务超过这个时间就会报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Feign接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Controller</code>类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderHystrixController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_Timeout(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动测试+服务生产者端得压力测试</p><p>服务消费者端调用服务会有明显的延迟，甚至可能出现超时的报错，这在分布式微服务的生产环境中是不允许出现的。</p></li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><strong>解决的要求</strong></p><blockquote><p>超时导致服务器变慢–&gt;超时不再等待</p><p>出错(宕机或程序运行出错)–&gt;出错要有兜底</p></blockquote><p><strong>解决</strong></p><blockquote><p>对方服务(8001)超时了，调用者(80)不能一直卡死等待，必须有服务降级</p><p>对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级</p><p>对方服务(8001)OK，调用者自己出故障或有自我要求(自己的等待时间小于服务提供者，自己处理降级)</p></blockquote><h2 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h2><p>在服务的接口上新增注解<code>@HystrixCommand</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>fallbackMethod</code>：指定处理回退逻辑的方法。即如果方法出现超时或是报错就会调用的方法。</p><p><code>commandProperties</code>：指定命令属性。在这里配置发生上面情况才会调用<code>fallbackMethod</code>中的方法处理</p><p><code>@HystrixProperty</code>：用于配置<code>commandProperties</code>中的属性。降级处理超时时间设置<code>execution.isolation.thread.timeoutInMilliseconds</code>，value &#x3D; 3000表示超过三秒就会进行降级处理（默认1秒）。</p></blockquote><p><code>@HystrixProperty</code>全部配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* defaults */</span></span><br><span class="line"><span class="comment">/* package */</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsRollingStatisticalWindow</span> <span class="operator">=</span> <span class="number">10000</span>;<span class="comment">// default =&gt; statisticalWindow: 10000 = 10 seconds (and default of 10 buckets so each bucket is 1 second)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsRollingStatisticalWindowBuckets</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// default =&gt; statisticalWindowBuckets: 10 = 10 buckets in a 10 second window so each bucket is 1 second</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_circuitBreakerRequestVolumeThreshold</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">// default =&gt; statisticalWindowVolumeThreshold: 20 requests in 10 seconds must occur before statistics matter</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_circuitBreakerSleepWindowInMilliseconds</span> <span class="operator">=</span> <span class="number">5000</span>;<span class="comment">// default =&gt; sleepWindow: 5000 = 5 seconds that we will sleep before trying again after tripping the circuit</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_circuitBreakerErrorThresholdPercentage</span> <span class="operator">=</span> <span class="number">50</span>;<span class="comment">// default =&gt; errorThresholdPercentage = 50 = if 50%+ of requests in 10 seconds are failures or latent then we will trip the circuit</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_circuitBreakerForceOpen</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">// default =&gt; forceCircuitOpen = false (we want to allow traffic)</span></span><br><span class="line"><span class="comment">/* package */</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_circuitBreakerForceClosed</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">// default =&gt; ignoreErrors = false </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_executionTimeoutInMilliseconds</span> <span class="operator">=</span> <span class="number">1000</span>; <span class="comment">// default =&gt; executionTimeoutInMilliseconds: 1000 = 1 second</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_executionTimeoutEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutionIsolationStrategy</span> <span class="variable">default_executionIsolationStrategy</span> <span class="operator">=</span> ExecutionIsolationStrategy.THREAD;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_executionIsolationThreadInterruptOnTimeout</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_executionIsolationThreadInterruptOnFutureCancel</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_metricsRollingPercentileEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_requestCacheEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_fallbackIsolationSemaphoreMaxConcurrentRequests</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_fallbackEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_executionIsolationSemaphoreMaxConcurrentRequests</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_requestLogEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">default_circuitBreakerEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsRollingPercentileWindow</span> <span class="operator">=</span> <span class="number">60000</span>; <span class="comment">// default to 1 minute for RollingPercentile </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsRollingPercentileWindowBuckets</span> <span class="operator">=</span> <span class="number">6</span>; <span class="comment">// default to 6 buckets (10 seconds each in 60 second window)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsRollingPercentileBucketSize</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// default to 100 values max per bucket</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">default_metricsHealthSnapshotIntervalInMilliseconds</span> <span class="operator">=</span> <span class="number">500</span>; <span class="comment">// default to 500ms as max frequency between allowing snapshots of health (error percentage etc)</span></span><br></pre></td></tr></table></figure><h3 id="生产者降级保护"><a href="#生产者降级保护" class="headerlink" title="生产者降级保护"></a>生产者降级保护</h3><p>为了防止大量请求调用生产者端发生超时或者报错导致服务宕机，从而进行服务端的降级保护</p><p>对服务生产者Service接口进行改造<code>Cloud-provider-hystrix-payment8001</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用延时的方法 用于后续根据延迟而发生服务熔断等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeNumber</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">//        int age = 10/0; //使其发生报错</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Timeout,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//fallbackMethod方法 执行服务降级时 调用该方法返回一个友好提示</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 运行报错请稍后再试,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;┭┮﹏┭┮&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主启动类添加注解<code>@EnableCircuitBreaker</code>激活<code>Hystrix</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//激活Hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixPaymentMain8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixPaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务 <strong>演示超时降级</strong></p><p>服务消费者调用访问接口<code>http://localhost:80/consumer/payment/hystrix/timeout/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">线程池<span class="punctuation">:</span> hystrix-PaymentService<span class="number">-6</span> 运行报错请稍后再试<span class="punctuation">,</span>id<span class="punctuation">:</span> <span class="number">1</span>┭┮﹏┭┮耗时<span class="punctuation">:</span>(秒) </span><br></pre></td></tr></table></figure><p>将服务接口的延时注释掉，添加 <code>int age = 10/0;</code> 使其调用时会抛出异常导致报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用延时的方法 用于后续根据延迟而发生服务熔断等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeNumber</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>; <span class="comment">//使其发生报错</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            TimeUnit.SECONDS.sleep(timeNumber);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; paymentInfo_Timeout,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fallbackMethod方法 执行服务降级时 调用该方法返回一个友好提示</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 运行报错请稍后再试,id: &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;┭┮﹏┭┮&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务 <strong>演示报错降级</strong></p><p>服务消费者调用访问接口<code>http://localhost:80/consumer/payment/hystrix/timeout/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">线程池<span class="punctuation">:</span> hystrix-PaymentService<span class="number">-1</span> 运行报错请稍后再试<span class="punctuation">,</span>id<span class="punctuation">:</span> <span class="number">1</span>┭┮﹏┭┮耗时<span class="punctuation">:</span>(秒) </span><br></pre></td></tr></table></figure><p><strong>降级成功</strong></p><h3 id="消费者降级保护"><a href="#消费者降级保护" class="headerlink" title="消费者降级保护"></a>消费者降级保护</h3><p>服务消费者(对于用户而言仍然是消费者)，为了可以更好的保护自己，也可以依样画葫芦的对客户端降级保护。(一般将<code>Hystrix</code>防在客户端)</p><ol><li><p><code>application.yml</code>配置<code>openfeign</code>对<code>hystrix</code>的支持。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加注解<code>@EnableHystrix</code>激活 <code>Hystrix</code>特性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">//激活Hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Controller</code>类中配置<code>Hystrix</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderHystrixController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeoutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_Timeout(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentTimeoutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 我是消费者80对方支付系统繁忙请10秒后再试或者自己运行出错检查自己,┭┮﹏┭┮&quot;</span>+<span class="string">&quot;耗时:(秒) &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动调用测试接口</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">线程池<span class="punctuation">:</span> hystrix-OderHystrixController<span class="number">-1</span> 我是消费者<span class="number">80</span>对方支付系统繁忙请<span class="number">10</span>秒后再试或者自己运行出错检查自己<span class="punctuation">,</span>┭┮﹏┭┮耗时<span class="punctuation">:</span>(秒) </span><br></pre></td></tr></table></figure><p>测试成功</p></li></ol><h3 id="全局服务降级配置"><a href="#全局服务降级配置" class="headerlink" title="全局服务降级配置"></a>全局服务降级配置</h3><p>为了防止为每一个服务都配置一个单独的降级方法导致的代码量上升，于是有了全局服务降级配置。</p><p><code>@DefaultProperties(defaultFallback = &quot;&quot;)</code></p><p>**<code>1:1</code>**： 每个方法配置一个服务降级方法，技术可以，实际上傻X</p><p>**<code>1:N</code>**：除了个别重要核心业务有专属方法，其他平台的可以通过<code>@DefaultProperties(defaultFallback=&quot;&quot;)</code>统一跳转到统一处理结果页面。</p><p><strong>通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局fallback</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">payment_Global_FallbackMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息, 请稍后再试, ┭┮﹏┭┮&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置全局fallback</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span> <span class="comment">//配置全局fallback</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderHystrixController</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释接口上原有的<code>fallback</code>配置，使其受到全局<code>fallback</code>影响</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = &quot;paymentTimeoutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">//注释掉原来的fallback 使其收到全局fallback影响</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_Timeout(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动服务测试接口<code>http://localhost:80/consumer/payment/hystrix/timeout/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Global异常处理信息<span class="punctuation">,</span> 请稍后再试<span class="punctuation">,</span> ┭┮﹏┭┮</span><br></pre></td></tr></table></figure><p>测试成功</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>无论是为每一个服务都配置一个单独的服务降级方法，还是创建一个全局服务降级方法，都会导致大量代码耦合到<code>Controller</code>。</p><p>本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系</p><p>只需要为<code>Feign</code>客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</p><p>新建类实现<code>Feign</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//实现了Feign接口 实现其的方法就相当于为每个接口内服务提供了fallback方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title class_">PaymentHystrixService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----------------PaymentHystrixService fall back-PaymentInfo_OK,┭┮﹏┭┮&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----------------PaymentHystrixService fall back-PaymentInfo_TimeOut,┭┮﹏┭┮&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再将该类配置到Feign接口中</p><p><code>@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;, fallback = PaymentFallbackService.class)</code></p><p><code>@FeignClient</code><strong>注解中的<code>fallback</code>参数是用来配置服务降级处理的实现类的</strong></p><p>这样<code>CLOUD-PROVIDER-HYSTRIX-PAYMENT</code>服务下的<code>Feign</code>接口方法就会被处理降级的实现类来管理了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;, fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_Timeout</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试 注意：这里我们访问的接口是<code>http://localhost:80/consumer/payment/hystrix/ok/1</code>，该接口并没有带上<code>@HystrixCommand</code>所以并不会收到原本我们<code>Controller</code>中配置的全局降级处理。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">----------------PaymentHystrixService fall back-PaymentInfo_OK<span class="punctuation">,</span>┭┮﹏┭┮</span><br></pre></td></tr></table></figure><p>测试成功。</p><p><strong>全局降级处理 &gt; Feign接口的配置处理降级实现类</strong></p><h2 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h2><p><strong>熔断机制概述</strong></p><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。</p><p><strong>当检测到节点微服务调用响应正常后，恢复调用链路。</strong></p><p>在Spring Cloud框架里，熔断机制通过<code>Hystrix</code>实现。<code>Hystrix</code>会监控微服务间调用的状态，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/state.png" alt="img"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/10162355X-7.png" alt="熔断状态转换"></p><blockquote><p>This simple circuit breaker avoids making the protected call when the circuit is open, but would need an external intervention to reset it when things are well again. This is a reasonable approach with electrical circuit breakers in buildings, but for software circuit breakers we can have the breaker itself detect if the underlying calls are working again. We can implement this self-resetting behavior by trying the protected call again after a suitable interval, and resetting the breaker should it succeed.</p><p>翻译：</p><p>这个简单的断路器避免了在电路打开时进行受保护的调用，但是当一切恢复正常时需要外部干预来重置它。对于建筑物中的电气断路器，这是一种合理的方法，但对于软件断路器，我们可以让断路器本身检测底层调用是否再次工作。我们可以通过在适当的时间间隔后再次尝试受保护的调用来实现这种自重置行为，并在成功时重置断路器。</p></blockquote><p>服务熔断三种状态：<strong>关</strong>，<strong>半开</strong>，<strong>全开</strong></p><blockquote><p>服务熔断：<a href="https://martinfowler.com/bliki/CircuitBreaker.html"><code>CircuitBreaker-martinfowler</code></a></p></blockquote><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>修改<code>Cloud-provider-hystrix-payment8001</code></p><p><code>PaymentService</code> 新增方法配置服务熔断相关项</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======服务熔断</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;), //是否开启断路器 开启</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value =&quot;10&quot;),//请求次数 10次</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间窗口期单位毫秒(ms) 此属性设置在电路跳闸后拒绝请求的时间量，然后再允许尝试确定电路是否应再次闭合。</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;)//失败率达到多少 断路器就会打开</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;*****id 不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> IdUtil.simpleUUID();</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功,流水号：&quot;</span>+serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id 不能为负数，请稍后再试 ┭┮﹏┭┮ id: &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Controller</code>类新增接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//====服务熔断</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentCircuitBreaker(id);</span><br><span class="line">       log.info(<span class="string">&quot;*****result: &#123;&#125;&quot;</span>,result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动服务访问</p><p>我们先疯狂使用负数去访问使得的服务调用报错，服务调用失败，只要我们在十次请求之中服务失败率超过了我们设置的60%，断路器就会打开。</p><p><code>http://localhost:8001/payment/circuit/-1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">id 不能为负数，请稍后再试 ┭┮﹏┭┮ id<span class="punctuation">:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>在外面疯狂访问下服务调用失败率已经远远大于60%</p><p>此时我们使用正常数据去访问接口，检测是否断路器打开。</p><p><code>http://localhost:8001/payment/circuit/1</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">id 不能为负数，请稍后再试 ┭┮﹏┭┮ id<span class="punctuation">:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以发现我们使用了正常的数据去访问服务，服务依旧是调用了服务降级的处理方法返回了一个服务报错才会返回的字符串，说明此时服务已经熔断。在服务窗口期过后短路器由全开转到半开，此时会释放一次请求访问，如果请求成功，断路器就会有半开转到关闭(<strong>恢复调用链路</strong>)，否则断路器继续打开，重新计时。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>熔断打开</strong></p><p>请求不再进行调用当前服务，内部设置时钟一般为<code>MTR</code>（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</p><p><strong>熔断关闭</strong></p><p>熔断关闭不会对服务进行熔断</p><p><strong>熔断半开</strong></p><p>部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断（恢复调用链路）。</p><h3 id="断路器在什么情况下起作用"><a href="#断路器在什么情况下起作用" class="headerlink" title="断路器在什么情况下起作用"></a>断路器在什么情况下起作用</h3><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;)</span>, <span class="comment">//是否开启断路器 开启</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value =&quot;10&quot;)</span>,<span class="comment">//请求次数 10次</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;)</span>,<span class="comment">//时间窗口期单位毫秒(ms) 此属性设置在电路跳闸后拒绝请求的时间量，然后再允许尝试确定电路是否应再次闭合。</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;)</span><span class="comment">//失败率达到多少 发生断路</span></span><br></pre></td></tr></table></figure></blockquote><p>上述配置涉及到断路器的三个重要参数：<strong>快照时间窗</strong>、<strong>请求总数阈值</strong>、<strong>错误百分比阈值</strong>。</p><ol><li>快照时间窗：此属性设置在电路跳闸后拒绝请求的时间量，超过该事件进入电路半跳闸状态，然后再允许尝试确定电路是否应再次闭合。</li><li>请求总数阈值：在快照时间窗内，必须满足请求总数阈值才有资格熔断。默认20，意味着在10秒内，如果该<code>Hystrix</code>命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</li><li>错误百分比阈值：当请求总数在快照时间窗内超过了阈值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%错误百分比，在默认设定50%阈值情况下，这时候就会将断路器打开。</li></ol><h3 id="断路器开启或关闭的条件"><a href="#断路器开启或关闭的条件" class="headerlink" title="断路器开启或关闭的条件"></a>断路器开启或关闭的条件</h3><p><strong>开启条件</strong></p><ul><li>当满足一定的阈值的时候（默认10秒内超过20个请求次数）</li><li>当失败率达到一定的时候（默认10秒内超过50%的请求次数）</li></ul><p>当开启的时候，所有请求都不会进行转发</p><p><strong>关闭条件</strong></p><ul><li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。开启状态参考上述，后过一段时间又会进入半开状态。</li></ul><h3 id="断路器打开之后"><a href="#断路器打开之后" class="headerlink" title="断路器打开之后"></a>断路器打开之后</h3><ol><li><p>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p></li><li><p>原来的主逻辑要如何恢复呢？</p><p>对于这一问题，hystrix也为我们实现了自动恢复功能。</p><p>当断路器打开，对主逻辑进行熔断之后，<code>hystrix</code>会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>以下配置在<code>HystrixCommandProperties</code>中都有对应。</strong></p><h3 id="Command-Properties（指令参数）"><a href="#Command-Properties（指令参数）" class="headerlink" title="Command Properties（指令参数）"></a>Command Properties（指令参数）</h3><p><strong>以下属性控制<code>HystrixCommand</code>行为：</strong></p><h4 id="Execution（执行）"><a href="#Execution（执行）" class="headerlink" title="Execution（执行）"></a>Execution（执行）</h4><h5 id="隔离策略"><a href="#隔离策略" class="headerlink" title="隔离策略"></a>隔离策略</h5><ul><li><strong>execution.isolation.strategy</strong></li></ul><p>隔离策略决定<code>Hystrix</code>命令执行的时候采用什么类型的策略进行依赖隔离。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>THREAD</code> (见<code>ExecutionIsolationStrategy.THREAD</code>)</td></tr><tr><td align="center">可选值</td><td align="center"><code>THREAD</code>,<code>SEMAPHORE</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.isolation.strategy</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.isolation.strategy</code></td></tr></tbody></table><p>执行隔离策略到底选择线程池(<code>THREAD</code>)还是信号量(<code>SEMAPHORE</code>)？文档中给出的建议是：</p><blockquote><p>使用<code>HystrixCommand</code>的时候建议用<code>THREAD</code>策略，使用<code>HystrixObservableCommand</code>的时候建议使用<code>SEMAPHORE</code>策略。</p></blockquote><blockquote><p>使用<code>THREAD</code>策略让<code>HystrixCommand</code>在线程中执行可以提供额外的保护层，以防止因为网络超时导致的延时失败。</p></blockquote><blockquote><p>一般情况下，只有这种特殊例子下<code>HystrixCommand</code>会搭配<code>SEMAPHORE</code>策略使用：调用的频次太高(例如每个实例每秒数百次调用)，这种情况如果选用<code>THREAD</code>策略有可能导致超过线程隔离的上限(有可能需要太多的线程或者命令太多线程不足够用于隔离请求)，这种情况一般是非网络请求调用。</p></blockquote><p><strong>笔者想说的是：建议选用默认值，因为目前很少遇到使用信号量隔离的场景。</strong></p><h5 id="是否允许超时"><a href="#是否允许超时" class="headerlink" title="是否允许超时"></a>是否允许超时</h5><ul><li><strong>execution.timeout.enabled</strong></li></ul><p>决定<code>HystrixCommand#run()</code>执行时是否允许超时，只有设置为true的时候，下面提到的“超时时间上限”才会有效。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>,<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.timeout.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.timeout.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">保持选用默认值</td></tr></tbody></table><h5 id="超时时间上限"><a href="#超时时间上限" class="headerlink" title="超时时间上限"></a>超时时间上限</h5><ul><li><strong>execution.isolation.thread.timeoutInMilliseconds</strong></li></ul><p><code>HystrixCommand</code>执行时候超时的最大上限，单位是毫秒，如果命令执行耗时超过此时间值那么会进入降级逻辑。这个配置生效的前提是<code>hystrix.command.default.execution.timeout.enabled</code>或者<code>hystrix.command.[HystrixCommandKey].execution.timeout.enabled</code>为true。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>1000</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.isolation.thread.timeoutInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center"><strong>保持选用默认值</strong></td></tr></tbody></table><h5 id="超时是否中断"><a href="#超时是否中断" class="headerlink" title="超时是否中断"></a>超时是否中断</h5><p>此配置项决定<code>HystrixCommand#run()</code>执行的时候调用超时的情况下是否中断。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.isolation.thread.interruptOnTimeout</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.isolation.thread.interruptOnTimeout</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center"><strong>保持选用默认值</strong></td></tr></tbody></table><h5 id="取消是否中断"><a href="#取消是否中断" class="headerlink" title="取消是否中断"></a>取消是否中断</h5><ul><li><strong>execution.isolation.thread.interruptOnCancel</strong></li></ul><p>此配置项决定<code>HystrixCommand#run()</code>执行的时候取消调用的情况下是否中断。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>false</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.isolation.thread.interruptOnCancel</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.isolation.thread.interruptOnCancel</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center"><strong>保持选用默认值</strong></td></tr></tbody></table><h5 id="最大并发请求上限-SEMAPHORE"><a href="#最大并发请求上限-SEMAPHORE" class="headerlink" title="最大并发请求上限(SEMAPHORE)"></a>最大并发请求上限(SEMAPHORE)</h5><ul><li><strong>execution.isolation.semaphore.maxConcurrentRequests</strong></li></ul><p>此配置项决定使用<code>HystrixCommand#run()</code>方法和<code>ExecutionIsolationStrategy.SEMAPHORE</code>隔离策略下并发请求数量的最高上限。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].execution.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center"><strong>必须根据实际情况设定此值</strong></td></tr></tbody></table><hr><h4 id="命令降级-fallback-配置"><a href="#命令降级-fallback-配置" class="headerlink" title="命令降级(fallback)配置"></a>命令降级(<code>fallback</code>)配置</h4><p>命令降级配置控制<code>HystrixCommand#getFallback()</code>的执行逻辑，所有命令降级配置对策略<code>ExecutionIsolationStrategy.THREAD</code>或者<code>ExecutionIsolationStrategy.SEMAPHORE</code>都生效。</p><h5 id="最大并发降级请求处理上限"><a href="#最大并发降级请求处理上限" class="headerlink" title="最大并发降级请求处理上限"></a>最大并发降级请求处理上限</h5><ul><li><strong>fallback.isolation.semaphore.maxConcurrentRequests</strong></li></ul><p>这个属性用于控制一个<code>HystrixCommand#getFallback()</code>实例方法在执行线程中调用的最大上限，如果超过此上限，降级逻辑不会执行并且会抛出一个异常。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].fallback.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">必须根据实际情况设定此值</td></tr></tbody></table><h5 id="是否开启降级"><a href="#是否开启降级" class="headerlink" title="是否开启降级"></a>是否开启降级</h5><ul><li><strong>fallback.enabled</strong></li></ul><p>此属性控制当<code>HystrixCommand</code>执行失败之后是否调用<code>HystrixCommand#getFallback()</code>。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>false</code>、<code>true</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.fallback.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].fallback.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><hr><h4 id="断路器-circuit-breaker-配置"><a href="#断路器-circuit-breaker-配置" class="headerlink" title="断路器(circuit breaker)配置"></a>断路器(circuit breaker)配置</h4><p>断路器配置用于控制<code>HystrixCircuitBreaker</code>实例的行为。</p><h5 id="是否启用断路器"><a href="#是否启用断路器" class="headerlink" title="是否启用断路器"></a>是否启用断路器</h5><ul><li><strong>circuitBreaker.enabled</strong></li></ul><p>此属性确定断路器是否用于跟踪健康状况，以及当断路器打开的时候是否用于短路请求(使请求快速失败进入降级逻辑)。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>false</code>、<code>true</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="断路器请求量阈值"><a href="#断路器请求量阈值" class="headerlink" title="断路器请求量阈值"></a>断路器请求量阈值</h5><ul><li><strong>circuitBreaker.requestVolumeThreshold</strong></li></ul><p>此属性设置将使断路器打开的滑动窗口中的最小请求数量。</p><p>例如，如果值是20，那么如果在滑动窗口中只接收到19个请求(比如一个10秒的窗口)，即使所有19个请求都失败了，断路器也不会打开。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>20</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.requestVolumeThreshold</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.requestVolumeThreshold</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值，如果部分接口不能容忍默认阈值可以单独配置</td></tr></tbody></table><h5 id="断路器等待窗口时间"><a href="#断路器等待窗口时间" class="headerlink" title="断路器等待窗口时间"></a>断路器等待窗口时间</h5><ul><li><strong>circuitBreaker.sleepWindowInMilliseconds</strong></li></ul><p>此属性设置断路器打开后拒绝请求的时间量，每隔一段时间(<code>sleepWindowInMilliseconds</code>，单位是毫秒)允许再次尝试(也就是放行一个请求)确定是否应该关闭断路器。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>5000</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.sleepWindowInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="断路器错误百分比阈值"><a href="#断路器错误百分比阈值" class="headerlink" title="断路器错误百分比阈值"></a>断路器错误百分比阈值</h5><ul><li><strong>circuitBreaker.errorThresholdPercentage</strong></li></ul><p>此属性设置一个错误百分比，当请求错误率超过设定值，断路器就会打开。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>50</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.errorThresholdPercentage</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.errorThresholdPercentage</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><p>注意：</p><ul><li>配置项<code>circuitBreaker.requestVolumeThreshold</code>针对错误请求数量。</li><li>配置项<code>circuitBreaker.errorThresholdPercentage</code>针对错误请求百分比。</li></ul><h5 id="是否强制打开断路器"><a href="#是否强制打开断路器" class="headerlink" title="是否强制打开断路器"></a>是否强制打开断路器</h5><ul><li><strong>circuitBreaker.forceOpen</strong></li></ul><p>此属性控制断路器是否强制打开，强制打开断路器会使所有请求直接进入降级逻辑，也就是包裹在<code>HystrixCommand#run()</code>的逻辑不会执行。<code>circuitBreaker.forceOpen</code>属性和<code>circuitBreaker.forceClosed</code>属性互斥。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>false</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>false</code>、<code>true</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.forceOpen</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.forceOpen</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="是否强制关闭断路器"><a href="#是否强制关闭断路器" class="headerlink" title="是否强制关闭断路器"></a>是否强制关闭断路器</h5><ul><li><strong>circuitBreaker.forceClosed</strong></li></ul><p>此属性控制断路器是否强制关闭，强制关闭断路器会导致所有和断路器相关的配置和功能都失效，<code>HystrixCommand#run()</code>抛出异常会正常进入降级逻辑。<code>circuitBreaker.forceClosed</code>属性和<code>circuitBreaker.forceOpen</code>属性互斥。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>false</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>false</code>、<code>true</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.circuitBreaker.forceClosed</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].circuitBreaker.forceClosed</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><hr><h4 id="度量统计-metrics-配置"><a href="#度量统计-metrics-配置" class="headerlink" title="度量统计(metrics)配置"></a>度量统计(metrics)配置</h4><p>度量统计配置会对<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>执行时候的统计数据收集动作生效。</p><h5 id="滑动窗口持续时间"><a href="#滑动窗口持续时间" class="headerlink" title="滑动窗口持续时间"></a>滑动窗口持续时间</h5><ul><li><strong>metrics.rollingStats.timeInMilliseconds</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10000</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="滑动窗口Bucket总数"><a href="#滑动窗口Bucket总数" class="headerlink" title="滑动窗口Bucket总数"></a>滑动窗口Bucket总数</h5><ul><li><strong>metrics.rollingStats.numBuckets</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">需要满足<code>metrics.rollingStats.timeInMilliseconds % metrics.rollingStats.numBuckets == 0</code>，要尽量小，否则有可能影响性能</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingStats.numBuckets</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingStats.numBuckets</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="是否启用百分数计算"><a href="#是否启用百分数计算" class="headerlink" title="是否启用百分数计算"></a>是否启用百分数计算</h5><ul><li><strong>metrics.rollingPercentile.enabled</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingPercentile.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingPercentile.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="百分数计算使用的滑动窗口持续时间"><a href="#百分数计算使用的滑动窗口持续时间" class="headerlink" title="百分数计算使用的滑动窗口持续时间"></a>百分数计算使用的滑动窗口持续时间</h5><ul><li><strong>metrics.rollingPercentile.timeInMilliseconds</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>60000</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingPercentile.timeInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="百分数计算使用的Bucket总数"><a href="#百分数计算使用的Bucket总数" class="headerlink" title="百分数计算使用的Bucket总数"></a>百分数计算使用的Bucket总数</h5><ul><li><strong>metrics.rollingPercentile.numBuckets</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>6</code></td></tr><tr><td align="center">可选值</td><td align="center">满足<code>metrics.rollingPercentile.timeInMilliseconds % metrics.rollingPercentile.numBuckets == 0</code>，要尽量小，否则有可能影响性能</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingPercentile.numBuckets</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingPercentile.numBuckets</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="百分数计算使用的Bucket容量"><a href="#百分数计算使用的Bucket容量" class="headerlink" title="百分数计算使用的Bucket容量"></a>百分数计算使用的Bucket容量</h5><ul><li><strong>metrics.rollingPercentile.bucketSize</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>100</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.rollingPercentile.bucketSize</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.rollingPercentile.bucketSize</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="健康状态快照收集的周期"><a href="#健康状态快照收集的周期" class="headerlink" title="健康状态快照收集的周期"></a>健康状态快照收集的周期</h5><ul><li><strong>metrics.healthSnapshot.intervalInMilliseconds</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>500</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].metrics.healthSnapshot.intervalInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><hr><h4 id="请求上下文配置"><a href="#请求上下文配置" class="headerlink" title="请求上下文配置"></a>请求上下文配置</h4><p>请求上下文属性主要涉及到<code>HystrixRequestContext</code>和<code>HystrixCommand</code>的使用。</p><h5 id="是否启用请求缓存"><a href="#是否启用请求缓存" class="headerlink" title="是否启用请求缓存"></a>是否启用请求缓存</h5><ul><li><strong>requestCache.enabled</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.requestCache.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].requestCache.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h5 id="是否启用请求日志"><a href="#是否启用请求日志" class="headerlink" title="是否启用请求日志"></a>是否启用请求日志</h5><ul><li><strong>requestLog.enabled</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.command.default.requestLog.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.command.[HystrixCommandKey].requestLog.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h3 id="请求合成器配置-Collapser-Properties"><a href="#请求合成器配置-Collapser-Properties" class="headerlink" title="请求合成器配置(Collapser Properties)"></a>请求合成器配置(Collapser Properties)</h3><p>请求合成器配置主要控制<code>HystrixCollapser</code>的行为。</p><h4 id="请求合成的最大批次量"><a href="#请求合成的最大批次量" class="headerlink" title="请求合成的最大批次量"></a>请求合成的最大批次量</h4><ul><li><strong>maxRequestsInBatch</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>Integer.MAX_VALUE</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.collapser.default.maxRequestsInBatch</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.collapser.[HystrixCollapserKey].maxRequestsInBatch</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h4 id="延迟执行时间"><a href="#延迟执行时间" class="headerlink" title="延迟执行时间"></a>延迟执行时间</h4><ul><li><strong>timerDelayInMilliseconds</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.collapser.default.timerDelayInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.collapser.[HystrixCollapserKey].timerDelayInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><h4 id="是否启用请求合成缓存"><a href="#是否启用请求合成缓存" class="headerlink" title="是否启用请求合成缓存"></a>是否启用请求合成缓存</h4><ul><li><strong>requestCache.enabled</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>true</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.collapser.default.requestCache.enabled</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.collapser.[HystrixCollapserKey].requestCache.enabled</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议保持默认值</td></tr></tbody></table><hr><h3 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h3><p><code>Hystrix</code>使用的是<code>JUC</code>线程池<code>ThreadPoolExecutor</code>，线程池相关配置直接影响<code>ThreadPoolExecutor</code>实例。<code>Hystrix</code>的命令执行选用了线程池策略，那么就是通过线程池隔离执行的，最好为每一个分组设立独立的线程池。笔者在生产实践的时候，一般把<code>HystrixCommandGroupKey</code>和<code>HystrixThreadPoolKey</code>设置为一致。</p><h4 id="核心线程数"><a href="#核心线程数" class="headerlink" title="核心线程数"></a>核心线程数</h4><ul><li><strong>coreSize</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.coreSize</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].coreSize</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="最大线程数"><a href="#最大线程数" class="headerlink" title="最大线程数"></a>最大线程数</h4><ul><li><strong>maximumSize</strong></li></ul><p>此属性只有在<code>allowMaximumSizeToDivergeFromCoreSize</code>为<code>true</code>的时候才生效。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.maximumSize</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].maximumSize</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="最大任务队列容量"><a href="#最大任务队列容量" class="headerlink" title="最大任务队列容量"></a>最大任务队列容量</h4><ul><li><strong>maxQueueSize</strong></li></ul><p>此属性配置为-1时使用的是<code>SynchronousQueue</code>，配置为大于1的整数时使用的是<code>LinkedBlockingQueue</code>。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>-1</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>-1</code>或者大于0的整数</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.maxQueueSize</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].maxQueueSize</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="任务拒绝的任务队列阈值"><a href="#任务拒绝的任务队列阈值" class="headerlink" title="任务拒绝的任务队列阈值"></a>任务拒绝的任务队列阈值</h4><ul><li><strong>queueSizeRejectionThreshold</strong></li></ul><p>当<code>maxQueueSize</code>配置为-1的时候，此配置项不生效。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>5</code></td></tr><tr><td align="center">可选值</td><td align="center">大于0的整数</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.queueSizeRejectionThreshold</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].queueSizeRejectionThreshold</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="非核心线程存活时间"><a href="#非核心线程存活时间" class="headerlink" title="非核心线程存活时间"></a>非核心线程存活时间</h4><ul><li><strong>keepAliveTimeMinutes</strong></li></ul><p>当<code>allowMaximumSizeToDivergeFromCoreSize</code>为<code>true</code>并且<code>maximumSize</code>大于<code>coreSize</code>时此配置才生效。</p><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>1</code></td></tr><tr><td align="center">可选值</td><td align="center">大于0的整数</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.keepAliveTimeMinutes</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].keepAliveTimeMinutes</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="是否允许最大线程数生效"><a href="#是否允许最大线程数生效" class="headerlink" title="是否允许最大线程数生效"></a>是否允许最大线程数生效</h4><ul><li><strong>allowMaximumSizeToDivergeFromCoreSize</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>false</code></td></tr><tr><td align="center">可选值</td><td align="center"><code>true</code>、<code>false</code></td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].allowMaximumSizeToDivergeFromCoreSize</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">根据真实情况自行配置和调整</td></tr></tbody></table><h4 id="线程池滑动窗口持续时间"><a href="#线程池滑动窗口持续时间" class="headerlink" title="线程池滑动窗口持续时间"></a>线程池滑动窗口持续时间</h4><ul><li><strong>metrics.rollingStats.timeInMilliseconds</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10000</code></td></tr><tr><td align="center">可选值</td><td align="center">-</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议使用默认值</td></tr></tbody></table><h4 id="线程池滑动窗口Bucket总数"><a href="#线程池滑动窗口Bucket总数" class="headerlink" title="线程池滑动窗口Bucket总数"></a>线程池滑动窗口Bucket总数</h4><ul><li><strong>metrics.rollingStats.numBuckets</strong></li></ul><table><thead><tr><th align="center">项</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">默认值</td><td align="center"><code>10</code></td></tr><tr><td align="center">可选值</td><td align="center">满足<code>metrics.rollingStats.timeInMilliseconds % metrics.rollingStats.numBuckets == 0</code>，值要尽量少，否则会影响性能</td></tr><tr><td align="center">默认全局配置</td><td align="center"><code>hystrix.threadpool.default.metrics.rollingStats.numBuckets</code></td></tr><tr><td align="center">实例配置</td><td align="center"><code>hystrix.threadpool.[HystrixThreadPoolKey].metrics.rollingStats.numBuckets</code></td></tr><tr><td align="center">建议(笔者备注)</td><td align="center">建议使用默认值</td></tr></tbody></table><h2 id="Hystrix工作流程"><a href="#Hystrix工作流程" class="headerlink" title="Hystrix工作流程"></a><code>Hystrix</code>工作流程</h2><p><strong>官网图例</strong></p><p>下图显示<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>如何与<code>HystrixCircuitBreaker</code>及其逻辑和决策流程交互，包括计数器在断路器中的行为。<img src="https://img-blog.csdn.net/20171114223525259?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHJ5MjAxNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/4/16e33f9015696d70~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="file"></p><p>首先我们看一下上方的这张图，这个图完整的描述了<code>Hystrix</code>的工作流程：</p><ol><li>每次调用都会创建一个<code>HystrixCommand</code></li><li>执行<code>execute</code>或是<code>queue</code>做同步异步调用</li><li>查看启用缓存，是缓存击中返回缓存中的响应结果，否则进入步骤4</li><li>判断熔断器是否打开，如果打开跳到步骤9，否则进入步骤5</li><li>判断线程池&#x2F;信号量是否饱满，如果跑满进入步骤9，否则进入步骤6</li><li>调用<code>HystrixCommand</code>的run方法，如果调用超时进入步骤9</li><li>判断是否调用成功，返回成功调用结构，如果失败进入步骤9</li><li>计算熔断器状态，，所有的运行状态(成功，失败，拒绝，超时)上报给熔断器，用于统计从而判断熔断器状态</li><li>降级处理逻辑</li><li>返回执行结果</li></ol><h2 id="服务监控HystrixDashBoard"><a href="#服务监控HystrixDashBoard" class="headerlink" title="服务监控HystrixDashBoard"></a>服务监控HystrixDashBoard</h2><p>除了隔离依赖服务的调用以外，<code>Hystrix</code>还提供了<strong>准实时的服务调用监控（<code>Hystrix Dashboard</code>）</strong>，<code>Hystrix</code>会持续地记录所有通过<code>Hystrix</code>发起的请求的执行信息，并以统计报表和图形的心是展示给用户，包括每秒执行多少请求多少成功，多少失败等。<code>Netflix</code>通过<code>hystrix-metricx-event-stream</code>项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><ol><li><p>创建工程<code>cloud-consuemr-hystrix-dashboard9001</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-06-Hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consuemr-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类<code>HystrixDashboardMain9001</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//启动监控图形化界面的关键注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboardMain9001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要被监控的服务都必须依赖这个包<code>spring-boot-starter-actuator</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--actuator监控信息完善--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动工程</p><p>访问如下网址<code>http://localhost:9001/hystrix</code> 出现以下界面表示成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727230836837.png" alt="image-20220727230836837"></p></li></ol><h2 id="Hystrix监控演示"><a href="#Hystrix监控演示" class="headerlink" title="Hystrix监控演示"></a>Hystrix监控演示</h2><p>被监控的服务不仅要添加<code>spring-boot-starter-actuator</code>依赖</p><p>还需要再主启动类中新增配置</p><p>还需要再<code>application.yml</code>中配置如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暴露hystrix端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;hystrix.stream&#x27;</span></span><br></pre></td></tr></table></figure><p>重启服务端点</p><p>启动监控</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727233259435.png" alt="image-20220727233259435"></p><p>参数配置</p><p>在<code>Hystrix Dashboard</code>中输入服务暴露的<code>hystrix</code>流地址<code>http://ip地址:端口/actuator/hystrix.stream</code></p><p>Delay：获取信息的频率</p><p>Title：名称</p><p><strong>监控界面 可以观察到线程池的情况、断路器的开闭、服务调用的失败率等。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727233924501.png" alt="image-20220727233924501"></p><p>实心圆：共有两种含义。它通过颜色的变化代表了实例的监控程度，它的健康度从 <strong>绿色&lt;黄色&lt;橙色&lt;红色 递减。</strong></p><p>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生改变，流量越大该实现圆就越大。所以通过该实心圆的展示，就可以再大量的实例中快速的发现<strong>故障实例和高压力实例</strong>。</p><p>曲线：用来记录两分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727234546737.png" alt="image-20220727234546737"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220727234628283.png" alt="image-20220727234628283"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Hystrix&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Hystrix&quot;&gt;&lt;/a&gt;Spring Cloud-&lt;code&gt;Hystrix</summary>
      
    
    
    
    <category term="服务降级" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-OpenFeign</title>
    <link href="https://devildyw.github.io/2022/07/24/Spring%20Cloud-OpenFeign/"/>
    <id>https://devildyw.github.io/2022/07/24/Spring%20Cloud-OpenFeign/</id>
    <published>2022-07-24T15:38:38.000Z</published>
    <updated>2022-07-29T15:46:46.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud-OpenFeign"></a>Spring Cloud-OpenFeign</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><a href="https://github.com/OpenFeign/feign">Feign</a> is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and <code>JAX-RS</code> annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring <code>MVC</code> annotations and for using the same <code>HttpMessageConverters</code> used by default in Spring Web. Spring Cloud integrates Eureka, Spring Cloud <code>CircuitBreaker</code>, as well as Spring Cloud <code>LoadBalancer</code> to provide a load-balanced <code>http</code> client when using Feign.</p><p>翻译：</p><p>Feign是一个声明式的<code>WebService</code>客户端。使用Feign能让编写Web Service客户端更加简单。</p><p>它的使用方法是定义一个服务接口然后在上面添加注解。Feign也支持可插拔式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring <code>MVC</code>标准注解和<code>HttpMessageConverters</code>。Spring Cloud 集成了 Eureka、Spring Cloud <code>CircuitBreaker</code> 以及 Spring Cloud <code>LoadBalancer</code>，在使用 Feign 时提供负载均衡的 <code>http</code> 客户端。</p></blockquote><blockquote><p>官网地址：<a href="https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/">Spring Cloud-<code>OpenFeign</code></a></p><p><code>github</code>源码地址：<a href="https://github.com/spring-cloud/spring-cloud-openfeign">spring-cloud&#x2F;spring-cloud-<code>openfeign</code></a></p></blockquote><h3 id="Feign能干什么？"><a href="#Feign能干什么？" class="headerlink" title="Feign能干什么？"></a>Feign能干什么？</h3><p>Feign旨在使编写Java <code>Http</code>客户端变得更加容易。</p><p>前面在使用Ribbon+<code>RestTemplate</code>时，例用<code>RestTemplate</code>对<code>Http</code>请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装，我们只需要创建一个接口并使用注解的方式来配置它（以前时<code>DAO</code>接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可），即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon时，自动封装服务调用调用客户端的开发量。</p><hr><p><strong>Feign集成了Spring Cloud中客户端负载均衡的组件</strong></p><p>例用<code>LoadBalancer</code>维护了服务的服务列表信息，并且通过轮询实现了客户端的负载均衡。<strong>而与<code>LoadBalancer</code>不同的时，通过Feign需要定义服务绑定接口并且声明式的方法</strong>，简单而优雅的实现了服务调用。</p><blockquote><p><code>RestTemplate</code>和<code>OpenFeign</code>都是针对restful接口的远程调用 <code>OpenFeign</code>则相当于将远程调用的restful接口做了一个封装。</p></blockquote><h2 id="OpenFeign使用"><a href="#OpenFeign使用" class="headerlink" title="OpenFeign使用"></a><code>OpenFeign</code>使用</h2><p><strong>宗旨：接口+注解</strong> —&gt; 微服务调用接口+@FeignClient</p><h3 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h3><ol><li><p>创建工程<code>Cloud-05-OpenFeign</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-05-OpenFeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="创建子工程"><a href="#创建子工程" class="headerlink" title="创建子工程"></a>创建子工程</h3><ol><li><p>创建工程<code>Cloud-consumer-openFeign-order80</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-05-OpenFeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consumer-openFeign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">  <span class="comment"># 注册Eureka服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># Eureka服务注册中心会将自己作为客户端来尝试注册它自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 我们要访问注册中心的服务所以这里必须为true 获取注册中心的服务列表信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>只作为访问服务，所以就不将服务注册进去了。</p></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启OpenFeign远程调用功能</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderOpenFigenMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OderOpenFigenMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务类</p><p>业务逻辑接口+@<code>FeignClient</code>配置调用provider服务</p><p>新建<code>PaymentFeignService</code>接口并新增注解@<code>FeignClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><p><code>OpenFeignController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试 （Eureka服务器，支付服务集群，该订单服务）<code>http://localhost:80/consumer/payment/get/1547118279208656901</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656901</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功,serverPort:8002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656901</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>测试访问成功。</p></li><li><p>调用流程: <strong>消费者Controller–&gt;接口–&gt;负载均衡–&gt;生产者Controller–&gt;生产者服务接口</strong></p></li></ol><h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a><code>OpenFeign</code>超时控制</h2><p>首先在<code>application.yml</code>中配置feign的超时</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span> <span class="comment">#连接超时的最大时限</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">1000</span> <span class="comment">#访问服务的最大时限 访问服务超过这个时间就会报错 这里将其设置成1秒 测试超时</span></span><br></pre></td></tr></table></figure><p><code>Cloud-Payment-Service</code>集群服务中Controller新增restful接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/feign/timeout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">PaymentFeignTimeout</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> serverPort;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li><p>将上述新增接口的方法签名加入到我们<code>OpenFeign</code>的订单服务的Feign接口中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">PaymentFeignTimeout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器类新增restful接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentFeignTimeout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//openfeign-loadbalancer，客户端一般默认等待1秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.PaymentFeignTimeout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试访问<code>http://localhost:80/consumer/payment/feign/timeout</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220726184850298.png" alt="image-20220726184850298"></p></li></ol><p>​        执行超时。</p><hr><p>我们可以在默认客户端和命名客户端上配置超时。<code>OpenFeign</code> 使用两个超时参数：</p><ul><li><code>connectTimeout</code>防止由于服务器处理时间长而阻塞调用者。</li><li><code>readTimeout</code>从连接建立时开始应用，在返回响应时间过长时触发。</li></ul><p>通过该配置可以进行<code>OpenFeign</code>的超时时间</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span> <span class="comment">#连接超时的最大时限</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span> <span class="comment">#访问服务的最大时限 访问服务超过这个时间就会报错</span></span><br></pre></td></tr></table></figure><h2 id="OpenFeign日志"><a href="#OpenFeign日志" class="headerlink" title="OpenFeign日志"></a><code>OpenFeign</code>日志</h2><p><code>OpenFeign</code>内置日志，可以打印一些在远程调用接口时的详细信息，方便开发者调试。</p><blockquote><p><code>OpenFeign</code>提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中的<code>Http</code>请求细节。<strong>即对Feign接口的调用情况的监控和输出。</strong></p></blockquote><p><code>OpenFeign</code>日志级别</p><blockquote><p>NONE：默认的，不显示任何日志</p><p>BASIC：仅请求方法、URL、状态码及执行时间；</p><p>HEADERS：除了BASIC中定义的信息，还有请求和响应头信息；</p><p>FULL：除了HEADERS中定义的信息外，还有请求和响应正文及元数据。</p></blockquote><p>配置<code>OpenFeign</code>日志级别</p><p>通过配置类来配置 创建配置类<code>FeignConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code>中配置日志显示级别</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以声明级别监控那个接口 监控如下接口 并且控制台打印日志以debug级别打印 这样可以将所有日志信息都打印出</span></span><br><span class="line">    <span class="attr">com.dyw.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>重启服务调用接口查看控制台日志</p><p><code>http://localhost:81/consumer/payment/feign/timeout</code></p><p>控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220726190509735.png" alt="image-20220726190509735"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-OpenFeign&quot;&gt;&lt;a href=&quot;#Spring-Cloud-OpenFeign&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-OpenFeign&quot;&gt;&lt;/a&gt;Spring Cloud-OpenFei</summary>
      
    
    
    
    <category term="服务调用" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Ribbon</title>
    <link href="https://devildyw.github.io/2022/07/24/Spring%20Cloud-Ribbon/"/>
    <id>https://devildyw.github.io/2022/07/24/Spring%20Cloud-Ribbon/</id>
    <published>2022-07-24T06:18:37.000Z</published>
    <updated>2022-07-29T15:47:07.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud-Ribbon"></a>Spring Cloud-Ribbon</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud Ribbon是基于NetFlix Ribbon实现的一套<strong>客户端 均衡负载工具</strong></p><p>Ribbon &#x3D; 负载均衡 + RestTemplate</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面的所有机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><blockquote><p><a href="https://github.com/Netflix/ribbon/wiki">Netflix-Ribbon-wiki</a></p><p>注意：Ribbon已经进入了维护阶段，Spring Cloud意向使用<code>LoadBalancer</code>替换</p></blockquote><h2 id="LB负载均衡（Load-Balance）是什么"><a href="#LB负载均衡（Load-Balance）是什么" class="headerlink" title="LB负载均衡（Load Balance）是什么"></a>LB负载均衡（Load Balance）是什么</h2><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到HA（高可用）。</p><p>常见的负载均衡右软件<code>Nginx</code>、<code>LVS</code>、硬件 F5等。</p><h3 id="集中式LB"><a href="#集中式LB" class="headerlink" title="集中式LB"></a>集中式LB</h3><p>即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如Nginx），由该设施负责把访问请求通过某种策略转发至服务的提供方。</p><h3 id="进程内LB"><a href="#进程内LB" class="headerlink" title="进程内LB"></a>进程内LB</h3><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p><strong>Ribbon就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><h2 id="Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别"><a href="#Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别" class="headerlink" title="Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别"></a>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</h2><p>Nginx是服务器负载均衡，客户端所有请求都会将给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。（被动 消费方被动）</p><p>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程调用技术。（主动 消费方主动）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Ribbon其实就是一个软负载均衡的客户端软件，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。</p><h2 id="Pom依赖"><a href="#Pom依赖" class="headerlink" title="Pom依赖"></a>Pom依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-ribbon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在之前的入门项目Eureka案例中我们并没有显式的添加Ribbon依赖，但是依旧可以使用负载均衡的原因就是我们引入的<code>spring-cloud-starter-netflix-eureka-client</code>中自带了Ribbon，consul，zookeeper也是如此（新版本的Spring Cloud中所有原本自带Ribbon的包都被换为了Spring Cloud自己的Load Balancer）</p><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><blockquote><p><a href="https://devildyw.github.io/2022/04/16/restTemplate/#RestTemplate">restTemplate | Devil的个人博客 (devildyw.github.io)</a></p></blockquote><h2 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRule</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     根据键 @return 选择的服务器对象从 lb.allServers 或 lb.upServers 中选择一个活动服务器。如果没有可用的服务器，则返回 NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ILoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">()</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ribbon默认自带的负载规则"><a href="#Ribbon默认自带的负载规则" class="headerlink" title="Ribbon默认自带的负载规则"></a>Ribbon默认自带的负载规则</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724154432864.png" alt="image-20220724154432864"></p><p>IRule：根据特定算法中从服务列表中选取一个要访问的服务。</p><table><thead><tr><th align="center">类名</th><th align="center">策略</th></tr></thead><tbody><tr><td align="center"><strong><code>com.netflix.loadbalancer.RoundRobinRule</code></strong></td><td align="center">轮询</td></tr><tr><td align="center"><strong><code>com.netflix.loadbalancer.RandomRule</code></strong></td><td align="center">随机</td></tr><tr><td align="center"><strong><code>com.netflix.loadbalancer.RetryRule</code></strong></td><td align="center">先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务。</td></tr><tr><td align="center"><strong><code>WeightResponseTimeRule</code></strong></td><td align="center">对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择。</td></tr><tr><td align="center"><strong><code>BestAvailableRule</code></strong></td><td align="center">会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。</td></tr><tr><td align="center"><strong><code>AvailabilityFilteringRule</code></strong></td><td align="center">先过滤掉故障实例，再选择并发较小的实例</td></tr><tr><td align="center"><strong><code>ZoneAvoidanceRule</code></strong></td><td align="center">默认规则，复合判断Server所在区域的性能和server的可用性选择服务器</td></tr></tbody></table><h3 id="如何替换负载均衡策略"><a href="#如何替换负载均衡策略" class="headerlink" title="如何替换负载均衡策略"></a>如何替换负载均衡策略</h3><p>修改工程<code>Cloud-eureka-consumer-order80</code>,编写自定义配置类替换自己的负载均衡策略。</p><h4 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h4><blockquote><p>官方警告：这个自定义配置类不能放在<code>@ComponentScan</code>所扫描的当前包下以及子包下（即不要放在@SpringBootApplication所在类也叫启动类的本包或子包中），否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p></blockquote><p>因为这个细节所以需要新建一个包，与原来启动类所在的包分割开。</p><h4 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h4><p>新建包<code>com.dyw.myRule</code></p><h4 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h4><p><code>MySelfRule</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyselfRule</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>(); <span class="comment">//定义为随机策略 默认是轮询</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主启动类上添加-RibbonClient"><a href="#主启动类上添加-RibbonClient" class="headerlink" title="主启动类上添加@RibbonClient"></a>主启动类上添加@RibbonClient</h4><p>在主启动类上添加该注解配置，指定那个远程服务使用那种负载均衡配置类中的策略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MyselfRule.class)</span> <span class="comment">//指定那个服务使用那种配置类中的策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动测试-http-localhost-80-consumer-payment-get-1547134537463402497"><a href="#启动测试-http-localhost-80-consumer-payment-get-1547134537463402497" class="headerlink" title="启动测试 http://localhost:80/consumer/payment/get/1547134537463402497"></a>启动测试 <code>http://localhost:80/consumer/payment/get/1547134537463402497</code></h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547134537463402497</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547134537463402497</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>连续访问两次都是8001服务响应说明已经不再是轮询机制 而是随机。</p><h2 id="Ribbon默认负载均衡算法–轮询原理"><a href="#Ribbon默认负载均衡算法–轮询原理" class="headerlink" title="Ribbon默认负载均衡算法–轮询原理"></a>Ribbon默认负载均衡算法–轮询原理</h2><p>负载均衡算法：rest接口第几次请求数%服务器集群总数量 &#x3D; 实际调用服务器位置下标，每次服务重启后rest接口计数从1开始。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.loadbalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最广为人知的基本负载均衡策略，即 Round Robin Rule。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nikos Michalakis &lt;nikos@netflix.com&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter; <span class="comment">//JDK自带的原子计数器 用来记录rest接口访问的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">AVAILABLE_ONLY_SERVERS</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">ALL_SERVERS</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RoundRobinRule.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">()</span> &#123;</span><br><span class="line">        nextServerCyclicCounter = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>); <span class="comment">//初始化计数器为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">(ILoadBalancer lb)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        setLoadBalancer(lb);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//choose核心算法 进行负载均衡获取服务器</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有负载均衡的实例 即认为没有指定负载均衡策略 因为Ribbon中的每一个负载均衡策略都对应一个实例 这里直接返回null 计算不出获取那个服务器的信息</span></span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//给予10次查询服务器的机会 是避免获取服务失败，例如获取服务时，刚好这个服务宕机了，那么这次请求就废了</span></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="literal">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            List&lt;Server&gt; reachableServers = lb.getReachableServers(); <span class="comment">//获取那些已启动且可访问的服务器。</span></span><br><span class="line">            List&lt;Server&gt; allServers = lb.getAllServers(); <span class="comment">//获取所有已知的服务器，包括可访问和不可访问。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">upCount</span> <span class="operator">=</span> reachableServers.size(); <span class="comment">//计算出可访问服务器的数量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allServers.size(); <span class="comment">//计算出所有已知服务器</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123; <span class="comment">//如果两个数量任意一个为0则代表没有可用服务器 直接返回null</span></span><br><span class="line">                log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextServerIndex</span> <span class="operator">=</span> incrementAndGetModulo(serverCount); <span class="comment">//根据所有已知服务器数量在通过计数器找到下一个轮询的节点的索引</span></span><br><span class="line">            server = allServers.get(nextServerIndex); <span class="comment">//根据索引获取到服务器节点实例</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123; <span class="comment">//如果为空</span></span><br><span class="line">                <span class="comment">/* Transient. */</span></span><br><span class="line">                Thread.yield(); <span class="comment">//让出当前线程使其重新进入cpu时间片竞选阶段</span></span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//线程重新执行后 进入下一个循环</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123; <span class="comment">//如果不为空 服务器还处于存活状态且服务器是可访问的那么直接返回当前服务器节点</span></span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Next. 如果不是则继续寻找 将server置为null 使其进入下一个循环</span></span><br><span class="line">            server = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123; <span class="comment">//如果轮询次数大于10了都没有找到可用的服务器节点则返回错误信息</span></span><br><span class="line">            log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span></span><br><span class="line">                    + lb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回null</span></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">incrementAndGetModulo</span><span class="params">(<span class="type">int</span> modulo)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">//这里是一个乐观锁 自旋锁</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> nextServerCyclicCounter.get(); <span class="comment">//获取计数器当前计数值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> (current + <span class="number">1</span>) % modulo; <span class="comment">//将当前计数器值加1在与传入服务器数量modulo取模则可计算出下一台轮询的服务器节点的索引</span></span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next)) <span class="comment">//AtomicInteger从内存偏移两种取出数据 如果取出的数据与current一样就将内存中的数据改为next </span></span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//核心算法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写轮询算法"><a href="#手写轮询算法" class="headerlink" title="手写轮询算法"></a>手写轮询算法</h3><p><strong>前提：</strong>注释掉主启动类上的<code>@RibbonClient</code>和RestTemplate配置类中的<code>@LoadBalancer</code> 旨在取消Ribbon的负载均衡。</p><ol><li><p>在<code>Cloud-eureka-provider-payment8001</code> <code>Cloud-eureka-provider-payment8002</code> 新增接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/lb&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getPaymentLB</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> serverPort;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>新建接口<code>loadBalancer</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoadBalancer</span> &#123;</span><br><span class="line">    ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span>; <span class="comment">//获取服务器实例 实现负载均衡算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现接口 实现自己的轮询算法<code>MyLB</code> （根据Ribbon轮询源码）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.springcloud.lb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-24-19:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLB</span> <span class="keyword">implements</span> <span class="title class_">LoadBalancer</span>&#123;</span><br><span class="line">    <span class="comment">//初始化计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载均衡轮询策略计算出的节点索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="comment">//当前节点</span></span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="comment">//下一个节点</span></span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123; <span class="comment">//自旋锁</span></span><br><span class="line">            current = <span class="built_in">this</span>.atomicInteger.get();</span><br><span class="line">            <span class="comment">//防止Integer类型变量越界</span></span><br><span class="line">            next = current &gt;= Integer.MAX_VALUE ? <span class="number">0</span> : current+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="built_in">this</span>.atomicInteger.compareAndSet(current,next));<span class="comment">//AtomicInteger从内存偏移两种取出数据 如果取出的数据与current一样就将内存中的数据改为next并且返回true 是为了保障线程安全而使用一种乐观锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*****next&quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        <span class="comment">//通过负载均衡算法计算出的索引取 服务器列表取出对应索引的服务器实例并返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getAndIncrement() % serviceInstances.size();</span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个则是我们自定义的负载均衡的接口</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有它才能获取注册中心中的服务器实例列表</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/lb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentLB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//首先获取指定服务的服务器实例列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="comment">//判断服务器列表是否为空 如果是直接返回空</span></span><br><span class="line">        <span class="keyword">if</span> (instances==<span class="literal">null</span>||instances.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过自定义的负载均衡算法获取服务实例</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> loadBalancer.instances(instances);</span><br><span class="line">        <span class="comment">//再获取服务器的实例的uri 通过这个uri借助resttemplate去访问服务 这也是我们去掉RestTemplate配置类上@LoadBalancer的原因 加上这个注解会让RestTemplate通过服务名称去访问服务 而我们使用的是uri 是ip端口的格式 服务器列表中是没有这样的服务的所以会报错</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">8001</span><br><span class="line">8002</span><br><span class="line">8001</span><br><span class="line">8002</span><br></pre></td></tr></table></figure><p>轮询成功，算法成功。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Ribbon&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Ribbon&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Ribbon&quot;&gt;&lt;/a&gt;Spring Cloud-Ribbon&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="服务调用" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Consul</title>
    <link href="https://devildyw.github.io/2022/07/23/Spring%20Cloud-Consul/"/>
    <id>https://devildyw.github.io/2022/07/23/Spring%20Cloud-Consul/</id>
    <published>2022-07-23T15:00:25.000Z</published>
    <updated>2022-07-29T15:45:26.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud-Consul"></a>Spring Cloud-Consul</h1><p><a href="https://www.consul.io/docs/intro">Consul官网</a></p><p><a href="https://yushuai-w.gitbook.io/consul/intro">Consul中文文档</a></p><p><a href="https://www.springcloud.cc/spring-cloud-consul.html">Spring Cloud Consul 中文文档 参考手册 中文版</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality. Each of these features can be used individually as needed, or they can be used together to build a full service mesh. Consul requires a data plane and supports both a proxy and native integration model. Consul ships with a simple built-in proxy so that everything works out of the box, but also supports 3rd party proxy integrations such as Envoy.</p><p>翻译：Consul是一个<strong>服务网格</strong>解决方案，提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些功能中的每一项都可以根据需要单独使用，也可以一起使用来构建一个完整的<strong>服务网格</strong>。Consul需要一个数据平面，并支持代理和原生集成模型。Consul提供了一个简单的内置代理，因此一切都可以开箱即用，但也支持第三方代理集成，如<strong>Envoy</strong>。 </p><p>优点: 基于Raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持跨数据中心的WAN集群，提供图形界面，跨平台，支持<code>linux</code>、<code>mac</code>、<code>windows</code></p></blockquote><h3 id="Consul的特点"><a href="#Consul的特点" class="headerlink" title="Consul的特点"></a>Consul的特点</h3><p><strong>consul的主要特点有：</strong></p><ul><li><strong>Service Discovery(服务发现)：</strong>Consul的客户端可以注册一个服务，比如<code>api</code>或<code>mysql</code>，其他客户端可以使用Consul来发现特定服务的提供者。使用<code>DNS</code>或<code>HTTP</code>，应用程序可以很容易地找到他们所依赖的服务。</li><li><strong>Health Checking(健康检查)：</strong>Consul客户端可以提供任何数量的健康检查，要么与给定的服务相关联（如： “<code>webserver</code>是否返回200 OK”），要么与本地节点相关联（如： “内存利用率是否低于90%”）。这些信息可以运维人员用来<strong>监控集群的健康状况</strong>，并被服务发现组件来路由流量（比如： 仅路由到健康节点）</li><li><strong>KV Store(KV存储)：</strong>应用程序可以利用Consul的<strong>层级K&#x2F;V</strong>存储来实现任何目的，包括动态配置、功能标记、协调、领导者选举等。Consul提供了HTTP <code>API</code>，使其非常简单以用。</li><li><strong>Secure Service Communication(安全服务通信)：</strong>Consul可以为服务生成和分发<code>TLS</code>（ <a href="https://baike.baidu.com/item/TLS">传输层安全性协议</a>）证书，以建立相互的<code>TLS</code>连接。可以使用<a href="https://www.consul.io/docs/connect/intentions">Intention</a>来定义哪些服务被允许进行通信。服务隔离可以通过可以实时更改<a href="https://www.consul.io/docs/connect/intentions">Intention</a>策略轻松管理，而不是使用复杂的网络拓扑结构和静态防火墙规则。</li><li><strong>Multi Datacenter(多数据中心)：</strong>Consul支持开箱即用的<strong>多数据中心</strong>。这意味着Consul的用户不必担心建立额外的抽象层来发展到多个区域。 </li><li><strong>可视化的图形界面</strong></li></ul><h2 id="Consul安装"><a href="#Consul安装" class="headerlink" title="Consul安装"></a>Consul安装</h2><p><strong>这里使用docker部署。</strong></p><ol><li><p>拉取Consul镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull consul <span class="comment"># 默认拉取latest</span></span><br><span class="line">$ docker pull consul:1.6.1 <span class="comment"># 拉取指定版本</span></span><br></pre></td></tr></table></figure></li><li><p>安装并运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8500:8500 --restart=always --name=consul consul:latest agent -server -bootstrap -ui -node=1 -client=<span class="string">&#x27;0.0.0.0&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>agent: 表示启动 Agent 进程。</li><li>server：表示启动 Consul Server 模式</li><li>client：表示启动 Consul <code>Cilent</code> 模式。</li><li>bootstrap：表示这个节点是 Server-Leader ，每个数据中心只能运行一台服务器。技术角度上讲 Leader 是通过 Raft 算法选举的，但是集群第一次启动时需要一个引导 Leader，在引导群集后，建议不要使用此标志。</li><li><code>ui</code>：表示启动 Web<code>UI</code>管理器，默认开放端口 8500，所以上面使用 Docker 命令把 8500 端口对外开放。</li><li>node：节点的名称，集群中必须是唯一的，默认是该节点的主机名。</li><li><code>client</code>：consul服务侦听地址，这个地址提供HTTP、<code>DNS</code>、<code>RPC</code>等服务，默认是127.0.0.1所以不对外提供服务，<strong>如果你要对外提供服务改成0.0.0.0</strong></li><li>join：表示加入到某一个集群中去。 如：<code>-json=192.168.0.11</code>。</li></ul></blockquote></li><li><p>如果是云服务器请在云服务器平台中开放8500端口，如果是虚拟机那么需要关闭防火墙</p></li><li><p>运行成功并且端口开放后，我们可以在访问<code>http://服务器ip:端口/ui</code>，得到如下界面表示安装运行成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723233530709.png" alt="image-20220723233530709"></p></li></ol><hr><p><strong><code>Spring Cloud</code>整合<code>Consul</code>代替<code>Eureka</code></strong></p><h2 id="新建父工程"><a href="#新建父工程" class="headerlink" title="新建父工程"></a>新建父工程</h2><ol><li><p>新建工程<code>Cloud-04-Consul</code></p></li><li><p>添加<code>pom.xml</code>中的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consul-payment8006<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consul-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><ol><li><p>创建工程<code>Cloud-zookeeper-payment8006</code></p></li><li><p><code>pom.xml</code>配置依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        springcloud 整合consul的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line"><span class="comment"># consul注册中心的地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="comment"># 开启心跳检测</span></span><br><span class="line">        <span class="attr">heartbeat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8006</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动图形界面检测测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723235723693.png" alt="image-20220723235723693"></p></li><li><p>接口访问测试 <code>http://localhost:8006/payment/consul</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723235854586.png" alt="image-20220723235854586"></p></li></ol><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><ol><li><p>创建工程<code>Cloud-consul-order80</code></p></li><li><p>添加<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consul-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        springcloud 整合consul的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">heartbeat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类 配置<code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//开启RestTemplate的负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动图形界面检测测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724001010438.png" alt="image-20220724001010438"></p></li><li><p>接口访问测试 <code>http://localhost:81/consumer/payment/consul</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724001054090.png" alt="image-20220724001054090"></p></li></ol><h2 id="生产者集群"><a href="#生产者集群" class="headerlink" title="生产者集群"></a>生产者集群</h2><p>与Eureka类似，只需要多个提供相同的服务的生产者注册到同一个服务名称下即可，如果要使用消费者的<code>RestTemplate</code>访问记得加上<code>@LoadBalanced</code>注解即可（负载均衡 如果不加会报错）。</p><h2 id="Consul、Zookeeper和Eureka之间的区别"><a href="#Consul、Zookeeper和Eureka之间的区别" class="headerlink" title="Consul、Zookeeper和Eureka之间的区别"></a>Consul、Zookeeper和Eureka之间的区别</h2><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>Spring Cloud集成</th></tr></thead><tbody><tr><td><strong>Eureka</strong></td><td>Java</td><td>AP</td><td>可配支持</td><td><code>HTTP</code></td><td><strong>已集成</strong></td></tr><tr><td><strong>Consul</strong></td><td>Go</td><td><code>CP</code></td><td>支持</td><td><code>HTTP/DNS</code></td><td><strong>已集成</strong></td></tr><tr><td><strong>Zookeeper</strong></td><td>Java</td><td><code>CP</code></td><td>支持</td><td>客户端</td><td><strong>已集成</strong></td></tr></tbody></table><blockquote><p>相关文章：<a href="https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/">CAP理论</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Consul&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Consul&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Consul&quot;&gt;&lt;/a&gt;Spring Cloud-Consul&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>CAP理论</title>
    <link href="https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/"/>
    <id>https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/</id>
    <published>2022-07-22T05:50:12.000Z</published>
    <updated>2022-07-23T16:26:28.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>CAP理论告诉我们，一个分布式系统不可能同时满足以下三种</p><p>⚫ 一致性（C:Consistency） </p><p>⚫ 可用性（A:Available） </p><p>⚫ 分区容错性（P:Partition Tolerance）</p><p>这三个基本需求，最多只能同时满足其中的两项，因为P是必须的，因此往往选择就在CP或者AP中。 </p><ol><li><p><strong>一致性</strong>（<strong>C:Consistency</strong>）</p><p>在分布式环境中，一致性是指数据在多个副本之间是否能够保持数据一致的特性。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。 </p></li><li><p><strong>可用性</strong>（<strong>A:Available</strong>）</p><p>可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。 </p></li><li><p><strong>分区容错性</strong>（<strong>P:Partition Tolerance</strong>）</p><p>分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p></li></ol><p><strong>ZooKeeper保证的是CP</strong></p><ol><li><strong><code>ZooKeeper</code>不能保证每次服务请求的可用性。</strong>（注：在极端环境下，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果）。所以说，ZooKeeper不能100%保证服务可用性。 </li><li><strong>进行Leader选举时集群都是不可用。</strong></li></ol><p><strong>Eureka保证的是AP</strong></p><h2 id="AP架构"><a href="#AP架构" class="headerlink" title="AP架构"></a>AP架构</h2><p>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性</p><p><strong>结论：违背了一致性C的要求，只满足可用性和分区容错性，即AP</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724002343024.png" alt="image-20220724002343024"></p><h2 id="CP架构"><a href="#CP架构" class="headerlink" title="CP架构"></a>CP架构</h2><p>当网络分区出现后，为了而保证一致性，就必须拒接请求，否则无法保证一致性</p><p><strong>结论：违背了可用性A的要求，只满足一致性和分区容错性，即CP</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724002423706.png" alt="image-20220724002423706"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CAP理论&quot;&gt;&lt;a href=&quot;#CAP理论&quot; class=&quot;headerlink&quot; title=&quot;CAP理论&quot;&gt;&lt;/a&gt;CAP理论&lt;/h1&gt;&lt;p&gt;CAP理论告诉我们，一个分布式系统不可能同时满足以下三种&lt;/p&gt;
&lt;p&gt;⚫ 一致性（C:Consistency） &lt;</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ZAB</title>
    <link href="https://devildyw.github.io/2022/07/21/ZAB/"/>
    <id>https://devildyw.github.io/2022/07/21/ZAB/</id>
    <published>2022-07-21T15:31:32.000Z</published>
    <updated>2022-07-22T05:49:39.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议"><a href="#Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议" class="headerlink" title="Zookeeper Atomic Broadcast(Zookeeper 原子广播协议)"></a><code>Zookeeper Atomic Broadcast</code>(<code>Zookeeper</code> 原子广播协议)</h1><h2 id="什么是ZAB算法"><a href="#什么是ZAB算法" class="headerlink" title="什么是ZAB算法"></a>什么是<code>ZAB</code>算法</h2><p><code>Zab</code>借鉴了<code>Paxos</code>算法(<code>Multi Paxos</code>)，是特别为<code>Zookeeper</code>设计的支持崩溃回复的原子广播协议。基于该协议，<code>Zookeeper</code>设计了为只有一台客户端(Leader)负责处理外部的写事务请求，然后Leader客户端将数据同步到其他Follower节点。即<code>Zookeeper</code>只有一个Leader可以发起提案。</p><h2 id="ZAB协议内容"><a href="#ZAB协议内容" class="headerlink" title="ZAB协议内容"></a><code>ZAB</code>协议内容</h2><p><code>ZAB</code>协议包括两种基本的模式：消息广播、崩溃恢复。</p><h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722122448654.png" alt="image-20220722122448654"></p><ol><li>客户端发起一个写操作请求。</li><li>Leader服务器将客户端的请求转化为事务Proposal提案，同时为每个Proposal分配一个全局ID，即<code>zxid</code></li><li>Leader服务器<strong>为每个Follower服务器分配一个单独的队列</strong>，然后将需要广播的Proposal依次放到队列中去，并且根据FIFO策略进行消息发送。</li><li>Follower接受到Proposal后，会首先将起以事务日志的方式是写入本地磁盘中，写入成功后向Leader反馈一个<code>Ack</code>响应消息</li><li>Leader接收到<strong>超过半数以上</strong>Follower的<code>Ack</code>响应消息后，即认为消息发送成功，可以发送commit消息</li><li>Leader向<strong>所有Follower</strong>广播commit消息，同时自身也会完成事务提交。Follower接受到commit消息后，会将上一条事务提交</li><li><code>Zookeeper</code>采用<code>Zab</code>协议的核心，就是只要有一台服务器提交Proposal，就要确保所有服务器最终都能正确提交Proposal。</li></ol><blockquote><p><code>ZAB</code>协议针对事务请求的处理过程类似于一个两阶段提交过程</p><ol><li>广播事务阶段</li><li>广播提交阶段</li></ol><p>这两个阶段提交模型如下，有可能因为Leader宕机带来数据不一致，比如</p><ol><li>Leader发起一个事务<code>Proposal1</code>后就宕机，Follower都没有<code>Proposal1</code></li><li>Leader收到半数<code>ACK</code>宕机，没来得及向Follower发送Commit</li></ol><p><strong>为了解决上述问题，<code>ZAB</code>引入了崩溃恢复模式。</strong></p></blockquote><h4 id="崩溃恢复–异常假说"><a href="#崩溃恢复–异常假说" class="headerlink" title="崩溃恢复–异常假说"></a>崩溃恢复–异常假说</h4><p>一旦Leader服务器出现崩溃或者由于网络原因导致Leader服务器失去了与过半Follower的联系，那么就会进入<strong>崩溃恢复模式</strong>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722131218448.png" alt="image-20220722131218448"></p><ol><li><strong>假设两种服务器异常情况</strong><ol><li>假设一个事务在Leader提出之后，Leader挂了。</li><li>一个事务在Leader上提交了，并且过半的Follower都响应<code>Ack</code>了，但是Leader在Commit消息发出之前挂了。</li></ol></li><li><strong><code>Zab</code>协议崩溃恢复要求满足以下两个要求：</strong><ol><li>确保已经被Leader提交的提案Proposal，必须最终被所有的Follower服务器提交。(<strong>已经产生的提案，Follower必须执行</strong>)</li><li>确保丢弃已经被Leader提出的但是没有被提交的Proposal。(<strong>丢弃胎死腹中的提案</strong>)</li></ol></li></ol><h4 id="崩溃恢复–Leader选举"><a href="#崩溃恢复–Leader选举" class="headerlink" title="崩溃恢复–Leader选举"></a>崩溃恢复–Leader选举</h4><p>崩溃恢复主要包括两个部分：<strong>Leader选举和数据恢复</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722131903208.png" alt="image-20220722131903208"></p><p><strong>Leader选举：</strong>根据上述要求，<code>Zab</code>协议需要保证选举出来的Leader需要满足以下条件：</p><ol><li>新选举出来的Leader不能包括未提交的Proposal。<strong>即新Leader必须都是已经提交了Proposal的Follower服务器节点。</strong></li><li><strong>新选举的Leader节点中含有最大的<code>zxid</code>。</strong>这样做的好处是可以避免Leader服务器检查Proposal的提交和丢弃工作。(因为它自身的<code>zxid</code>最大所以它有着最新的操作记录，所以不需要去检查其他服务器的Proposal的提交和丢弃，他自己就可以知道)</li></ol><h4 id="崩溃恢复–数据恢复"><a href="#崩溃恢复–数据恢复" class="headerlink" title="崩溃恢复–数据恢复"></a>崩溃恢复–数据恢复</h4><p>崩溃恢复主要包括两个部分：<strong>Leader选举和数据恢复</strong></p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722132241185.png" alt="image-20220722132241185"  /><p><strong><code>Zab</code>如何数据同步：</strong></p><ol><li>完成Leader选举后，在正式开始工作之前（接收事务请求，然后提出新的Proposal），<strong>Leader服务器会首先确认事务日志中的所有Proposal是否已经被集群中过半的服务器Commit。</strong>（在正式工作之前需要将日志中的数据同步）</li><li>Leader服务器需要确保所有的Follower服务器能够接收到每一条事务的Proposal，并且能将所有已经提交的事务Proposal应用到内存数据中。<strong>等到Follower将所有尚未同步的事务Proposal都从Leader服务器上同步过，并且应用到内容数据中以后，Leader次啊会把该Follower加入到真正可用的Follower列表中。</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议&quot;&gt;&lt;a href=&quot;#Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议&quot; class=&quot;headerlink&quot; title=&quot;Zookee</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Paxos-wiki</title>
    <link href="https://devildyw.github.io/2022/07/21/Paxos-wiki/"/>
    <id>https://devildyw.github.io/2022/07/21/Paxos-wiki/</id>
    <published>2022-07-21T15:28:44.000Z</published>
    <updated>2022-07-22T04:16:03.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Paxos-wiki-转载"><a href="#Paxos-wiki-转载" class="headerlink" title="Paxos-wiki(转载)"></a>Paxos-wiki(转载)</h1><p>Paxos算法是莱斯利·兰伯特（英语：Leslie Lamport，LaTeX中的“La”）于1990年提出的一种基于消息传递且具有高度容错特性的一致性算法。本文是对维基百科上<a href="https://en.wikipedia.org/wiki/Paxos_(computer_science)">Paxos算法文献</a>的翻译。</p><h2 id="假设条件"><a href="#假设条件" class="headerlink" title="假设条件"></a>假设条件</h2><p>为了简化 Paxos 的介绍, 先明确以下假设和定义。</p><h3 id="Processors"><a href="#Processors" class="headerlink" title="Processors"></a>Processors</h3><ul><li>Processors 以任意速度运行。</li><li>Processors 可能会遇到故障。</li><li>具有稳定存储的 Processors 在失败后可以重新加入协议（遵循崩溃-恢复故障模型）。</li><li>不会发生拜占庭将军问题。</li></ul><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul><li>每个 Processor 可以将消息发送到其它任何 Processor。</li><li>消息是异步发送的，可能要花很长时间才能发出。</li><li>消息可能会丢失、乱序或重复。</li><li>消息在发送过程中没有损坏（即没发生拜占庭式故障）。</li></ul><h3 id="Processor的数量"><a href="#Processor的数量" class="headerlink" title="Processor的数量"></a>Processor的数量</h3><p>通常，使用 n&#x3D;2F+1 个 Processor 可以在 F 个 Processor 同时发生故障时依然保持共识算法的正常运行：换句话说，非故障的 Processor 数量必须大于故障的 Processor 数量。然而，采用重新配置，可以使用一个协议，允许不超过 F 的任意数量的同时故障。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>在 Paxos 中，Processor 的行为取决于它的角色：client、acceptor、proposer、learner 和 leader。在典型实现中，同一个 Processor 可以扮演多个角色，这不会影响协议的正确性——合并角色通常能改善延迟并减少消息数量。</p><ul><li>Client: 客户端向分布式系统发出请求，然后等待响应。例如，对分布式文件服务器中文件的写请求。</li><li>Acceptor (Voters): Acceptor 扮演一个协议中容错存储的角色，法定人数由多个 Acceptor 组成，任何一个消息都必须发送给法定人数。如果法定人数中的其他 Acceptor 没能收到消息副本，那么这条消息将被忽略。</li><li>Proposer: 向 Acceptors 提出 Client 的请求，并在冲突发生的时候，起到冲突调节的作用。</li><li>Learner: 在协议中充当备份的角色。一旦 Client 的请求被 Acceptors 同意了，Learner 将执行请求并将响应发送给 Client。为了提高可用性，可以添加多个 Learner。</li><li>Leader: Paxos 需要一个特殊的 Proposer （称为 Leader），Proposer 们认为自身就是 Leader，但是只有在这些 Proposer 中最终选出一个 Leader 时，协议才能正常运行。如果两个 Proposer 认为他们自身是 Leader，那么他们会通过不断提出彼此间冲突的更新，致使协议拖延。但是在这种情况下，安全性仍能得到保证。</li></ul><h3 id="法定人数"><a href="#法定人数" class="headerlink" title="法定人数"></a>法定人数</h3><p>法定人数通过确保那些存活的 processor 仍保留结果来保证 Paxos 的一致性。法定人数是 Acceptors 的子集，因此任意两个子集（即任意两组法定人数）至少有一个成员是共享的。通常，法定人数是 Acceptors 中的多数派，例如，给定一组 Acceptors {A，B，C，D}，法定人数可以是任意三个 Acceptors: {A，B，C}，{A，C，D}，{A，B，D} ，{B，C，D}。同样，可以将任意权重分配给 Acceptors，此时，法定人数可以定义为权重大于所有 Acceptors 总权重一半的任意子集。</p><h3 id="提案编号和内容"><a href="#提案编号和内容" class="headerlink" title="提案编号和内容"></a>提案编号和内容</h3><p>Acceptor 可能接受或者不接受收到的每一个带有 提案内容v 的提案。Proposer 提出的每个提案都有一个唯一编号。例如，每一个提案都可以 （n，v） 表示，其中 n 是提案的唯一编号，v 是提案内容。在运行 Paxos 协议时，某个提案编号对应的提案内容可以参与运算，但这是不必要的。</p><h2 id="Basic-Paxos"><a href="#Basic-Paxos" class="headerlink" title="Basic Paxos"></a>Basic Paxos</h2><p>Basic Paxos 是 Paxos 协议族中最基本的一种协议。Basic Paxos 的每一个实例（或 “操作”）都决定了一个输出值。这个协议会进行多轮。一个成功的轮次有两个阶段：阶段1（分为 a 和 b 两个部分）和阶段2（分为 a 和 b 两个部分）。参见下面对各阶段的描述。我们假设一个异步模型，一个 processor 可能在其中一个阶段而另一个 processor 可能在另一个阶段。</p><h3 id="阶段1"><a href="#阶段1" class="headerlink" title="阶段1"></a>阶段1</h3><h4 id="阶段1a：Prepare"><a href="#阶段1a：Prepare" class="headerlink" title="阶段1a：Prepare"></a>阶段1a：<em>Prepare</em></h4><p>一个 Proposer 创建了一条消息，我们把这条消息称 <em>Prepare</em> 消息，并确认一个数 n，注意，n 不是提案内容，而只是一个数字，它由 Proposer 唯一标识此初始消息（发送给 Acceptors）。而 n 必须比这个 Proposer 在之前创建的任何 <em>Prepare</em> 消息的编号都要大。接着，它发送这个带有 n 的 <em>Prepare</em> 消息给 <a href="https://github.com/BitNile/paxos-wiki#%E8%A7%92%E8%89%B2">Acceptors</a> 的 <a href="https://github.com/BitNile/paxos-wiki#%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0">法定人数</a>。注意，<em>Prepare</em> 消息只包含了数字 n （也就是说，它没有包含提案的内容，提案的内容通常用 v 来表示）。Proposer 决定哪些 Acceptor 在法定人数中。如果无法与 Acceptors 中的多数派进行通信，则 Paxos 就不会进行下去。</p><h4 id="阶段1b：Promise"><a href="#阶段1b：Promise" class="headerlink" title="阶段1b：Promise"></a>阶段1b：<em>Promise</em></h4><p>任何一个 Acceptor 都在等待接收来自任意一个 Proposer 的 <em>Prepare</em> 消息，Acceptor 必须查看刚刚收到的 <em>Prepare</em> 消息中的提案编号 n。这里有两种情况：</p><ul><li>如果 n 大于 Acceptor 在之前从任何一个 Proposer 接收到的提案编号，则 Acceptor 必须向 Proposer 返回一条消息，我们称这个消息为 <em>Promise</em> 消息，用来忽略将来所有编号小于 n 的提案。如果 Acceptor 在过去的某个时候接受过提案，那么它必须在对 Proposer 的回复中包含先前的提案编号 m 和相应的提案内容 w。</li><li>否则（指的是 n 不大于 Acceptor 在之前从任何一个 Proposer 接收到的提案编号），Acceptor 可以忽略这个提案。在这种情况下，Paxos 不会进行。但是，为了优化起见，它会发送一个拒绝响应（<a href="https://en.wikipedia.org/wiki/NAK_(protocol_message)">Nack</a>）告诉 Proposer 它将不会与 n 达成共识。</li></ul><h3 id="阶段2"><a href="#阶段2" class="headerlink" title="阶段2"></a>阶段2</h3><h4 id="阶段2a：Accept"><a href="#阶段2a：Accept" class="headerlink" title="阶段2a：Accept"></a>阶段2a：<em>Accept</em></h4><p>如果 Proposer 收到了来自法定人数的 Acceptor 的 <em>Promise</em>消息，它需要给这个提案设定一个值 v。 如果任何 Acceptor 以前接受过任何提案，那么它们会将提案内容发送给 Proposer，Proposer 现在必须将其提案的内容 v 设置为 Acceptor 报告的最高的提案编号关联的内容 z。 如果到目前为止没有任何一个 Acceptor 接受过提案，那么 Proposer 可以选择它最初想要的提案内容 x。</p><p>Proposer 发送一个带有提案内容 v 和提案编号 n 的 <em>Accept</em> 消息（n，v）给具有法定人数的 Acceptor（n 和之前发送给 Acceptor 的 <em>Prepare</em> 消息中的提案编号是相同的）。所以，这个 <em>Accept</em> 消息又可以表示为 （n，v&#x3D;z），在之前没有 Acceptor 接收值的情况下，（n，v&#x3D;x）。</p><p>这个 <em>Accept</em> 消息应该被翻译为 “请求”，表示为“请接受该提案！”。</p><h4 id="阶段2b：Accepted"><a href="#阶段2b：Accepted" class="headerlink" title="阶段2b：Accepted"></a>阶段2b：<em>Accepted</em></h4><p>如果一个 Acceptor 接收了一个来自 Proposer 的 <em>Accept</em> 消息（n，v），当且仅当它尚未对提案编号大于 n 的提案作出承诺时（在 Paxos 协议的 阶段1b 中），它才必须接受该提案。（<strong>也就是说在这个阶段中，如果在还未对上一个提案做出接受时，另一个proposer发起一个提案编号大于n的新提案（在接受编号为n的提案号之前），Acceptor就会去讨论新的提案，放弃提案编号小的提案。</strong>）</p><p>如果 Acceptor 尚未对提案编号大于 n 的提案做出承诺时（在 Paxos 协议的 阶段1b 中），则应将（刚收到的 <em>Accept</em> 消息）的提案内容 v 注册为（协议的）共识，并发送一个 <em>Accepted</em> 消息给 Proposer 和每个 Learner（通常是 Proposer 本身）<br>否则，它将忽略这个 <em>Accept</em> 消息或请求。</p><p>注意，一个 Acceptor 可以接收多个提案。所以可能会发生以下情况：当另一个 Proposer 不知道要确定的新的提案内容时，使用一个更高的提案编号 n 来开始一个新的轮次。在这种情况下，即使 Acceptor 在早先接收了另外一个提案编号，Acceptor 仍然会承诺并且稍后接收新的（提案编号更大的）提案。在某些故障情况下，这些提案甚至可能会有不同的内容。但是 Paxos 协议会保证 Acceptor 最终会在一个值中达成共识。</p><h3 id="轮次失败的情况"><a href="#轮次失败的情况" class="headerlink" title="轮次失败的情况"></a>轮次失败的情况</h3><p>当多个 Proposer 发送冲突的 <em>Prepare</em> 消息，或者 Proposer 未能接收到法定人数的承诺或接收回复，该轮次会失败。在这些情况下，会开始另一个带有更高的提案编号的轮次。</p><h3 id="Paxos-能应用在-Leader-选举中"><a href="#Paxos-能应用在-Leader-选举中" class="headerlink" title="Paxos 能应用在 Leader 选举中"></a>Paxos 能应用在 Leader 选举中</h3><p>请注意，当 Acceptor 接收了一个请求，他也会承认 Proposer 的领导。因此，Paxos 也能够用来选举一个节点集群的 Leader。</p><h3 id="Basic-Paxos-的图形表示"><a href="#Basic-Paxos-的图形表示" class="headerlink" title="Basic Paxos 的图形表示"></a>Basic Paxos 的图形表示</h3><p>下面的流程图表示 Basic Paxos 协议应用的几种情况。这几种情况会说明 Basic Paxos 协议如何应对分布式系统中的一些组件 question 的故障。</p><p>注意：在首次提出提案时， <em>Promise</em>消息中返回的值为 “null”（因为在这个轮次之前，没有 Acceptor 接受过任意值）</p><h4 id="Basic-Paxos-的成功情况"><a href="#Basic-Paxos-的成功情况" class="headerlink" title="Basic Paxos 的成功情况"></a>Basic Paxos 的成功情况</h4><p>在下图中，有一个 client，一个 Proposer， 三个 Acceptor（即法定人数为 3）和两个 Learner（由2条垂直线表示）。该图表示第一轮成功的情况（即网络中没有进程失败）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>在这里，V 指的是 Va、Vb、Vc 中提案编号最大的提案内容。</p><h4 id="Basic-Paxos-的错误情况"><a href="#Basic-Paxos-的错误情况" class="headerlink" title="Basic Paxos 的错误情况"></a>Basic Paxos 的错误情况</h4><p>Basic Paxos 最简单的错误场景是一个 Acceptor 崩溃（当法定人数的 Acceptor 仍然存活）和 冗余的 Learner 崩溃。在这些情况下，协议不要求恢复（它仍然是成功的）：不需要额外的轮次或者消息。如下所示：（在接下来两个图表案例中）</p><h4 id="Acceptor-崩溃的-Basic-Paxos"><a href="#Acceptor-崩溃的-Basic-Paxos" class="headerlink" title="Acceptor 崩溃的 Basic Paxos"></a>Acceptor 崩溃的 Basic Paxos</h4><p>在下图中，法定人数中的其中一个 Acceptor 崩溃，所以法定人数变成了 2，在这种情况下，Basic Paxos 仍然可以成功。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |          |  |  !       |  |  !! FAIL !!</span><br><span class="line">   |         |&lt;---------X--X          |  |  Promise(1,&#123;Va, Vb, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|          |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X---------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |          |  |</span><br></pre></td></tr></table></figure><h4 id="冗余-Learner-的崩溃-Basic-Paxos"><a href="#冗余-Learner-的崩溃-Basic-Paxos" class="headerlink" title="冗余 Learner 的崩溃 Basic Paxos"></a>冗余 Learner 的崩溃 Basic Paxos</h4><p>在这种情况下，冗余的 Learner 中的其中一个崩溃了，但是 Basic Paxos 协议仍然能成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client Proposer         Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |         |          |  |  |       |  !  !! FAIL !!</span><br><span class="line">   |&lt;---------------------------------X     Response</span><br><span class="line">   |         |          |  |  |       |</span><br></pre></td></tr></table></figure><h4 id="一个-Proposer-崩溃的-Basic-Paxos"><a href="#一个-Proposer-崩溃的-Basic-Paxos" class="headerlink" title="一个 Proposer 崩溃的 Basic Paxos"></a>一个 Proposer 崩溃的 Basic Paxos</h4><p>在这种情况下，一个 Proposer 发送一个带有内容的消息后，在达成共识之前崩溃了。特殊地，它在发送 <strong>Accept</strong> 消息的过程中崩溃，只有法定人数的一个 Acceptor 收到了提案。此时，有一个新的 Proposer Leader 被选举出来（图中没有说明选举细节）。注意，在这种情况下有两轮（轮次从上往下进行）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client  Proposer        Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;Va, Vb, Vc&#125;)</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   |      |             |  |  |       |  |  !! Leader fails during broadcast !!</span><br><span class="line">   |      X------------&gt;|  |  |       |  |  Accept!(1,V)</span><br><span class="line">   |      !             |  |  |       |  |</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER !!</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;V, null, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(2,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="多个-Proposer-冲突的-Basic-Paxos"><a href="#多个-Proposer-冲突的-Basic-Paxos" class="headerlink" title="多个 Proposer 冲突的 Basic Paxos"></a>多个 Proposer 冲突的 Basic Paxos</h4><p>如果有多个 Proposer 认为自身是 Leader 的时候，这种情况是最复杂的。举个例子，当前的 Leader 可能崩溃后恢复，但是此时其他的 Proposer 已经选举了新 Leader。而恢复后的 Leader 仍不知道选举了新 leader，而试图开启一个和当前的 Leader 冲突的轮次。在下图中，展示了 4 种未成功的轮次，但其实有可能一直失败下去。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Leader         Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;null,null,null&#125;)</span><br><span class="line">   |      !             |  |  |       |  |  !! LEADER FAILS</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER (knows last number was 1)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER recovers</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 2, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(2)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 3</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(3)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(3,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER proposes, denied</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,Va)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Nack(3)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER tries 4</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(4)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Promise(4,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER proposes, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Accept!(3,Vb)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(4)</span><br><span class="line">   |      |  |          |  |  |       |  |  ... and so on ...</span><br></pre></td></tr></table></figure><h2 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi-Paxos"></a>Multi-Paxos</h2><p>Paxos 的典型部署需要连续不断的提案内容的流来充当对分布式状态机的命令。如果每个命令是 Basic Paxos 协议的单个实例的结果，则将导致大量的开销。</p><p>如果 Leader 比较稳定，就没必要再进行阶段一了。因此，对于将来具有相同领导者的协议的实例，可以跳过阶段一。</p><p>为了实现这一点，将第一轮连同每个值一起包括在内，每个值在同一轮中由同一 Leader 递增。 Multi-Paxos 将无故障消息延迟从4个延迟减少到2个延迟。</p><h3 id="Multi-Paxos-中消息流的图形表示"><a href="#Multi-Paxos-中消息流的图形表示" class="headerlink" title="Multi-Paxos 中消息流的图形表示"></a>Multi-Paxos 中消息流的图形表示</h3><h4 id="正常情况下的-Multi-Paxos"><a href="#正常情况下的-Multi-Paxos" class="headerlink" title="正常情况下的 Multi-Paxos"></a>正常情况下的 Multi-Paxos</h4><p>在下图中，只显示了 Basic-Paxos 协议的一个实例，其中有一个初始领导者（一个提议者）。注意，Multi-Paxos 由 Basic-Paxos 协议的几个实例组成。question</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  | --- First Request ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(N)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(N,I,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>在这里，V 指的是 Va、Vb、Vc 中提案编号最大的提案内容。</p><h4 id="可忽略阶段一的-Multi-Paxos"><a href="#可忽略阶段一的-Multi-Paxos" class="headerlink" title="可忽略阶段一的 Multi-Paxos"></a>可忽略阶段一的 Multi-Paxos</h4><p>在这种情况下，Basic-Paxos 协议的子序列实例（由I+1表示）使用相同的领导者，所以包含了 Prepare 和 Promise 子阶段的阶段一将被忽略。注意，Leader 应当是稳定的，即不应崩溃或更换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer       Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |  --- Following Requests ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I+1,W)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I+1,W)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="角色合并的-Multi-Paxos"><a href="#角色合并的-Multi-Paxos" class="headerlink" title="角色合并的 Multi-Paxos"></a>角色合并的 Multi-Paxos</h4><p>Multi-Paxos 的一个常见部署是将 Proposers、Acceptors 和 Learners 的角色合并为 Servers。所以，最后只有 Clients 和 Servers。下图代表 Basic-Paxos 协议的第一个“实例”，即当 Proposer、Acceptor 和 Learner 的角色合并为单个角色（称为 Server）时。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   |         |  |  | --- First Request ---</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Prepare(N)</span><br><span class="line">   |         |&lt;-X--X  Promise(N, I, &#123;Va, Vb&#125;)</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N, I, Vn)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N, I)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h4 id="当角色合并且-Leader-稳定时的-Multi-Paxos"><a href="#当角色合并且-Leader-稳定时的-Multi-Paxos" class="headerlink" title="当角色合并且 Leader 稳定时的 Multi-Paxos"></a>当角色合并且 Leader 稳定时的 Multi-Paxos</h4><p>如果 Leader 相同，则可以跳过阶段一。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N,I+1,W)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N,I+1)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h2 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h2><h3 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h3><p>假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。</p><p>由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。</p><p>参考：<a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">拜占庭将军问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Paxos-wiki-转载&quot;&gt;&lt;a href=&quot;#Paxos-wiki-转载&quot; class=&quot;headerlink&quot; title=&quot;Paxos-wiki(转载)&quot;&gt;&lt;/a&gt;Paxos-wiki(转载)&lt;/h1&gt;&lt;p&gt;Paxos算法是莱斯利·兰伯特（英语：Lesli</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Paxos</title>
    <link href="https://devildyw.github.io/2022/07/21/Paxos/"/>
    <id>https://devildyw.github.io/2022/07/21/Paxos/</id>
    <published>2022-07-21T13:39:07.000Z</published>
    <updated>2022-07-21T15:29:38.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Paxos算法详解"><a href="#Paxos算法详解" class="headerlink" title="Paxos算法详解"></a><code>Paxos</code>算法详解</h1><h2 id="前言–拜占庭将军问题"><a href="#前言–拜占庭将军问题" class="headerlink" title="前言–拜占庭将军问题"></a>前言–拜占庭将军问题</h2><p>在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。</p><blockquote><p>假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？</p></blockquote><p>解决方案大致可以理解成：先在所有的将军中选出一个大将军，用来做出所有的决定。</p><p>举例如下：假如现在一共有 3 个将军 A，B 和 C，每个将军都有一个随机时间的倒计时器，倒计时一结束，这个将军就把自己当成大将军候选人，然后派信使传递选举投票的信息给将军 B 和 C，如果将军 B 和 C 还没有把自己当作候选人（自己的倒计时还没有结束），并且没有把选举票投给其他人，它们就会把票投给将军 A，信使回到将军 A 时，将军 A 知道自己收到了足够的票数，成为大将军。在有了大将军之后，是否需要进攻就由大将军 A 决定，然后再去派信使通知另外两个将军，自己已经成为了大将军。如果一段时间还没收到将军 B 和 C 的回复（信使可能会被暗杀），那就再重派一个信使，直到收到回复。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/v2-24f50b80ff971e7a8ac6798b7fa5f726_720w.jpg" alt="img"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Paxos</code>是什么? <code>Paxos</code>算法是基于<strong>消息传递</strong>且具有<strong>高度容错特性</strong>的<strong>一致性算法</strong>，是目前公认的解决<strong>分布式一致性</strong>问题<strong>最有效</strong>的算法之一。    </p><p><code>Paxos</code>算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法,它使其获得了2013年图灵奖.</p><p>自<code>Paxos</code>问世以来就持续垄断了分布式一致性算法，<code>Paxos</code>这个名词几乎等同于分布式一致性。（Google Chubby的作者Mike Burrows说过这个世界上<strong>只有一种</strong>一致性算法，那就是<code>Paxos</code>，其它的算法都是<strong>残次品</strong>。）Google的很多大型分布式系统都采用了<code>Paxos</code>算法来解决分布式一致性问题，如Chubby、<code>Megastore</code>以及Spanner等。开源的<code>ZooKeeper</code>，以及<code>MySQL</code>5.7推出的用来取代传统的主从复制的<code>MySQL</code> Group Replication等纷纷采用<code>Paxos</code>算法解决分布式一致性问题。</p><p>然而，<code>Paxos</code>的最大特点<strong>就是难，不仅难以理解，更难以实现。</strong></p><h2 id="Paxos解决的问题"><a href="#Paxos解决的问题" class="headerlink" title="Paxos解决的问题"></a><code>Paxos</code>解决的问题</h2><p>在常见的分布式系统中，总会发生诸如<strong>机器宕机</strong>或<strong>网络异常</strong>（包括消息的延迟、丢失、重复、乱序，还有网络分区）等情况。<code>Paxos</code>算需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对<strong>某个数据的值</strong>达成<strong>一致</strong>，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p><p> <strong>注意：</strong>这里指的<strong>某个数据的值</strong>并不一定只是狭义上的某个数，它可以使日志，也可以是一条命令（command）… 根据应用场景的不同，<strong>某个数据的值</strong>有着不同得含义。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1752522-d2136179b456e13e.png" alt="问题产生的背景"></p><h2 id="Paxos介绍"><a href="#Paxos介绍" class="headerlink" title="Paxos介绍"></a><code>Paxos</code>介绍</h2><h3 id="Paxos的三种角色"><a href="#Paxos的三种角色" class="headerlink" title="Paxos的三种角色"></a><code>Paxos</code>的三种角色</h3><ul><li><strong>Proposer: 提议者</strong></li><li><strong>Acceptor: 决策者</strong></li><li><strong>Learners: 最终决策学习者</strong></li></ul><p>​    在具体的实现中，一个进程可能同时充当多种角色。比如一个进程可能及时<strong>Proposer又是Acceptor又是Learner。</strong></p><p>​    既然有提议者，那么一定有提议，这里还有个有很重的概念叫做<strong>提案（Proposal）</strong>。最终要达成一致的value就在提案里面。</p><p>Proposer可以提出（propose）提案；Acceptor可以接受（accept）提案；如果某个提案被选定（chosen），那么该提案里的value就被选定了。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721192011652.png" alt="image-20220721192011652"></p><ul><li>一个完整的<code>Paxos</code>算法流程分为三个阶段</li><li><code>Prepare</code>准备阶段<ul><li><code>Proposer</code>向多个<code>Acceptor</code>发出<code>Propose</code>请求<code>Promise</code>(承诺)</li><li><code>Acceptor</code>针对收到的<code>Propose</code>请求进行<code>Promise</code>(承诺)</li></ul></li><li><code>Accept</code>接收阶段<ul><li><code>Proposer</code>收到多数<code>Acceptor</code>承诺后,向<code>Acceptor</code>发出<code>Propose</code>请求</li><li><code>Acceptor</code>针对收到的<code>Propose</code>请求进行<code>Accept</code>处理</li></ul></li><li><code>Learn</code>学习阶段<ul><li><code>Proposer</code>将形成的决议发送给所有<code>Learners</code></li></ul></li></ul><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721192655799.png" alt="image-20220721192655799"></p><ol><li><code>Prepare</code>：<code>Proposer</code>生成全局唯一且递增的<code>Proposal ID</code>,向所有<code>Acceptor</code>发送<code>Propose</code>请求,这里无序携带提案内容,只携带<code>Proposal ID</code>即可</li><li><code>Promise</code>：<code>Accept</code>收到<code>Propose</code>请求后，做出”两个承诺，一个答应”。<ul><li>不在接收<code>Proposal ID</code>小于等于（注意：这里时&lt;&#x3D;）当前请求的<code>Propose</code>请求。</li><li>不在接收<code>Proposal ID</code>小于（注意：这里是&lt;）当前请求的<code>Accept</code>请求。</li><li>不违背以前做出的承诺下，回复已经Accept过的提案中<code>Proposal ID</code>最大的那个提案的<code>Value</code>和<code>Proposal ID</code>，没有则返回空值。</li></ul></li><li><code>Propose</code>：<code>Proposer</code>收到多数Acceptor的Promise答应后，从答应中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptor发送Propose请求。</li><li><code>Accept</code>：<code>Acceptor</code>收到Propose请求后，在不违背自己之前做出的承诺下（prepare阶段投了一票那么accpt阶段也会投），接受并持久化当前Proposal ID和提案Value。</li><li><code>Learn</code>：<code>Proposer</code>收到多数Acceptor的Accept后，决议形成，将形成的决议发送给所有Learner</li></ol><p><strong>下面我们针对上述描述做三种情况的推演举例：为了简化流程，我们这里不设置Learner。</strong></p><ol><li><p>有A1,A2,A3,A4,A5 5为议员，就税率问题进行决议。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721194726379.png" alt="image-20220721194726379"></p><ul><li>A1发起1号Proposal的Propose，等待Promise承诺；</li><li>A2-A5回应Promise；</li><li>A1在收到两份回复时，就会发起税率10%的Proposal；</li><li>A2-A5回应Accept；</li><li>通过Proposal，税率10%</li></ul></li><li><p>现在我们假设在A1提出提案的同时, A5决定将税率定为20%</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721195054681.png" alt="image-20220721195054681"></p><ul><li>A1，A5同时发起Propose（序号分别为1，2） </li><li>A2承诺A1，A4承诺A5，A3行为成为关键</li><li>情况1：A3先收到A1消息，承诺A1。 </li><li>A1发起Proposal（1，10%），A2，A3接受。</li><li>之后A3又收到A5消息，回复A1：（1，10%），并承诺A5。</li><li>A5发起Proposal（2，20%），A3，A4接受。之后A1，A5同时广播决议。</li></ul></li></ol><p><strong>Paxos 算法缺陷：在网络复杂的情况下，一个应用 Paxos 算法的分布式系统，可能很久无法收敛，甚至陷入活锁的情况。</strong></p><ol start="3"><li><p>现在我们假设在A1提出提案的同时, A5决定将税率定为20%</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721195627426.png" alt="image-20220721195627426"></p><ul><li>A1，A5同时发起Propose（序号分别为1，2） </li><li>A2承诺A1，A4承诺A5，A3行为成为关键</li><li>情况2：A3先收到A1消息，承诺A1。之后立刻收到A5消息，承诺A5。</li><li>A1发起Proposal（1，10%），无足够响应，A1重新Propose （序号3），A3再次承诺A1。 </li><li>A5发起Proposal（2，20%），无足够相应。A5重新Propose （序号4），A3再次承诺A5。 </li><li>……</li></ul></li></ol><p>​    造成这种情况的原因是系统中有一个以上的 <code>Proposer</code>，多个 <code>Proposers</code> 相互争夺 <code>Acceptor</code>，</p><p>造成迟迟无法达成一致的情况。针对这种情况，一种改进的 <code>Paxos</code>算法被提出：从系统中选</p><p>出一个节点作为 <code>Leader</code>，只有 <code>Leader</code>能够发起提案。这样，一次 <code>Paxos</code> 流程中只有一个</p><p><code>Proposer</code>，不会出现活锁的情况，此时只会出现例子中第一种情况。</p><blockquote><p>详细文档：</p><p><a href="https://github.com/BitNile/paxos-wiki">paxos-wiki</a></p><p><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/paxos-algorithm.html#cap%E7%90%86%E8%AE%BA">JavaGuide</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Paxos算法详解&quot;&gt;&lt;a href=&quot;#Paxos算法详解&quot; class=&quot;headerlink&quot; title=&quot;Paxos算法详解&quot;&gt;&lt;/a&gt;&lt;code&gt;Paxos&lt;/code&gt;算法详解&lt;/h1&gt;&lt;h2 id=&quot;前言–拜占庭将军问题&quot;&gt;&lt;a href=&quot;#前言</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper源码学习</title>
    <link href="https://devildyw.github.io/2022/07/21/Zookeeper%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://devildyw.github.io/2022/07/21/Zookeeper%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-21T07:56:27.000Z</published>
    <updated>2022-07-22T05:58:28.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper源码学习"><a href="#Zookeeper源码学习" class="headerlink" title="Zookeeper源码学习"></a>Zookeeper源码学习</h1><p>暂时不更新。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper源码学习&quot;&gt;&lt;a href=&quot;#Zookeeper源码学习&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper源码学习&quot;&gt;&lt;/a&gt;Zookeeper源码学习&lt;/h1&gt;&lt;p&gt;暂时不更新。。。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Zookeeper</title>
    <link href="https://devildyw.github.io/2022/07/14/Spring%20Cloud-Zookeeper/"/>
    <id>https://devildyw.github.io/2022/07/14/Spring%20Cloud-Zookeeper/</id>
    <published>2022-07-14T09:41:33.000Z</published>
    <updated>2022-07-29T15:47:19.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud-Zookeeper"></a>Spring Cloud-Zookeeper</h1><p><strong><code>Spring Cloud</code>整合<code>Zookeeper</code>代替<code>Eureka</code></strong></p><blockquote><p>学习之前请先安装<code>Zookeeper</code>且开放端口 可参考:<a href="https://devildyw.github.io/2022/07/14/Zookeeper/"><code>zookeeper</code></a></p></blockquote><h2 id="一-创建父工程"><a href="#一-创建父工程" class="headerlink" title="一. 创建父工程"></a>一. 创建父工程</h2><ol><li><p>新建<code>module</code> <code>Cloud-03-Zookeeper</code></p></li><li><p>删除<code>src</code>文件目录</p></li><li><p>添加<code>pom.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-zookeeper-payment8004<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二-服务提供者"><a href="#二-服务提供者" class="headerlink" title="二. 服务提供者"></a>二. 服务提供者</h2><ol><li><p>创建工程</p></li><li><p>添加<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有个坑,一般<code>spring-cloud-starter-zookeeper-discovery</code>包都会自带<code>zookeepr</code>包的依赖,此时如果我们的云服务器中安装的<code>zookeeper</code>版本高于<code>spring-cloud-starter-zookeeper-discovery</code>自带的<code>zookeeper</code>版本,容易发生报错。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174411363.png" alt="image-20220723174411363"></p><p>这里我们也能看出报错的<code>zookeeper</code>版本是3.6.0，而我们服务器中的版本是3.7.0，这里的报错是初始化连接<code>zookeeper</code>错误。</p><p><strong>解决方案在<code>spring-cloud-starter-zookeeper-discovery</code>依赖中排除自带的<code>zookeeper</code>，手动添加与服务器中<code>zookeepr</code>版本相对应的版本。</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-zookeeper-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>文件配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:2181</span> <span class="comment">#在Zookeeper的学习中我们知道connectString是连接Zookeeper客户端的必要参数 它即zookeeper的ip:port地址</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><p><code>PaymentMain8004</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8004</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器类<code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeepr: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动查看是否服务注册进入了<code>Zookeeper</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /</span><br><span class="line">[locks, servers, services, zookeeper]</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /services</span><br><span class="line">[cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>可用发现在<code>zookeeper</code>的根节点下出现了一个新的节点<code>services</code>并且在<code>/services</code>下出现了我们注册的服务的名字。说明我们注册成功。</p></li><li><p>测试调用服务</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174736745.png" alt="image-20220723174736745"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174721165.png" alt="image-20220723174721165"></p><p>测试成功</p></li><li><p>获取zookeeper节点信息</p><p>我们的服务注册到了cloud-provider-payment下面但是一个服务下面可以有多个实例，我们注册到该服务名称的节点下会有一个长的序列编码对应我们的一个实例。</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls -s  /services/cloud-provider-payment </span><br><span class="line">[ece4ce6c-a457-4874-8b3c-09f465e57939]</span><br></pre></td></tr></table></figure><p>可以发现在<code>cloud-provider-payment</code>有一个长串的序列编码(<strong>这个就是我们刚刚注册的服务实例</strong>)</p><p>通过<code>zookeeper</code>客户端命令<code>get 路径</code>获得节点信息。</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] get  /services/cloud-provider-payment/ece4ce6c-a457-4874-8b3c-09f465e57939 </span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;ece4ce6c-a457-4874-8b3c-09f465e57939&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;192.168.101.9&quot;</span><span class="punctuation">,</span><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span><span class="number">8004</span><span class="punctuation">,</span><span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span><span class="string">&quot;UP&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span><span class="number">1658569595889</span><span class="punctuation">,</span><span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span><span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span><span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;://&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;:&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;port&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现信息是一个<code>Json</code>串。</p><p>通过<code>Json</code>解析工具解析得到</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ece4ce6c-a457-4874-8b3c-09f465e57939&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.101.9&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8004</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span> <span class="number">1658569595889</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;://&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;port&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就可以得到该服务实例的信息(<code>ip</code>、端口、状态等信息)。</p></li></ol><h3 id="注册到zookeeper中的服务是什么类型的节点"><a href="#注册到zookeeper中的服务是什么类型的节点" class="headerlink" title="注册到zookeeper中的服务是什么类型的节点"></a>注册到<code>zookeeper</code>中的服务是什么类型的节点</h3><ol><li><p>将我们注册的服务停掉过一小段时间后查看zookeeper中节点的情况</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] ls /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145 </span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">关掉服务后</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] ls /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145 </span><br><span class="line">Node does not exist: /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145</span><br></pre></td></tr></table></figure></li><li><p>所以注册到<code>zookeeper</code>中的服务实例是采用<strong>临时节点</strong>保存信息。</p></li></ol><h2 id="三-服务消费者"><a href="#三-服务消费者" class="headerlink" title="三. 服务消费者"></a>三. 服务消费者</h2><ol><li><p>创建工程</p></li><li><p><code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-zookeeper-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>文件配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类，将<code>RestTemlate</code>类配置加入到Spring容器中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类<code>OrderZKController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderZKController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动生产者和消费者</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] ls /services</span><br><span class="line">[cloud-consumer-order, cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>可以看到生产者和消费者都被注册到了<code>zookeeper</code>中。</p><p>访问消费者<code>http://localhost:80/consumer/payment/zk</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723193407609.png" alt="image-20220723193407609"></p><p>访问成功</p></li></ol><h2 id="生产者集群"><a href="#生产者集群" class="headerlink" title="生产者集群"></a>生产者集群</h2><p>与Eureka类似，只需要多个提供相同的服务的生产者注册到同一个服务名称下即可，如果要使用消费者的<code>RestTemplate</code>访问记得加上<code>@LoadBalanced</code>注解即可（负载均衡 如果不加会报错）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Zookeeper&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Zookeeper&quot;&gt;&lt;/a&gt;Spring Cloud-Zookeep</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://devildyw.github.io/2022/07/14/Zookeeper/"/>
    <id>https://devildyw.github.io/2022/07/14/Zookeeper/</id>
    <published>2022-07-14T06:59:01.000Z</published>
    <updated>2022-07-21T07:57:33.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    <code>ZooKeeper</code> 一个中心化的服务, 用于维护配置信息, 命名服务(<code>naming</code>), 提供分布式同步和集群服务(<code>group services</code>)。</p><p>​    <code>Zookeeper</code>是一个开源的分布式应用程序协调服务，是雅虎公司对于Google的<code>Chubby</code>的一个开源实现，现已加入Apache开源，其最主要的核心协议ZAB（<code>Zookeeper</code>原子广播协议）是著名的<code>Paxos</code>算法的衍生<code>Mult Paxos</code>的工业实现。</p><p>​    <code>Zookeeper</code>是 <code>Hadoop</code> 和 <code>Hbase</code> 的重要组件。 <code>ZooKeeper</code> 的目标是封装好复杂易出错的关键服务, 暴露简单易用、高效、稳定的接口给用户, 提供 <code>java</code> 和 <code>C</code> 接口。</p><p>​    在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目),雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家<code>RaghuRamakrishnan</code>开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了，而<code>Zookeeper</code>正好要用来进行分布式环境的协调一一于是，<code>Zookeeper</code>的名字也就由此诞生了。 </p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>​    <code>Zookeeper</code>从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，<code>Zookeeper</code>就将负责通知已经在<code>Zookeeper</code>上注册的那些观察者做出相应的反应。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714185103332.png" alt="image-20220714185103332"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714185224752.png" alt="image-20220714185224752"></p><ol><li><code>Zookeeper</code>: 一个领导者（Leader），多个跟随者（Follower）组成的集群。</li><li>集群中只要有<strong>半数以上</strong>节点存活，<code>Zokeeper</code>集群就能正常服务。所以<code>Zookeeper</code>适合安装奇数台服务器。<ol><li>可见，与<code>Eureka</code>相比<code>Zookeeper</code>更倾向于满足集群节点之间的一致性即CAP中 <code>Zookeeper</code>更倾向于<code>CP</code>分支</li><li>为什么<code>Zookeeper</code>适合安装奇数台服务器？<ol><li><strong>防止由脑裂造成的集群不可用。</strong>当集群节点发生脑裂分成了多个集群如果是奇数个节点的情况下，多个集群中总是会有一个小集群满足可用节点 &gt; 总节点&#x2F;2，也就是说这个小集群可以在脑裂的情况下重新选举leader，仍然能够对外提供服务；但是如果是偶数个节点的情况下，可能会出现分配十分均匀的小集群，比如说分成了两个集群，两个集群中的节点都是原来节点的一半，此时可用节点只能&#x3D;&#x3D;总结点&#x2F;2，不能对外提供服务，虽然这种情况是偶然情况，但是还是建议使用奇数个节点提高可用性。</li><li><strong>在容错能力相同的情况下，奇数台更节省资源。</strong>当容错能力相同的情况下，5台节点组成的集群对外正常提供服务至少需要大于5&#x2F;2 &#x3D; 2.5台 &#x3D; 3台机器正常（反过来说就是挂三台就宕机了），而6台节点组成的集群对外正常提供服务至少需要大于6&#x2F;3 &#x3D; 3台机器正常（同样也是挂三台就宕机）。可知5台与6台对于容忍度并没有提升，所以推荐奇数个。</li></ol></li></ol></li><li>全局数据一致；每个Server保存同一份相同的数据副本，Client无论连接到那个Server，数据都是一致的。</li><li>更新请求顺序执行，来自同一个Client的更新请求按其发送顺序依次执行。</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，Client能读到最新数据<ol><li>这个时间很短，因为Server保存的数据其实很小，更新&#x2F;同步起来很快。</li></ol></li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>​    <code>Zookeeper</code>数据模型的结构与Unix文件系统很类似，整体上可用看作是一棵树，每个节点称作一个<code>ZNode</code>。每一个<code>ZNode</code>默认能够存储<code>1MB</code>的数据，每个<code>ZNode</code>都可以通过其路径唯一标识（通过一个路径能够找到唯一的一个<code>ZNode</code>）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714192417943.png" alt="image-20220714192417943"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>​    提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><h3 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h3><p>​    在分布式环境下，经常需要对应用&#x2F;服务进行统一命名，便于识别（便于负载均衡）</p><p>​    例如：<code>IP</code>不好记住，而域名容易记住。</p><p>​    类似的功能<code>Nginx</code>的负载均衡，以及其他框架如<code>Eureka</code>也有</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714192903303.png" alt="image-20220714192903303"></p><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><ol><li>分布式环境下，配置文件同步非常常见。<ol><li>一般要求一个集群中，所有节点的配置信息是一致的，比如Kafka集群。</li><li>对配置文件修改后，希望能够快速同步到各个节点上。</li></ol></li><li>配置管理可交由<code>Zookeeper</code>实现<ol><li>可将配置信息写入<code>Zookeeper</code>上的一个<code>ZNode</code>。</li><li>各个客户端服务器监听这个<code>ZNode</code>。</li><li>一旦<code>Znode</code>中的数据被修改，<code>Zookeeper</code>将通知各个客户端服务器。</li></ol></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193439722.png"></p><h3 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h3><ol><li>分布式环境中，实时掌握每个节点的状态是必要的。<ol><li>可用根据节点实时状态做出一些调整</li></ol></li><li><code>Zookeeper</code>可用实时监控节点状态变化<ol><li>可将节点信息写入<code>Zookeeper</code>上的<code>ZNode</code>。</li><li>监听这个<code>ZNode</code>可获取它的实时状态变化。</li></ol></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193710640.png" alt="image-20220714193710640"></p><h3 id="服务器动态上下线"><a href="#服务器动态上下线" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h3><p>​    客户端能实时洞察到服务器的上下线的变化。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193816296.png" alt="image-20220714193816296"></p><h3 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h3><p>在<code>Zookeeper</code>中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193918850.png" alt="image-20220714193918850"></p><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网首页：<a href="https://zookeeper.apache.org/"><code>Apache ZooKeeper</code></a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714194148375.png" alt="image-20220714194148375"></p><p>点击<code>Download</code>选择你要下载的版本</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714194308833.png" alt="image-20220714194308833"></p><p>版本自行选择</p><p>这里我们用云服务器Docker来部署</p><p><a href="https://devildyw.github.io/2022/05/15/Docker/">Docker</a>中有docker详细的安装教程。</p><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="配置Zookeeper安装目录"><a href="#配置Zookeeper安装目录" class="headerlink" title="配置Zookeeper安装目录"></a>配置<code>Zookeeper</code>安装目录</h4><ol><li><p>在宿主机中配置<code>Zookeeper</code>安装目录：<code>/home/docker/zookeeper</code>并且在文件夹中创建data和logs目录</p><p><code>mkdir -p /home/docker/zookeeper/data</code></p><p><code>mkdir -p /home/docker/zookeeper/logs</code></p></li><li><p>授权文件目录：<code>chmod -R 777 /home/docker/zookeeper/</code></p></li></ol><h4 id="安装和部署Zookeeper"><a href="#安装和部署Zookeeper" class="headerlink" title="安装和部署Zookeeper"></a>安装和部署<code>Zookeeper</code></h4><ul><li><p>拉去<code>Zookeeper</code>镜像: <code>docker pull zookeeper</code>默认拉取最新版</p></li><li><p>启动一个临时的<code>Zookeeper</code>容器 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2181:2181 --restart always --name=zookeeper --privileged=<span class="literal">true</span> zookeeper:latest</span><br></pre></td></tr></table></figure></li><li><p>进入到刚刚创建的临时容器中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>(通过docker ps查到) /bin/bash\</span><br></pre></td></tr></table></figure></li><li><p>去到根目录<code>/</code>，发现根目录中有一个<code>conf</code>目录，进入后发现里面有我们需要的<code>zoo.cfg</code>文件</p></li><li><p>退出容器</p></li><li><p>将容器中的<code>Zookeeper</code>配置文件复制到宿主机的对应位置 <code>/home/docker/zookeeper</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> zookeeperTemp容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper/</span><br></pre></td></tr></table></figure><blockquote><p>将容器中有<code>zoo.cfg</code>文件的<code>conf</code>直接拷贝到容器外我们一开始建立的<code>zookeeper</code>目录下，此时<code>/docker/develop/zookeeper/</code>目录中应该有三个目录：<code>conf</code>，<code>data</code>和<code>logs</code></p></blockquote></li><li><p>这个时候正式地建立我们的<code>zookeeper</code>容器，命名为<code>zookeeper</code>，别忘了先停掉刚刚创建的容器<code>zookeeper</code>然后删掉容器。将我们宿主机中配置的文件目录挂在到容器对应的目录上。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2181:2181 --restart always --name=zookeeper  --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/docker/zookeeper/conf:/conf \</span><br><span class="line">-v /home/docker/zookeeper/data:/data \</span><br><span class="line">-v /home/docker/zookeeper/logs:/datalog \</span><br><span class="line">-e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;JAVA_OPTS=-server -Xms512m -Xmx512m -Xmn256m -Duser.home=/opt -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:+AlwaysPreTouch -XX:-UseBiasedLocking&quot;</span> \</span><br><span class="line">zookeeper:latest</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-a <code>stdin</code>:</strong> 指定标准输入输出内容类型，可选 <code>STDIN/STDOUT/STDERR</code> 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong><code>-t:</code></strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong><code>--name=&quot;nginx-lb&quot;:</code></strong> 为容器指定一个名称；</li><li><strong><code>--dns 8.8.8.8:</code></strong> 指定容器使用的<code>DNS</code>服务器，默认和宿主一致；</li><li><strong><code>--dns-search example.com:</code></strong> 指定容器<code>DNS</code>搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li>**-m :**设置容器使用内存最大值；</li><li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li><li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷</li></ul></blockquote></li></ul><h4 id="启动客户端连接Zookeeper"><a href="#启动客户端连接Zookeeper" class="headerlink" title="启动客户端连接Zookeeper"></a>启动客户端连接Zookeeper</h4><ul><li><p>进入容器中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>(通过docker ps查到) /bin/bash\</span><br></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkCli.sh</span><br></pre></td></tr></table></figure></li><li><p>如果出现以下信息表示<code>Zookeeper</code>部署启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@fb3e9f10fb70:/apache-zookeeper-3.7.0-bin<span class="comment"># bin/zkCli.sh</span></span><br><span class="line">Connecting to localhost:2181</span><br><span class="line">2022-07-16 12:53:57,208 [myid:] - INFO  [main:Environment@98] - Client environment:zookeeper.version=3.7.0-e3704b390a6697bfdf4b0bef79e3da7a4f6bac4b, built on 2021-03-17 09:46 UTC</span><br><span class="line">2022-07-16 12:53:57,228 [myid:] - INFO  [main:Environment@98] - Client environment:host.name=fb3e9f10fb70</span><br><span class="line">2022-07-16 12:53:57,228 [myid:] - INFO  [main:Environment@98] - Client environment:java.version=11.0.13</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.home=/usr/local/openjdk-11</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.class.path=/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/target/classes:/apache-zookeeper-3.7.0-bin/bin/../build/classes:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/target/lib/*.jar:/apache-zookeeper-3.7.0-bin/bin/../build/lib/*.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-prometheus-metrics-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-jute-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/snappy-java-1.1.7.7.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/slf4j-log4j12-1.7.30.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/slf4j-api-1.7.30.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_servlet-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_hotspot-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_common-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-native-unix-common-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-native-epoll-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-resolver-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-handler-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-common-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-codec-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-buffer-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/metrics-core-4.1.12.1.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/log4j-1.2.17.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jline-2.14.6.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-util-ajax-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-util-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-servlet-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-server-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-security-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-io-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-http-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/javax.servlet-api-3.1.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-databind-2.10.5.1.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-core-2.10.5.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-annotations-2.10.5.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/commons-cli-1.4.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/audience-annotations-0.12.0.jar:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-*.jar:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/src/main/resources/lib/*.jar:/conf:</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.io.tmpdir=/tmp</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:os.name=Linux</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:os.arch=amd64</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:os.version=3.10.0-1160.25.1.el7.x86_64</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.name=root</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.home=/root</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.dir=/apache-zookeeper-3.7.0-bin</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.free=56MB</span><br><span class="line">2022-07-16 12:53:57,232 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.max=256MB</span><br><span class="line">2022-07-16 12:53:57,233 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.total=64MB</span><br><span class="line">2022-07-16 12:53:57,236 [myid:] - INFO  [main:ZooKeeper@637] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain<span class="variable">$MyWatcher</span>@7946e1f4</span><br><span class="line">2022-07-16 12:53:57,240 [myid:] - INFO  [main:X509Util@77] - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=<span class="literal">true</span> to <span class="built_in">disable</span> client-initiated TLS renegotiation</span><br><span class="line">2022-07-16 12:53:57,250 [myid:] - INFO  [main:ClientCnxnSocket@239] - jute.maxbuffer value is 1048575 Bytes</span><br><span class="line">2022-07-16 12:53:57,259 [myid:] - INFO  [main:ClientCnxn@1726] - zookeeper.request.timeout value is 0. feature enabled=<span class="literal">false</span></span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">2022-07-16 12:53:57,303 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1171] - Opening socket connection to server localhost/127.0.0.1:2181.</span><br><span class="line">2022-07-16 12:53:57,303 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1173] - SASL config status: Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2022-07-16 12:53:57,317 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1005] - Socket connection established, initiating session, client: /127.0.0.1:51034, server: localhost/127.0.0.1:2181</span><br><span class="line">2022-07-16 12:53:57,334 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1438] - Session establishment complete on server localhost/127.0.0.1:2181, session <span class="built_in">id</span> = 0x100010b79380003, negotiated <span class="built_in">timeout</span> = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] </span><br></pre></td></tr></table></figure></li></ul><h3 id="Zookeeper配置"><a href="#Zookeeper配置" class="headerlink" title="Zookeeper配置"></a>Zookeeper配置</h3><p>下面是<code>Zookeeper</code>默认配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dataDir=/data</span>  <span class="comment">#默认的temp(临时)目录，容易被linux系统定期删除，所以一般不用默认的temp目录。</span></span><br><span class="line"><span class="string">dataLogDir=/datalog</span></span><br><span class="line"><span class="string">tickTime=2000</span> <span class="comment">#通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒</span></span><br><span class="line"><span class="string">initLimit=5</span> <span class="comment">#LF初始通信时限(Leader和follower初始连接时能忍受的最多心跳数即tickTime的数量)</span></span><br><span class="line"><span class="string">syncLimit=2</span> <span class="comment">#LF(Leader和follower)同步时限(LF的通信时间如果超过syncLimit*tickTime,Leader认为Follower死掉，从服务器列表中删除Follower)</span></span><br><span class="line"><span class="string">autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="string">autopurge.purgeInterval=0</span></span><br><span class="line"><span class="string">maxClientCnxns=60</span></span><br><span class="line"><span class="string">standaloneEnabled=true</span></span><br><span class="line"><span class="string">admin.enableServer=true</span></span><br><span class="line"><span class="string">server.1=localhost:2888:3888;2181</span> <span class="comment">#2181客户端端口号</span></span><br></pre></td></tr></table></figure><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><h4 id="搭建前准备"><a href="#搭建前准备" class="headerlink" title="搭建前准备"></a>搭建前准备</h4><p>这里我们搭建三台<code>Zookeeper</code>组成集群</p><p>先像单机版搭建额外两台</p><ol><li><p>配置<code>Zookeeper</code>安装目录</p></li><li><p>启动<code>Zookeeper02</code>、<code>Zookeeper03</code>两个容器(注意端口映射不要重复)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Zookeeper02容器</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> -d --name zookeeper02 --publish 2182:2181 -d zookeeper:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Zookeeper03容器</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> -d --name zookeeper03 --publish 2183:2181 -d zookeeper:latest</span><br></pre></td></tr></table></figure></li><li><p>将容器中的对应的需要集群配置的文件复制出来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> zookeeper02容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper02/</span><br><span class="line">docker <span class="built_in">cp</span> zookeeper02容器的<span class="built_in">id</span>:/data /home/docker/zookeeper02/</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> zookeeper03容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper03/</span><br><span class="line">docker <span class="built_in">cp</span> zookeeper03容器的<span class="built_in">id</span>:/data /home/docker/zookeeper03/</span><br></pre></td></tr></table></figure></li></ol><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>修改配置文件前先获取各个容器的容器<code>ip</code></p><p><code>docker</code>查看容器<code>ip</code>的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> 容器名/容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>获取得到三个容器的ip分别为</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">172.17.0.3</span><br><span class="line">172.17.0.4</span><br><span class="line">172.17.0.5</span><br></pre></td></tr></table></figure><p><strong>修改配置文件(<code>zoo.cfg&amp;myid</code>)</strong></p><ol><li><p>首先是<code>myid</code>文件，他被我们复制到了<code>zookeeper</code>文件夹下的data内，修改它，按照顺序<code>zookeeper01</code>为1、<code>zookeeper02</code>为2…..。（<code>myid</code>的值是<code>zoo.cfg</code>文件里定义的<code>server.A</code>项<code>A</code>的值，<code>Zookeeper</code> 启动时会读取这个文件，拿到里面的数据与 <code>zoo.cfg</code> 里面的配置信息比较从而判断到底是那个server，只是一个<strong>标识作用</strong>。）</p></li><li><p>修改<code>zoo.cfg</code>在期末为将原来默认的<code>server.1=localhost:2888:3888;2181</code>根据<code>myid</code>的关系修改为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.1=172.17.0.3:2888:3888;2181</span><br><span class="line">server.2=172.17.0.4:2888:3888;2181</span><br><span class="line">server.3=172.17.0.5:2888:3888;2181</span><br></pre></td></tr></table></figure></li><li><p>重新启动三个容器(这里可以做成一个脚本执行)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart zookeeper01</span><br><span class="line">docker restart zookeeper02</span><br><span class="line">docker restart zookeeper03</span><br></pre></td></tr></table></figure></li><li><p>进入容器中查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkServer.sh status <span class="comment">#查看zookeeper容器的状态</span></span><br></pre></td></tr></table></figure><p>出现如下信息表示搭建集群成功</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002844751.png" alt="image-20220717002844751"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002816617.png" alt="image-20220717002816617"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002933896.png" alt="image-20220717002933896"></p></li><li><p>集群搭建成功</p></li></ol><p>​        </p><h2 id="选取机制"><a href="#选取机制" class="headerlink" title="选取机制"></a>选取机制</h2><p>**SID:**服务器ID。用来唯一标识一台<code>Zookeeper</code>集群中的机器，每台机器不能重复，和myid一样。</p><p>**<code>ZXID:</code>**事务ID。<code>ZXID</code>是一个事务ID，用来标识一次服务器状态的变更。在某一时刻，集群中的每台机器的<code>ZXID</code>值不一定完全一致，这和<code>ZooKeeper</code>服务器对于客户端“更新请求”的处理逻辑有关。(<code>ZXID</code>可以理解为服务器状态更新的次数，因为每次更新操作成功后事务id会递增。)</p><p>**Epoch:**每个Leader任期的代号。没有Leader时同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加。</p><h3 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h3><p>我们需要知道<code>myid</code>小的会将票投给<code>myid</code>大的节点。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220719180536531.png" alt="image-20220719180536531"></p><blockquote><p>如图展示的是myid逐次增加的情况。</p></blockquote><ol><li>服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数1票，不够半数以上（3票），选举无法完成，服务器1状态保持LOOKING。</li><li>服务器2启动，再发起一次选举，服务器1和服务器2分别投自己一票并交换选票信息：此时服务器1发现服务器2的<code>myid</code>比自己目前投票选举的（服务器1）大，更改选票为推举服务器2.此时服务器1票数为0，服务器2票数为2票，依旧没有半数以上，选举无法完成，服务器1，2状态保持LOOKING。</li><li>服务器3启动，发起一次选举，此时服务器1和2都会更改选票为服务器3。此投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数依旧超过半数，服务器3当选leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING。</li><li>服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING。</li><li>服务器5重启，同4一样最后状态会编程FOLLOWING。</li></ol><h3 id="非第一次启动"><a href="#非第一次启动" class="headerlink" title="非第一次启动"></a>非第一次启动</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220719183330948.png" alt="image-20220719183330948"></p><ol><li><p>当<code>Zookeeper</code>集群中的一台服务器出现以下两种情况之一时，就会开始进入Leader选举：</p><ul><li>服务器初始化启动</li><li>服务器运行期间无法和Leader保持连接（因为网络问题没有检测到Leader）</li></ul></li><li><p>当一台机器进入Leader选举流程时，当前集群也可能会处于以下两种状态：</p><ul><li><p>集群中本来就已经存在一个Leader。（因为网络问题没有检测到Leader）</p><p>对于第一种已经存在Leader的情况，机器试图去选举Leader时，会被告知当前服务器的Leader信息，对于该机器来说，仅仅需要和Leader机器简历连接，并进行状态同步即可。</p></li><li><p><strong>集群中确实不存在Leader</strong></p><ul><li><p>假设<code>Zookeeper</code>又5台服务器组成，SID分别为1，2，3，4，5，<code>ZXID</code>分别为8、8、8、7、7，并且此时SID为3的服务器是Leader。某一关键时刻，3和5服务器出现故障，因此开始进行Leader选举。<code>SID</code>为1，2，4的机器投票情况（<code>EPOCH</code>，<code>ZXID</code>，<code>SID</code>）:（1，8，1），（1，8，2），（1，7，4）。</p></li><li><p><strong>选举Leader规则：1. EPOCH大的直接胜出；2. EPOCH相同，事务id大的胜出；3. 事务id相同，服务器id大的胜出</strong></p></li></ul></li></ul></li></ol><h2 id="客户端命令行操作"><a href="#客户端命令行操作" class="headerlink" title="客户端命令行操作"></a>客户端命令行操作</h2><h3 id="命令行语法"><a href="#命令行语法" class="headerlink" title="命令行语法"></a>命令行语法</h3><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong><code>czxid</code></strong></td><td align="center">创建节点的事务<code>zxid</code> 每次修改<code>Zookeeper</code>状态都会产生一个<code>Zookeeoer</code>事务ID.事务ID是<code>Zookeeper</code>中所有修改总的次序.每次修改都有唯一的<code>zxid</code>,如果<code>zxid</code>1小于<code>zxid</code>2,那么标识<code>zxid</code>1对应的修改在<code>zxid</code>2之前发生</td></tr><tr><td align="center"><strong><code>ctime</code></strong></td><td align="center"><code>znode</code>被创建的毫秒数(从1970年开始)</td></tr><tr><td align="center"><strong><code>mzxid</code></strong></td><td align="center"><code>znode</code>最后更新的事务<code>zxid</code></td></tr><tr><td align="center"><strong><code>mtime</code></strong></td><td align="center"><code>znode</code>最后修改的毫秒数(从1970年开始)</td></tr><tr><td align="center"><strong><code>pZxid</code></strong></td><td align="center"><code>znode</code>最后更新的子节点<code>zxid</code></td></tr><tr><td align="center"><strong><code>cversion</code></strong></td><td align="center"><code>znode</code>子节点变化号,<code>znode</code>子节点修改次数</td></tr><tr><td align="center"><strong><code>dataversion</code></strong></td><td align="center"><code>znode</code>数据变化号</td></tr><tr><td align="center"><strong><code>aclVersion</code></strong></td><td align="center"><code>znode</code>访问控制列表的变化号</td></tr><tr><td align="center"><strong><code>ephemeralOwner</code></strong></td><td align="center">如果是临时节点,这个是<code>znode</code>拥有者的<code>session id</code>.如果不是临时节点则是0.</td></tr><tr><td align="center"><strong><code>dataLength</code></strong></td><td align="center"><code>znode</code>的数据长度</td></tr><tr><td align="center"><strong><code>numChildren</code></strong></td><td align="center"><code>znode</code>子节点数量</td></tr></tbody></table><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p>节点类型分为以下两大类:</p><p><strong>持久节点(Persistent)</strong>:客户端和服务器端断开连接后,创建的节点不删除</p><p><strong>短暂节点(Ephemeral)</strong>:客户端和服务器端断开连接后,创建的节点自己删除</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720151900500.png" alt="image-20220720151900500"></p><blockquote><p>说明: 创建<code>znode</code>时设置顺序标识,znode名称后会附加一个值,顺序号是一个单调递增的计数器,由父节点维护</p><p>注意: 在分布式系统中,顺序号可以被用于为所有的事件进行全局排序,这样客户端可以通过顺序号推断事件发生的顺序</p></blockquote><h4 id="持久节点"><a href="#持久节点" class="headerlink" title="持久节点"></a>持久节点</h4><ol><li><p>持久化目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后,该节点依旧存在</p></li><li><p>持久化顺序编号目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后,该节点依旧存在,只是<code>Zookeeper</code>给该节点名称进行顺序编号</p></li></ol><h4 id="短暂节点"><a href="#短暂节点" class="headerlink" title="短暂节点"></a>短暂节点</h4><ol><li><p>临时目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后，该节点被删除</p></li><li><p>临时顺序编号目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后，该节点被<code>Zookeeper</code>给该节点名称进行顺序编号。</p></li></ol><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><ol><li><p>分别创建普通节点（永久节点+不带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create 路径 [信息]（类似于创建文件一样需要输入完成的路径）</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 3] create /sanguo <span class="string">&quot;diaochan&quot;</span></span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 5] create  /sanguo/shuguo <span class="string">&quot;liubei&quot;</span></span><br></pre></td></tr></table></figure><p>获取节点信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get -s 路径</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 12] get -s /sanguo</span><br><span class="line"><span class="comment"># 获取得到的信息</span></span><br><span class="line">diaochan</span><br><span class="line">cZxid = 0x200000009</span><br><span class="line">ctime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">mZxid = 0x200000009</span><br><span class="line">mtime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">pZxid = 0x20000000a</span><br><span class="line">cversion = 1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 8</span><br><span class="line">numChildren = 1</span><br></pre></td></tr></table></figure></li><li><p>分别创建普通节点（永久节点+带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create -s 路径 [信息]</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 4] create -s /sanguo</span><br><span class="line">Created /sanguo0000000001</span><br></pre></td></tr></table></figure></li><li><p>创建临时节点（临时节点+不带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create -e 路径 [信息]</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 21] create -e /sanguo/zhongguo</span><br><span class="line">Created /sanguo/zhongguo</span><br></pre></td></tr></table></figure><p>临时节点在客户端与服务器断开连接后被删除，永久节点则反不会。</p></li><li><p>修改节点数据值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 10] <span class="built_in">set</span> /sanguo diaochan1</span><br></pre></td></tr></table></figure><p>这样就可以修改或者添加节点的值了。</p></li></ol><h3 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h3><h4 id="监听器原理详解"><a href="#监听器原理详解" class="headerlink" title="监听器原理详解"></a>监听器原理详解</h4><ol><li>首先有一个main()线程</li><li>在main线程中创建<code>Zookeeper</code>客户端，这时就会创建两个线程，一个负责网络连接(connect)，一个负责监听(listener)。</li><li>通过connect线程将注册的监听事件发送给<code>Zookeeper</code>。</li><li>在<code>Zookeeper</code>的注册监听器列表中将注册的监听事件添加到列表中。</li><li><code>Zookeeper</code>监听到有数据或路径发生变化，就会将这个消息发送给listener线程。</li><li>listener线程内部调用process()方法</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720170334171.png" alt="image-20220720170334171"></p><h4 id="节点的值变化监听"><a href="#节点的值变化监听" class="headerlink" title="节点的值变化监听"></a>节点的值变化监听</h4><ol><li><p>在<code>Zookeeper01</code>主机上注册监听<code>/sanguo</code>节点的数据变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 16] get -w /sanguo</span><br></pre></td></tr></table></figure></li><li><p>在<code>Zookeeper02</code>主机上修改<code>/sanguo</code>节点的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 1] <span class="built_in">set</span> /sanguo <span class="string">&quot;xisi&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>观察<code>Zookeeper01</code>主机收到数据变化的监听</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720172417291.png" alt="image-20220720172417291"></p><blockquote><p>注意: 在<code>Zookeeper02</code>再多次修改<code>/sanguo</code>的值,<code>Zookeeper01</code>上不会再收到监听.因为注册一次,只能监听一次.像再次监听,需要再次监听.</p></blockquote></li></ol><h4 id="节点的子节点变化监听"><a href="#节点的子节点变化监听" class="headerlink" title="节点的子节点变化监听"></a>节点的子节点变化监听</h4><ol><li><p>在<code>Zookeeper01</code>主机上注册监听<code>/sanguo</code>节点的子节点变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 17] <span class="built_in">ls</span> -w /sanguo</span><br></pre></td></tr></table></figure></li><li><p>在<code>Zookeeper02</code>主机上<code>/sanguo</code>节点上创建子节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 2] create /sanguo/jin <span class="string">&quot;simayi&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>观察<code>Zookeeper01</code>主机收到子节点变化的监听</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720173200076.png" alt="image-20220720173200076"></p><blockquote><p>注意: 节点的路径变化,也是注册一次,生效一次,想多次生效,就需要多次注册.</p></blockquote></li></ol><h3 id="节点的删除与查看"><a href="#节点的删除与查看" class="headerlink" title="节点的删除与查看"></a>节点的删除与查看</h3><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 18] delete /sanguo/jin</span><br></pre></td></tr></table></figure><h4 id="递归删除节点"><a href="#递归删除节点" class="headerlink" title="递归删除节点"></a>递归删除节点</h4> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 19] deleteall /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>如果节点下面有许多子节点,就不能够直接通过<code>delete</code>删除该节点,而是应该使用<code>deleteall</code></p><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 20] <span class="built_in">stat</span> /sanguo</span><br><span class="line"><span class="comment"># 节点状态信息</span></span><br><span class="line">cZxid = 0x200000009</span><br><span class="line">ctime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">mZxid = 0x200000020</span><br><span class="line">mtime = Wed Jul 20 17:21:49 CST 2022</span><br><span class="line">pZxid = 0x200000023</span><br><span class="line">cversion = 8</span><br><span class="line">dataVersion = 2</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 2</span><br></pre></td></tr></table></figure><h2 id="客户端API操作"><a href="#客户端API操作" class="headerlink" title="客户端API操作"></a>客户端API操作</h2><p>**前提:**保证<code>Zookeeper</code>集群服务器启动。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>创建工程<code>zookeeper01</code></p></li><li><p>添加<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.zookeeper</code></p></li><li><p>在包下创建类 名称为<code>zkClient</code></p></li></ol><h4 id="创建Zookeeper客户端"><a href="#创建Zookeeper客户端" class="headerlink" title="创建Zookeeper客户端"></a>创建Zookeeper客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">   <span class="comment">//会话过期时间</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//这里我们创建Zookeeper客户端时可以自己new 一个Watcher</span></span><br><span class="line">       zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">nodeCreated</span> <span class="operator">=</span> zkClient.create(<span class="string">&quot;/devildyw&quot;</span>, <span class="string">&quot;ss.avi&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：一定要在<code>init()</code>方法上加上@Before注解 这样子才可以在调用create()方法前进行连接的初始化。</p></blockquote><p>测试服务器端中<code>Zookeeper</code>节点的变化</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185155078.png" alt="image-20220720185155078"></p><h4 id="获取子节点并监听节点变化"><a href="#获取子节点并监听节点变化" class="headerlink" title="获取子节点并监听节点变化"></a>获取子节点并监听节点变化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">    <span class="comment">//这里方法中的true代表着使用Watcher这个Watcher就是前面创建Zookeeper客户端时new的Watcher 也可以自定义</span></span><br><span class="line">    List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">        System.out.println(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器中<code>&quot;/&quot;</code>下的节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185435045.png" alt="image-20220720185435045"></p><p>通过客户端<code>API</code>获取得到的<code>&quot;/&quot;</code>下的节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185447846.png" alt="image-20220720185447846"></p><blockquote><p>注意：这个方法中我们只创建了一次监听器，用于监听给定路径的节点或在节点下创建&#x2F;删除子节点的成功操作，但是一次之后监听器就会失效，如果要持续监听就需要再次注册。</p><p>可以采用循环注册监听器来解决。</p></blockquote><h4 id="判断Znode是否存在"><a href="#判断Znode是否存在" class="headerlink" title="判断Znode是否存在"></a>判断<code>Znode</code>是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exist</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/devildyw&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(exists==<span class="literal">null</span>?<span class="string">&quot;not exist&quot;</span>:<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192241351.png" alt="image-20220720192241351"></p><h2 id="客户端向服务端写数据流程"><a href="#客户端向服务端写数据流程" class="headerlink" title="客户端向服务端写数据流程"></a>客户端向服务端写数据流程</h2><h3 id="写流程之写入请求直接发送给Leader节点"><a href="#写流程之写入请求直接发送给Leader节点" class="headerlink" title="写流程之写入请求直接发送给Leader节点"></a>写流程之写入请求直接发送给Leader节点</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192619337.png" alt="image-20220720192619337"></p><p>上述展示的是<code>Zookeeper</code>客户端向<code>Zookeeper</code>集群集群<code>Leader</code>节点发送写请求，<code>Leader</code>写完后，然后<code>Leader</code>节点会发送写请求给<code>Follower</code>，当<code>Follower</code>完成写请求后返回一个ACK信息表示数据已接收。如果集群中有半数以上的节点完成了写请求就会响应给客户端一个<code>ACK</code>，表示写请求成功，后续Leader会继续向其他的Follower重复写请求和返回<code>ACK(Follower)</code></p><blockquote><p><code>ACK (Acknowledge character）</code>即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误。</p></blockquote><h3 id="写流程之写入请求发送给follower节点"><a href="#写流程之写入请求发送给follower节点" class="headerlink" title="写流程之写入请求发送给follower节点"></a>写流程之写入请求发送给follower节点</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192630844.png" alt="image-20220720192630844"></p><p>如果<code>Zookeeper</code>客户端向<code>Zookeeper</code>集群中的Follower节点发送写请求，那么该<code>Follower</code>节点会将写请求直接转发到<code>Leader</code>节点上，<strong>再执行写入请求发送给<code>Leader</code>节点的流程</strong>，如果超过半数了，<code>Leader</code>就会响应<code>ACK</code>到一开始接收到写入请求的<code>Follower</code>节点，再通过这个节点将<code>ACK</code>返回到客户端，剩余<code>Follower</code>节点继续接收执行<code>Leader</code>的写入请求。</p><h2 id="服务器动态上下线-1"><a href="#服务器动态上下线-1" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721002217841.png" alt="image-20220721002217841"></p><p>通过<code>Zookeeper</code>集群去管理服务器的动态上下线，主要是各个服务器通过<code>Zookeeper</code>客户端去再<code>Zookeeper</code>集群中创建节点，当下线是将节点删除，而客户端则是通过<code>Zookeeper</code>客户端去监听服务器的上下线，执行响应的业务。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol><li><p>首先在集群上创建<code>/servers</code>节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 14] create /servers <span class="string">&quot;servers&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.case1</code></p></li><li><p>创建类<code>DistributeServer</code> 服务器端向 <code>Zookeeper </code>注册代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devildyw.case1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-13:00</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 分布式服务器动态上下线中的服务器角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeServer</span> &#123;</span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeServer</span>();</span><br><span class="line">        <span class="comment">//1. 获取zk连接</span></span><br><span class="line">        server.getConnect();</span><br><span class="line">        <span class="comment">//2 注册服务器zk集群</span></span><br><span class="line">        server.register(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//3.启动业户逻辑（这里为了演示 使用线程休眠代替）</span></span><br><span class="line">        server.business();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">create</span> <span class="operator">=</span> zkClient.create(<span class="string">&quot;/servers/&quot;</span>+hostname, hostname.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">        System.out.println(hostname+<span class="string">&quot;is online&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户端代码<code>DistributeClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devildyw.case1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-13:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 分布式服务器动态上下线中的客户端角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeClient</span> &#123;</span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    ZooKeeper zkClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeClient</span>();</span><br><span class="line">        <span class="comment">//1. 获取ZK连接</span></span><br><span class="line">        client.getConnect();</span><br><span class="line">        <span class="comment">//2.监听/servers下面节点的增加或删除</span></span><br><span class="line">        client.getServerList();</span><br><span class="line">        <span class="comment">//3.业务逻辑(线程休眠)</span></span><br><span class="line">        client.business();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">        List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/servers&quot;</span>, <span class="literal">true</span>); <span class="comment">//这里监听器位置参数设置为true代表使用初始化Zookeeper客户端时的Watcher</span></span><br><span class="line">        ArrayList&lt;String&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            <span class="comment">//取出节点中的数据信息</span></span><br><span class="line">            <span class="type">byte</span>[] data = zkClient.getData(<span class="string">&quot;/servers/&quot;</span> + child, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//封装到集合中</span></span><br><span class="line">            servers.add(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印集合信息</span></span><br><span class="line">        System.out.println(servers);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//循环注册监听 当触发了监听器后 在监听器业务逻辑中再次注册监听器</span></span><br><span class="line">                    getServerList();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行&#x2F;测试 </p><p>先启动客户端监听<code>/servers</code>下的节点变化,然后启动服务器.</p><p>服务器端的参数传入用到了命令行参数,我们这里可以<code>Idea</code>中配置</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721134945087.png" alt="image-20220721134945087"></p></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721135008120.png" alt="image-20220721135008120"></p><p>启动服务器创建节点,客户端监测到打印服务器信息列表.</p><h2 id="ZooKeeper-分布式锁案例"><a href="#ZooKeeper-分布式锁案例" class="headerlink" title="ZooKeeper 分布式锁案例"></a><strong>ZooKeeper</strong> <strong>分布式锁案例</strong></h2><p>​    什么叫分布式锁?</p><p>​    比如说”进程1”在使用该资源的时候，会先去获得锁，”进程1”获得锁以后会对该资源保持独占，这样其他进程就无法访问该资源,”进程1”用完该资源以后就将锁释放掉，让其他进程来获得锁，那么通过这个锁机制，我们就能保证分布式系统中多个进程能够有序的访问该临界资源。那么我们把这个分布式环境下的这个锁叫做分布式锁。</p><h3 id="分布式锁案例"><a href="#分布式锁案例" class="headerlink" title="分布式锁案例"></a>分布式锁案例</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721135958109.png" alt="image-20220721135958109"></p><p>多个客户端在<code>/locks</code>的路径下创建节点(临时有序的节点)，如果节点序号小优先获得锁处理业务，其他序号大的点，监听其序号前一个节点，如果前一个节点处理完业务后，锁会被释放且前一个节点会被删除，这时后一个节点因为是在监听前一个节点的所以此时它回去获得锁，处理业务，依次类推。</p><h3 id="原生-Zookeeper-实现分布式锁案例"><a href="#原生-Zookeeper-实现分布式锁案例" class="headerlink" title="原生 Zookeeper 实现分布式锁案例"></a><strong>原生</strong> <strong>Zookeeper</strong> 实现分布式锁案例</h3><ol><li><p>创建工程<code>zookeeper-02-Distribute-Lock</code></p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.distributeLock</code></p></li><li><p>创建类<code>DistributeLock</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.distributeLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">    ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String waitPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">connectLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">waitLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> String currentMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DistributeLock</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">                <span class="comment">//connectLatch 如果连接上了zk 可以释放</span></span><br><span class="line">                <span class="keyword">if</span> (event.getState()==Event.KeeperState.SyncConnected)&#123;</span><br><span class="line">                    connectLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//waitLatch 需要释放</span></span><br><span class="line">                <span class="keyword">if</span> (event.getType()== Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(waitPath))&#123;</span><br><span class="line">                    waitLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//等待zk正常连接后,才往下走程序 可以提高代码健壮性</span></span><br><span class="line">        connectLatch.await();</span><br><span class="line">        <span class="comment">//判断根节点locks是否存在</span></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//如果不存在 需要创建</span></span><br><span class="line">        <span class="keyword">if</span> (exists==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建一个根节点</span></span><br><span class="line">            zkClient.create(<span class="string">&quot;/locks&quot;</span>,<span class="string">&quot;locks&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对zk加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建对应的临时带序号节点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            currentMode = zkClient.create(<span class="string">&quot;/locks/&quot;</span> + <span class="string">&quot;seq-&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//wait一小会,让结果更清晰</span></span><br><span class="line"><span class="comment">//            Thread.sleep(10);</span></span><br><span class="line">            <span class="comment">//判断创建的节点是否是最小的序号节点，如果是获取到锁；如果不是，监听序号前一个节点</span></span><br><span class="line">            <span class="comment">//判断是否是最下序号节点</span></span><br><span class="line">            List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//如果children只有一个值，那就直接获取锁；如果有多个节点，需要判断，谁最小</span></span><br><span class="line">            <span class="keyword">if</span> (children.size()==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Collections.sort(children);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取节点名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">thisNode</span> <span class="operator">=</span> currentMode.substring(<span class="string">&quot;/locks/&quot;</span>.length());</span><br><span class="line">                <span class="comment">//通过seq-0000000获取该节点咋children集合的位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> children.indexOf(thisNode);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span> (index==-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;数据异常&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//第一个节点可以获取锁了</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//需要监听它前一个节点的变化</span></span><br><span class="line">                    waitPath = <span class="string">&quot;/locks/&quot;</span>+children.get(index-<span class="number">1</span>);</span><br><span class="line">                    zkClient.getData(waitPath,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">//等待监听 知道上一个节点被删除后才释放</span></span><br><span class="line">                    waitLatch.await();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对zk解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkUnlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//删除节点 后面的版本号根据实际要求给 这里随便给了个-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient.delete(currentMode,-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.distributeLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeLock</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeLock</span>();</span><br><span class="line">        <span class="type">DistributeLock</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeLock</span>();</span><br><span class="line">        <span class="comment">//开启多线程测试</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock1.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一获取到锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock1.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启多线程测试</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock2.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二获取到锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock2.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">线程二获取到锁</span><br><span class="line"></span><br><span class="line">线程二释放锁</span><br><span class="line"></span><br><span class="line">线程一获取到锁</span><br><span class="line"></span><br><span class="line">线程一释放锁</span><br></pre></td></tr></table></figure></li></ol><h3 id="Curator-框架实现分布式锁案例"><a href="#Curator-框架实现分布式锁案例" class="headerlink" title="Curator 框架实现分布式锁案例"></a><strong>Curator</strong> 框架实现分布式锁案例</h3><h4 id="原生的Java-API开发存在的问题"><a href="#原生的Java-API开发存在的问题" class="headerlink" title="原生的Java API开发存在的问题"></a>原生的Java API开发存在的问题</h4><ol><li>会话连接是异步的,需要自己去处理。比如使用<code>CountDownLatch</code></li><li>Watch需要重复注册，不然就不能生效</li><li>开发的复杂性还是比较高的</li><li>不支持多节点删除和创建。需要自己去递归。</li></ol><h4 id="Curator-是一个专门解决分布式锁的框架，解决了原生-JavaAPI-开发分布式遇到的问题。"><a href="#Curator-是一个专门解决分布式锁的框架，解决了原生-JavaAPI-开发分布式遇到的问题。" class="headerlink" title="Curator 是一个专门解决分布式锁的框架，解决了原生 JavaAPI 开发分布式遇到的问题。"></a><strong>Curator</strong> <strong>是一个专门解决分布式锁的框架，解决了原生</strong> <strong>JavaAPI</strong> 开发分布式遇到的问题。</h4><blockquote><p>Apache Curator is a Java&#x2F;JVM client library for <a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>, a distributed coordination service. It includes a highlevel API framework and utilities to make using Apache ZooKeeper much easier and more reliable. It also includes recipes for common use cases and extensions such as service discovery and a Java 8 asynchronous DSL.</p><p>翻译：Apache Curator 是 Apache ZooKeeper 的 Java&#x2F;JVM 客户端库，Apache ZooKeeper 是一种分布式协调服务。它包括一个高级 API 框架和实用程序，使 Apache ZooKeeper 的使用更加轻松和可靠。它还包括常见用例和扩展的秘诀，例如服务发现和 Java 8 异步 DSL。</p></blockquote><blockquote><p>详情请查看官方文档：<a href="https://curator.apache.org/">Apache Curator </a></p></blockquote><h4 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h4><ol><li><p>创建工程<code>zookeeper-04-Distrubuted-Lock-Curator</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.DistributedLockCurator</code></p></li><li><p>创建测试类 测试框架<code>API</code> <code>CuratorLockTest</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.DistributedLockCurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建分布式锁1</span></span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line">        <span class="comment">//创建分布式锁2</span></span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 获取到锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//这里再次获取锁是为了验证该框架的锁是可重入锁</span></span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 再次获取到锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 释放锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//再次释放锁</span></span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 再次释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 获取到锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//这里再次获取锁是为了验证该框架的锁是可重入锁</span></span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 再次获取到锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 释放锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//再次释放锁</span></span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 再次释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分布式锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title function_">getCuratorFramework</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试策略，初试时间3秒,重试3次</span></span><br><span class="line">        <span class="type">ExponentialBackoffRetry</span> <span class="variable">retry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过创建者模式创建Curator</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">2000</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">2000</span>)</span><br><span class="line">                .retryPolicy(retry)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开启连接 启动客户端</span></span><br><span class="line">        client.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;zookeeper 客户端启动成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制台</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">线程一 获取锁</span><br><span class="line">线程一 再次获取锁</span><br><span class="line">线程一 释放锁</span><br><span class="line">线程一 再次释放锁</span><br><span class="line">线程二 获取锁</span><br><span class="line">线程二 再次获取锁</span><br><span class="line">线程二 释放锁</span><br><span class="line">线程二 再次释放锁</span><br></pre></td></tr></table></figure><blockquote><p>通常企业级项目都会使用成熟的框架，原生<code>API</code>的开发是非常少见的</p></blockquote></li></ol><h2 id="企业面试重点真题"><a href="#企业面试重点真题" class="headerlink" title="企业面试重点真题"></a>企业面试重点真题</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><p>半数机制，超过半数的投票通过，即通过。</p><ol><li><p>第一次启动选举规则：</p><p>投票超过半数时，服务器id大的胜出</p></li><li><p>第二次启动选举规则：</p><ol><li>EPOCH大的直接胜出</li><li>EPOCH相同，事务id大的胜出</li><li>事务id相同，服务器id大的胜出</li></ol></li></ol><h3 id="生产集群安装多少台Zookeeper合适"><a href="#生产集群安装多少台Zookeeper合适" class="headerlink" title="生产集群安装多少台Zookeeper合适"></a>生产集群安装多少台<code>Zookeeper</code>合适</h3><p>安装奇数台</p><p><strong>生产经验：</strong></p><blockquote><p>10台服务器：3台Zookeeper</p><p>20台服务器：5台Zookeeper</p><p>100台服务器： 11台Zookeeper</p><p>200台服务器： 11台Zookeeper</p></blockquote><p><strong>服务器台数多：好处，提高可靠性；坏处：提供通信延迟</strong></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>ls</code>、<code>get</code>、<code>create</code>、<code>delete</code></p><blockquote><p><code>create -e</code>:  表示创建临时节点</p><p><code>ls -s</code>： 表示显示数据节点的状态信息 类似于<code>get -s</code></p><p><code>-w</code>: 表示监听</p><p><code>deleteall</code>：递归删除节点（将该节点下的所有节点递归删除后再删除该节点）</p><p><code>create -s</code>：表示创建有序号的节点</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Eureka详细配置</title>
    <link href="https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-14T04:56:09.000Z</published>
    <updated>2022-07-14T05:46:32.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka详细配置"><a href="#Eureka详细配置" class="headerlink" title="Eureka详细配置"></a>Eureka详细配置</h1><h2 id="1-Eureka-Client-配置项（eureka-client-）"><a href="#1-Eureka-Client-配置项（eureka-client-）" class="headerlink" title="1. Eureka Client 配置项（eureka.client.*）"></a>1. <a href="https://so.csdn.net/so/search?q=Eureka&spm=1001.2101.3001.7020">Eureka</a> Client 配置项（eureka.client.*）</h2><blockquote><p>org.<a href="https://so.csdn.net/so/search?q=springframework&spm=1001.2101.3001.7020">springframework</a>.cloud.netflix.eureka.EurekaClientConfigBean</p></blockquote><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.client.enabled</strong></td><td align="center">用于指示Eureka客户端已启用的标志</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.registry-fetch-interval-seconds</strong></td><td align="center">指示从eureka服务器获取注册表信息的频率（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.instance-info-replication-interval-seconds</strong></td><td align="center">更新实例信息的变化到Eureka服务端的间隔时间，（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.initial-instance-info-replication-interval-seconds</strong></td><td align="center">初始化实例信息到Eureka服务端的间隔时间，（s）</td><td align="center">40</td></tr><tr><td align="center"><strong>eureka.client.eureka-service-url-poll-interval-seconds</strong></td><td align="center">询问Eureka Server信息变化的时间间隔（s），默认为300秒</td><td align="center">300</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-read-timeout-seconds</strong></td><td align="center">读取Eureka Server 超时时间（s），默认8秒</td><td align="center">8</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-connect-timeout-seconds</strong></td><td align="center">连接Eureka Server 超时时间（s），默认5秒</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-total-connections</strong></td><td align="center">获取从eureka客户端到所有eureka服务器的连接总数,默认200个</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-total-connections-per-host</strong></td><td align="center">获取从eureka客户端到eureka服务器主机允许的连接总数，默认50个</td><td align="center">50</td></tr><tr><td align="center"><strong>eureka.client.eureka-connection-idle-timeout-seconds</strong></td><td align="center">连接到 Eureka Server 空闲连接的超时时间（s），默认30</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.registry-refresh-single-vip-address</strong></td><td align="center">指示客户端是否仅对单个VIP的注册表信息感兴趣，默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.heartbeat-executor-thread-pool-size</strong></td><td align="center">心跳保持线程池初始化线程数，默认2个</td><td align="center">2</td></tr><tr><td align="center"><strong>eureka.client.heartbeat-executor-exponential-back-off-bound</strong></td><td align="center">心跳超时重试延迟时间的最大乘数值，默认10</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.client.serviceUrl.defaultZone</strong></td><td align="center">可用区域映射到与eureka服务器通信的完全限定URL列表。每个值可以是单个URL或逗号分隔的备用位置列表。(<strong>http:&#x2F;&#x2F; {eureka.instance.hostname}：${server.port}&#x2F;eureka&#x2F;</strong>)</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.use-dns-for-fetching-service-urls</strong></td><td align="center">指示eureka客户端是否应使用DNS机制来获取要与之通信的eureka服务器列表。当DNS名称更新为具有其他服务器时，eureka客户端轮询eurekaServiceUrlPollIntervalSeconds中指定的信息后立即使用该信息。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.register-with-eureka</strong></td><td align="center">指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.prefer-same-zone-eureka</strong></td><td align="center">实例是否使用同一zone里的eureka服务器，默认为true，理想状态下，eureka客户端与服务端是在同一zone下</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.log-delta-diff</strong></td><td align="center">是否记录eureka服务器和客户端之间在注册表的信息方面的差异，默认为false</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.disable-delta</strong></td><td align="center">指示eureka客户端是否禁用增量提取</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.fetch-remote-regions-registry</strong></td><td align="center">逗号分隔的区域列表，提取eureka注册表信息</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.on-demand-update-status-change</strong></td><td align="center">客户端的状态更新到远程服务器上，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.allow-redirects</strong></td><td align="center">指示服务器是否可以将客户端请求重定向到备份服务器&#x2F;集群。如果设置为false，则服务器将直接处理请求。如果设置为true，则可以将HTTP重定向发送到具有新服务器位置的客户端。</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.availability-zones.*</strong></td><td align="center">获取此实例所在区域的可用区域列表（在AWS数据中心中使用）。更改在运行时在registryFetchIntervalSeconds指定的下一个注册表获取周期生效。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.backup-registry-impl</strong></td><td align="center">获取实现BackupRegistry的实现的名称，该实现仅在eureka客户端启动时第一次作为后备选项获取注册表信息。 对于需要额外的注册表信息弹性的应用程序，可能需要这样做，否则它将无法运行。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.cache-refresh-executor-exponential-back-off-bound</strong></td><td align="center">在发生一系列超时的情况下，它是重试延迟的最大乘数值。</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.client.cache-refresh-executor-thread-pool-size</strong></td><td align="center">缓存刷新线程池初始化线程数量</td><td align="center">2</td></tr><tr><td align="center"><strong>eureka.client.client-data-accept</strong></td><td align="center">客户端数据接收的名称</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.decoder-name</strong></td><td align="center">解码器名称</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.dollar-replacement</strong></td><td align="center">eureka服务器序列化&#x2F;反序列化的信息中获取“$”符号的替换字符串。默认为“_-”</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.encoder-name</strong></td><td align="center"><em>编码器名称</em></td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.escape-char-replacement</strong></td><td align="center">eureka服务器序列化&#x2F;反序列化的信息中获取“_”符号的的替换字符串。默认为“__“</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.eureka-server-d-n-s-name</strong></td><td align="center">获取要查询的DNS名称来获得eureka服务器，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-port</strong></td><td align="center">获取eureka服务器的端口，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-u-r-l-context</strong></td><td align="center">表示eureka注册中心的路径，如果配置为eureka，则为<a href="http://ip:port/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null">http://ip:port/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null</a></td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.fetch-registry</strong></td><td align="center"><em>客户端是否获取eureka服务器注册表上的注册信息，默认为true</em></td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.filter-only-up-instances</strong></td><td align="center">是否过滤掉非up实例，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.g-zip-content</strong></td><td align="center">当服务端支持压缩的情况下，是否支持从服务端获取的信息进行压缩。默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.property-resolver</strong></td><td align="center">属性解析器</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.proxy-host</strong></td><td align="center">获取eureka server 的代理主机名</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-password</strong></td><td align="center">获取eureka server 的代理主机密码</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-port</strong></td><td align="center">获取eureka server 的代理主机端口</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-user-name</strong></td><td align="center">获取eureka server 的代理用户名</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.region</strong></td><td align="center">获取此实例所在的区域（在AWS数据中心中使用）。</td><td align="center">us-east-1</td></tr><tr><td align="center"><strong>eureka.client.should-enforce-registration-at-init</strong></td><td align="center">client 在初始化阶段是否强行注册到注册中心</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.should-unregister-on-shutdown</strong></td><td align="center">client在shutdown情况下，是否显示从注册中心注销</td><td align="center">true</td></tr></tbody></table><hr><h2 id="2-服务实例配置项（eureka-instance-）"><a href="#2-服务实例配置项（eureka-instance-）" class="headerlink" title="2. 服务实例配置项（eureka.instance.*）"></a>2. 服务实例配置项（eureka.instance.*）</h2><blockquote><p>org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</p></blockquote><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.instance.appname</strong></td><td align="center">注册到注册中心的应用名称</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.a-s-g-name</strong></td><td align="center">注册到注册中心的应用所属分组名称（AWS服务器）</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.app-group-name</strong></td><td align="center">注册到注册中心的应用所属分组名称</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.data-center-info</strong></td><td align="center">指定服务实例所属数据中心</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.instance-enabled-onit</strong></td><td align="center">指示是否应在eureka注册后立即启用实例以获取流量</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.non-secure-port</strong></td><td align="center">http通信端口</td><td align="center">80</td></tr><tr><td align="center"><strong>eureka.instance.non-secure-port-enabled</strong></td><td align="center">是否启用HTTP通信端口</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.instance.secure-port</strong></td><td align="center">HTTPS通信端口</td><td align="center">443</td></tr><tr><td align="center"><strong>eureka.instance.secure-port-enabled</strong></td><td align="center">是否启用HTTPS通信端口</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.secure-virtual-host-name</strong></td><td align="center">服务实例安全主机名称（HTTPS）</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.virtual-host-name</strong></td><td align="center">该服务实例非安全注解名称（HTTP）</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.secure-health-check-url</strong></td><td align="center">该服务实例安全健康检查地址（URL），绝对地址</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.lease-renewal-interval-in-seconds</strong></td><td align="center">该服务实例向注册中心发送心跳间隔（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.instance.lease-expiration-duration-in-seconds</strong></td><td align="center">指示eureka服务器在删除此实例之前收到最后一次心跳之后等待的时间（s）</td><td align="center">90</td></tr><tr><td align="center"><strong>eureka.instance.metadata-map.*</strong></td><td align="center">自定义元数据,符合KEY&#x2F;VALUE的存储格式。这 些元数据可以在远程客户端中访问。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.ip-address</strong></td><td align="center">该服务实例的IP地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.prefer-ip-address</strong></td><td align="center">是否优先使用服务实例的IP地址，相较于hostname</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.status-page-url</strong></td><td align="center">该服务实例的状态检查地址（url），绝对地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.status-page-url-path</strong></td><td align="center">该服务实例的状态检查地址，相对地址</td><td align="center"><strong>&#x2F;actuator&#x2F;info</strong></td></tr><tr><td align="center"><strong>eureka.instance.home-page-url</strong></td><td align="center">该服务实例的主页地址（url），绝对地址</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.home-page-url-path</strong></td><td align="center">该服务实例的主页地址，相对地址</td><td align="center">&#x2F;</td></tr><tr><td align="center"><strong>eureka.instance.health-check-url</strong></td><td align="center">该服务实例的健康检查地址（url），绝对地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.health-check-url-path</strong></td><td align="center">该服务实例的健康检查地址，相对地址</td><td align="center">&#x2F;actuator&#x2F;health</td></tr><tr><td align="center"><strong>eureka.instance.instance-id</strong></td><td align="center">该服务实例在注册中心的唯一实例ID</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.hostname</strong></td><td align="center">该服务实例所在主机名</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.namespace</strong></td><td align="center">获取用于查找属性的命名空间。 在Spring Cloud中被忽略。</td><td align="center"><strong>eureka</strong></td></tr><tr><td align="center"><strong>eureka.instance.environment</strong></td><td align="center">该服务实例环境配置</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.default-address-resolution-order</strong></td><td align="center">默认地址解析顺序</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.initial-status</strong></td><td align="center">该服务实例注册到Eureka Server 的初始状态</td><td align="center">up</td></tr><tr><td align="center"><strong>eureka.instance.registry.default-open-for-traffic-count</strong></td><td align="center">【Eureka Server 端属性】默认开启通信的数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.instance.registry.expected-number-of-renews-per-min</strong></td><td align="center">【Eureka Server 端属性】每分钟续约次数</td><td align="center">1</td></tr></tbody></table><hr><h2 id="3-Eureka-Server-配置项（eureka-server-）"><a href="#3-Eureka-Server-配置项（eureka-server-）" class="headerlink" title="3. Eureka Server 配置项（eureka.server.*）"></a>3. Eureka Server 配置项（eureka.server.*）</h2><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.enable-self-preservation</strong></td><td align="center">启用自我保护机制，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.eviction-interval-timer-in-ms</strong></td><td align="center">清除无效服务实例的时间间隔（ms），默认1分钟</td><td align="center">60000</td></tr><tr><td align="center"><strong>eureka.server.delta-retention-timer-interval-in-ms</strong></td><td align="center">清理无效增量信息的时间间隔（ms），默认30秒</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.disable-delta</strong></td><td align="center">禁用增量获取服务实例信息</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.log-identity-headers</strong></td><td align="center">是否记录登录日志</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-burst-size</strong></td><td align="center">限流大小</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-enabled</strong></td><td align="center">是否启用限流</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-full-fetch-average-rate</strong></td><td align="center">平均请求速率</td><td align="center">100</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-throttle-standard-clients</strong></td><td align="center">是否对标准客户端进行限流</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-registry-fetch-average-rate</strong></td><td align="center">服务注册与拉取的平均速率</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-privileged-clients</strong></td><td align="center">信任的客户端列表</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.server.renewal-percent-threshold</strong></td><td align="center">15分钟内续约服务的比例小于0.85，则开启自我保护机制，再此期间不会清除已注册的任何服务（即便是无效服务）</td><td align="center">0.85</td></tr><tr><td align="center"><strong>eureka.server.renewal-threshold-update-interval-ms</strong></td><td align="center">更新续约阈值的间隔（分钟），默认15分钟</td><td align="center">15</td></tr><tr><td align="center"><strong>eureka.server.response-cache-auto-expiration-in-seconds</strong></td><td align="center">注册信息缓存有效时长（s），默认180秒</td><td align="center">180</td></tr><tr><td align="center"><strong>eureka.server.response-cache-auto-expiration-in-seconds</strong></td><td align="center">注册信息缓存更新间隔（s），默认30秒</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.server.retention-time-in-m-s-in-delta-queue</strong></td><td align="center">保留增量信息时长（分钟），默认3分钟</td><td align="center">3</td></tr><tr><td align="center"><strong>eureka.server.sync-when-timestamp-differs</strong></td><td align="center">当时间戳不一致时，是否进行同步</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.use-read-only-response-cache</strong></td><td align="center">是否使用只读缓存策略</td><td align="center">true</td></tr></tbody></table><hr><h2 id="4-自定义工具设置"><a href="#4-自定义工具设置" class="headerlink" title="4. 自定义工具设置"></a>4. 自定义工具设置</h2><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>说明</strong></th><th></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.json-codec-name</strong></td><td align="center">Json编解码器名称</td><td></td></tr><tr><td align="center"><strong>eureka.server.property-resolver</strong></td><td align="center">属性解析器名称</td><td></td></tr><tr><td align="center"><strong>eureka.server.xml-codec-name</strong></td><td align="center">Xml编解码器名称</td><td></td></tr></tbody></table><h2 id="5-Eureka-Server-集群配置（eureka-server-）"><a href="#5-Eureka-Server-集群配置（eureka-server-）" class="headerlink" title="5. Eureka Server 集群配置（eureka.server.*）"></a>5. Eureka Server 集群配置（eureka.server.*）</h2><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.enable-replicated-request-compression</strong></td><td align="center">复制数据请求时，数据是否压缩</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.batch-replication</strong></td><td align="center">节点之间数据复制是否采用批处理</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.max-elements-in-peer-replication-pool</strong></td><td align="center">备份池最大备份事件数量，默认1000</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.max-elements-in-status-replication-pool</strong></td><td align="center">状态备份池最大备份事件数量，默认1000</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.max-idle-thread-age-in-minutes-for-peer-replication</strong></td><td align="center">节点之间信息同步线程最大空闲时间（分钟）</td><td align="center">15</td></tr><tr><td align="center"><strong>eureka.server.max-idle-thread-age-in-minutes-for-peer-replication</strong></td><td align="center">节点之间状态同步线程最大空闲时间（分钟）</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.max-threads-for-peer-replication</strong></td><td align="center">节点之间信息同步最大线程数量</td><td align="center">20</td></tr><tr><td align="center"><strong>eureka.server.max-threads-for-status-replication</strong></td><td align="center">节点之间状态同步最大线程数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.server.max-time-for-replication</strong></td><td align="center">节点之间信息复制最大通信时长（ms）</td><td align="center">3000</td></tr><tr><td align="center"><strong>eureka.server.min-available-instances-for-peer-replication</strong></td><td align="center">集群中服务实例最小数量，-1 表示单节点</td><td align="center">-1</td></tr><tr><td align="center"><strong>eureka.server.min-threads-for-peer-replication</strong></td><td align="center">节点之间信息复制最小线程数量</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.server.min-threads-for-status-replication</strong></td><td align="center">节点之间信息状态同步最小线程数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.server.number-of-replication-retries</strong></td><td align="center">节点之间数据复制时，可重试次数</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.server.peer-eureka-nodes-update-interval-ms</strong></td><td align="center">节点更新数据间隔时长（分钟）</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.peer-eureka-status-refresh-time-interval-ms</strong></td><td align="center">节点之间状态刷新间隔时长（ms）</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.peer-node-connect-timeout-ms</strong></td><td align="center">节点之间连接超时时长（ms）</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.server.peer-node-connection-idle-timeout-seconds</strong></td><td align="center">节点之间连接后，空闲时长（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.server.peer-node-read-timeout-ms</strong></td><td align="center">几点之间数据读取超时时间（ms）</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.server.peer-node-total-connections</strong></td><td align="center">集群中节点连接总数</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.peer-node-total-connections-per-host</strong></td><td align="center">节点之间连接，单机最大连接数量</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.registry-sync-retries</strong></td><td align="center">节点启动时，尝试获取注册信息的次数</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.registry-sync-retry-wait-ms</strong></td><td align="center">节点启动时，尝试获取注册信息的间隔时长（ms）</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.wait-time-in-ms-when-sync-empty</strong></td><td align="center">在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间（分钟）</td><td align="center">5</td></tr></tbody></table><hr><blockquote><p>转载自：<a href="https://blog.csdn.net/rzpy_qifengxiaoyue/article/details/108132255"> Eureka配置参数详细说明_四月丶丶的博客-CSDN博客</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eureka详细配置&quot;&gt;&lt;a href=&quot;#Eureka详细配置&quot; class=&quot;headerlink&quot; title=&quot;Eureka详细配置&quot;&gt;&lt;/a&gt;Eureka详细配置&lt;/h1&gt;&lt;h2 id=&quot;1-Eureka-Client-配置项（eureka-client</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud</title>
    <link href="https://devildyw.github.io/2022/07/12/Spring%20Cloud/"/>
    <id>https://devildyw.github.io/2022/07/12/Spring%20Cloud/</id>
    <published>2022-07-12T03:17:39.000Z</published>
    <updated>2022-08-11T15:32:37.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="微服务架构理论入门"><a href="#微服务架构理论入门" class="headerlink" title="微服务架构理论入门"></a>微服务架构理论入门</h2><p><strong>什么是微服务</strong></p><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.——James Lewis and Martin Fowler (2014)</p><p>微服务架构是一种架构模式，它提倡将单一应用程序划分为成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值，每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协议的<code>RESTful API</code>）。每个服务都围绕着本业务进行构建，并且能够独立的部署到生产环境，类生产环境等，另外应当避免统一的，集中式的服务管理机制，对具体的一个服务而言，根据业务上下文，选择合适的语言，工具对其进行构建。</p></blockquote><p>单体的架构不利于现在互联网的发展，举个栗子，假如你在某宝买了一件衣服，要去下订单，调用库存，支付，调用仓储和物流，收货成功了，给用户增加积分等等模块，一个一个的模块就是我们利用<code>springboot</code>开发的微服务，以前是一个单体应用，现在有很多模块，服务，就需要一种机制将多个服务管理起来，所以说<code>spingboot</code>就是一个一个的提供功能的微服务。</p><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h3 id="服务架构的演变"><a href="#服务架构的演变" class="headerlink" title="服务架构的演变"></a>服务架构的演变</h3><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112208750.png" alt="image-20220811220445575"></p><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打包成一个包部署。</p><p><strong>优点</strong>：</p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点</strong>：</p><ul><li>耦合度高</li></ul><h4 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112208755.png" alt="image-20220811220519757"></p><p><strong>分布式架构</strong>：根据业务能力对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。</p><p><strong>优点</strong>：</p><ul><li>降低服务耦合</li><li>有利于服务升级拓展</li></ul><h4 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112208373.png" alt="image-20220811220836306"></p><p>分布式架构的要考虑的问题：</p><ul><li>服务拆分粒度如何？</li><li>服务集群地址如何维护？</li><li>服务之间如何实现远程调用？</li><li>服务健康状态如何感知？</li></ul><p>上述问题有着许多的解决方案，例如Dubbo等，但是最好的解决方案还是微服务方案。</p><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征：</p><ul><li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</li><li>面向服务：微服务对外暴露业务接口</li><li>自治：团队独立、技术独立、数据独立、部署独立</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112216628.png" alt="image-20220811221641573"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>单体架构特点？</p><ul><li>简单方便，高度耦合，拓展性查，适合小型项目。例如学生管理系统</li></ul><p>分布式架构特点？</p><ul><li>松耦合，拓展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东，淘宝</li></ul><p>微服务：一种良好的分布式架构解决方案</p><h3 id="微服务技术对比"><a href="#微服务技术对比" class="headerlink" title="微服务技术对比"></a>微服务技术对比</h3><h4 id="微服务结构"><a href="#微服务结构" class="headerlink" title="微服务结构"></a>微服务结构</h4><p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内知名就是Spring Cloud 和 阿里巴巴的<code>Dubbo</code>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112226780.png" alt="image-20220811222613716"></p><h4 id="微服务技术对比-1"><a href="#微服务技术对比-1" class="headerlink" title="微服务技术对比"></a>微服务技术对比</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112232777.png" alt="image-20220811223219706"></p><h4 id="企业需求"><a href="#企业需求" class="headerlink" title="企业需求"></a>企业需求</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112234095.png" alt="image-20220811223411028"></p><ul><li><code>SpringCloud</code> + <code>Feign</code><ul><li>使用Spring Cloud技术栈</li><li>服务接口采用RestFul风格</li><li>服务调用采用Feign方式</li></ul></li><li><code>SpringCloudAlibaba</code> + <code>Feign</code><ul><li>使用Spring Cloud Alibaba 技术栈</li><li>服务接口采用RestFul风格</li><li>服务调用采用Feign方式</li></ul></li><li><code>SpringCloudAlibaba</code> + <code>Dubbo</code><ul><li>使用 Spring Cloud Alibaba 技术栈</li><li>服务接口采用 <code>Dubbo</code> 标准协议</li><li>服务调用采用 <code>Dubbo</code> 方式</li></ul></li><li><code>Dubbo</code>原始模式<ul><li>基于 <code>Dubbo</code> 老技术体系</li><li>服务接口采用 <code>Dubbo</code> 协议标准</li><li>服务调用采用 <code>Dubbo</code> 方式</li></ul></li></ul><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Spring Cloud</code> 是分布式微服务架构的一站式解决方案，它提供了一套简单易用的编程模型，使我们能在 <code>Spring Boot</code> 的基础上轻松地实现微服务系统的构建。</p><p><code>Spring Cloud</code> 被称为构建分布式微服务系统的“全家桶”，它并不是某一门技术，而是一系列微服务解决方案或框架的有序集合。它将市面上成熟的、经过验证的微服务框架整合起来，并通过 <code>Spring Boot</code> 的思想进行再封装，屏蔽调其中复杂的配置和实现原理，最终为开发人员提供了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p><code>Spring Cloud</code> 中包含了 <code>spring-cloud-config</code>、<code>spring-cloud-bus</code> 等近 20 个子项目，提供了服务治理、服务网关、智能路由、负载均衡、断路器、监控跟踪、分布式消息队列、配置管理等领域的解决方案。</p><p>简单的说<code>Spring Cloud</code>提供了一套完美的一站式分布式微服务解决方案。</p><p><code>Spring Cloud</code> 本身并不是一个拿来即可用的框架，它是一套微服务规范，共有两代实现。</p><ul><li><code>Spring Cloud Netflix</code> 是 <code>Spring Cloud</code> 的第一代实现，主要由 <code>Eureka</code>、<code>Ribbon</code>、<code>Feign</code>、<code>Hystrix</code> 等组件组成。</li><li><code>Spring Cloud Alibaba</code> 是 <code>Spring Cloud</code> 的第二代实现，主要由 <code>Nacos</code>、<code>Sentinel</code>、<code>Seata</code> 等组件组成。</li></ul><hr><ul><li><p><strong>Spring Cloud是国内使用最广泛的微服务框架。</strong></p></li><li><p><strong>Spring Cloud 集成了各种微服务功能组件，并基于Spring Boot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</strong></p></li></ul><blockquote><p>官网地址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p></blockquote><p><strong>但是微服务并不等同于Spring Cloud 还包含着<code>JenKins</code>、<code>Docker</code>、<code>K8s</code>等对微服务进行打包部署，才能够称为完成的微服务技术栈。</strong></p><h3 id="基于分布式的微服务架构"><a href="#基于分布式的微服务架构" class="headerlink" title="基于分布式的微服务架构"></a>基于分布式的微服务架构</h3><p>满足那些维度？</p><p>支持起这些维度的具体技术？</p><p>SpringCloud官网给出了一张图</p><p><img src="https://spring.io/images/cloud-diagram-1a4cad7294b4452864b5ff57175dd983.svg" alt="Spring Cloud diagram"></p><p>总结可以得到，一个完整的基于分布式的微服务的架构需要满足以下要求。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112259795.png" alt="image-20220811225914725"></p><ul><li>服务调用</li><li>服务降级</li><li>服务注册与发先</li><li>服务熔断</li><li>负载均衡</li><li>服务消息队列</li><li>服务网关</li><li>配置中心管理</li><li>自动化构建部署</li><li>服务监控</li><li>全链路追踪</li><li>服务定时任务</li><li>调度操作</li></ul><p>由前面我们也得知<code>SpringCloud</code> &#x3D; 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><hr><h2 id="服务拆分及远程调用"><a href="#服务拆分及远程调用" class="headerlink" title="服务拆分及远程调用"></a>服务拆分及远程调用</h2><p><strong>服务拆分注意事项</strong></p><ol><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其他微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208112327615.png" alt="image-20220811232752553"></p><hr><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="SpringCloud的版本选型"><a href="#SpringCloud的版本选型" class="headerlink" title="SpringCloud的版本选型"></a><code>SpringCloud</code>的版本选型</h3><p><code>SpringCloud</code>版本不能盲目选择，SpringCloud的选择与SpringBoot版本选择有关，但是我们不用烦恼如何去选择版本，因为官方已经帮我们列了一张表了。</p><p><a href="https://spring.io/projects/spring-cloud">Spring Cloud官方文档</a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713233202322.png" alt="image-20220713233202322"></p><p>通过上面这张图我们可以很清楚地看到，<code>SpringCloud</code>版本与<code>Spring Boot</code>版本之间的对应关系。</p><p>不仅如此，当你选择某个版本的<code>SpringCloud</code>版本的文档查看时，Spring官方还会为你选择<code>SpringCloud</code>版本推荐最最合适的<code>SpringBoot</code>版本。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713233517123.png" alt="image-20220713233517123"></p><p>本篇博客所编写的Demo将用到如下组件版本</p><blockquote><ul><li><code>SpringCloud - 2021.0.3</code> </li><li><code>SpringBoot - 2.6.8</code></li><li><code>SpringCloud Alibaba - 2021.1</code></li><li><code>Java - Jdk1.8</code></li><li><code>Maven - 3.5+</code></li><li><code>Mysql - 5.7</code></li></ul></blockquote><hr><h3 id="SpringCloud组件停更说明"><a href="#SpringCloud组件停更说明" class="headerlink" title="SpringCloud组件停更说明"></a><code>SpringCloud</code>组件停更说明</h3><ul><li><strong>停更引发的“升级惨案”</strong><ul><li>停更不停用</li><li>被动修复bugs</li><li>不再接受合并请求</li><li>不再发布新版本</li></ul></li><li><strong><code>SpringCloud</code>升级</strong><ul><li>服务注册中心<ul><li>× <code>Eureka</code></li><li>✔ <code>Zookeeper</code>(<code>Dubbo</code>官方推荐注册中心)</li><li>✔ <code>Consul</code>(<code>golang</code>语言编写)</li><li>✔ <code>Nacos</code>(<code>SpringCloud Alibaba</code> <code>Spring</code>官方推荐)</li></ul></li><li>服务调用<ul><li>✔ <code>Ribbon</code></li><li>✔ <code>LoadBalancer</code></li></ul></li><li>服务调用2<ul><li>× <code>Feign</code></li><li>✔ <code>OpenFeign</code></li></ul></li><li>服务降级<ul><li>× <code>Hystrix</code></li><li>✔ <code>resilience4j</code></li><li>✔ <code>sentienl</code></li></ul></li><li>服务网关<ul><li>× <code>Zuul</code></li><li>! <code>Zuul2</code>(<code>SpringCloud Netflix</code> 还未发布 疑似胎死腹中)</li><li>✔ <code>gateway</code></li></ul></li><li>服务配置<ul><li>× <code>Config</code></li><li>✔ <code>Nacos</code></li></ul></li><li>服务总线<ul><li>× <code>Bus</code></li><li>✔ <code>Nacos</code></li></ul></li></ul></li></ul><p><a href="https://docs.gitcode.net/spring/guide/spring-cloud/documentation-overview.html">Spring Cloud 文档 | 中文文档 </a></p><hr><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>一定要记住 <strong>约定 &gt; 配置 &gt; 编码</strong></p><p><strong>工程结构</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713235303555.png" alt="image-20220713235303555"></p><ol><li><p>创建父工程管理子工程模块之间的版本依赖。</p><p><code>Cloud-01-HelloSpringCloud</code></p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-provide-payment-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.6.8--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 2021.0.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建子工程</p><p><code>Cloud-provide-payment-8001</code>服务生产者</p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-provide-payment-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud?useSSL=false&amp;characterEncoding=utf-8&amp;userUnicode=true</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span>       <span class="comment"># 初始线程数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span>        <span class="comment"># 最大线程数</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span>       <span class="comment"># 最大等待时间</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span>      <span class="comment"># 最大空闲实践</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dyw.springcloud.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p>建表语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for payment</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `payment`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `serial` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1547166640708214786</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>统一返回结果类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Mapper</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Payment&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务类</p><p><code>PaymentService</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">    Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayMentServiceImpl</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PaymentMapper paymentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.insert(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果:&#123;&#125;&quot;</span>, result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功&quot;</span>, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;插入数据失败&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果:&#123;&#125;&quot;</span>, payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;没有对应记录,查询ID:&quot;</span> + id, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>创建子工程</p><p><code>Cloud-consumer-order80</code></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#没有太多的配置 因为这里的子模块无需其他功能 只要能够调用生产者提供的服务即可</span></span><br></pre></td></tr></table></figure></li><li><p>实体类，和统一结构返回类与<code>Cloud-provide-payment-8001</code>相同</p></li><li><p><code>RestTemplate</code>配置类</p><p>在<code>SpringCloud</code>中服务之间的调用是通过<code>RestTemplate</code>(底层是<code>http</code>)访问的。这个类无需导入，导入的<code>spring-boot-starter-web</code>包中包含了，只需要通过配置类，将其注入<code>Spring</code>容器即可使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><p><code>OrderController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">createPayment</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>启动测试</p><p>当<code>Idea</code>检测到有多个服务运行时，会提供<code>Services</code>面板来帮助使用者管理服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714001043018.png" alt="image-20220714001043018"></p><p>启动成功后，调用消费者的接口查看是否能够有预期返回值。</p><p><code>GET : http://localhost:80/consumer/payment/get/1547118279208656900</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>POST : http://localhost:80/consumer/payment/create</code></p><p>请求参数: </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span><span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>优化重构工程</strong></p><p>从前面的步骤来看我们可以知道，有一部分是两个子模块公用的，那就是实体类部分和统一结果返回类，可以复用的部分，我们不妨将他们抽离出两个子模块单独做成一个模块供其他子模块使用。除此之外还可以存放一些可以共用的工具类。</p><p><strong>项目结构</strong></p><p><img src="C:\Users\Devil\AppData\Roaming\Typora\typora-user-images\image-20220714001613904.png" alt="image-20220714001613904"></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有什么特别的配置，只需要满足提供共用的实体类和统一结果返回类即可。</p></li><li><p>剩下的便是将共用的类移入该模块中</p></li><li><p><code>maven :  install</code> 将子模块上传到本地仓库 也可<code>maven : deploy</code>将其部署到远端仓库中</p></li><li><p>其他子模块导包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;微服务架构理论入门&quot;&gt;&lt;a href=&quot;#微服务架</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
