<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devil的个人博客</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="https://devildyw.github.io/atom.xml" rel="self"/>
  
  <link href="https://devildyw.github.io/"/>
  <updated>2022-07-23T16:28:27.558Z</updated>
  <id>https://devildyw.github.io/</id>
  
  <author>
    <name>Devil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud-Consul</title>
    <link href="https://devildyw.github.io/2022/07/23/Spring%20Cloud-Consul/"/>
    <id>https://devildyw.github.io/2022/07/23/Spring%20Cloud-Consul/</id>
    <published>2022-07-23T15:00:25.000Z</published>
    <updated>2022-07-23T16:28:27.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud-Consul"></a>Spring Cloud-Consul</h1><p><a href="https://www.consul.io/docs/intro">Consul官网</a></p><p><a href="https://yushuai-w.gitbook.io/consul/intro">Consul中文文档</a></p><p><a href="https://www.springcloud.cc/spring-cloud-consul.html">Spring Cloud Consul 中文文档 参考手册 中文版</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality. Each of these features can be used individually as needed, or they can be used together to build a full service mesh. Consul requires a data plane and supports both a proxy and native integration model. Consul ships with a simple built-in proxy so that everything works out of the box, but also supports 3rd party proxy integrations such as Envoy.</p><p>翻译：Consul是一个<strong>服务网格</strong>解决方案，提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些功能中的每一项都可以根据需要单独使用，也可以一起使用来构建一个完整的<strong>服务网格</strong>。Consul需要一个数据平面，并支持代理和原生集成模型。Consul提供了一个简单的内置代理，因此一切都可以开箱即用，但也支持第三方代理集成，如<strong>Envoy</strong>。 </p><p>优点: 基于Raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持跨数据中心的WAN集群，提供图形界面，跨平台，支持<code>linux</code>、<code>mac</code>、<code>windows</code></p></blockquote><h3 id="Consul的特点"><a href="#Consul的特点" class="headerlink" title="Consul的特点"></a>Consul的特点</h3><p><strong>consul的主要特点有：</strong></p><ul><li><strong>Service Discovery(服务发现)：</strong>Consul的客户端可以注册一个服务，比如<code>api</code>或<code>mysql</code>，其他客户端可以使用Consul来发现特定服务的提供者。使用<code>DNS</code>或<code>HTTP</code>，应用程序可以很容易地找到他们所依赖的服务。</li><li><strong>Health Checking(健康检查)：</strong>Consul客户端可以提供任何数量的健康检查，要么与给定的服务相关联（如： “<code>webserver</code>是否返回200 OK”），要么与本地节点相关联（如： “内存利用率是否低于90%”）。这些信息可以运维人员用来<strong>监控集群的健康状况</strong>，并被服务发现组件来路由流量（比如： 仅路由到健康节点）</li><li><strong>KV Store(KV存储)：</strong>应用程序可以利用Consul的<strong>层级K&#x2F;V</strong>存储来实现任何目的，包括动态配置、功能标记、协调、领导者选举等。Consul提供了HTTP <code>API</code>，使其非常简单以用。</li><li><strong>Secure Service Communication(安全服务通信)：</strong>Consul可以为服务生成和分发<code>TLS</code>（ <a href="https://baike.baidu.com/item/TLS">传输层安全性协议</a>）证书，以建立相互的<code>TLS</code>连接。可以使用<a href="https://www.consul.io/docs/connect/intentions">Intention</a>来定义哪些服务被允许进行通信。服务隔离可以通过可以实时更改<a href="https://www.consul.io/docs/connect/intentions">Intention</a>策略轻松管理，而不是使用复杂的网络拓扑结构和静态防火墙规则。</li><li><strong>Multi Datacenter(多数据中心)：</strong>Consul支持开箱即用的<strong>多数据中心</strong>。这意味着Consul的用户不必担心建立额外的抽象层来发展到多个区域。 </li><li><strong>可视化的图形界面</strong></li></ul><h2 id="Consul安装"><a href="#Consul安装" class="headerlink" title="Consul安装"></a>Consul安装</h2><p><strong>这里使用docker部署。</strong></p><ol><li><p>拉取Consul镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull consul <span class="comment"># 默认拉取latest</span></span><br><span class="line">$ docker pull consul:1.6.1 <span class="comment"># 拉取指定版本</span></span><br></pre></td></tr></table></figure></li><li><p>安装并运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8500:8500 --restart=always --name=consul consul:latest agent -server -bootstrap -ui -node=1 -client=<span class="string">&#x27;0.0.0.0&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>agent: 表示启动 Agent 进程。</li><li>server：表示启动 Consul Server 模式</li><li>client：表示启动 Consul <code>Cilent</code> 模式。</li><li>bootstrap：表示这个节点是 Server-Leader ，每个数据中心只能运行一台服务器。技术角度上讲 Leader 是通过 Raft 算法选举的，但是集群第一次启动时需要一个引导 Leader，在引导群集后，建议不要使用此标志。</li><li><code>ui</code>：表示启动 Web<code>UI</code>管理器，默认开放端口 8500，所以上面使用 Docker 命令把 8500 端口对外开放。</li><li>node：节点的名称，集群中必须是唯一的，默认是该节点的主机名。</li><li><code>client</code>：consul服务侦听地址，这个地址提供HTTP、<code>DNS</code>、<code>RPC</code>等服务，默认是127.0.0.1所以不对外提供服务，<strong>如果你要对外提供服务改成0.0.0.0</strong></li><li>join：表示加入到某一个集群中去。 如：<code>-json=192.168.0.11</code>。</li></ul></blockquote></li><li><p>如果是云服务器请在云服务器平台中开放8500端口，如果是虚拟机那么需要关闭防火墙</p></li><li><p>运行成功并且端口开放后，我们可以在访问<code>http://服务器ip:端口/ui</code>，得到如下界面表示安装运行成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723233530709.png" alt="image-20220723233530709"></p></li></ol><hr><p><strong><code>Spring Cloud</code>整合<code>Consul</code>代替<code>Eureka</code></strong></p><h2 id="新建父工程"><a href="#新建父工程" class="headerlink" title="新建父工程"></a>新建父工程</h2><ol><li><p>新建工程<code>Cloud-04-Consul</code></p></li><li><p>添加<code>pom.xml</code>中的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consul-payment8006<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consul-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><ol><li><p>创建工程<code>Cloud-zookeeper-payment8006</code></p></li><li><p><code>pom.xml</code>配置依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        springcloud 整合consul的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line"><span class="comment"># consul注册中心的地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="comment"># 开启心跳检测</span></span><br><span class="line">        <span class="attr">heartbeat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8006</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动图形界面检测测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723235723693.png" alt="image-20220723235723693"></p></li><li><p>接口访问测试 <code>http://localhost:8006/payment/consul</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723235854586.png" alt="image-20220723235854586"></p></li></ol><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><ol><li><p>创建工程<code>Cloud-consul-order80</code></p></li><li><p>添加<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-04-Consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consul-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        springcloud 整合consul的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">heartbeat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类 配置<code>RestTemplate</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//开启RestTemplate的负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动图形界面检测测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724001010438.png" alt="image-20220724001010438"></p></li><li><p>接口访问测试 <code>http://localhost:81/consumer/payment/consul</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724001054090.png" alt="image-20220724001054090"></p></li></ol><h2 id="生产者集群"><a href="#生产者集群" class="headerlink" title="生产者集群"></a>生产者集群</h2><p>与Eureka类似，只需要多个提供相同的服务的生产者注册到同一个服务名称下即可，如果要使用消费者的<code>RestTemplate</code>访问记得加上<code>@LoadBalanced</code>注解即可（负载均衡 如果不加会报错）。</p><h2 id="Consul、Zookeeper和Eureka之间的区别"><a href="#Consul、Zookeeper和Eureka之间的区别" class="headerlink" title="Consul、Zookeeper和Eureka之间的区别"></a>Consul、Zookeeper和Eureka之间的区别</h2><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>Spring Cloud集成</th></tr></thead><tbody><tr><td><strong>Eureka</strong></td><td>Java</td><td>AP</td><td>可配支持</td><td><code>HTTP</code></td><td><strong>已集成</strong></td></tr><tr><td><strong>Consul</strong></td><td>Go</td><td><code>CP</code></td><td>支持</td><td><code>HTTP/DNS</code></td><td><strong>已集成</strong></td></tr><tr><td><strong>Zookeeper</strong></td><td>Java</td><td><code>CP</code></td><td>支持</td><td>客户端</td><td><strong>已集成</strong></td></tr></tbody></table><blockquote><p>相关文章：<a href="https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/">CAP理论</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Consul&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Consul&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Consul&quot;&gt;&lt;/a&gt;Spring Cloud-Consul&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>CAP理论</title>
    <link href="https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/"/>
    <id>https://devildyw.github.io/2022/07/22/CAP%E7%90%86%E8%AE%BA/</id>
    <published>2022-07-22T05:50:12.000Z</published>
    <updated>2022-07-23T16:26:28.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>CAP理论告诉我们，一个分布式系统不可能同时满足以下三种</p><p>⚫ 一致性（C:Consistency） </p><p>⚫ 可用性（A:Available） </p><p>⚫ 分区容错性（P:Partition Tolerance）</p><p>这三个基本需求，最多只能同时满足其中的两项，因为P是必须的，因此往往选择就在CP或者AP中。 </p><ol><li><p><strong>一致性</strong>（<strong>C:Consistency</strong>）</p><p>在分布式环境中，一致性是指数据在多个副本之间是否能够保持数据一致的特性。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。 </p></li><li><p><strong>可用性</strong>（<strong>A:Available</strong>）</p><p>可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。 </p></li><li><p><strong>分区容错性</strong>（<strong>P:Partition Tolerance</strong>）</p><p>分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p></li></ol><p><strong>ZooKeeper保证的是CP</strong></p><ol><li><strong><code>ZooKeeper</code>不能保证每次服务请求的可用性。</strong>（注：在极端环境下，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果）。所以说，ZooKeeper不能100%保证服务可用性。 </li><li><strong>进行Leader选举时集群都是不可用。</strong></li></ol><p><strong>Eureka保证的是AP</strong></p><h2 id="AP架构"><a href="#AP架构" class="headerlink" title="AP架构"></a>AP架构</h2><p>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性</p><p><strong>结论：违背了一致性C的要求，只满足可用性和分区容错性，即AP</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724002343024.png" alt="image-20220724002343024"></p><h2 id="CP架构"><a href="#CP架构" class="headerlink" title="CP架构"></a>CP架构</h2><p>当网络分区出现后，为了而保证一致性，就必须拒接请求，否则无法保证一致性</p><p><strong>结论：违背了可用性A的要求，只满足一致性和分区容错性，即CP</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220724002423706.png" alt="image-20220724002423706"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CAP理论&quot;&gt;&lt;a href=&quot;#CAP理论&quot; class=&quot;headerlink&quot; title=&quot;CAP理论&quot;&gt;&lt;/a&gt;CAP理论&lt;/h1&gt;&lt;p&gt;CAP理论告诉我们，一个分布式系统不可能同时满足以下三种&lt;/p&gt;
&lt;p&gt;⚫ 一致性（C:Consistency） &lt;</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ZAB</title>
    <link href="https://devildyw.github.io/2022/07/21/ZAB/"/>
    <id>https://devildyw.github.io/2022/07/21/ZAB/</id>
    <published>2022-07-21T15:31:32.000Z</published>
    <updated>2022-07-22T05:49:39.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议"><a href="#Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议" class="headerlink" title="Zookeeper Atomic Broadcast(Zookeeper 原子广播协议)"></a><code>Zookeeper Atomic Broadcast</code>(<code>Zookeeper</code> 原子广播协议)</h1><h2 id="什么是ZAB算法"><a href="#什么是ZAB算法" class="headerlink" title="什么是ZAB算法"></a>什么是<code>ZAB</code>算法</h2><p><code>Zab</code>借鉴了<code>Paxos</code>算法(<code>Multi Paxos</code>)，是特别为<code>Zookeeper</code>设计的支持崩溃回复的原子广播协议。基于该协议，<code>Zookeeper</code>设计了为只有一台客户端(Leader)负责处理外部的写事务请求，然后Leader客户端将数据同步到其他Follower节点。即<code>Zookeeper</code>只有一个Leader可以发起提案。</p><h2 id="ZAB协议内容"><a href="#ZAB协议内容" class="headerlink" title="ZAB协议内容"></a><code>ZAB</code>协议内容</h2><p><code>ZAB</code>协议包括两种基本的模式：消息广播、崩溃恢复。</p><h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722122448654.png" alt="image-20220722122448654"></p><ol><li>客户端发起一个写操作请求。</li><li>Leader服务器将客户端的请求转化为事务Proposal提案，同时为每个Proposal分配一个全局ID，即<code>zxid</code></li><li>Leader服务器<strong>为每个Follower服务器分配一个单独的队列</strong>，然后将需要广播的Proposal依次放到队列中去，并且根据FIFO策略进行消息发送。</li><li>Follower接受到Proposal后，会首先将起以事务日志的方式是写入本地磁盘中，写入成功后向Leader反馈一个<code>Ack</code>响应消息</li><li>Leader接收到<strong>超过半数以上</strong>Follower的<code>Ack</code>响应消息后，即认为消息发送成功，可以发送commit消息</li><li>Leader向<strong>所有Follower</strong>广播commit消息，同时自身也会完成事务提交。Follower接受到commit消息后，会将上一条事务提交</li><li><code>Zookeeper</code>采用<code>Zab</code>协议的核心，就是只要有一台服务器提交Proposal，就要确保所有服务器最终都能正确提交Proposal。</li></ol><blockquote><p><code>ZAB</code>协议针对事务请求的处理过程类似于一个两阶段提交过程</p><ol><li>广播事务阶段</li><li>广播提交阶段</li></ol><p>这两个阶段提交模型如下，有可能因为Leader宕机带来数据不一致，比如</p><ol><li>Leader发起一个事务<code>Proposal1</code>后就宕机，Follower都没有<code>Proposal1</code></li><li>Leader收到半数<code>ACK</code>宕机，没来得及向Follower发送Commit</li></ol><p><strong>为了解决上述问题，<code>ZAB</code>引入了崩溃恢复模式。</strong></p></blockquote><h4 id="崩溃恢复–异常假说"><a href="#崩溃恢复–异常假说" class="headerlink" title="崩溃恢复–异常假说"></a>崩溃恢复–异常假说</h4><p>一旦Leader服务器出现崩溃或者由于网络原因导致Leader服务器失去了与过半Follower的联系，那么就会进入<strong>崩溃恢复模式</strong>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722131218448.png" alt="image-20220722131218448"></p><ol><li><strong>假设两种服务器异常情况</strong><ol><li>假设一个事务在Leader提出之后，Leader挂了。</li><li>一个事务在Leader上提交了，并且过半的Follower都响应<code>Ack</code>了，但是Leader在Commit消息发出之前挂了。</li></ol></li><li><strong><code>Zab</code>协议崩溃恢复要求满足以下两个要求：</strong><ol><li>确保已经被Leader提交的提案Proposal，必须最终被所有的Follower服务器提交。(<strong>已经产生的提案，Follower必须执行</strong>)</li><li>确保丢弃已经被Leader提出的但是没有被提交的Proposal。(<strong>丢弃胎死腹中的提案</strong>)</li></ol></li></ol><h4 id="崩溃恢复–Leader选举"><a href="#崩溃恢复–Leader选举" class="headerlink" title="崩溃恢复–Leader选举"></a>崩溃恢复–Leader选举</h4><p>崩溃恢复主要包括两个部分：<strong>Leader选举和数据恢复</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722131903208.png" alt="image-20220722131903208"></p><p><strong>Leader选举：</strong>根据上述要求，<code>Zab</code>协议需要保证选举出来的Leader需要满足以下条件：</p><ol><li>新选举出来的Leader不能包括未提交的Proposal。<strong>即新Leader必须都是已经提交了Proposal的Follower服务器节点。</strong></li><li><strong>新选举的Leader节点中含有最大的<code>zxid</code>。</strong>这样做的好处是可以避免Leader服务器检查Proposal的提交和丢弃工作。(因为它自身的<code>zxid</code>最大所以它有着最新的操作记录，所以不需要去检查其他服务器的Proposal的提交和丢弃，他自己就可以知道)</li></ol><h4 id="崩溃恢复–数据恢复"><a href="#崩溃恢复–数据恢复" class="headerlink" title="崩溃恢复–数据恢复"></a>崩溃恢复–数据恢复</h4><p>崩溃恢复主要包括两个部分：<strong>Leader选举和数据恢复</strong></p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220722132241185.png" alt="image-20220722132241185"  /><p><strong><code>Zab</code>如何数据同步：</strong></p><ol><li>完成Leader选举后，在正式开始工作之前（接收事务请求，然后提出新的Proposal），<strong>Leader服务器会首先确认事务日志中的所有Proposal是否已经被集群中过半的服务器Commit。</strong>（在正式工作之前需要将日志中的数据同步）</li><li>Leader服务器需要确保所有的Follower服务器能够接收到每一条事务的Proposal，并且能将所有已经提交的事务Proposal应用到内存数据中。<strong>等到Follower将所有尚未同步的事务Proposal都从Leader服务器上同步过，并且应用到内容数据中以后，Leader次啊会把该Follower加入到真正可用的Follower列表中。</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议&quot;&gt;&lt;a href=&quot;#Zookeeper-Atomic-Broadcast-Zookeeper-原子广播协议&quot; class=&quot;headerlink&quot; title=&quot;Zookee</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Paxos-wiki</title>
    <link href="https://devildyw.github.io/2022/07/21/Paxos-wiki/"/>
    <id>https://devildyw.github.io/2022/07/21/Paxos-wiki/</id>
    <published>2022-07-21T15:28:44.000Z</published>
    <updated>2022-07-22T04:16:03.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Paxos-wiki-转载"><a href="#Paxos-wiki-转载" class="headerlink" title="Paxos-wiki(转载)"></a>Paxos-wiki(转载)</h1><p>Paxos算法是莱斯利·兰伯特（英语：Leslie Lamport，LaTeX中的“La”）于1990年提出的一种基于消息传递且具有高度容错特性的一致性算法。本文是对维基百科上<a href="https://en.wikipedia.org/wiki/Paxos_(computer_science)">Paxos算法文献</a>的翻译。</p><h2 id="假设条件"><a href="#假设条件" class="headerlink" title="假设条件"></a>假设条件</h2><p>为了简化 Paxos 的介绍, 先明确以下假设和定义。</p><h3 id="Processors"><a href="#Processors" class="headerlink" title="Processors"></a>Processors</h3><ul><li>Processors 以任意速度运行。</li><li>Processors 可能会遇到故障。</li><li>具有稳定存储的 Processors 在失败后可以重新加入协议（遵循崩溃-恢复故障模型）。</li><li>不会发生拜占庭将军问题。</li></ul><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul><li>每个 Processor 可以将消息发送到其它任何 Processor。</li><li>消息是异步发送的，可能要花很长时间才能发出。</li><li>消息可能会丢失、乱序或重复。</li><li>消息在发送过程中没有损坏（即没发生拜占庭式故障）。</li></ul><h3 id="Processor的数量"><a href="#Processor的数量" class="headerlink" title="Processor的数量"></a>Processor的数量</h3><p>通常，使用 n&#x3D;2F+1 个 Processor 可以在 F 个 Processor 同时发生故障时依然保持共识算法的正常运行：换句话说，非故障的 Processor 数量必须大于故障的 Processor 数量。然而，采用重新配置，可以使用一个协议，允许不超过 F 的任意数量的同时故障。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>在 Paxos 中，Processor 的行为取决于它的角色：client、acceptor、proposer、learner 和 leader。在典型实现中，同一个 Processor 可以扮演多个角色，这不会影响协议的正确性——合并角色通常能改善延迟并减少消息数量。</p><ul><li>Client: 客户端向分布式系统发出请求，然后等待响应。例如，对分布式文件服务器中文件的写请求。</li><li>Acceptor (Voters): Acceptor 扮演一个协议中容错存储的角色，法定人数由多个 Acceptor 组成，任何一个消息都必须发送给法定人数。如果法定人数中的其他 Acceptor 没能收到消息副本，那么这条消息将被忽略。</li><li>Proposer: 向 Acceptors 提出 Client 的请求，并在冲突发生的时候，起到冲突调节的作用。</li><li>Learner: 在协议中充当备份的角色。一旦 Client 的请求被 Acceptors 同意了，Learner 将执行请求并将响应发送给 Client。为了提高可用性，可以添加多个 Learner。</li><li>Leader: Paxos 需要一个特殊的 Proposer （称为 Leader），Proposer 们认为自身就是 Leader，但是只有在这些 Proposer 中最终选出一个 Leader 时，协议才能正常运行。如果两个 Proposer 认为他们自身是 Leader，那么他们会通过不断提出彼此间冲突的更新，致使协议拖延。但是在这种情况下，安全性仍能得到保证。</li></ul><h3 id="法定人数"><a href="#法定人数" class="headerlink" title="法定人数"></a>法定人数</h3><p>法定人数通过确保那些存活的 processor 仍保留结果来保证 Paxos 的一致性。法定人数是 Acceptors 的子集，因此任意两个子集（即任意两组法定人数）至少有一个成员是共享的。通常，法定人数是 Acceptors 中的多数派，例如，给定一组 Acceptors {A，B，C，D}，法定人数可以是任意三个 Acceptors: {A，B，C}，{A，C，D}，{A，B，D} ，{B，C，D}。同样，可以将任意权重分配给 Acceptors，此时，法定人数可以定义为权重大于所有 Acceptors 总权重一半的任意子集。</p><h3 id="提案编号和内容"><a href="#提案编号和内容" class="headerlink" title="提案编号和内容"></a>提案编号和内容</h3><p>Acceptor 可能接受或者不接受收到的每一个带有 提案内容v 的提案。Proposer 提出的每个提案都有一个唯一编号。例如，每一个提案都可以 （n，v） 表示，其中 n 是提案的唯一编号，v 是提案内容。在运行 Paxos 协议时，某个提案编号对应的提案内容可以参与运算，但这是不必要的。</p><h2 id="Basic-Paxos"><a href="#Basic-Paxos" class="headerlink" title="Basic Paxos"></a>Basic Paxos</h2><p>Basic Paxos 是 Paxos 协议族中最基本的一种协议。Basic Paxos 的每一个实例（或 “操作”）都决定了一个输出值。这个协议会进行多轮。一个成功的轮次有两个阶段：阶段1（分为 a 和 b 两个部分）和阶段2（分为 a 和 b 两个部分）。参见下面对各阶段的描述。我们假设一个异步模型，一个 processor 可能在其中一个阶段而另一个 processor 可能在另一个阶段。</p><h3 id="阶段1"><a href="#阶段1" class="headerlink" title="阶段1"></a>阶段1</h3><h4 id="阶段1a：Prepare"><a href="#阶段1a：Prepare" class="headerlink" title="阶段1a：Prepare"></a>阶段1a：<em>Prepare</em></h4><p>一个 Proposer 创建了一条消息，我们把这条消息称 <em>Prepare</em> 消息，并确认一个数 n，注意，n 不是提案内容，而只是一个数字，它由 Proposer 唯一标识此初始消息（发送给 Acceptors）。而 n 必须比这个 Proposer 在之前创建的任何 <em>Prepare</em> 消息的编号都要大。接着，它发送这个带有 n 的 <em>Prepare</em> 消息给 <a href="https://github.com/BitNile/paxos-wiki#%E8%A7%92%E8%89%B2">Acceptors</a> 的 <a href="https://github.com/BitNile/paxos-wiki#%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0">法定人数</a>。注意，<em>Prepare</em> 消息只包含了数字 n （也就是说，它没有包含提案的内容，提案的内容通常用 v 来表示）。Proposer 决定哪些 Acceptor 在法定人数中。如果无法与 Acceptors 中的多数派进行通信，则 Paxos 就不会进行下去。</p><h4 id="阶段1b：Promise"><a href="#阶段1b：Promise" class="headerlink" title="阶段1b：Promise"></a>阶段1b：<em>Promise</em></h4><p>任何一个 Acceptor 都在等待接收来自任意一个 Proposer 的 <em>Prepare</em> 消息，Acceptor 必须查看刚刚收到的 <em>Prepare</em> 消息中的提案编号 n。这里有两种情况：</p><ul><li>如果 n 大于 Acceptor 在之前从任何一个 Proposer 接收到的提案编号，则 Acceptor 必须向 Proposer 返回一条消息，我们称这个消息为 <em>Promise</em> 消息，用来忽略将来所有编号小于 n 的提案。如果 Acceptor 在过去的某个时候接受过提案，那么它必须在对 Proposer 的回复中包含先前的提案编号 m 和相应的提案内容 w。</li><li>否则（指的是 n 不大于 Acceptor 在之前从任何一个 Proposer 接收到的提案编号），Acceptor 可以忽略这个提案。在这种情况下，Paxos 不会进行。但是，为了优化起见，它会发送一个拒绝响应（<a href="https://en.wikipedia.org/wiki/NAK_(protocol_message)">Nack</a>）告诉 Proposer 它将不会与 n 达成共识。</li></ul><h3 id="阶段2"><a href="#阶段2" class="headerlink" title="阶段2"></a>阶段2</h3><h4 id="阶段2a：Accept"><a href="#阶段2a：Accept" class="headerlink" title="阶段2a：Accept"></a>阶段2a：<em>Accept</em></h4><p>如果 Proposer 收到了来自法定人数的 Acceptor 的 <em>Promise</em>消息，它需要给这个提案设定一个值 v。 如果任何 Acceptor 以前接受过任何提案，那么它们会将提案内容发送给 Proposer，Proposer 现在必须将其提案的内容 v 设置为 Acceptor 报告的最高的提案编号关联的内容 z。 如果到目前为止没有任何一个 Acceptor 接受过提案，那么 Proposer 可以选择它最初想要的提案内容 x。</p><p>Proposer 发送一个带有提案内容 v 和提案编号 n 的 <em>Accept</em> 消息（n，v）给具有法定人数的 Acceptor（n 和之前发送给 Acceptor 的 <em>Prepare</em> 消息中的提案编号是相同的）。所以，这个 <em>Accept</em> 消息又可以表示为 （n，v&#x3D;z），在之前没有 Acceptor 接收值的情况下，（n，v&#x3D;x）。</p><p>这个 <em>Accept</em> 消息应该被翻译为 “请求”，表示为“请接受该提案！”。</p><h4 id="阶段2b：Accepted"><a href="#阶段2b：Accepted" class="headerlink" title="阶段2b：Accepted"></a>阶段2b：<em>Accepted</em></h4><p>如果一个 Acceptor 接收了一个来自 Proposer 的 <em>Accept</em> 消息（n，v），当且仅当它尚未对提案编号大于 n 的提案作出承诺时（在 Paxos 协议的 阶段1b 中），它才必须接受该提案。（<strong>也就是说在这个阶段中，如果在还未对上一个提案做出接受时，另一个proposer发起一个提案编号大于n的新提案（在接受编号为n的提案号之前），Acceptor就会去讨论新的提案，放弃提案编号小的提案。</strong>）</p><p>如果 Acceptor 尚未对提案编号大于 n 的提案做出承诺时（在 Paxos 协议的 阶段1b 中），则应将（刚收到的 <em>Accept</em> 消息）的提案内容 v 注册为（协议的）共识，并发送一个 <em>Accepted</em> 消息给 Proposer 和每个 Learner（通常是 Proposer 本身）<br>否则，它将忽略这个 <em>Accept</em> 消息或请求。</p><p>注意，一个 Acceptor 可以接收多个提案。所以可能会发生以下情况：当另一个 Proposer 不知道要确定的新的提案内容时，使用一个更高的提案编号 n 来开始一个新的轮次。在这种情况下，即使 Acceptor 在早先接收了另外一个提案编号，Acceptor 仍然会承诺并且稍后接收新的（提案编号更大的）提案。在某些故障情况下，这些提案甚至可能会有不同的内容。但是 Paxos 协议会保证 Acceptor 最终会在一个值中达成共识。</p><h3 id="轮次失败的情况"><a href="#轮次失败的情况" class="headerlink" title="轮次失败的情况"></a>轮次失败的情况</h3><p>当多个 Proposer 发送冲突的 <em>Prepare</em> 消息，或者 Proposer 未能接收到法定人数的承诺或接收回复，该轮次会失败。在这些情况下，会开始另一个带有更高的提案编号的轮次。</p><h3 id="Paxos-能应用在-Leader-选举中"><a href="#Paxos-能应用在-Leader-选举中" class="headerlink" title="Paxos 能应用在 Leader 选举中"></a>Paxos 能应用在 Leader 选举中</h3><p>请注意，当 Acceptor 接收了一个请求，他也会承认 Proposer 的领导。因此，Paxos 也能够用来选举一个节点集群的 Leader。</p><h3 id="Basic-Paxos-的图形表示"><a href="#Basic-Paxos-的图形表示" class="headerlink" title="Basic Paxos 的图形表示"></a>Basic Paxos 的图形表示</h3><p>下面的流程图表示 Basic Paxos 协议应用的几种情况。这几种情况会说明 Basic Paxos 协议如何应对分布式系统中的一些组件 question 的故障。</p><p>注意：在首次提出提案时， <em>Promise</em>消息中返回的值为 “null”（因为在这个轮次之前，没有 Acceptor 接受过任意值）</p><h4 id="Basic-Paxos-的成功情况"><a href="#Basic-Paxos-的成功情况" class="headerlink" title="Basic Paxos 的成功情况"></a>Basic Paxos 的成功情况</h4><p>在下图中，有一个 client，一个 Proposer， 三个 Acceptor（即法定人数为 3）和两个 Learner（由2条垂直线表示）。该图表示第一轮成功的情况（即网络中没有进程失败）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>在这里，V 指的是 Va、Vb、Vc 中提案编号最大的提案内容。</p><h4 id="Basic-Paxos-的错误情况"><a href="#Basic-Paxos-的错误情况" class="headerlink" title="Basic Paxos 的错误情况"></a>Basic Paxos 的错误情况</h4><p>Basic Paxos 最简单的错误场景是一个 Acceptor 崩溃（当法定人数的 Acceptor 仍然存活）和 冗余的 Learner 崩溃。在这些情况下，协议不要求恢复（它仍然是成功的）：不需要额外的轮次或者消息。如下所示：（在接下来两个图表案例中）</p><h4 id="Acceptor-崩溃的-Basic-Paxos"><a href="#Acceptor-崩溃的-Basic-Paxos" class="headerlink" title="Acceptor 崩溃的 Basic Paxos"></a>Acceptor 崩溃的 Basic Paxos</h4><p>在下图中，法定人数中的其中一个 Acceptor 崩溃，所以法定人数变成了 2，在这种情况下，Basic Paxos 仍然可以成功。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |          |  |  !       |  |  !! FAIL !!</span><br><span class="line">   |         |&lt;---------X--X          |  |  Promise(1,&#123;Va, Vb, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|          |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X---------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |          |  |</span><br></pre></td></tr></table></figure><h4 id="冗余-Learner-的崩溃-Basic-Paxos"><a href="#冗余-Learner-的崩溃-Basic-Paxos" class="headerlink" title="冗余 Learner 的崩溃 Basic Paxos"></a>冗余 Learner 的崩溃 Basic Paxos</h4><p>在这种情况下，冗余的 Learner 中的其中一个崩溃了，但是 Basic Paxos 协议仍然能成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client Proposer         Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(1,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(1,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(1,V)</span><br><span class="line">   |         |          |  |  |       |  !  !! FAIL !!</span><br><span class="line">   |&lt;---------------------------------X     Response</span><br><span class="line">   |         |          |  |  |       |</span><br></pre></td></tr></table></figure><h4 id="一个-Proposer-崩溃的-Basic-Paxos"><a href="#一个-Proposer-崩溃的-Basic-Paxos" class="headerlink" title="一个 Proposer 崩溃的 Basic Paxos"></a>一个 Proposer 崩溃的 Basic Paxos</h4><p>在这种情况下，一个 Proposer 发送一个带有内容的消息后，在达成共识之前崩溃了。特殊地，它在发送 <strong>Accept</strong> 消息的过程中崩溃，只有法定人数的一个 Acceptor 收到了提案。此时，有一个新的 Proposer Leader 被选举出来（图中没有说明选举细节）。注意，在这种情况下有两轮（轮次从上往下进行）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client  Proposer        Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;Va, Vb, Vc&#125;)</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   |      |             |  |  |       |  |  !! Leader fails during broadcast !!</span><br><span class="line">   |      X------------&gt;|  |  |       |  |  Accept!(1,V)</span><br><span class="line">   |      !             |  |  |       |  |</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER !!</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;V, null, null&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(2,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="多个-Proposer-冲突的-Basic-Paxos"><a href="#多个-Proposer-冲突的-Basic-Paxos" class="headerlink" title="多个 Proposer 冲突的 Basic Paxos"></a>多个 Proposer 冲突的 Basic Paxos</h4><p>如果有多个 Proposer 认为自身是 Leader 的时候，这种情况是最复杂的。举个例子，当前的 Leader 可能崩溃后恢复，但是此时其他的 Proposer 已经选举了新 Leader。而恢复后的 Leader 仍不知道选举了新 leader，而试图开启一个和当前的 Leader 冲突的轮次。在下图中，展示了 4 种未成功的轮次，但其实有可能一直失败下去。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Leader         Acceptor     Learner</span><br><span class="line">   |      |             |  |  |       |  |</span><br><span class="line">   X-----&gt;|             |  |  |       |  |  Request</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(1)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(1,&#123;null,null,null&#125;)</span><br><span class="line">   |      !             |  |  |       |  |  !! LEADER FAILS</span><br><span class="line">   |         |          |  |  |       |  |  !! NEW LEADER (knows last number was 1)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(2,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER recovers</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 2, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(2)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(2)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER tries 3</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Prepare(3)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Promise(3,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER proposes, denied</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(2,Va)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Nack(3)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! NEW LEADER tries 4</span><br><span class="line">   |      |  X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(4)</span><br><span class="line">   |      |  |&lt;---------X--X--X       |  |  Promise(4,&#123;null,null,null&#125;)</span><br><span class="line">   |      |  |          |  |  |       |  |  !! OLD LEADER proposes, denied</span><br><span class="line">   |      X------------&gt;|-&gt;|-&gt;|       |  |  Accept!(3,Vb)</span><br><span class="line">   |      |&lt;------------X--X--X       |  |  Nack(4)</span><br><span class="line">   |      |  |          |  |  |       |  |  ... and so on ...</span><br></pre></td></tr></table></figure><h2 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi-Paxos"></a>Multi-Paxos</h2><p>Paxos 的典型部署需要连续不断的提案内容的流来充当对分布式状态机的命令。如果每个命令是 Basic Paxos 协议的单个实例的结果，则将导致大量的开销。</p><p>如果 Leader 比较稳定，就没必要再进行阶段一了。因此，对于将来具有相同领导者的协议的实例，可以跳过阶段一。</p><p>为了实现这一点，将第一轮连同每个值一起包括在内，每个值在同一轮中由同一 Leader 递增。 Multi-Paxos 将无故障消息延迟从4个延迟减少到2个延迟。</p><h3 id="Multi-Paxos-中消息流的图形表示"><a href="#Multi-Paxos-中消息流的图形表示" class="headerlink" title="Multi-Paxos 中消息流的图形表示"></a>Multi-Paxos 中消息流的图形表示</h3><h4 id="正常情况下的-Multi-Paxos"><a href="#正常情况下的-Multi-Paxos" class="headerlink" title="正常情况下的 Multi-Paxos"></a>正常情况下的 Multi-Paxos</h4><p>在下图中，只显示了 Basic-Paxos 协议的一个实例，其中有一个初始领导者（一个提议者）。注意，Multi-Paxos 由 Basic-Paxos 协议的几个实例组成。question</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer      Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  | --- First Request ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Prepare(N)</span><br><span class="line">   |         |&lt;---------X--X--X       |  |  Promise(N,I,&#123;Va,Vb,Vc&#125;)</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I,V)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I,V)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><p>在这里，V 指的是 Va、Vb、Vc 中提案编号最大的提案内容。</p><h4 id="可忽略阶段一的-Multi-Paxos"><a href="#可忽略阶段一的-Multi-Paxos" class="headerlink" title="可忽略阶段一的 Multi-Paxos"></a>可忽略阶段一的 Multi-Paxos</h4><p>在这种情况下，Basic-Paxos 协议的子序列实例（由I+1表示）使用相同的领导者，所以包含了 Prepare 和 Promise 子阶段的阶段一将被忽略。注意，Leader 应当是稳定的，即不应崩溃或更换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client   Proposer       Acceptor     Learner</span><br><span class="line">   |         |          |  |  |       |  |  --- Following Requests ---</span><br><span class="line">   X--------&gt;|          |  |  |       |  |  Request</span><br><span class="line">   |         X---------&gt;|-&gt;|-&gt;|       |  |  Accept!(N,I+1,W)</span><br><span class="line">   |         |&lt;---------X--X--X------&gt;|-&gt;|  Accepted(N,I+1,W)</span><br><span class="line">   |&lt;---------------------------------X--X  Response</span><br><span class="line">   |         |          |  |  |       |  |</span><br></pre></td></tr></table></figure><h4 id="角色合并的-Multi-Paxos"><a href="#角色合并的-Multi-Paxos" class="headerlink" title="角色合并的 Multi-Paxos"></a>角色合并的 Multi-Paxos</h4><p>Multi-Paxos 的一个常见部署是将 Proposers、Acceptors 和 Learners 的角色合并为 Servers。所以，最后只有 Clients 和 Servers。下图代表 Basic-Paxos 协议的第一个“实例”，即当 Proposer、Acceptor 和 Learner 的角色合并为单个角色（称为 Server）时。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   |         |  |  | --- First Request ---</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Prepare(N)</span><br><span class="line">   |         |&lt;-X--X  Promise(N, I, &#123;Va, Vb&#125;)</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N, I, Vn)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N, I)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h4 id="当角色合并且-Leader-稳定时的-Multi-Paxos"><a href="#当角色合并且-Leader-稳定时的-Multi-Paxos" class="headerlink" title="当角色合并且 Leader 稳定时的 Multi-Paxos"></a>当角色合并且 Leader 稳定时的 Multi-Paxos</h4><p>如果 Leader 相同，则可以跳过阶段一。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client      Servers</span><br><span class="line">   X--------&gt;|  |  |  Request</span><br><span class="line">   |         X-&gt;|-&gt;|  Accept!(N,I+1,W)</span><br><span class="line">   |         X&lt;&gt;X&lt;&gt;X  Accepted(N,I+1)</span><br><span class="line">   |&lt;--------X  |  |  Response</span><br><span class="line">   |         |  |  |</span><br></pre></td></tr></table></figure><h2 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h2><h3 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h3><p>假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。</p><p>由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。</p><p>参考：<a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">拜占庭将军问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Paxos-wiki-转载&quot;&gt;&lt;a href=&quot;#Paxos-wiki-转载&quot; class=&quot;headerlink&quot; title=&quot;Paxos-wiki(转载)&quot;&gt;&lt;/a&gt;Paxos-wiki(转载)&lt;/h1&gt;&lt;p&gt;Paxos算法是莱斯利·兰伯特（英语：Lesli</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Paxos</title>
    <link href="https://devildyw.github.io/2022/07/21/Paxos/"/>
    <id>https://devildyw.github.io/2022/07/21/Paxos/</id>
    <published>2022-07-21T13:39:07.000Z</published>
    <updated>2022-07-21T15:29:38.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Paxos算法详解"><a href="#Paxos算法详解" class="headerlink" title="Paxos算法详解"></a><code>Paxos</code>算法详解</h1><h2 id="前言–拜占庭将军问题"><a href="#前言–拜占庭将军问题" class="headerlink" title="前言–拜占庭将军问题"></a>前言–拜占庭将军问题</h2><p>在介绍共识算法之前，先介绍一个简化版拜占庭将军的例子来帮助理解共识算法。</p><blockquote><p>假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？</p></blockquote><p>解决方案大致可以理解成：先在所有的将军中选出一个大将军，用来做出所有的决定。</p><p>举例如下：假如现在一共有 3 个将军 A，B 和 C，每个将军都有一个随机时间的倒计时器，倒计时一结束，这个将军就把自己当成大将军候选人，然后派信使传递选举投票的信息给将军 B 和 C，如果将军 B 和 C 还没有把自己当作候选人（自己的倒计时还没有结束），并且没有把选举票投给其他人，它们就会把票投给将军 A，信使回到将军 A 时，将军 A 知道自己收到了足够的票数，成为大将军。在有了大将军之后，是否需要进攻就由大将军 A 决定，然后再去派信使通知另外两个将军，自己已经成为了大将军。如果一段时间还没收到将军 B 和 C 的回复（信使可能会被暗杀），那就再重派一个信使，直到收到回复。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/v2-24f50b80ff971e7a8ac6798b7fa5f726_720w.jpg" alt="img"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Paxos</code>是什么? <code>Paxos</code>算法是基于<strong>消息传递</strong>且具有<strong>高度容错特性</strong>的<strong>一致性算法</strong>，是目前公认的解决<strong>分布式一致性</strong>问题<strong>最有效</strong>的算法之一。    </p><p><code>Paxos</code>算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法,它使其获得了2013年图灵奖.</p><p>自<code>Paxos</code>问世以来就持续垄断了分布式一致性算法，<code>Paxos</code>这个名词几乎等同于分布式一致性。（Google Chubby的作者Mike Burrows说过这个世界上<strong>只有一种</strong>一致性算法，那就是<code>Paxos</code>，其它的算法都是<strong>残次品</strong>。）Google的很多大型分布式系统都采用了<code>Paxos</code>算法来解决分布式一致性问题，如Chubby、<code>Megastore</code>以及Spanner等。开源的<code>ZooKeeper</code>，以及<code>MySQL</code>5.7推出的用来取代传统的主从复制的<code>MySQL</code> Group Replication等纷纷采用<code>Paxos</code>算法解决分布式一致性问题。</p><p>然而，<code>Paxos</code>的最大特点<strong>就是难，不仅难以理解，更难以实现。</strong></p><h2 id="Paxos解决的问题"><a href="#Paxos解决的问题" class="headerlink" title="Paxos解决的问题"></a><code>Paxos</code>解决的问题</h2><p>在常见的分布式系统中，总会发生诸如<strong>机器宕机</strong>或<strong>网络异常</strong>（包括消息的延迟、丢失、重复、乱序，还有网络分区）等情况。<code>Paxos</code>算需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对<strong>某个数据的值</strong>达成<strong>一致</strong>，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p><p> <strong>注意：</strong>这里指的<strong>某个数据的值</strong>并不一定只是狭义上的某个数，它可以使日志，也可以是一条命令（command）… 根据应用场景的不同，<strong>某个数据的值</strong>有着不同得含义。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1752522-d2136179b456e13e.png" alt="问题产生的背景"></p><h2 id="Paxos介绍"><a href="#Paxos介绍" class="headerlink" title="Paxos介绍"></a><code>Paxos</code>介绍</h2><h3 id="Paxos的三种角色"><a href="#Paxos的三种角色" class="headerlink" title="Paxos的三种角色"></a><code>Paxos</code>的三种角色</h3><ul><li><strong>Proposer: 提议者</strong></li><li><strong>Acceptor: 决策者</strong></li><li><strong>Learners: 最终决策学习者</strong></li></ul><p>​    在具体的实现中，一个进程可能同时充当多种角色。比如一个进程可能及时<strong>Proposer又是Acceptor又是Learner。</strong></p><p>​    既然有提议者，那么一定有提议，这里还有个有很重的概念叫做<strong>提案（Proposal）</strong>。最终要达成一致的value就在提案里面。</p><p>Proposer可以提出（propose）提案；Acceptor可以接受（accept）提案；如果某个提案被选定（chosen），那么该提案里的value就被选定了。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721192011652.png" alt="image-20220721192011652"></p><ul><li>一个完整的<code>Paxos</code>算法流程分为三个阶段</li><li><code>Prepare</code>准备阶段<ul><li><code>Proposer</code>向多个<code>Acceptor</code>发出<code>Propose</code>请求<code>Promise</code>(承诺)</li><li><code>Acceptor</code>针对收到的<code>Propose</code>请求进行<code>Promise</code>(承诺)</li></ul></li><li><code>Accept</code>接收阶段<ul><li><code>Proposer</code>收到多数<code>Acceptor</code>承诺后,向<code>Acceptor</code>发出<code>Propose</code>请求</li><li><code>Acceptor</code>针对收到的<code>Propose</code>请求进行<code>Accept</code>处理</li></ul></li><li><code>Learn</code>学习阶段<ul><li><code>Proposer</code>将形成的决议发送给所有<code>Learners</code></li></ul></li></ul><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721192655799.png" alt="image-20220721192655799"></p><ol><li><code>Prepare</code>：<code>Proposer</code>生成全局唯一且递增的<code>Proposal ID</code>,向所有<code>Acceptor</code>发送<code>Propose</code>请求,这里无序携带提案内容,只携带<code>Proposal ID</code>即可</li><li><code>Promise</code>：<code>Accept</code>收到<code>Propose</code>请求后，做出”两个承诺，一个答应”。<ul><li>不在接收<code>Proposal ID</code>小于等于（注意：这里时&lt;&#x3D;）当前请求的<code>Propose</code>请求。</li><li>不在接收<code>Proposal ID</code>小于（注意：这里是&lt;）当前请求的<code>Accept</code>请求。</li><li>不违背以前做出的承诺下，回复已经Accept过的提案中<code>Proposal ID</code>最大的那个提案的<code>Value</code>和<code>Proposal ID</code>，没有则返回空值。</li></ul></li><li><code>Propose</code>：<code>Proposer</code>收到多数Acceptor的Promise答应后，从答应中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptor发送Propose请求。</li><li><code>Accept</code>：<code>Acceptor</code>收到Propose请求后，在不违背自己之前做出的承诺下（prepare阶段投了一票那么accpt阶段也会投），接受并持久化当前Proposal ID和提案Value。</li><li><code>Learn</code>：<code>Proposer</code>收到多数Acceptor的Accept后，决议形成，将形成的决议发送给所有Learner</li></ol><p><strong>下面我们针对上述描述做三种情况的推演举例：为了简化流程，我们这里不设置Learner。</strong></p><ol><li><p>有A1,A2,A3,A4,A5 5为议员，就税率问题进行决议。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721194726379.png" alt="image-20220721194726379"></p><ul><li>A1发起1号Proposal的Propose，等待Promise承诺；</li><li>A2-A5回应Promise；</li><li>A1在收到两份回复时，就会发起税率10%的Proposal；</li><li>A2-A5回应Accept；</li><li>通过Proposal，税率10%</li></ul></li><li><p>现在我们假设在A1提出提案的同时, A5决定将税率定为20%</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721195054681.png" alt="image-20220721195054681"></p><ul><li>A1，A5同时发起Propose（序号分别为1，2） </li><li>A2承诺A1，A4承诺A5，A3行为成为关键</li><li>情况1：A3先收到A1消息，承诺A1。 </li><li>A1发起Proposal（1，10%），A2，A3接受。</li><li>之后A3又收到A5消息，回复A1：（1，10%），并承诺A5。</li><li>A5发起Proposal（2，20%），A3，A4接受。之后A1，A5同时广播决议。</li></ul></li></ol><p><strong>Paxos 算法缺陷：在网络复杂的情况下，一个应用 Paxos 算法的分布式系统，可能很久无法收敛，甚至陷入活锁的情况。</strong></p><ol start="3"><li><p>现在我们假设在A1提出提案的同时, A5决定将税率定为20%</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721195627426.png" alt="image-20220721195627426"></p><ul><li>A1，A5同时发起Propose（序号分别为1，2） </li><li>A2承诺A1，A4承诺A5，A3行为成为关键</li><li>情况2：A3先收到A1消息，承诺A1。之后立刻收到A5消息，承诺A5。</li><li>A1发起Proposal（1，10%），无足够响应，A1重新Propose （序号3），A3再次承诺A1。 </li><li>A5发起Proposal（2，20%），无足够相应。A5重新Propose （序号4），A3再次承诺A5。 </li><li>……</li></ul></li></ol><p>​    造成这种情况的原因是系统中有一个以上的 <code>Proposer</code>，多个 <code>Proposers</code> 相互争夺 <code>Acceptor</code>，</p><p>造成迟迟无法达成一致的情况。针对这种情况，一种改进的 <code>Paxos</code>算法被提出：从系统中选</p><p>出一个节点作为 <code>Leader</code>，只有 <code>Leader</code>能够发起提案。这样，一次 <code>Paxos</code> 流程中只有一个</p><p><code>Proposer</code>，不会出现活锁的情况，此时只会出现例子中第一种情况。</p><blockquote><p>详细文档：</p><p><a href="https://github.com/BitNile/paxos-wiki">paxos-wiki</a></p><p><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/paxos-algorithm.html#cap%E7%90%86%E8%AE%BA">JavaGuide</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Paxos算法详解&quot;&gt;&lt;a href=&quot;#Paxos算法详解&quot; class=&quot;headerlink&quot; title=&quot;Paxos算法详解&quot;&gt;&lt;/a&gt;&lt;code&gt;Paxos&lt;/code&gt;算法详解&lt;/h1&gt;&lt;h2 id=&quot;前言–拜占庭将军问题&quot;&gt;&lt;a href=&quot;#前言</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper源码学习</title>
    <link href="https://devildyw.github.io/2022/07/21/Zookeeper%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://devildyw.github.io/2022/07/21/Zookeeper%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-21T07:56:27.000Z</published>
    <updated>2022-07-22T05:58:28.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper源码学习"><a href="#Zookeeper源码学习" class="headerlink" title="Zookeeper源码学习"></a>Zookeeper源码学习</h1><p>暂时不更新。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper源码学习&quot;&gt;&lt;a href=&quot;#Zookeeper源码学习&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper源码学习&quot;&gt;&lt;/a&gt;Zookeeper源码学习&lt;/h1&gt;&lt;p&gt;暂时不更新。。。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Zookeeper</title>
    <link href="https://devildyw.github.io/2022/07/14/Spring%20Cloud-Zookeeper/"/>
    <id>https://devildyw.github.io/2022/07/14/Spring%20Cloud-Zookeeper/</id>
    <published>2022-07-14T09:41:33.000Z</published>
    <updated>2022-07-23T11:50:00.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud-Zookeeper"></a>Spring Cloud-Zookeeper</h1><p><strong><code>Spring Cloud</code>整合<code>Zookeeper</code>代替<code>Eureka</code></strong></p><blockquote><p>学习之前请先安装<code>Zookeeper</code>且开放端口 可参考:<a href="https://devildyw.github.io/2022/07/14/Zookeeper/"><code>zookeeper</code></a></p></blockquote><h2 id="一-创建父工程"><a href="#一-创建父工程" class="headerlink" title="一. 创建父工程"></a>一. 创建父工程</h2><ol><li><p>新建<code>module</code> <code>Cloud-03-Zookeeper</code></p></li><li><p>删除<code>src</code>文件目录</p></li><li><p>添加<code>pom.xml</code>配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-zookeeper-payment8004<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二-服务提供者"><a href="#二-服务提供者" class="headerlink" title="二. 服务提供者"></a>二. 服务提供者</h2><ol><li><p>创建工程</p></li><li><p>添加<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有个坑,一般<code>spring-cloud-starter-zookeeper-discovery</code>包都会自带<code>zookeepr</code>包的依赖,此时如果我们的云服务器中安装的<code>zookeeper</code>版本高于<code>spring-cloud-starter-zookeeper-discovery</code>自带的<code>zookeeper</code>版本,容易发生报错。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174411363.png" alt="image-20220723174411363"></p><p>这里我们也能看出报错的<code>zookeeper</code>版本是3.6.0，而我们服务器中的版本是3.7.0，这里的报错是初始化连接<code>zookeeper</code>错误。</p><p><strong>解决方案在<code>spring-cloud-starter-zookeeper-discovery</code>依赖中排除自带的<code>zookeeper</code>，手动添加与服务器中<code>zookeepr</code>版本相对应的版本。</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-zookeeper-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>文件配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:2181</span> <span class="comment">#在Zookeeper的学习中我们知道connectString是连接Zookeeper客户端的必要参数 它即zookeeper的ip:port地址</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><p><code>PaymentMain8004</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8004</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>控制器类<code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeepr: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动查看是否服务注册进入了<code>Zookeeper</code></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /</span><br><span class="line">[locks, servers, services, zookeeper]</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /services</span><br><span class="line">[cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>可用发现在<code>zookeeper</code>的根节点下出现了一个新的节点<code>services</code>并且在<code>/services</code>下出现了我们注册的服务的名字。说明我们注册成功。</p></li><li><p>测试调用服务</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174736745.png" alt="image-20220723174736745"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723174721165.png" alt="image-20220723174721165"></p><p>测试成功</p></li><li><p>获取zookeeper节点信息</p><p>我们的服务注册到了cloud-provider-payment下面但是一个服务下面可以有多个实例，我们注册到该服务名称的节点下会有一个长的序列编码对应我们的一个实例。</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls -s  /services/cloud-provider-payment </span><br><span class="line">[ece4ce6c-a457-4874-8b3c-09f465e57939]</span><br></pre></td></tr></table></figure><p>可以发现在<code>cloud-provider-payment</code>有一个长串的序列编码(<strong>这个就是我们刚刚注册的服务实例</strong>)</p><p>通过<code>zookeeper</code>客户端命令<code>get 路径</code>获得节点信息。</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] get  /services/cloud-provider-payment/ece4ce6c-a457-4874-8b3c-09f465e57939 </span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;ece4ce6c-a457-4874-8b3c-09f465e57939&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;192.168.101.9&quot;</span><span class="punctuation">,</span><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span><span class="number">8004</span><span class="punctuation">,</span><span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span><span class="string">&quot;UP&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span><span class="number">1658569595889</span><span class="punctuation">,</span><span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span><span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span><span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;://&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;:&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;port&quot;</span><span class="punctuation">,</span><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现信息是一个<code>Json</code>串。</p><p>通过<code>Json</code>解析工具解析得到</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ece4ce6c-a457-4874-8b3c-09f465e57939&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.101.9&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8004</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span> <span class="number">1658569595889</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;://&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;port&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就可以得到该服务实例的信息(<code>ip</code>、端口、状态等信息)。</p></li></ol><h3 id="注册到zookeeper中的服务是什么类型的节点"><a href="#注册到zookeeper中的服务是什么类型的节点" class="headerlink" title="注册到zookeeper中的服务是什么类型的节点"></a>注册到<code>zookeeper</code>中的服务是什么类型的节点</h3><ol><li><p>将我们注册的服务停掉过一小段时间后查看zookeeper中节点的情况</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] ls /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145 </span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">关掉服务后</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] ls /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145 </span><br><span class="line">Node does not exist: /services/cloud-provider-payment/0535acc7-1da1-4dc7-bef2-d4a70538d145</span><br></pre></td></tr></table></figure></li><li><p>所以注册到<code>zookeeper</code>中的服务实例是采用<strong>临时节点</strong>保存信息。</p></li></ol><h2 id="三-服务消费者"><a href="#三-服务消费者" class="headerlink" title="三. 服务消费者"></a>三. 服务消费者</h2><ol><li><p>创建工程</p></li><li><p><code>pom.xml</code>中添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-03-Zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-zookeeper-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--排除zookeeper-discovery自带的zookeeper 手动导入与服务器中zookeeper版本对应的zookeeper包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        导入与服务器zookeeper版本对应的zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--入门项目中用到的公用类包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code>文件配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置类，将<code>RestTemlate</code>类配置加入到Spring容器中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类<code>OrderZKController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderZKController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动生产者和消费者</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] ls /services</span><br><span class="line">[cloud-consumer-order, cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>可以看到生产者和消费者都被注册到了<code>zookeeper</code>中。</p><p>访问消费者<code>http://localhost:80/consumer/payment/zk</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220723193407609.png" alt="image-20220723193407609"></p><p>访问成功</p></li></ol><h2 id="生产者集群"><a href="#生产者集群" class="headerlink" title="生产者集群"></a>生产者集群</h2><p>与Eureka类似，只需要多个提供相同的服务的生产者注册到同一个服务名称下即可，如果要使用消费者的<code>RestTemplate</code>访问记得加上<code>@LoadBalanced</code>注解即可（负载均衡 如果不加会报错）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Zookeeper&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Zookeeper&quot;&gt;&lt;/a&gt;Spring Cloud-Zookeep</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://devildyw.github.io/2022/07/14/Zookeeper/"/>
    <id>https://devildyw.github.io/2022/07/14/Zookeeper/</id>
    <published>2022-07-14T06:59:01.000Z</published>
    <updated>2022-07-21T07:57:33.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    <code>ZooKeeper</code> 一个中心化的服务, 用于维护配置信息, 命名服务(<code>naming</code>), 提供分布式同步和集群服务(<code>group services</code>)。</p><p>​    <code>Zookeeper</code>是一个开源的分布式应用程序协调服务，是雅虎公司对于Google的<code>Chubby</code>的一个开源实现，现已加入Apache开源，其最主要的核心协议ZAB（<code>Zookeeper</code>原子广播协议）是著名的<code>Paxos</code>算法的衍生<code>Mult Paxos</code>的工业实现。</p><p>​    <code>Zookeeper</code>是 <code>Hadoop</code> 和 <code>Hbase</code> 的重要组件。 <code>ZooKeeper</code> 的目标是封装好复杂易出错的关键服务, 暴露简单易用、高效、稳定的接口给用户, 提供 <code>java</code> 和 <code>C</code> 接口。</p><p>​    在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目),雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家<code>RaghuRamakrishnan</code>开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了，而<code>Zookeeper</code>正好要用来进行分布式环境的协调一一于是，<code>Zookeeper</code>的名字也就由此诞生了。 </p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>​    <code>Zookeeper</code>从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，<code>Zookeeper</code>就将负责通知已经在<code>Zookeeper</code>上注册的那些观察者做出相应的反应。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714185103332.png" alt="image-20220714185103332"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714185224752.png" alt="image-20220714185224752"></p><ol><li><code>Zookeeper</code>: 一个领导者（Leader），多个跟随者（Follower）组成的集群。</li><li>集群中只要有<strong>半数以上</strong>节点存活，<code>Zokeeper</code>集群就能正常服务。所以<code>Zookeeper</code>适合安装奇数台服务器。<ol><li>可见，与<code>Eureka</code>相比<code>Zookeeper</code>更倾向于满足集群节点之间的一致性即CAP中 <code>Zookeeper</code>更倾向于<code>CP</code>分支</li><li>为什么<code>Zookeeper</code>适合安装奇数台服务器？<ol><li><strong>防止由脑裂造成的集群不可用。</strong>当集群节点发生脑裂分成了多个集群如果是奇数个节点的情况下，多个集群中总是会有一个小集群满足可用节点 &gt; 总节点&#x2F;2，也就是说这个小集群可以在脑裂的情况下重新选举leader，仍然能够对外提供服务；但是如果是偶数个节点的情况下，可能会出现分配十分均匀的小集群，比如说分成了两个集群，两个集群中的节点都是原来节点的一半，此时可用节点只能&#x3D;&#x3D;总结点&#x2F;2，不能对外提供服务，虽然这种情况是偶然情况，但是还是建议使用奇数个节点提高可用性。</li><li><strong>在容错能力相同的情况下，奇数台更节省资源。</strong>当容错能力相同的情况下，5台节点组成的集群对外正常提供服务至少需要大于5&#x2F;2 &#x3D; 2.5台 &#x3D; 3台机器正常（反过来说就是挂三台就宕机了），而6台节点组成的集群对外正常提供服务至少需要大于6&#x2F;3 &#x3D; 3台机器正常（同样也是挂三台就宕机）。可知5台与6台对于容忍度并没有提升，所以推荐奇数个。</li></ol></li></ol></li><li>全局数据一致；每个Server保存同一份相同的数据副本，Client无论连接到那个Server，数据都是一致的。</li><li>更新请求顺序执行，来自同一个Client的更新请求按其发送顺序依次执行。</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，Client能读到最新数据<ol><li>这个时间很短，因为Server保存的数据其实很小，更新&#x2F;同步起来很快。</li></ol></li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>​    <code>Zookeeper</code>数据模型的结构与Unix文件系统很类似，整体上可用看作是一棵树，每个节点称作一个<code>ZNode</code>。每一个<code>ZNode</code>默认能够存储<code>1MB</code>的数据，每个<code>ZNode</code>都可以通过其路径唯一标识（通过一个路径能够找到唯一的一个<code>ZNode</code>）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714192417943.png" alt="image-20220714192417943"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>​    提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><h3 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h3><p>​    在分布式环境下，经常需要对应用&#x2F;服务进行统一命名，便于识别（便于负载均衡）</p><p>​    例如：<code>IP</code>不好记住，而域名容易记住。</p><p>​    类似的功能<code>Nginx</code>的负载均衡，以及其他框架如<code>Eureka</code>也有</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714192903303.png" alt="image-20220714192903303"></p><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><ol><li>分布式环境下，配置文件同步非常常见。<ol><li>一般要求一个集群中，所有节点的配置信息是一致的，比如Kafka集群。</li><li>对配置文件修改后，希望能够快速同步到各个节点上。</li></ol></li><li>配置管理可交由<code>Zookeeper</code>实现<ol><li>可将配置信息写入<code>Zookeeper</code>上的一个<code>ZNode</code>。</li><li>各个客户端服务器监听这个<code>ZNode</code>。</li><li>一旦<code>Znode</code>中的数据被修改，<code>Zookeeper</code>将通知各个客户端服务器。</li></ol></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193439722.png"></p><h3 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h3><ol><li>分布式环境中，实时掌握每个节点的状态是必要的。<ol><li>可用根据节点实时状态做出一些调整</li></ol></li><li><code>Zookeeper</code>可用实时监控节点状态变化<ol><li>可将节点信息写入<code>Zookeeper</code>上的<code>ZNode</code>。</li><li>监听这个<code>ZNode</code>可获取它的实时状态变化。</li></ol></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193710640.png" alt="image-20220714193710640"></p><h3 id="服务器动态上下线"><a href="#服务器动态上下线" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h3><p>​    客户端能实时洞察到服务器的上下线的变化。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193816296.png" alt="image-20220714193816296"></p><h3 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h3><p>在<code>Zookeeper</code>中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714193918850.png" alt="image-20220714193918850"></p><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网首页：<a href="https://zookeeper.apache.org/"><code>Apache ZooKeeper</code></a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714194148375.png" alt="image-20220714194148375"></p><p>点击<code>Download</code>选择你要下载的版本</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714194308833.png" alt="image-20220714194308833"></p><p>版本自行选择</p><p>这里我们用云服务器Docker来部署</p><p><a href="https://devildyw.github.io/2022/05/15/Docker/">Docker</a>中有docker详细的安装教程。</p><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><h4 id="配置Zookeeper安装目录"><a href="#配置Zookeeper安装目录" class="headerlink" title="配置Zookeeper安装目录"></a>配置<code>Zookeeper</code>安装目录</h4><ol><li><p>在宿主机中配置<code>Zookeeper</code>安装目录：<code>/home/docker/zookeeper</code>并且在文件夹中创建data和logs目录</p><p><code>mkdir -p /home/docker/zookeeper/data</code></p><p><code>mkdir -p /home/docker/zookeeper/logs</code></p></li><li><p>授权文件目录：<code>chmod -R 777 /home/docker/zookeeper/</code></p></li></ol><h4 id="安装和部署Zookeeper"><a href="#安装和部署Zookeeper" class="headerlink" title="安装和部署Zookeeper"></a>安装和部署<code>Zookeeper</code></h4><ul><li><p>拉去<code>Zookeeper</code>镜像: <code>docker pull zookeeper</code>默认拉取最新版</p></li><li><p>启动一个临时的<code>Zookeeper</code>容器 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2181:2181 --restart always --name=zookeeper --privileged=<span class="literal">true</span> zookeeper:latest</span><br></pre></td></tr></table></figure></li><li><p>进入到刚刚创建的临时容器中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>(通过docker ps查到) /bin/bash\</span><br></pre></td></tr></table></figure></li><li><p>去到根目录<code>/</code>，发现根目录中有一个<code>conf</code>目录，进入后发现里面有我们需要的<code>zoo.cfg</code>文件</p></li><li><p>退出容器</p></li><li><p>将容器中的<code>Zookeeper</code>配置文件复制到宿主机的对应位置 <code>/home/docker/zookeeper</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> zookeeperTemp容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper/</span><br></pre></td></tr></table></figure><blockquote><p>将容器中有<code>zoo.cfg</code>文件的<code>conf</code>直接拷贝到容器外我们一开始建立的<code>zookeeper</code>目录下，此时<code>/docker/develop/zookeeper/</code>目录中应该有三个目录：<code>conf</code>，<code>data</code>和<code>logs</code></p></blockquote></li><li><p>这个时候正式地建立我们的<code>zookeeper</code>容器，命名为<code>zookeeper</code>，别忘了先停掉刚刚创建的容器<code>zookeeper</code>然后删掉容器。将我们宿主机中配置的文件目录挂在到容器对应的目录上。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2181:2181 --restart always --name=zookeeper  --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/docker/zookeeper/conf:/conf \</span><br><span class="line">-v /home/docker/zookeeper/data:/data \</span><br><span class="line">-v /home/docker/zookeeper/logs:/datalog \</span><br><span class="line">-e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;JAVA_OPTS=-server -Xms512m -Xmx512m -Xmn256m -Duser.home=/opt -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:+AlwaysPreTouch -XX:-UseBiasedLocking&quot;</span> \</span><br><span class="line">zookeeper:latest</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-a <code>stdin</code>:</strong> 指定标准输入输出内容类型，可选 <code>STDIN/STDOUT/STDERR</code> 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong><code>-t:</code></strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong><code>--name=&quot;nginx-lb&quot;:</code></strong> 为容器指定一个名称；</li><li><strong><code>--dns 8.8.8.8:</code></strong> 指定容器使用的<code>DNS</code>服务器，默认和宿主一致；</li><li><strong><code>--dns-search example.com:</code></strong> 指定容器<code>DNS</code>搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li>**-m :**设置容器使用内存最大值；</li><li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li><li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷</li></ul></blockquote></li></ul><h4 id="启动客户端连接Zookeeper"><a href="#启动客户端连接Zookeeper" class="headerlink" title="启动客户端连接Zookeeper"></a>启动客户端连接Zookeeper</h4><ul><li><p>进入容器中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span>(通过docker ps查到) /bin/bash\</span><br></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkCli.sh</span><br></pre></td></tr></table></figure></li><li><p>如果出现以下信息表示<code>Zookeeper</code>部署启动成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@fb3e9f10fb70:/apache-zookeeper-3.7.0-bin<span class="comment"># bin/zkCli.sh</span></span><br><span class="line">Connecting to localhost:2181</span><br><span class="line">2022-07-16 12:53:57,208 [myid:] - INFO  [main:Environment@98] - Client environment:zookeeper.version=3.7.0-e3704b390a6697bfdf4b0bef79e3da7a4f6bac4b, built on 2021-03-17 09:46 UTC</span><br><span class="line">2022-07-16 12:53:57,228 [myid:] - INFO  [main:Environment@98] - Client environment:host.name=fb3e9f10fb70</span><br><span class="line">2022-07-16 12:53:57,228 [myid:] - INFO  [main:Environment@98] - Client environment:java.version=11.0.13</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.home=/usr/local/openjdk-11</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.class.path=/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/target/classes:/apache-zookeeper-3.7.0-bin/bin/../build/classes:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/target/lib/*.jar:/apache-zookeeper-3.7.0-bin/bin/../build/lib/*.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-prometheus-metrics-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-jute-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/zookeeper-3.7.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/snappy-java-1.1.7.7.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/slf4j-log4j12-1.7.30.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/slf4j-api-1.7.30.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_servlet-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_hotspot-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient_common-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/simpleclient-0.9.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-native-unix-common-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-native-epoll-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-transport-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-resolver-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-handler-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-common-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-codec-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/netty-buffer-4.1.59.Final.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/metrics-core-4.1.12.1.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/log4j-1.2.17.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jline-2.14.6.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-util-ajax-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-util-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-servlet-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-server-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-security-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-io-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jetty-http-9.4.38.v20210224.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/javax.servlet-api-3.1.0.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-databind-2.10.5.1.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-core-2.10.5.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/jackson-annotations-2.10.5.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/commons-cli-1.4.jar:/apache-zookeeper-3.7.0-bin/bin/../lib/audience-annotations-0.12.0.jar:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-*.jar:/apache-zookeeper-3.7.0-bin/bin/../zookeeper-server/src/main/resources/lib/*.jar:/conf:</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.io.tmpdir=/tmp</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:os.name=Linux</span><br><span class="line">2022-07-16 12:53:57,230 [myid:] - INFO  [main:Environment@98] - Client environment:os.arch=amd64</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:os.version=3.10.0-1160.25.1.el7.x86_64</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.name=root</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.home=/root</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:user.dir=/apache-zookeeper-3.7.0-bin</span><br><span class="line">2022-07-16 12:53:57,231 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.free=56MB</span><br><span class="line">2022-07-16 12:53:57,232 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.max=256MB</span><br><span class="line">2022-07-16 12:53:57,233 [myid:] - INFO  [main:Environment@98] - Client environment:os.memory.total=64MB</span><br><span class="line">2022-07-16 12:53:57,236 [myid:] - INFO  [main:ZooKeeper@637] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain<span class="variable">$MyWatcher</span>@7946e1f4</span><br><span class="line">2022-07-16 12:53:57,240 [myid:] - INFO  [main:X509Util@77] - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=<span class="literal">true</span> to <span class="built_in">disable</span> client-initiated TLS renegotiation</span><br><span class="line">2022-07-16 12:53:57,250 [myid:] - INFO  [main:ClientCnxnSocket@239] - jute.maxbuffer value is 1048575 Bytes</span><br><span class="line">2022-07-16 12:53:57,259 [myid:] - INFO  [main:ClientCnxn@1726] - zookeeper.request.timeout value is 0. feature enabled=<span class="literal">false</span></span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">2022-07-16 12:53:57,303 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1171] - Opening socket connection to server localhost/127.0.0.1:2181.</span><br><span class="line">2022-07-16 12:53:57,303 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1173] - SASL config status: Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">2022-07-16 12:53:57,317 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1005] - Socket connection established, initiating session, client: /127.0.0.1:51034, server: localhost/127.0.0.1:2181</span><br><span class="line">2022-07-16 12:53:57,334 [myid:localhost:2181] - INFO  [main-SendThread(localhost:2181):ClientCnxn<span class="variable">$SendThread</span>@1438] - Session establishment complete on server localhost/127.0.0.1:2181, session <span class="built_in">id</span> = 0x100010b79380003, negotiated <span class="built_in">timeout</span> = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] </span><br></pre></td></tr></table></figure></li></ul><h3 id="Zookeeper配置"><a href="#Zookeeper配置" class="headerlink" title="Zookeeper配置"></a>Zookeeper配置</h3><p>下面是<code>Zookeeper</code>默认配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dataDir=/data</span>  <span class="comment">#默认的temp(临时)目录，容易被linux系统定期删除，所以一般不用默认的temp目录。</span></span><br><span class="line"><span class="string">dataLogDir=/datalog</span></span><br><span class="line"><span class="string">tickTime=2000</span> <span class="comment">#通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒</span></span><br><span class="line"><span class="string">initLimit=5</span> <span class="comment">#LF初始通信时限(Leader和follower初始连接时能忍受的最多心跳数即tickTime的数量)</span></span><br><span class="line"><span class="string">syncLimit=2</span> <span class="comment">#LF(Leader和follower)同步时限(LF的通信时间如果超过syncLimit*tickTime,Leader认为Follower死掉，从服务器列表中删除Follower)</span></span><br><span class="line"><span class="string">autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="string">autopurge.purgeInterval=0</span></span><br><span class="line"><span class="string">maxClientCnxns=60</span></span><br><span class="line"><span class="string">standaloneEnabled=true</span></span><br><span class="line"><span class="string">admin.enableServer=true</span></span><br><span class="line"><span class="string">server.1=localhost:2888:3888;2181</span> <span class="comment">#2181客户端端口号</span></span><br></pre></td></tr></table></figure><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><h4 id="搭建前准备"><a href="#搭建前准备" class="headerlink" title="搭建前准备"></a>搭建前准备</h4><p>这里我们搭建三台<code>Zookeeper</code>组成集群</p><p>先像单机版搭建额外两台</p><ol><li><p>配置<code>Zookeeper</code>安装目录</p></li><li><p>启动<code>Zookeeper02</code>、<code>Zookeeper03</code>两个容器(注意端口映射不要重复)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Zookeeper02容器</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> -d --name zookeeper02 --publish 2182:2181 -d zookeeper:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Zookeeper03容器</span></span><br><span class="line">docker run --privileged=<span class="literal">true</span> -d --name zookeeper03 --publish 2183:2181 -d zookeeper:latest</span><br></pre></td></tr></table></figure></li><li><p>将容器中的对应的需要集群配置的文件复制出来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> zookeeper02容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper02/</span><br><span class="line">docker <span class="built_in">cp</span> zookeeper02容器的<span class="built_in">id</span>:/data /home/docker/zookeeper02/</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> zookeeper03容器的<span class="built_in">id</span>:/conf /home/docker/zookeeper03/</span><br><span class="line">docker <span class="built_in">cp</span> zookeeper03容器的<span class="built_in">id</span>:/data /home/docker/zookeeper03/</span><br></pre></td></tr></table></figure></li></ol><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>修改配置文件前先获取各个容器的容器<code>ip</code></p><p><code>docker</code>查看容器<code>ip</code>的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> 容器名/容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>获取得到三个容器的ip分别为</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">172.17.0.3</span><br><span class="line">172.17.0.4</span><br><span class="line">172.17.0.5</span><br></pre></td></tr></table></figure><p><strong>修改配置文件(<code>zoo.cfg&amp;myid</code>)</strong></p><ol><li><p>首先是<code>myid</code>文件，他被我们复制到了<code>zookeeper</code>文件夹下的data内，修改它，按照顺序<code>zookeeper01</code>为1、<code>zookeeper02</code>为2…..。（<code>myid</code>的值是<code>zoo.cfg</code>文件里定义的<code>server.A</code>项<code>A</code>的值，<code>Zookeeper</code> 启动时会读取这个文件，拿到里面的数据与 <code>zoo.cfg</code> 里面的配置信息比较从而判断到底是那个server，只是一个<strong>标识作用</strong>。）</p></li><li><p>修改<code>zoo.cfg</code>在期末为将原来默认的<code>server.1=localhost:2888:3888;2181</code>根据<code>myid</code>的关系修改为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.1=172.17.0.3:2888:3888;2181</span><br><span class="line">server.2=172.17.0.4:2888:3888;2181</span><br><span class="line">server.3=172.17.0.5:2888:3888;2181</span><br></pre></td></tr></table></figure></li><li><p>重新启动三个容器(这里可以做成一个脚本执行)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart zookeeper01</span><br><span class="line">docker restart zookeeper02</span><br><span class="line">docker restart zookeeper03</span><br></pre></td></tr></table></figure></li><li><p>进入容器中查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkServer.sh status <span class="comment">#查看zookeeper容器的状态</span></span><br></pre></td></tr></table></figure><p>出现如下信息表示搭建集群成功</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002844751.png" alt="image-20220717002844751"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002816617.png" alt="image-20220717002816617"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220717002933896.png" alt="image-20220717002933896"></p></li><li><p>集群搭建成功</p></li></ol><p>​        </p><h2 id="选取机制"><a href="#选取机制" class="headerlink" title="选取机制"></a>选取机制</h2><p>**SID:**服务器ID。用来唯一标识一台<code>Zookeeper</code>集群中的机器，每台机器不能重复，和myid一样。</p><p>**<code>ZXID:</code>**事务ID。<code>ZXID</code>是一个事务ID，用来标识一次服务器状态的变更。在某一时刻，集群中的每台机器的<code>ZXID</code>值不一定完全一致，这和<code>ZooKeeper</code>服务器对于客户端“更新请求”的处理逻辑有关。(<code>ZXID</code>可以理解为服务器状态更新的次数，因为每次更新操作成功后事务id会递增。)</p><p>**Epoch:**每个Leader任期的代号。没有Leader时同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加。</p><h3 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h3><p>我们需要知道<code>myid</code>小的会将票投给<code>myid</code>大的节点。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220719180536531.png" alt="image-20220719180536531"></p><blockquote><p>如图展示的是myid逐次增加的情况。</p></blockquote><ol><li>服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数1票，不够半数以上（3票），选举无法完成，服务器1状态保持LOOKING。</li><li>服务器2启动，再发起一次选举，服务器1和服务器2分别投自己一票并交换选票信息：此时服务器1发现服务器2的<code>myid</code>比自己目前投票选举的（服务器1）大，更改选票为推举服务器2.此时服务器1票数为0，服务器2票数为2票，依旧没有半数以上，选举无法完成，服务器1，2状态保持LOOKING。</li><li>服务器3启动，发起一次选举，此时服务器1和2都会更改选票为服务器3。此投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数依旧超过半数，服务器3当选leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING。</li><li>服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING。</li><li>服务器5重启，同4一样最后状态会编程FOLLOWING。</li></ol><h3 id="非第一次启动"><a href="#非第一次启动" class="headerlink" title="非第一次启动"></a>非第一次启动</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220719183330948.png" alt="image-20220719183330948"></p><ol><li><p>当<code>Zookeeper</code>集群中的一台服务器出现以下两种情况之一时，就会开始进入Leader选举：</p><ul><li>服务器初始化启动</li><li>服务器运行期间无法和Leader保持连接（因为网络问题没有检测到Leader）</li></ul></li><li><p>当一台机器进入Leader选举流程时，当前集群也可能会处于以下两种状态：</p><ul><li><p>集群中本来就已经存在一个Leader。（因为网络问题没有检测到Leader）</p><p>对于第一种已经存在Leader的情况，机器试图去选举Leader时，会被告知当前服务器的Leader信息，对于该机器来说，仅仅需要和Leader机器简历连接，并进行状态同步即可。</p></li><li><p><strong>集群中确实不存在Leader</strong></p><ul><li><p>假设<code>Zookeeper</code>又5台服务器组成，SID分别为1，2，3，4，5，<code>ZXID</code>分别为8、8、8、7、7，并且此时SID为3的服务器是Leader。某一关键时刻，3和5服务器出现故障，因此开始进行Leader选举。<code>SID</code>为1，2，4的机器投票情况（<code>EPOCH</code>，<code>ZXID</code>，<code>SID</code>）:（1，8，1），（1，8，2），（1，7，4）。</p></li><li><p><strong>选举Leader规则：1. EPOCH大的直接胜出；2. EPOCH相同，事务id大的胜出；3. 事务id相同，服务器id大的胜出</strong></p></li></ul></li></ul></li></ol><h2 id="客户端命令行操作"><a href="#客户端命令行操作" class="headerlink" title="客户端命令行操作"></a>客户端命令行操作</h2><h3 id="命令行语法"><a href="#命令行语法" class="headerlink" title="命令行语法"></a>命令行语法</h3><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong><code>czxid</code></strong></td><td align="center">创建节点的事务<code>zxid</code> 每次修改<code>Zookeeper</code>状态都会产生一个<code>Zookeeoer</code>事务ID.事务ID是<code>Zookeeper</code>中所有修改总的次序.每次修改都有唯一的<code>zxid</code>,如果<code>zxid</code>1小于<code>zxid</code>2,那么标识<code>zxid</code>1对应的修改在<code>zxid</code>2之前发生</td></tr><tr><td align="center"><strong><code>ctime</code></strong></td><td align="center"><code>znode</code>被创建的毫秒数(从1970年开始)</td></tr><tr><td align="center"><strong><code>mzxid</code></strong></td><td align="center"><code>znode</code>最后更新的事务<code>zxid</code></td></tr><tr><td align="center"><strong><code>mtime</code></strong></td><td align="center"><code>znode</code>最后修改的毫秒数(从1970年开始)</td></tr><tr><td align="center"><strong><code>pZxid</code></strong></td><td align="center"><code>znode</code>最后更新的子节点<code>zxid</code></td></tr><tr><td align="center"><strong><code>cversion</code></strong></td><td align="center"><code>znode</code>子节点变化号,<code>znode</code>子节点修改次数</td></tr><tr><td align="center"><strong><code>dataversion</code></strong></td><td align="center"><code>znode</code>数据变化号</td></tr><tr><td align="center"><strong><code>aclVersion</code></strong></td><td align="center"><code>znode</code>访问控制列表的变化号</td></tr><tr><td align="center"><strong><code>ephemeralOwner</code></strong></td><td align="center">如果是临时节点,这个是<code>znode</code>拥有者的<code>session id</code>.如果不是临时节点则是0.</td></tr><tr><td align="center"><strong><code>dataLength</code></strong></td><td align="center"><code>znode</code>的数据长度</td></tr><tr><td align="center"><strong><code>numChildren</code></strong></td><td align="center"><code>znode</code>子节点数量</td></tr></tbody></table><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p>节点类型分为以下两大类:</p><p><strong>持久节点(Persistent)</strong>:客户端和服务器端断开连接后,创建的节点不删除</p><p><strong>短暂节点(Ephemeral)</strong>:客户端和服务器端断开连接后,创建的节点自己删除</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720151900500.png" alt="image-20220720151900500"></p><blockquote><p>说明: 创建<code>znode</code>时设置顺序标识,znode名称后会附加一个值,顺序号是一个单调递增的计数器,由父节点维护</p><p>注意: 在分布式系统中,顺序号可以被用于为所有的事件进行全局排序,这样客户端可以通过顺序号推断事件发生的顺序</p></blockquote><h4 id="持久节点"><a href="#持久节点" class="headerlink" title="持久节点"></a>持久节点</h4><ol><li><p>持久化目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后,该节点依旧存在</p></li><li><p>持久化顺序编号目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后,该节点依旧存在,只是<code>Zookeeper</code>给该节点名称进行顺序编号</p></li></ol><h4 id="短暂节点"><a href="#短暂节点" class="headerlink" title="短暂节点"></a>短暂节点</h4><ol><li><p>临时目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后，该节点被删除</p></li><li><p>临时顺序编号目录节点</p><p>客户端与<code>Zookeeper</code>断开连接后，该节点被<code>Zookeeper</code>给该节点名称进行顺序编号。</p></li></ol><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><ol><li><p>分别创建普通节点（永久节点+不带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create 路径 [信息]（类似于创建文件一样需要输入完成的路径）</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 3] create /sanguo <span class="string">&quot;diaochan&quot;</span></span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 5] create  /sanguo/shuguo <span class="string">&quot;liubei&quot;</span></span><br></pre></td></tr></table></figure><p>获取节点信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get -s 路径</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 12] get -s /sanguo</span><br><span class="line"><span class="comment"># 获取得到的信息</span></span><br><span class="line">diaochan</span><br><span class="line">cZxid = 0x200000009</span><br><span class="line">ctime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">mZxid = 0x200000009</span><br><span class="line">mtime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">pZxid = 0x20000000a</span><br><span class="line">cversion = 1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 8</span><br><span class="line">numChildren = 1</span><br></pre></td></tr></table></figure></li><li><p>分别创建普通节点（永久节点+带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create -s 路径 [信息]</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 4] create -s /sanguo</span><br><span class="line">Created /sanguo0000000001</span><br></pre></td></tr></table></figure></li><li><p>创建临时节点（临时节点+不带序号）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create -e 路径 [信息]</span><br><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 21] create -e /sanguo/zhongguo</span><br><span class="line">Created /sanguo/zhongguo</span><br></pre></td></tr></table></figure><p>临时节点在客户端与服务器断开连接后被删除，永久节点则反不会。</p></li><li><p>修改节点数据值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 10] <span class="built_in">set</span> /sanguo diaochan1</span><br></pre></td></tr></table></figure><p>这样就可以修改或者添加节点的值了。</p></li></ol><h3 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h3><h4 id="监听器原理详解"><a href="#监听器原理详解" class="headerlink" title="监听器原理详解"></a>监听器原理详解</h4><ol><li>首先有一个main()线程</li><li>在main线程中创建<code>Zookeeper</code>客户端，这时就会创建两个线程，一个负责网络连接(connect)，一个负责监听(listener)。</li><li>通过connect线程将注册的监听事件发送给<code>Zookeeper</code>。</li><li>在<code>Zookeeper</code>的注册监听器列表中将注册的监听事件添加到列表中。</li><li><code>Zookeeper</code>监听到有数据或路径发生变化，就会将这个消息发送给listener线程。</li><li>listener线程内部调用process()方法</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720170334171.png" alt="image-20220720170334171"></p><h4 id="节点的值变化监听"><a href="#节点的值变化监听" class="headerlink" title="节点的值变化监听"></a>节点的值变化监听</h4><ol><li><p>在<code>Zookeeper01</code>主机上注册监听<code>/sanguo</code>节点的数据变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 16] get -w /sanguo</span><br></pre></td></tr></table></figure></li><li><p>在<code>Zookeeper02</code>主机上修改<code>/sanguo</code>节点的数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 1] <span class="built_in">set</span> /sanguo <span class="string">&quot;xisi&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>观察<code>Zookeeper01</code>主机收到数据变化的监听</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720172417291.png" alt="image-20220720172417291"></p><blockquote><p>注意: 在<code>Zookeeper02</code>再多次修改<code>/sanguo</code>的值,<code>Zookeeper01</code>上不会再收到监听.因为注册一次,只能监听一次.像再次监听,需要再次监听.</p></blockquote></li></ol><h4 id="节点的子节点变化监听"><a href="#节点的子节点变化监听" class="headerlink" title="节点的子节点变化监听"></a>节点的子节点变化监听</h4><ol><li><p>在<code>Zookeeper01</code>主机上注册监听<code>/sanguo</code>节点的子节点变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 17] <span class="built_in">ls</span> -w /sanguo</span><br></pre></td></tr></table></figure></li><li><p>在<code>Zookeeper02</code>主机上<code>/sanguo</code>节点上创建子节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 2] create /sanguo/jin <span class="string">&quot;simayi&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>观察<code>Zookeeper01</code>主机收到子节点变化的监听</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720173200076.png" alt="image-20220720173200076"></p><blockquote><p>注意: 节点的路径变化,也是注册一次,生效一次,想多次生效,就需要多次注册.</p></blockquote></li></ol><h3 id="节点的删除与查看"><a href="#节点的删除与查看" class="headerlink" title="节点的删除与查看"></a>节点的删除与查看</h3><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 18] delete /sanguo/jin</span><br></pre></td></tr></table></figure><h4 id="递归删除节点"><a href="#递归删除节点" class="headerlink" title="递归删除节点"></a>递归删除节点</h4> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 19] deleteall /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>如果节点下面有许多子节点,就不能够直接通过<code>delete</code>删除该节点,而是应该使用<code>deleteall</code></p><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: 172.17.0.4:2181(CONNECTED) 20] <span class="built_in">stat</span> /sanguo</span><br><span class="line"><span class="comment"># 节点状态信息</span></span><br><span class="line">cZxid = 0x200000009</span><br><span class="line">ctime = Wed Jul 20 15:27:45 CST 2022</span><br><span class="line">mZxid = 0x200000020</span><br><span class="line">mtime = Wed Jul 20 17:21:49 CST 2022</span><br><span class="line">pZxid = 0x200000023</span><br><span class="line">cversion = 8</span><br><span class="line">dataVersion = 2</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 2</span><br></pre></td></tr></table></figure><h2 id="客户端API操作"><a href="#客户端API操作" class="headerlink" title="客户端API操作"></a>客户端API操作</h2><p>**前提:**保证<code>Zookeeper</code>集群服务器启动。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>创建工程<code>zookeeper01</code></p></li><li><p>添加<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.zookeeper</code></p></li><li><p>在包下创建类 名称为<code>zkClient</code></p></li></ol><h4 id="创建Zookeeper客户端"><a href="#创建Zookeeper客户端" class="headerlink" title="创建Zookeeper客户端"></a>创建Zookeeper客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">   <span class="comment">//会话过期时间</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//这里我们创建Zookeeper客户端时可以自己new 一个Watcher</span></span><br><span class="line">       zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">nodeCreated</span> <span class="operator">=</span> zkClient.create(<span class="string">&quot;/devildyw&quot;</span>, <span class="string">&quot;ss.avi&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：一定要在<code>init()</code>方法上加上@Before注解 这样子才可以在调用create()方法前进行连接的初始化。</p></blockquote><p>测试服务器端中<code>Zookeeper</code>节点的变化</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185155078.png" alt="image-20220720185155078"></p><h4 id="获取子节点并监听节点变化"><a href="#获取子节点并监听节点变化" class="headerlink" title="获取子节点并监听节点变化"></a>获取子节点并监听节点变化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">    <span class="comment">//这里方法中的true代表着使用Watcher这个Watcher就是前面创建Zookeeper客户端时new的Watcher 也可以自定义</span></span><br><span class="line">    List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">        System.out.println(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器中<code>&quot;/&quot;</code>下的节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185435045.png" alt="image-20220720185435045"></p><p>通过客户端<code>API</code>获取得到的<code>&quot;/&quot;</code>下的节点</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720185447846.png" alt="image-20220720185447846"></p><blockquote><p>注意：这个方法中我们只创建了一次监听器，用于监听给定路径的节点或在节点下创建&#x2F;删除子节点的成功操作，但是一次之后监听器就会失效，如果要持续监听就需要再次注册。</p><p>可以采用循环注册监听器来解决。</p></blockquote><h4 id="判断Znode是否存在"><a href="#判断Znode是否存在" class="headerlink" title="判断Znode是否存在"></a>判断<code>Znode</code>是否存在</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exist</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/devildyw&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(exists==<span class="literal">null</span>?<span class="string">&quot;not exist&quot;</span>:<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192241351.png" alt="image-20220720192241351"></p><h2 id="客户端向服务端写数据流程"><a href="#客户端向服务端写数据流程" class="headerlink" title="客户端向服务端写数据流程"></a>客户端向服务端写数据流程</h2><h3 id="写流程之写入请求直接发送给Leader节点"><a href="#写流程之写入请求直接发送给Leader节点" class="headerlink" title="写流程之写入请求直接发送给Leader节点"></a>写流程之写入请求直接发送给Leader节点</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192619337.png" alt="image-20220720192619337"></p><p>上述展示的是<code>Zookeeper</code>客户端向<code>Zookeeper</code>集群集群<code>Leader</code>节点发送写请求，<code>Leader</code>写完后，然后<code>Leader</code>节点会发送写请求给<code>Follower</code>，当<code>Follower</code>完成写请求后返回一个ACK信息表示数据已接收。如果集群中有半数以上的节点完成了写请求就会响应给客户端一个<code>ACK</code>，表示写请求成功，后续Leader会继续向其他的Follower重复写请求和返回<code>ACK(Follower)</code></p><blockquote><p><code>ACK (Acknowledge character）</code>即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误。</p></blockquote><h3 id="写流程之写入请求发送给follower节点"><a href="#写流程之写入请求发送给follower节点" class="headerlink" title="写流程之写入请求发送给follower节点"></a>写流程之写入请求发送给follower节点</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220720192630844.png" alt="image-20220720192630844"></p><p>如果<code>Zookeeper</code>客户端向<code>Zookeeper</code>集群中的Follower节点发送写请求，那么该<code>Follower</code>节点会将写请求直接转发到<code>Leader</code>节点上，<strong>再执行写入请求发送给<code>Leader</code>节点的流程</strong>，如果超过半数了，<code>Leader</code>就会响应<code>ACK</code>到一开始接收到写入请求的<code>Follower</code>节点，再通过这个节点将<code>ACK</code>返回到客户端，剩余<code>Follower</code>节点继续接收执行<code>Leader</code>的写入请求。</p><h2 id="服务器动态上下线-1"><a href="#服务器动态上下线-1" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721002217841.png" alt="image-20220721002217841"></p><p>通过<code>Zookeeper</code>集群去管理服务器的动态上下线，主要是各个服务器通过<code>Zookeeper</code>客户端去再<code>Zookeeper</code>集群中创建节点，当下线是将节点删除，而客户端则是通过<code>Zookeeper</code>客户端去监听服务器的上下线，执行响应的业务。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol><li><p>首先在集群上创建<code>/servers</code>节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 14] create /servers <span class="string">&quot;servers&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.case1</code></p></li><li><p>创建类<code>DistributeServer</code> 服务器端向 <code>Zookeeper </code>注册代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devildyw.case1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-13:00</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 分布式服务器动态上下线中的服务器角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeServer</span> &#123;</span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeServer</span>();</span><br><span class="line">        <span class="comment">//1. 获取zk连接</span></span><br><span class="line">        server.getConnect();</span><br><span class="line">        <span class="comment">//2 注册服务器zk集群</span></span><br><span class="line">        server.register(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//3.启动业户逻辑（这里为了演示 使用线程休眠代替）</span></span><br><span class="line">        server.business();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">create</span> <span class="operator">=</span> zkClient.create(<span class="string">&quot;/servers/&quot;</span>+hostname, hostname.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">        System.out.println(hostname+<span class="string">&quot;is online&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户端代码<code>DistributeClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devildyw.case1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-13:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 分布式服务器动态上下线中的客户端角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeClient</span> &#123;</span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    ZooKeeper zkClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeClient</span>();</span><br><span class="line">        <span class="comment">//1. 获取ZK连接</span></span><br><span class="line">        client.getConnect();</span><br><span class="line">        <span class="comment">//2.监听/servers下面节点的增加或删除</span></span><br><span class="line">        client.getServerList();</span><br><span class="line">        <span class="comment">//3.业务逻辑(线程休眠)</span></span><br><span class="line">        client.business();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">        List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/servers&quot;</span>, <span class="literal">true</span>); <span class="comment">//这里监听器位置参数设置为true代表使用初始化Zookeeper客户端时的Watcher</span></span><br><span class="line">        ArrayList&lt;String&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            <span class="comment">//取出节点中的数据信息</span></span><br><span class="line">            <span class="type">byte</span>[] data = zkClient.getData(<span class="string">&quot;/servers/&quot;</span> + child, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//封装到集合中</span></span><br><span class="line">            servers.add(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印集合信息</span></span><br><span class="line">        System.out.println(servers);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//循环注册监听 当触发了监听器后 在监听器业务逻辑中再次注册监听器</span></span><br><span class="line">                    getServerList();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行&#x2F;测试 </p><p>先启动客户端监听<code>/servers</code>下的节点变化,然后启动服务器.</p><p>服务器端的参数传入用到了命令行参数,我们这里可以<code>Idea</code>中配置</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721134945087.png" alt="image-20220721134945087"></p></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721135008120.png" alt="image-20220721135008120"></p><p>启动服务器创建节点,客户端监测到打印服务器信息列表.</p><h2 id="ZooKeeper-分布式锁案例"><a href="#ZooKeeper-分布式锁案例" class="headerlink" title="ZooKeeper 分布式锁案例"></a><strong>ZooKeeper</strong> <strong>分布式锁案例</strong></h2><p>​    什么叫分布式锁?</p><p>​    比如说”进程1”在使用该资源的时候，会先去获得锁，”进程1”获得锁以后会对该资源保持独占，这样其他进程就无法访问该资源,”进程1”用完该资源以后就将锁释放掉，让其他进程来获得锁，那么通过这个锁机制，我们就能保证分布式系统中多个进程能够有序的访问该临界资源。那么我们把这个分布式环境下的这个锁叫做分布式锁。</p><h3 id="分布式锁案例"><a href="#分布式锁案例" class="headerlink" title="分布式锁案例"></a>分布式锁案例</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220721135958109.png" alt="image-20220721135958109"></p><p>多个客户端在<code>/locks</code>的路径下创建节点(临时有序的节点)，如果节点序号小优先获得锁处理业务，其他序号大的点，监听其序号前一个节点，如果前一个节点处理完业务后，锁会被释放且前一个节点会被删除，这时后一个节点因为是在监听前一个节点的所以此时它回去获得锁，处理业务，依次类推。</p><h3 id="原生-Zookeeper-实现分布式锁案例"><a href="#原生-Zookeeper-实现分布式锁案例" class="headerlink" title="原生 Zookeeper 实现分布式锁案例"></a><strong>原生</strong> <strong>Zookeeper</strong> 实现分布式锁案例</h3><ol><li><p>创建工程<code>zookeeper-02-Distribute-Lock</code></p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.distributeLock</code></p></li><li><p>创建类<code>DistributeLock</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.distributeLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意配置连接多台Zookeeper服务器 服务器之间不能留有空格</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">connectString</span> <span class="operator">=</span> <span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>;</span><br><span class="line">    <span class="comment">//会话过期时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">    ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String waitPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">connectLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">waitLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> String currentMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DistributeLock</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">                <span class="comment">//connectLatch 如果连接上了zk 可以释放</span></span><br><span class="line">                <span class="keyword">if</span> (event.getState()==Event.KeeperState.SyncConnected)&#123;</span><br><span class="line">                    connectLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//waitLatch 需要释放</span></span><br><span class="line">                <span class="keyword">if</span> (event.getType()== Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(waitPath))&#123;</span><br><span class="line">                    waitLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//等待zk正常连接后,才往下走程序 可以提高代码健壮性</span></span><br><span class="line">        connectLatch.await();</span><br><span class="line">        <span class="comment">//判断根节点locks是否存在</span></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//如果不存在 需要创建</span></span><br><span class="line">        <span class="keyword">if</span> (exists==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建一个根节点</span></span><br><span class="line">            zkClient.create(<span class="string">&quot;/locks&quot;</span>,<span class="string">&quot;locks&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对zk加锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建对应的临时带序号节点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            currentMode = zkClient.create(<span class="string">&quot;/locks/&quot;</span> + <span class="string">&quot;seq-&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//wait一小会,让结果更清晰</span></span><br><span class="line"><span class="comment">//            Thread.sleep(10);</span></span><br><span class="line">            <span class="comment">//判断创建的节点是否是最小的序号节点，如果是获取到锁；如果不是，监听序号前一个节点</span></span><br><span class="line">            <span class="comment">//判断是否是最下序号节点</span></span><br><span class="line">            List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/locks&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//如果children只有一个值，那就直接获取锁；如果有多个节点，需要判断，谁最小</span></span><br><span class="line">            <span class="keyword">if</span> (children.size()==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Collections.sort(children);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取节点名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">thisNode</span> <span class="operator">=</span> currentMode.substring(<span class="string">&quot;/locks/&quot;</span>.length());</span><br><span class="line">                <span class="comment">//通过seq-0000000获取该节点咋children集合的位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> children.indexOf(thisNode);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span> (index==-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;数据异常&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//第一个节点可以获取锁了</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//需要监听它前一个节点的变化</span></span><br><span class="line">                    waitPath = <span class="string">&quot;/locks/&quot;</span>+children.get(index-<span class="number">1</span>);</span><br><span class="line">                    zkClient.getData(waitPath,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">//等待监听 知道上一个节点被删除后才释放</span></span><br><span class="line">                    waitLatch.await();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对zk解锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">zkUnlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//删除节点 后面的版本号根据实际要求给 这里随便给了个-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient.delete(currentMode,-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.distributeLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributeLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">DistributeLock</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeLock</span>();</span><br><span class="line">        <span class="type">DistributeLock</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistributeLock</span>();</span><br><span class="line">        <span class="comment">//开启多线程测试</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock1.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一获取到锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock1.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启多线程测试</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock2.zkLock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二获取到锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock2.zkUnlock();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">线程二获取到锁</span><br><span class="line"></span><br><span class="line">线程二释放锁</span><br><span class="line"></span><br><span class="line">线程一获取到锁</span><br><span class="line"></span><br><span class="line">线程一释放锁</span><br></pre></td></tr></table></figure></li></ol><h3 id="Curator-框架实现分布式锁案例"><a href="#Curator-框架实现分布式锁案例" class="headerlink" title="Curator 框架实现分布式锁案例"></a><strong>Curator</strong> 框架实现分布式锁案例</h3><h4 id="原生的Java-API开发存在的问题"><a href="#原生的Java-API开发存在的问题" class="headerlink" title="原生的Java API开发存在的问题"></a>原生的Java API开发存在的问题</h4><ol><li>会话连接是异步的,需要自己去处理。比如使用<code>CountDownLatch</code></li><li>Watch需要重复注册，不然就不能生效</li><li>开发的复杂性还是比较高的</li><li>不支持多节点删除和创建。需要自己去递归。</li></ol><h4 id="Curator-是一个专门解决分布式锁的框架，解决了原生-JavaAPI-开发分布式遇到的问题。"><a href="#Curator-是一个专门解决分布式锁的框架，解决了原生-JavaAPI-开发分布式遇到的问题。" class="headerlink" title="Curator 是一个专门解决分布式锁的框架，解决了原生 JavaAPI 开发分布式遇到的问题。"></a><strong>Curator</strong> <strong>是一个专门解决分布式锁的框架，解决了原生</strong> <strong>JavaAPI</strong> 开发分布式遇到的问题。</h4><blockquote><p>Apache Curator is a Java&#x2F;JVM client library for <a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>, a distributed coordination service. It includes a highlevel API framework and utilities to make using Apache ZooKeeper much easier and more reliable. It also includes recipes for common use cases and extensions such as service discovery and a Java 8 asynchronous DSL.</p><p>翻译：Apache Curator 是 Apache ZooKeeper 的 Java&#x2F;JVM 客户端库，Apache ZooKeeper 是一种分布式协调服务。它包括一个高级 API 框架和实用程序，使 Apache ZooKeeper 的使用更加轻松和可靠。它还包括常见用例和扩展的秘诀，例如服务发现和 Java 8 异步 DSL。</p></blockquote><blockquote><p>详情请查看官方文档：<a href="https://curator.apache.org/">Apache Curator </a></p></blockquote><h4 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h4><ol><li><p>创建工程<code>zookeeper-04-Distrubuted-Lock-Curator</code></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.77.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建包<code>com.dyw.DistributedLockCurator</code></p></li><li><p>创建测试类 测试框架<code>API</code> <code>CuratorLockTest</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.DistributedLockCurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-21-15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建分布式锁1</span></span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line">        <span class="comment">//创建分布式锁2</span></span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="string">&quot;/locks&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 获取到锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//这里再次获取锁是为了验证该框架的锁是可重入锁</span></span><br><span class="line">                    lock1.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 再次获取到锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 释放锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//再次释放锁</span></span><br><span class="line">                    lock1.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程一 再次释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获取锁</span></span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 获取到锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//这里再次获取锁是为了验证该框架的锁是可重入锁</span></span><br><span class="line">                    lock2.acquire();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 再次获取到锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 释放锁&quot;</span>);</span><br><span class="line">                    <span class="comment">//再次释放锁</span></span><br><span class="line">                    lock2.release();</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程二 再次释放锁&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分布式锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework <span class="title function_">getCuratorFramework</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试策略，初试时间3秒,重试3次</span></span><br><span class="line">        <span class="type">ExponentialBackoffRetry</span> <span class="variable">retry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过创建者模式创建Curator</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;36.137.128.27:2182,36.137.128.27:2181,36.137.128.27:2183&quot;</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">2000</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">2000</span>)</span><br><span class="line">                .retryPolicy(retry)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开启连接 启动客户端</span></span><br><span class="line">        client.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;zookeeper 客户端启动成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制台</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">线程一 获取锁</span><br><span class="line">线程一 再次获取锁</span><br><span class="line">线程一 释放锁</span><br><span class="line">线程一 再次释放锁</span><br><span class="line">线程二 获取锁</span><br><span class="line">线程二 再次获取锁</span><br><span class="line">线程二 释放锁</span><br><span class="line">线程二 再次释放锁</span><br></pre></td></tr></table></figure><blockquote><p>通常企业级项目都会使用成熟的框架，原生<code>API</code>的开发是非常少见的</p></blockquote></li></ol><h2 id="企业面试重点真题"><a href="#企业面试重点真题" class="headerlink" title="企业面试重点真题"></a>企业面试重点真题</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><p>半数机制，超过半数的投票通过，即通过。</p><ol><li><p>第一次启动选举规则：</p><p>投票超过半数时，服务器id大的胜出</p></li><li><p>第二次启动选举规则：</p><ol><li>EPOCH大的直接胜出</li><li>EPOCH相同，事务id大的胜出</li><li>事务id相同，服务器id大的胜出</li></ol></li></ol><h3 id="生产集群安装多少台Zookeeper合适"><a href="#生产集群安装多少台Zookeeper合适" class="headerlink" title="生产集群安装多少台Zookeeper合适"></a>生产集群安装多少台<code>Zookeeper</code>合适</h3><p>安装奇数台</p><p><strong>生产经验：</strong></p><blockquote><p>10台服务器：3台Zookeeper</p><p>20台服务器：5台Zookeeper</p><p>100台服务器： 11台Zookeeper</p><p>200台服务器： 11台Zookeeper</p></blockquote><p><strong>服务器台数多：好处，提高可靠性；坏处：提供通信延迟</strong></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><code>ls</code>、<code>get</code>、<code>create</code>、<code>delete</code></p><blockquote><p><code>create -e</code>:  表示创建临时节点</p><p><code>ls -s</code>： 表示显示数据节点的状态信息 类似于<code>get -s</code></p><p><code>-w</code>: 表示监听</p><p><code>deleteall</code>：递归删除节点（将该节点下的所有节点递归删除后再删除该节点）</p><p><code>create -s</code>：表示创建有序号的节点</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Eureka详细配置</title>
    <link href="https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-14T04:56:09.000Z</published>
    <updated>2022-07-14T05:46:32.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka详细配置"><a href="#Eureka详细配置" class="headerlink" title="Eureka详细配置"></a>Eureka详细配置</h1><h2 id="1-Eureka-Client-配置项（eureka-client-）"><a href="#1-Eureka-Client-配置项（eureka-client-）" class="headerlink" title="1. Eureka Client 配置项（eureka.client.*）"></a>1. <a href="https://so.csdn.net/so/search?q=Eureka&spm=1001.2101.3001.7020">Eureka</a> Client 配置项（eureka.client.*）</h2><blockquote><p>org.<a href="https://so.csdn.net/so/search?q=springframework&spm=1001.2101.3001.7020">springframework</a>.cloud.netflix.eureka.EurekaClientConfigBean</p></blockquote><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.client.enabled</strong></td><td align="center">用于指示Eureka客户端已启用的标志</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.registry-fetch-interval-seconds</strong></td><td align="center">指示从eureka服务器获取注册表信息的频率（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.instance-info-replication-interval-seconds</strong></td><td align="center">更新实例信息的变化到Eureka服务端的间隔时间，（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.initial-instance-info-replication-interval-seconds</strong></td><td align="center">初始化实例信息到Eureka服务端的间隔时间，（s）</td><td align="center">40</td></tr><tr><td align="center"><strong>eureka.client.eureka-service-url-poll-interval-seconds</strong></td><td align="center">询问Eureka Server信息变化的时间间隔（s），默认为300秒</td><td align="center">300</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-read-timeout-seconds</strong></td><td align="center">读取Eureka Server 超时时间（s），默认8秒</td><td align="center">8</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-connect-timeout-seconds</strong></td><td align="center">连接Eureka Server 超时时间（s），默认5秒</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-total-connections</strong></td><td align="center">获取从eureka客户端到所有eureka服务器的连接总数,默认200个</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-total-connections-per-host</strong></td><td align="center">获取从eureka客户端到eureka服务器主机允许的连接总数，默认50个</td><td align="center">50</td></tr><tr><td align="center"><strong>eureka.client.eureka-connection-idle-timeout-seconds</strong></td><td align="center">连接到 Eureka Server 空闲连接的超时时间（s），默认30</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.client.registry-refresh-single-vip-address</strong></td><td align="center">指示客户端是否仅对单个VIP的注册表信息感兴趣，默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.heartbeat-executor-thread-pool-size</strong></td><td align="center">心跳保持线程池初始化线程数，默认2个</td><td align="center">2</td></tr><tr><td align="center"><strong>eureka.client.heartbeat-executor-exponential-back-off-bound</strong></td><td align="center">心跳超时重试延迟时间的最大乘数值，默认10</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.client.serviceUrl.defaultZone</strong></td><td align="center">可用区域映射到与eureka服务器通信的完全限定URL列表。每个值可以是单个URL或逗号分隔的备用位置列表。(<strong>http:&#x2F;&#x2F; {eureka.instance.hostname}：${server.port}&#x2F;eureka&#x2F;</strong>)</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.use-dns-for-fetching-service-urls</strong></td><td align="center">指示eureka客户端是否应使用DNS机制来获取要与之通信的eureka服务器列表。当DNS名称更新为具有其他服务器时，eureka客户端轮询eurekaServiceUrlPollIntervalSeconds中指定的信息后立即使用该信息。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.register-with-eureka</strong></td><td align="center">指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.prefer-same-zone-eureka</strong></td><td align="center">实例是否使用同一zone里的eureka服务器，默认为true，理想状态下，eureka客户端与服务端是在同一zone下</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.log-delta-diff</strong></td><td align="center">是否记录eureka服务器和客户端之间在注册表的信息方面的差异，默认为false</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.disable-delta</strong></td><td align="center">指示eureka客户端是否禁用增量提取</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.fetch-remote-regions-registry</strong></td><td align="center">逗号分隔的区域列表，提取eureka注册表信息</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.on-demand-update-status-change</strong></td><td align="center">客户端的状态更新到远程服务器上，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.allow-redirects</strong></td><td align="center">指示服务器是否可以将客户端请求重定向到备份服务器&#x2F;集群。如果设置为false，则服务器将直接处理请求。如果设置为true，则可以将HTTP重定向发送到具有新服务器位置的客户端。</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.availability-zones.*</strong></td><td align="center">获取此实例所在区域的可用区域列表（在AWS数据中心中使用）。更改在运行时在registryFetchIntervalSeconds指定的下一个注册表获取周期生效。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.backup-registry-impl</strong></td><td align="center">获取实现BackupRegistry的实现的名称，该实现仅在eureka客户端启动时第一次作为后备选项获取注册表信息。 对于需要额外的注册表信息弹性的应用程序，可能需要这样做，否则它将无法运行。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.cache-refresh-executor-exponential-back-off-bound</strong></td><td align="center">在发生一系列超时的情况下，它是重试延迟的最大乘数值。</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.client.cache-refresh-executor-thread-pool-size</strong></td><td align="center">缓存刷新线程池初始化线程数量</td><td align="center">2</td></tr><tr><td align="center"><strong>eureka.client.client-data-accept</strong></td><td align="center">客户端数据接收的名称</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.decoder-name</strong></td><td align="center">解码器名称</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.dollar-replacement</strong></td><td align="center">eureka服务器序列化&#x2F;反序列化的信息中获取“$”符号的替换字符串。默认为“_-”</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.encoder-name</strong></td><td align="center"><em>编码器名称</em></td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.escape-char-replacement</strong></td><td align="center">eureka服务器序列化&#x2F;反序列化的信息中获取“_”符号的的替换字符串。默认为“__“</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.eureka-server-d-n-s-name</strong></td><td align="center">获取要查询的DNS名称来获得eureka服务器，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-port</strong></td><td align="center">获取eureka服务器的端口，此配置只有在eureka服务器ip地址列表是在DNS中才会用到。默认为null</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.eureka-server-u-r-l-context</strong></td><td align="center">表示eureka注册中心的路径，如果配置为eureka，则为<a href="http://ip:port/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null">http://ip:port/eureka/，在eureka的配置文件中加入此配置表示eureka作为客户端向注册中心注册，从而构成eureka集群。此配置只有在eureka服务器ip地址列表是在DNS中才会用到，默认为null</a></td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.fetch-registry</strong></td><td align="center"><em>客户端是否获取eureka服务器注册表上的注册信息，默认为true</em></td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.filter-only-up-instances</strong></td><td align="center">是否过滤掉非up实例，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.g-zip-content</strong></td><td align="center">当服务端支持压缩的情况下，是否支持从服务端获取的信息进行压缩。默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.client.property-resolver</strong></td><td align="center">属性解析器</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.client.proxy-host</strong></td><td align="center">获取eureka server 的代理主机名</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-password</strong></td><td align="center">获取eureka server 的代理主机密码</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-port</strong></td><td align="center">获取eureka server 的代理主机端口</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.proxy-user-name</strong></td><td align="center">获取eureka server 的代理用户名</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.client.region</strong></td><td align="center">获取此实例所在的区域（在AWS数据中心中使用）。</td><td align="center">us-east-1</td></tr><tr><td align="center"><strong>eureka.client.should-enforce-registration-at-init</strong></td><td align="center">client 在初始化阶段是否强行注册到注册中心</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.client.should-unregister-on-shutdown</strong></td><td align="center">client在shutdown情况下，是否显示从注册中心注销</td><td align="center">true</td></tr></tbody></table><hr><h2 id="2-服务实例配置项（eureka-instance-）"><a href="#2-服务实例配置项（eureka-instance-）" class="headerlink" title="2. 服务实例配置项（eureka.instance.*）"></a>2. 服务实例配置项（eureka.instance.*）</h2><blockquote><p>org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</p></blockquote><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.instance.appname</strong></td><td align="center">注册到注册中心的应用名称</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.a-s-g-name</strong></td><td align="center">注册到注册中心的应用所属分组名称（AWS服务器）</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.app-group-name</strong></td><td align="center">注册到注册中心的应用所属分组名称</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.data-center-info</strong></td><td align="center">指定服务实例所属数据中心</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.instance-enabled-onit</strong></td><td align="center">指示是否应在eureka注册后立即启用实例以获取流量</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.non-secure-port</strong></td><td align="center">http通信端口</td><td align="center">80</td></tr><tr><td align="center"><strong>eureka.instance.non-secure-port-enabled</strong></td><td align="center">是否启用HTTP通信端口</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.instance.secure-port</strong></td><td align="center">HTTPS通信端口</td><td align="center">443</td></tr><tr><td align="center"><strong>eureka.instance.secure-port-enabled</strong></td><td align="center">是否启用HTTPS通信端口</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.secure-virtual-host-name</strong></td><td align="center">服务实例安全主机名称（HTTPS）</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.virtual-host-name</strong></td><td align="center">该服务实例非安全注解名称（HTTP）</td><td align="center">unknown</td></tr><tr><td align="center"><strong>eureka.instance.secure-health-check-url</strong></td><td align="center">该服务实例安全健康检查地址（URL），绝对地址</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.lease-renewal-interval-in-seconds</strong></td><td align="center">该服务实例向注册中心发送心跳间隔（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.instance.lease-expiration-duration-in-seconds</strong></td><td align="center">指示eureka服务器在删除此实例之前收到最后一次心跳之后等待的时间（s）</td><td align="center">90</td></tr><tr><td align="center"><strong>eureka.instance.metadata-map.*</strong></td><td align="center">自定义元数据,符合KEY&#x2F;VALUE的存储格式。这 些元数据可以在远程客户端中访问。</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.ip-address</strong></td><td align="center">该服务实例的IP地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.prefer-ip-address</strong></td><td align="center">是否优先使用服务实例的IP地址，相较于hostname</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.instance.status-page-url</strong></td><td align="center">该服务实例的状态检查地址（url），绝对地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.status-page-url-path</strong></td><td align="center">该服务实例的状态检查地址，相对地址</td><td align="center"><strong>&#x2F;actuator&#x2F;info</strong></td></tr><tr><td align="center"><strong>eureka.instance.home-page-url</strong></td><td align="center">该服务实例的主页地址（url），绝对地址</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.home-page-url-path</strong></td><td align="center">该服务实例的主页地址，相对地址</td><td align="center">&#x2F;</td></tr><tr><td align="center"><strong>eureka.instance.health-check-url</strong></td><td align="center">该服务实例的健康检查地址（url），绝对地址</td><td align="center">null</td></tr><tr><td align="center"><strong>eureka.instance.health-check-url-path</strong></td><td align="center">该服务实例的健康检查地址，相对地址</td><td align="center">&#x2F;actuator&#x2F;health</td></tr><tr><td align="center"><strong>eureka.instance.instance-id</strong></td><td align="center">该服务实例在注册中心的唯一实例ID</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.hostname</strong></td><td align="center">该服务实例所在主机名</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.namespace</strong></td><td align="center">获取用于查找属性的命名空间。 在Spring Cloud中被忽略。</td><td align="center"><strong>eureka</strong></td></tr><tr><td align="center"><strong>eureka.instance.environment</strong></td><td align="center">该服务实例环境配置</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.default-address-resolution-order</strong></td><td align="center">默认地址解析顺序</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.instance.initial-status</strong></td><td align="center">该服务实例注册到Eureka Server 的初始状态</td><td align="center">up</td></tr><tr><td align="center"><strong>eureka.instance.registry.default-open-for-traffic-count</strong></td><td align="center">【Eureka Server 端属性】默认开启通信的数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.instance.registry.expected-number-of-renews-per-min</strong></td><td align="center">【Eureka Server 端属性】每分钟续约次数</td><td align="center">1</td></tr></tbody></table><hr><h2 id="3-Eureka-Server-配置项（eureka-server-）"><a href="#3-Eureka-Server-配置项（eureka-server-）" class="headerlink" title="3. Eureka Server 配置项（eureka.server.*）"></a>3. Eureka Server 配置项（eureka.server.*）</h2><table><thead><tr><th align="center"><strong>参数名称</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.enable-self-preservation</strong></td><td align="center">启用自我保护机制，默认为true</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.eviction-interval-timer-in-ms</strong></td><td align="center">清除无效服务实例的时间间隔（ms），默认1分钟</td><td align="center">60000</td></tr><tr><td align="center"><strong>eureka.server.delta-retention-timer-interval-in-ms</strong></td><td align="center">清理无效增量信息的时间间隔（ms），默认30秒</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.disable-delta</strong></td><td align="center">禁用增量获取服务实例信息</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.log-identity-headers</strong></td><td align="center">是否记录登录日志</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-burst-size</strong></td><td align="center">限流大小</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-enabled</strong></td><td align="center">是否启用限流</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-full-fetch-average-rate</strong></td><td align="center">平均请求速率</td><td align="center">100</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-throttle-standard-clients</strong></td><td align="center">是否对标准客户端进行限流</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-registry-fetch-average-rate</strong></td><td align="center">服务注册与拉取的平均速率</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.rate-limiter-privileged-clients</strong></td><td align="center">信任的客户端列表</td><td align="center"></td></tr><tr><td align="center"><strong>eureka.server.renewal-percent-threshold</strong></td><td align="center">15分钟内续约服务的比例小于0.85，则开启自我保护机制，再此期间不会清除已注册的任何服务（即便是无效服务）</td><td align="center">0.85</td></tr><tr><td align="center"><strong>eureka.server.renewal-threshold-update-interval-ms</strong></td><td align="center">更新续约阈值的间隔（分钟），默认15分钟</td><td align="center">15</td></tr><tr><td align="center"><strong>eureka.server.response-cache-auto-expiration-in-seconds</strong></td><td align="center">注册信息缓存有效时长（s），默认180秒</td><td align="center">180</td></tr><tr><td align="center"><strong>eureka.server.response-cache-auto-expiration-in-seconds</strong></td><td align="center">注册信息缓存更新间隔（s），默认30秒</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.server.retention-time-in-m-s-in-delta-queue</strong></td><td align="center">保留增量信息时长（分钟），默认3分钟</td><td align="center">3</td></tr><tr><td align="center"><strong>eureka.server.sync-when-timestamp-differs</strong></td><td align="center">当时间戳不一致时，是否进行同步</td><td align="center">true</td></tr><tr><td align="center"><strong>eureka.server.use-read-only-response-cache</strong></td><td align="center">是否使用只读缓存策略</td><td align="center">true</td></tr></tbody></table><hr><h2 id="4-自定义工具设置"><a href="#4-自定义工具设置" class="headerlink" title="4. 自定义工具设置"></a>4. 自定义工具设置</h2><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>说明</strong></th><th></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.json-codec-name</strong></td><td align="center">Json编解码器名称</td><td></td></tr><tr><td align="center"><strong>eureka.server.property-resolver</strong></td><td align="center">属性解析器名称</td><td></td></tr><tr><td align="center"><strong>eureka.server.xml-codec-name</strong></td><td align="center">Xml编解码器名称</td><td></td></tr></tbody></table><h2 id="5-Eureka-Server-集群配置（eureka-server-）"><a href="#5-Eureka-Server-集群配置（eureka-server-）" class="headerlink" title="5. Eureka Server 集群配置（eureka.server.*）"></a>5. Eureka Server 集群配置（eureka.server.*）</h2><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>说明</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center"><strong>eureka.server.enable-replicated-request-compression</strong></td><td align="center">复制数据请求时，数据是否压缩</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.batch-replication</strong></td><td align="center">节点之间数据复制是否采用批处理</td><td align="center">false</td></tr><tr><td align="center"><strong>eureka.server.max-elements-in-peer-replication-pool</strong></td><td align="center">备份池最大备份事件数量，默认1000</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.max-elements-in-status-replication-pool</strong></td><td align="center">状态备份池最大备份事件数量，默认1000</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.max-idle-thread-age-in-minutes-for-peer-replication</strong></td><td align="center">节点之间信息同步线程最大空闲时间（分钟）</td><td align="center">15</td></tr><tr><td align="center"><strong>eureka.server.max-idle-thread-age-in-minutes-for-peer-replication</strong></td><td align="center">节点之间状态同步线程最大空闲时间（分钟）</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.max-threads-for-peer-replication</strong></td><td align="center">节点之间信息同步最大线程数量</td><td align="center">20</td></tr><tr><td align="center"><strong>eureka.server.max-threads-for-status-replication</strong></td><td align="center">节点之间状态同步最大线程数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.server.max-time-for-replication</strong></td><td align="center">节点之间信息复制最大通信时长（ms）</td><td align="center">3000</td></tr><tr><td align="center"><strong>eureka.server.min-available-instances-for-peer-replication</strong></td><td align="center">集群中服务实例最小数量，-1 表示单节点</td><td align="center">-1</td></tr><tr><td align="center"><strong>eureka.server.min-threads-for-peer-replication</strong></td><td align="center">节点之间信息复制最小线程数量</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.server.min-threads-for-status-replication</strong></td><td align="center">节点之间信息状态同步最小线程数量</td><td align="center">1</td></tr><tr><td align="center"><strong>eureka.server.number-of-replication-retries</strong></td><td align="center">节点之间数据复制时，可重试次数</td><td align="center">5</td></tr><tr><td align="center"><strong>eureka.server.peer-eureka-nodes-update-interval-ms</strong></td><td align="center">节点更新数据间隔时长（分钟）</td><td align="center">10</td></tr><tr><td align="center"><strong>eureka.server.peer-eureka-status-refresh-time-interval-ms</strong></td><td align="center">节点之间状态刷新间隔时长（ms）</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.peer-node-connect-timeout-ms</strong></td><td align="center">节点之间连接超时时长（ms）</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.server.peer-node-connection-idle-timeout-seconds</strong></td><td align="center">节点之间连接后，空闲时长（s）</td><td align="center">30</td></tr><tr><td align="center"><strong>eureka.server.peer-node-read-timeout-ms</strong></td><td align="center">几点之间数据读取超时时间（ms）</td><td align="center">200</td></tr><tr><td align="center"><strong>eureka.server.peer-node-total-connections</strong></td><td align="center">集群中节点连接总数</td><td align="center">1000</td></tr><tr><td align="center"><strong>eureka.server.peer-node-total-connections-per-host</strong></td><td align="center">节点之间连接，单机最大连接数量</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.registry-sync-retries</strong></td><td align="center">节点启动时，尝试获取注册信息的次数</td><td align="center">500</td></tr><tr><td align="center"><strong>eureka.server.registry-sync-retry-wait-ms</strong></td><td align="center">节点启动时，尝试获取注册信息的间隔时长（ms）</td><td align="center">30000</td></tr><tr><td align="center"><strong>eureka.server.wait-time-in-ms-when-sync-empty</strong></td><td align="center">在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间（分钟）</td><td align="center">5</td></tr></tbody></table><hr><blockquote><p>转载自：<a href="https://blog.csdn.net/rzpy_qifengxiaoyue/article/details/108132255"> Eureka配置参数详细说明_四月丶丶的博客-CSDN博客</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eureka详细配置&quot;&gt;&lt;a href=&quot;#Eureka详细配置&quot; class=&quot;headerlink&quot; title=&quot;Eureka详细配置&quot;&gt;&lt;/a&gt;Eureka详细配置&lt;/h1&gt;&lt;h2 id=&quot;1-Eureka-Client-配置项（eureka-client</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Middleware" scheme="https://devildyw.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://devildyw.github.io/2022/07/12/Spring%20Cloud/"/>
    <id>https://devildyw.github.io/2022/07/12/Spring%20Cloud/</id>
    <published>2022-07-12T03:17:39.000Z</published>
    <updated>2022-07-14T09:43:35.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Spring Cloud</code> 是分布式微服务架构的一站式解决方案，它提供了一套简单易用的编程模型，使我们能在 <code>Spring Boot</code> 的基础上轻松地实现微服务系统的构建。</p><p><code>Spring Cloud</code> 被称为构建分布式微服务系统的“全家桶”，它并不是某一门技术，而是一系列微服务解决方案或框架的有序集合。它将市面上成熟的、经过验证的微服务框架整合起来，并通过 <code>Spring Boot</code> 的思想进行再封装，屏蔽调其中复杂的配置和实现原理，最终为开发人员提供了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p><code>Spring Cloud</code> 中包含了 <code>spring-cloud-config</code>、<code>spring-cloud-bus</code> 等近 20 个子项目，提供了服务治理、服务网关、智能路由、负载均衡、断路器、监控跟踪、分布式消息队列、配置管理等领域的解决方案。</p><p>简单的说<code>Spring Cloud</code>提供了一套完美的一站式分布式微服务解决方案。</p><p><code>Spring Cloud</code> 本身并不是一个拿来即可用的框架，它是一套微服务规范，共有两代实现。</p><ul><li><code>Spring Cloud Netflix</code> 是 <code>Spring Cloud</code> 的第一代实现，主要由 <code>Eureka</code>、<code>Ribbon</code>、<code>Feign</code>、<code>Hystrix</code> 等组件组成。</li><li><code>Spring Cloud Alibaba</code> 是 <code>Spring Cloud</code> 的第二代实现，主要由 <code>Nacos</code>、<code>Sentinel</code>、<code>Seata</code> 等组件组成。</li></ul><hr><h2 id="微服务架构理论入门"><a href="#微服务架构理论入门" class="headerlink" title="微服务架构理论入门"></a>微服务架构理论入门</h2><p><strong>什么是微服务</strong></p><blockquote><p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.——James Lewis and Martin Fowler (2014)</p><p>微服务架构是一种架构模式，它提倡将单一应用程序划分为成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值，每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协议的<code>RESTful API</code>）。每个服务都围绕着本业务进行构建，并且能够独立的部署到生产环境，类生产环境等，另外应当避免统一的，集中式的服务管理机制，对具体的一个服务而言，根据业务上下文，选择合适的语言，工具对其进行构建。</p></blockquote><p>单体的架构不利于现在互联网的发展，举个栗子，假如你在某宝买了一件衣服，要去下订单，调用库存，支付，调用仓储和物流，收货成功了，给用户增加积分等等模块，一个一个的模块就是我们利用<code>springboot</code>开发的微服务，以前是一个单体应用，现在有很多模块，服务，就需要一种机制将多个服务管理起来，所以说<code>spingboot</code>就是一个一个的提供功能的微服务。</p><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h3 id="互联网时代下的数字生活"><a href="#互联网时代下的数字生活" class="headerlink" title="互联网时代下的数字生活"></a><strong>互联网时代下的数字生活</strong></h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20210117173514116.png" alt="在这里插入图片描述"></p><p>多个维度：手机、平板、笔记本都是不同厂家的,想要把他们联系起来互有交互,是很麻烦的。 我们可以使用同一个商家的不同产品,他们的产品之间有着自己的生态.。一个厂家提供的生态，兼容性就会比较好。</p><h3 id="基于分布式的微服务架构"><a href="#基于分布式的微服务架构" class="headerlink" title="基于分布式的微服务架构"></a>基于分布式的微服务架构</h3><p>满足那些维度？</p><p>支持起这些维度的具体技术？</p><p>SpringCloud官网给出了一张图</p><p><img src="https://spring.io/images/cloud-diagram-1a4cad7294b4452864b5ff57175dd983.svg" alt="Spring Cloud diagram"></p><p>总结可以得到，一个完整的基于分布式的微服务的架构需要满足以下要求。</p><ul><li>服务调用</li><li>服务降级</li><li>服务注册与发先</li><li>服务熔断</li><li>负载均衡</li><li>服务消息队列</li><li>服务网关</li><li>配置中心管理</li><li>自动化构建部署</li><li>服务监控</li><li>全链路追踪</li><li>服务定时任务</li><li>调度操作</li></ul><p>由前面我们也得知<code>SpringCloud</code> &#x3D; 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><p><strong><code>SpringCloud</code>所包含的技术</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/2021011719412960.png" alt="在这里插入图片描述"></p><p><code>SpringCloud</code> 已成为微服务开发的主流技术栈。</p><p>不同平台的分布式微服务架构</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/2b9f44abea91af3c4b77c1c77eae6eb3.png" alt="京东的"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/60b96a66ac3b4dceda8f7ac2f8d8d79e.png" alt="微服务的简单概括"></p><p><strong><code>SpringCloud</code>技术栈</strong></p><p>各个技术栈功能介绍</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/fa347f3da197c3df86bf5d36961c8cde.png" alt="netflix"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/b39a21012bed11a837c1edff840e5024.png" alt="img"></p><hr><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="SpringCloud的版本选型"><a href="#SpringCloud的版本选型" class="headerlink" title="SpringCloud的版本选型"></a><code>SpringCloud</code>的版本选型</h3><p><code>SpringCloud</code>版本不能盲目选择，SpringCloud的选择与SpringBoot版本选择有关，但是我们不用烦恼如何去选择版本，因为官方已经帮我们列了一张表了。</p><p><a href="https://spring.io/projects/spring-cloud">Spring Cloud官方文档</a></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713233202322.png" alt="image-20220713233202322"></p><p>通过上面这张图我们可以很清楚地看到，<code>SpringCloud</code>版本与<code>Spring Boot</code>版本之间的对应关系。</p><p>不仅如此，当你选择某个版本的<code>SpringCloud</code>版本的文档查看时，Spring官方还会为你选择<code>SpringCloud</code>版本推荐最最合适的<code>SpringBoot</code>版本。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713233517123.png" alt="image-20220713233517123"></p><p>本篇博客所编写的Demo将用到如下组件版本</p><blockquote><ul><li><code>SpringCloud - 2021.0.3</code> </li><li><code>SpringBoot - 2.6.8</code></li><li><code>SpringCloud Alibaba - 2021.1</code></li><li><code>Java - Jdk1.8</code></li><li><code>Maven - 3.5+</code></li><li><code>Mysql - 5.7</code></li></ul></blockquote><hr><h3 id="SpringCloud组件停更说明"><a href="#SpringCloud组件停更说明" class="headerlink" title="SpringCloud组件停更说明"></a><code>SpringCloud</code>组件停更说明</h3><ul><li><strong>停更引发的“升级惨案”</strong><ul><li>停更不停用</li><li>被动修复bugs</li><li>不再接受合并请求</li><li>不再发布新版本</li></ul></li><li><strong><code>SpringCloud</code>升级</strong><ul><li>服务注册中心<ul><li>× <code>Eureka</code></li><li>✔ <code>Zookeeper</code>(<code>Dubbo</code>官方推荐注册中心)</li><li>✔ <code>Consul</code>(<code>golang</code>语言编写)</li><li>✔ <code>Nacos</code>(<code>SpringCloud Alibaba</code> <code>Spring</code>官方推荐)</li></ul></li><li>服务调用<ul><li>✔ <code>Ribbon</code></li><li>✔ <code>LoadBalancer</code></li></ul></li><li>服务调用2<ul><li>× <code>Feign</code></li><li>✔ <code>OpenFeign</code></li></ul></li><li>服务降级<ul><li>× <code>Hystrix</code></li><li>✔ <code>resilience4j</code></li><li>✔ <code>sentienl</code></li></ul></li><li>服务网关<ul><li>× <code>Zuul</code></li><li>! <code>Zuul2</code>(<code>SpringCloud Netflix</code> 还未发布 疑似胎死腹中)</li><li>✔ <code>gateway</code></li></ul></li><li>服务配置<ul><li>× <code>Config</code></li><li>✔ <code>Nacos</code></li></ul></li><li>服务总线<ul><li>× <code>Bus</code></li><li>✔ <code>Nacos</code></li></ul></li></ul></li></ul><p><a href="https://docs.gitcode.net/spring/guide/spring-cloud/documentation-overview.html">Spring Cloud 文档 | 中文文档 </a></p><hr><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>一定要记住 <strong>约定 &gt; 配置 &gt; 编码</strong></p><p><strong>工程结构</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220713235303555.png" alt="image-20220713235303555"></p><ol><li><p>创建父工程管理子工程模块之间的版本依赖。</p><p><code>Cloud-01-HelloSpringCloud</code></p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-provide-payment-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.6.8--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 2021.0.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建子工程</p><p><code>Cloud-provide-payment-8001</code>服务生产者</p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-provide-payment-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud?useSSL=false&amp;characterEncoding=utf-8&amp;userUnicode=true</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span>       <span class="comment"># 初始线程数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span>        <span class="comment"># 最大线程数</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span>       <span class="comment"># 最大等待时间</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span>      <span class="comment"># 最大空闲实践</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dyw.springcloud.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p>建表语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for payment</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `payment`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `serial` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1547166640708214786</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>统一返回结果类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Mapper</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Payment&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务类</p><p><code>PaymentService</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">    Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayMentServiceImpl</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PaymentMapper paymentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.insert(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果:&#123;&#125;&quot;</span>, result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功&quot;</span>, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;插入数据失败&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果:&#123;&#125;&quot;</span>, payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;没有对应记录,查询ID:&quot;</span> + id, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>创建子工程</p><p><code>Cloud-consumer-order80</code></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#没有太多的配置 因为这里的子模块无需其他功能 只要能够调用生产者提供的服务即可</span></span><br></pre></td></tr></table></figure></li><li><p>实体类，和统一结构返回类与<code>Cloud-provide-payment-8001</code>相同</p></li><li><p><code>RestTemplate</code>配置类</p><p>在<code>SpringCloud</code>中服务之间的调用是通过<code>RestTemplate</code>(底层是<code>http</code>)访问的。这个类无需导入，导入的<code>spring-boot-starter-web</code>包中包含了，只需要通过配置类，将其注入<code>Spring</code>容器即可使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器类</p><p><code>OrderController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">createPayment</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>启动测试</p><p>当<code>Idea</code>检测到有多个服务运行时，会提供<code>Services</code>面板来帮助使用者管理服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714001043018.png" alt="image-20220714001043018"></p><p>启动成功后，调用消费者的接口查看是否能够有预期返回值。</p><p><code>GET : http://localhost:80/consumer/payment/get/1547118279208656900</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>POST : http://localhost:80/consumer/payment/create</code></p><p>请求参数: </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span><span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>优化重构工程</strong></p><p>从前面的步骤来看我们可以知道，有一部分是两个子模块公用的，那就是实体类部分和统一结果返回类，可以复用的部分，我们不妨将他们抽离出两个子模块单独做成一个模块供其他子模块使用。除此之外还可以存放一些可以共用的工具类。</p><p><strong>项目结构</strong></p><p><img src="C:\Users\Devil\AppData\Roaming\Typora\typora-user-images\image-20220714001613904.png" alt="image-20220714001613904"></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-01-HelloSpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有什么特别的配置，只需要满足提供共用的实体类和统一结果返回类即可。</p></li><li><p>剩下的便是将共用的类移入该模块中</p></li><li><p><code>maven :  install</code> 将子模块上传到本地仓库 也可<code>maven : deploy</code>将其部署到远端仓库中</p></li><li><p>其他子模块导包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><blockquote><p>注：Eureka中各个节点都是平等的，没有<code>ZK</code>中角色的概念，即使N-1个节点挂掉也不会影响其他节点的正常运行。</p></blockquote><p>虽然Eureka已经停止维护了，但是并不代表我们不去学习它，理解它的思想也是后来为学习其他注册中心打下基础。</p><blockquote><p>以下所有Demo都是基于上述入门案例改编。</p></blockquote><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p><code>Spring Cloud</code>封装<code>NetFlix</code>公司开发的<code>Eureka</code>模块来实现服务治理</p><p>那么什么事服务治理呢？</p><p>当服务较少的时候，可能我们根本不需要什么所谓的服务治理，会觉得这不就是中间商赚差价吗，为什么我能直接调用还要再中间加个服务治理呢？其实啊在传统的<code>RPC</code>框架中当服务多到一定程度时，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，熔断等，实现服务的注册与发现。</p><h3 id="服务注册-x2F-发现"><a href="#服务注册-x2F-发现" class="headerlink" title="服务注册&#x2F;发现"></a>服务注册&#x2F;发现</h3><p><code>Eureka</code>采用了<code>C/S</code>的设计架构，<code>Eureka Server</code>作为服务注册功能的服务器，他是服务注册中心。而系统中的其他微服务，使用<code>Eureka</code>的客户端连接到<code>Eureka Server</code>并维持心跳连接。这样系统的维护人员就可以通过<code>Eureka Server</code>来监控系统中各个微服务是否可以正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己的信息比如服务地址通讯地址等以别名的方式注册到注册中心上。另一方（消费者服务的提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址（<code>ip</code>地址），然后在实现本地<code>RPC</code>调用<code>RPC</code>远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与每个服务之间的依赖关系（服务治理概念）。在任何<code>RPC</code>远程调用框架中，都会有一个注册中心存放服务地址相关信息（接口地址）。</p><p>注册中心会维护所有注册到注册中心上的健康的服务的信息，当有消费者消费对应服务时，注册中心会返回服务的<code>ip</code>地址等信息，消费者在通过这些信息去远程调用服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/3956561052b9dc3909f16f1ff26d01bb.png" alt="img"></p><h3 id="Eureka组件"><a href="#Eureka组件" class="headerlink" title="Eureka组件"></a>Eureka组件</h3><p>前面我们了解到，<code>Eureka</code>是<code>C/S</code>结构的，它有两个组件    <strong><code>Eureka Server</code> 和 <code>EurekaClient</code></strong></p><h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p>提供服务注册服务，就是我们所说的<code>Eureka</code>的服务端，提供服务治理的相关功能。</p><p>各个微服务节点通过配置启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表中将会存储所有可用的服务节点的信息，服务节点的信息可用在界面中直观的看到。</p><h4 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>通过注册中心进行访问，<code>Eureka</code>的客户端，提供了与<code>Eureka</code>服务端交互的功能。</p><p>他是一个Java客户端，用于简化与<code>Eureka Server</code>的交互，客户端同时也具备一个内置的，使用轮询（<code>round-robin</code>）负载均衡算法的负载均衡器（用于同一个服务下多个提供者的情况），在应用启动后，将会</p><p>向<code>Eureka Server</code>发送心跳（默认周期30秒）。如果<code>Eureka Server</code>在多个心跳周期内没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除（默认90秒）。</p><h3 id="Eureka常用配置"><a href="#Eureka常用配置" class="headerlink" title="Eureka常用配置"></a>Eureka常用配置</h3><h4 id="Eureka-Server-1"><a href="#Eureka-Server-1" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><p><code>Eureka Server</code>配置参数的格式：<code>eureka.server.xxx</code>。</p><ul><li><code>enable-self-preservation</code>：<ul><li>表示注册中心是否开启服务的自我保护能力（后面会介绍）。</li></ul></li><li><code>renewal-percent-threshold</code>：<ul><li>表示 Eureka Server 开启自我保护的系数，默认：0.85。</li></ul></li><li><code>eviction-interval-timer-in-ms</code>：<ul><li>表示 <code>Eureka Server</code> 清理无效节点的频率，默认 60000 毫秒（60 秒）。</li></ul></li></ul><h4 id="Eureka-Instance"><a href="#Eureka-Instance" class="headerlink" title="Eureka Instance"></a>Eureka Instance</h4><p><code>Eureka Instance</code> 的配置参数格式：<code>eureka.instance.xxx</code>。</p><ul><li><code>instance-id</code>：<ul><li>表示实例在注册中心注册的唯一ID。</li></ul></li><li><code>prefer-ip-address</code>：<ul><li><code>true</code>：实例以 <code>IP</code> 的形式注册</li><li><code>false</code>：实例以机器 <code>HOSTNAME</code> 形式注册</li></ul></li><li><code>lease-expiration-duration-in-seconds</code>：<ul><li>表示 <code>Eureka Server</code> 在接收到上一个心跳之后等待下一个心跳的秒数（默认 90 秒），若不能在指定时间内收到心跳，则移除此实例，并禁止此实例的流量。</li><li>此值设置太长，即使实例不存在，流量也能路由到该实例</li><li>此值设置太小，由于网络故障，实例会被取消流量</li><li><strong>需要设置为至少高于 <code>lease-renewal-interval-in-seconds</code> 的值，不然会被误移除了。</strong></li></ul></li><li><code>lease-renewal-interval-in-seconds</code>：<ul><li>表示 <code>Eureka Client</code> 向 <code>Eureka Server</code> 发送心跳的频率（默认 30 秒），如果在 <code>lease-expiration-duration-in-seconds</code> 指定的时间内未收到心跳，则移除该实例。</li></ul></li></ul><h4 id="Eureka-Client-1"><a href="#Eureka-Client-1" class="headerlink" title="Eureka Client"></a>Eureka Client</h4><p>Eureka Client 的配置参数格式：<code>eureka.client.xxx</code>。</p><ul><li><code>register-with-eureka</code>：<ul><li>表示此实例是否注册到 Eureka Server 以供其他实例发现。在某些情况下，如果你不想自己的实例被发现，而只想发现其他实例，配置为 false 即可。</li></ul></li><li><code>fetch-registry</code>：<ul><li>表示客户端是否从 Eureka Server 获取实例注册信息。</li></ul></li><li><code>serviceUrl.defaultZone</code>：<ul><li>表示客户端需要注册的 Eureka Server 的地址。</li></ul></li></ul><h4 id="用到的其他参数"><a href="#用到的其他参数" class="headerlink" title="用到的其他参数"></a>用到的其他参数</h4><ul><li><code>spring.application.name</code>：<ul><li>表示应用名称，在注册中心中显示的服务注册名称。</li></ul></li><li><code>spring.cloud.client.ip-address</code>：<ul><li>获取客户端的 <code>IP</code> 地址。</li></ul></li></ul><p><strong>上面讲的 Eureka 某些参数都可以可以在 Eureka 控制台上面找到</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714140318475.png" alt="image-20220714140318475"></p><p>Eureka 控制台上面的其他参数都可以定制。</p><blockquote><p>Eureka详细配置：<a href="https://devildyw.github.io/2022/07/14/Eureka%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/">Eureka详细配置</a></p></blockquote><h3 id="搭建一个Eureka-服务端"><a href="#搭建一个Eureka-服务端" class="headerlink" title="搭建一个Eureka 服务端"></a>搭建一个Eureka 服务端</h3><p>根据前文我们可以知道要搭建一个<code>Eureka</code>服务器，需要用到<code>Eureka Server</code></p><p>父工程的话<code>pom.xml</code>与上述入门案例一致。</p><p>创建Eureka服务端工程<code>Cloud-eureka-server7001</code></p><p>项目结构：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141129475.png" alt="image-20220714141129475"></p><ol><li><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-02-Eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表示该模块为Eureka的注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaMain7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在启动类的头上加上<code>@EnableEurekaServer</code>注解，表示该模块为Eureka服务端。 </p></li><li><p>启动</p><p>启动后访问yml中的<code>http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/</code>地址看到如下界面表示成功。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714141438302.png" alt="image-20220714141438302"></p><p><strong>上述便是单机版Eureka注册中心的搭建了</strong></p><h3 id="支付微服务8001注册到Eureka-Server中"><a href="#支付微服务8001注册到Eureka-Server中" class="headerlink" title="支付微服务8001注册到Eureka Server中"></a>支付微服务8001注册到Eureka Server中</h3><p>将入门案例中的<code>Cloud-provide-payment-8001</code>复制粘贴到Eureka工程中并改名为<code>Cloud-eureka-provider-payment8001</code>业务部分不用更改 主要是<code>pom.xml</code>和<code>application.yml</code>的修改</p><ol><li><p>改<code>pom.xml</code>新增依赖<code>spring-cloud-starter-netflix-eureka-client</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>改<code>application.yml</code> 新增Eureka配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#要注册到的注册中心的地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#指定实例名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示ip</span></span><br></pre></td></tr></table></figure></li><li><p>启动类修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是将服务注册到注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714154834760.png" alt="image-20220714154834760"></p><p>可以通过<code>Eureka DashBoard</code>发现服务已经注册进了注册中心，实例的名称也是我们yml中指定的，服务名则是我们<code>spring.application.name</code>。</p></li></ol></li></ol><h3 id="订单微服务80入驻进Eureka-Server中"><a href="#订单微服务80入驻进Eureka-Server中" class="headerlink" title="订单微服务80入驻进Eureka Server中"></a>订单微服务80入驻进Eureka Server中</h3><p>将入门案例中的<code>Cloud-consumer-order80</code>复制到Eureka工程中，改名为<code>Cloud-eureka-consumer-order80</code>我们要做的也是修改<code>pom.xml</code>和<code>application.yml</code></p><ol><li><p>修改<code>pom.xml</code> 添加<code>spring-cloud-starter-netflix-eureka-client</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code> 添加Eureka相关配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#指定实例id 不指定注册中心中显示的就是ip的格式</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//添加该注解提供与客户端的交互 这里是消费注册中心中的服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改业务类<code>Controller</code></p><p>注册到注册中心上的服务，需要使用服务提供者注册到注册中心的服务名称代替<code>ip地址:端口</code>的方式调用。单个提供者时，使用真实<code>ip地址:端口</code>与使用服务名称是没有区别的，但是当服务提供者是以集群的方式提供服务，那么这是想要使用负载均衡功能时，就必须使用这种方式了。均衡算法会返回一个正确<code>ip:端口</code>。</p><p><code>OrderController</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里配置成服务名称其实也是一种规范，从一开始我们就提到了 <strong>约定 &gt; 配置 &gt; 编码</strong></p></li><li><p>启动测试</p><p><code>GET : http://localhost:80/consumer/payment/get/1547118279208656900</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;查询成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1547118279208656900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h3><p>​    <img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/14570c4b7c4dd8653be6211da2675e45.png" alt="img"></p><p><strong>Eureka 集群，实际上就是启动多个 Eureka 实例，多个 Eureka 实例之间，互相注册，互相同步数据，共同组成一个 Eureka 集群。</strong></p><p>得到8个字<strong>互相注册，相互守望</strong>。</p><p>问题:微服务<code>RPC</code>远程服务调用最核心的是什么？<br>高可用，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。</p><p>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。</p><h3 id="搭建Eureka集群"><a href="#搭建Eureka集群" class="headerlink" title="搭建Eureka集群"></a>搭建Eureka集群</h3><p>本地机为了演示Eureka集群 需要修改电脑的hosts文件</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714161642589.png" alt="image-20220714161642589"></p><p>原理我们已经直到，就是需要再搭建一个Eureka注册中心<code>Cloud-eureka-server7002</code>，让我们原来搭建的Eureka注册中心和现在这个相互注册，使其相互同步数据。 </p><p>搭建步骤这里不再演示只说这里需要更改的地方</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7002.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><hr><p><code>Cloud-eureka-server7002</code></p><p> <code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址 注册到eureka7001.com上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>启动后观看Eureka Dashboard</p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162757151.png" alt="image-20220714162757151"></p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714162843103.png" alt="image-20220714162843103"></p><p>可用发现两个注册中心的<code>DS Replicas</code>出现了对方的注册的实例名称，说明集群搭建成功。</p><p>这里我们启动<code>Cloud-eureka-provider-payment8001</code>使其<code>eureka7001.com</code>对应的注册中心上。</p><p><code>http://eureka7002.com:7002/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163426520.png" alt="image-20220714163426520"></p><p><code>http://eureka7001.com:7001/</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714163501059.png" alt="image-20220714163501059"></p><p>可用发现<code>http://eureka7002.com:7002/</code>上同样出现了我们注册的服务。这就是集群，集群的各个节点之间相互同步信息，防止单一节点宕机的问题。</p><hr><h3 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h3><p>在实际开发中，不仅需要防止注册中心的单一节点宕机问题，服务提供者同样需要，不仅仅是为了防止宕机，同样也是为了提升服务的性能，服务提供者的集群不需要相互同步之间的信息，而是需要避免单一节点承受不住大量请求，导致反应慢或是请求失败等情况，同一服务新增节点集群 搭配上负载均衡，可以提升性能提高用户体验。</p><p>与Eureka搭建集群相似，没有什么特殊的改变，就是简单创建一个与之前服务相同工程<code>Cloud-eureka-provider-payment8002</code></p><p>修改部分<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"> <span class="string">...</span> <span class="comment">#其他部分相同这里省略</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span> <span class="comment">#实例名称 如果不配置 到时Eureka注册中心中显示的就是IP的格式</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-provider-payment8002</code>和<code>Cloud-eureka-provider-payment8001</code>以及Eureka注册中心。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714164450602.png" alt="image-20220714164450602"></p><p>可以发现同一个服务名称下面出现了两个服务实例，这也正是我们所配置的名称。</p><p>测试</p><p><strong>注意： 当服务以集群出现时如果采用了用服务名称代替<code>ip</code>+端口的格式的话 需要在<code>RestTemplate</code>配置类下配置<code>@LoadBalanced</code> 实现负载均衡 否则会出现访问报错</strong></p><p><code>RestTemplateConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//开启RestTemplate的负载均衡功能</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且为了方便查看负载均衡，我们在Controller的返回结果中加上了他们各自的端口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8002</span>; <span class="comment">//Cloud-eureka-provider-payment8002</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8001</span>; <span class="comment">//Cloud-eureka-provider-payment8001</span></span><br></pre></td></tr></table></figure><p>访问接口 <code>POST : http://localhost:80/consumer/payment/create</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8002&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插入数据库成功,serverPort:8001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="DiscoveryClient"><a href="#DiscoveryClient" class="headerlink" title="DiscoveryClient"></a><code>DiscoveryClient</code></h3><p>对于注册进eureka里面的微服务，可以通过<code>DiscoveryClient</code>来获得该服务的信息</p><p><code>DiscoveryClient</code>提供了获取注册中心中注册服务信息的<code>API</code></p><p><strong>使用</strong></p><p>修改<code>Cloud-eureka-provider-payment8002</code>的<code>Controller</code> 新增</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增接口 查看注册中心服务信息</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取注册中心里面的所有暴露的服务</span></span><br><span class="line">       List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">       <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;*****element:&#123;&#125;&quot;</span>,service);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//获取指定服务实例名称对应的实例信息</span></span><br><span class="line">       List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">           log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getInstanceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getUri()+<span class="string">&quot;\t&quot;</span>+instance.getPort());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动类新增注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//添加该注解 使其该微服务支持Discovery</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试</p><p><code>GET : http://localhost:8002/payment/discovery</code> </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;services&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;cloud-payment-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cloud-order-service&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170357151.png" alt="image-20220714170357151"></p><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><p><strong>概述</strong></p><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区（由于网络波动等原因引起）场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p><strong>官方对于自我保护机制的定义</strong></p><blockquote><p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p></blockquote><p><strong>自我保护机制的工作机制</strong></p><p>自我保护机制的工作机制是：<strong>如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</strong>，此时会出现以下几种情况：</p><ol><li>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li><li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可用。</li><li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</li></ol><p>因此<code>Eureka Server</code>可以很好的应对因网络故障导致部分节点失联的情况，而不会像<code>ZK</code>那样如果有一半不可用的情况会导致整个集群不可用而变成瘫痪。</p><p><strong>为什么会产生Eureka自我保护机制?</strong></p><p>该功能防止节点因为网络波动导致心跳检测信息不能及时发送到注册中心，但节点本身没有问题的情况。如果关闭了自我保护机制，一旦检测到某个节点没有在指定时间内发送心跳包，就会将该节点剔除。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714170747792.png" alt="image-20220714170747792"></p><p>从这个机制可以看出Eureka满足了CAP理论中的AP分支。即达到了100%可用性和100%分区容错性。</p><p><strong>什么是自我保护机制?</strong></p><p>默认情况下，如果<code>EurekaServer</code>在一定时间内没有接收到某个微服务实例的心跳，<code>EurekaServer</code>将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与<code>EurekaServer</code>之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。<code>Eureka</code>通过“自我保护模式”来解决这个问题——当<code>EurekaServer</code>节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。</p><p>自我保护机制∶默认情况下<code>EurekaClient</code>定时向<code>EurekaServer</code>端发送心跳包，如果Eureka在server端在一定时间内(默认90秒)没有收到<code>EurekaClient</code>发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，这时候<code>Eurekaserver</code>会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是<code>EurekaClient</code>为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。也正如官方所说的使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p><hr><h3 id="自我保护开关"><a href="#自我保护开关" class="headerlink" title="自我保护开关"></a>自我保护开关</h3><p>Eureka自我保护机制，通过配置 <code>eureka.server.enable-self-preservation</code> 来<code>true</code>打开&#x2F;<code>false</code>禁用自我保护机制，默认打开状态，建议生产环境打开此配置。</p><p>如果要实现服务失效自动移除，只需要修改以下配置</p><h5 id="1、-注册中心关闭自我保护机制，修改检查失效服务的时间。"><a href="#1、-注册中心关闭自我保护机制，修改检查失效服务的时间。" class="headerlink" title="1、 注册中心关闭自我保护机制，修改检查失效服务的时间。"></a>1、 注册中心关闭自我保护机制，修改检查失效服务的时间。</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">     <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">     <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h5 id="2、-微服务修改减短服务心跳的时间。"><a href="#2、-微服务修改减短服务心跳的时间。" class="headerlink" title="2、 微服务修改减短服务心跳的时间。"></a>2、 微服务修改减短服务心跳的时间。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认90秒</span></span><br><span class="line">lease-expiration-duration-in-seconds:  10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认30秒</span></span><br><span class="line">lease-renewal-interval-in-seconds:  3</span><br></pre></td></tr></table></figure><blockquote><p>以上配置建议在生产环境使用默认的时间配置。</p></blockquote><p>根据如上我们可以根据需求关闭注册中心的自我保护机制。</p><p><code>Cloud-eureka-server7001</code> </p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#关闭节点自我保护机制 默认是开启 关闭后如果在有限的心跳检测时间范围内节点没有及时发送心跳包 就将该服务节点从服务列表中踢出</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置心跳检测时间</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p><code>Cloud-eureka-provider-payment8002</code></p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="string">....</span> <span class="comment"># 省略配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer 默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息,默认为true.单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认为30秒)</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限,单位为秒(默认是90秒),超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line"><span class="string">...</span> <span class="comment">#省略配置</span></span><br></pre></td></tr></table></figure><p>启动<code>Cloud-eureka-server7001</code> 和<code>Cloud-eureka-provider-payment8002</code></p><p>界面中会出现这么一句话</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220714173719274.png" alt="image-20220714173719274"></p><p>表示自我保护机制以及关闭</p><p>此时关闭<code>Cloud-eureka-provider-payment8002</code>Eureka会立刻剔除该服务。</p><h3 id="Eureka停更说明"><a href="#Eureka停更说明" class="headerlink" title="Eureka停更说明"></a>Eureka停更说明</h3><p><a href="https://github.com/Netflix/eureka/wiki">Netflix-eureka</a></p><blockquote><p>Eureka 2.0 (Discontinued)</p><p>The existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.</p><p>Eureka 1.x is a core part of Netflix’s service discovery system and is still an active project.</p></blockquote><p>虽然Eureka停更了，但是<code>Spring Cloud</code>也有着许多其他功能更为丰富更为优秀的服务治理组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="分布式" scheme="https://devildyw.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab持续集成/持续部署</title>
    <link href="https://devildyw.github.io/2022/07/10/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://devildyw.github.io/2022/07/10/Gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</id>
    <published>2022-07-10T05:45:18.000Z</published>
    <updated>2022-07-12T04:09:06.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab持续集成-x2F-持续部署"><a href="#Gitlab持续集成-x2F-持续部署" class="headerlink" title="Gitlab持续集成&#x2F;持续部署"></a><a href="http://www.pymjl.com/articles/67">Gitlab持续集成&#x2F;持续部署</a></h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><code>docker</code>环境下直接执行这条命令，安装 <code>Runner</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name gitlab-runner --restart always \</span><br><span class="line">-v /home/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><pre><code>    2. 注册服务 `url `和 `token `在`gitlab`左边的设置展开`runner`即可看到</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab-runner  gitlab-runner register -n \</span><br><span class="line">  --url https://git.pyhub.club/ \</span><br><span class="line">  --registration-token gsh33g31h2Q1E3szh4Jd \</span><br><span class="line">  --description <span class="string">&quot;docker deploy&quot;</span> \</span><br><span class="line">  --docker-privileged=<span class="literal">true</span> \</span><br><span class="line">  --docker-pull-policy=<span class="string">&quot;if-not-present&quot;</span> \</span><br><span class="line">  --docker-image <span class="string">&quot;docker:latest&quot;</span> \</span><br><span class="line">  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --docker-volumes /root/m2:/root/.m2 \</span><br><span class="line">  --executor docker</span><br></pre></td></tr></table></figure><ol start="3"><li>写配置文件<code> .gitlab-ci.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/root/.m2/settings.xml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;&lt;?xml version=\&quot;&quot;</span><span class="number">1.0</span><span class="string">\&quot;&quot;</span> <span class="string">encoding=\&quot;&quot;UTF-8\&quot;&quot;?&gt;&lt;settings</span> <span class="string">xmlns=\&quot;&quot;http://maven.apache.org/SETTINGS/1.0.0\&quot;&quot;</span> <span class="string">xmlns:xsi=\&quot;&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&quot;</span> <span class="string">xsi:schemaLocation=\&quot;&quot;http://maven.apache.org/SETTINGS/1.0.0</span> <span class="string">http://maven.apache.org/xsd/settings-1.0.0.xsd\&quot;&quot;&gt;&lt;mirrors&gt;&lt;mirror&gt;&lt;id&gt;mirror&lt;/id&gt;&lt;name&gt;mirror&lt;/name&gt;&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;mirrorOf&gt;central,jcenter,!rdc-releases,!rdc-snapshots&lt;/mirrorOf&gt;&lt;/mirror&gt;</span> <span class="string">&lt;/mirrors&gt;</span>     <span class="string">&lt;servers&gt;</span></span><br><span class="line">        <span class="string">&lt;server&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;username&gt;617d503fbc6f250a94c5d6ec&lt;/username&gt;</span></span><br><span class="line">            <span class="string">&lt;password&gt;VDzlsL5jYZot&lt;/password&gt;</span></span><br><span class="line">        <span class="string">&lt;/server&gt;</span></span><br><span class="line">        <span class="string">&lt;server&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;username&gt;617d503fbc6f250a94c5d6ec&lt;/username&gt;</span></span><br><span class="line">            <span class="string">&lt;password&gt;VDzlsL5jYZot&lt;/password&gt;</span></span><br><span class="line">        <span class="string">&lt;/server&gt;</span></span><br><span class="line">    <span class="string">&lt;/servers&gt;</span></span><br><span class="line">    <span class="string">&lt;profiles&gt;</span></span><br><span class="line">        <span class="string">&lt;profile&gt;</span></span><br><span class="line">            <span class="string">&lt;id&gt;rdc&lt;/id&gt;</span></span><br><span class="line">            <span class="string">&lt;properties&gt;</span></span><br><span class="line">                <span class="string">&lt;altReleaseDeploymentRepository&gt;</span></span><br><span class="line">                    <span class="string">rdc-releases::default::https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/</span></span><br><span class="line">                <span class="string">&lt;/altReleaseDeploymentRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;altSnapshotDeploymentRepository&gt;</span></span><br><span class="line">                    <span class="string">rdc-snapshots::default::https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/</span></span><br><span class="line">                <span class="string">&lt;/altSnapshotDeploymentRepository&gt;</span></span><br><span class="line">            <span class="string">&lt;/properties&gt;</span></span><br><span class="line">            <span class="string">&lt;repositories&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;central&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">                <span class="string">&lt;repository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/repository&gt;</span></span><br><span class="line">            <span class="string">&lt;/repositories&gt;</span></span><br><span class="line">            <span class="string">&lt;pluginRepositories&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;central&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-releases&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-release-4Nd0Uf/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">                <span class="string">&lt;pluginRepository&gt;</span></span><br><span class="line">                    <span class="string">&lt;id&gt;rdc-snapshots&lt;/id&gt;</span></span><br><span class="line">                    <span class="string">&lt;url&gt;https://packages.aliyun.com/maven/repository/2150952-snapshot-LmgYUo/&lt;/url&gt;</span></span><br><span class="line">                    <span class="string">&lt;releases&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;false&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/releases&gt;</span></span><br><span class="line">                    <span class="string">&lt;snapshots&gt;</span></span><br><span class="line">                        <span class="string">&lt;enabled&gt;true&lt;/enabled&gt;</span></span><br><span class="line">                    <span class="string">&lt;/snapshots&gt;</span></span><br><span class="line">                <span class="string">&lt;/pluginRepository&gt;</span></span><br><span class="line">            <span class="string">&lt;/pluginRepositories&gt;</span></span><br><span class="line">        <span class="string">&lt;/profile&gt;</span></span><br><span class="line">    <span class="string">&lt;/profiles&gt;</span></span><br><span class="line">    <span class="string">&lt;activeProfiles&gt;</span></span><br><span class="line">        <span class="string">&lt;activeProfile&gt;rdc&lt;/activeProfile&gt;</span></span><br><span class="line">    <span class="string">&lt;/activeProfiles&gt;</span></span><br><span class="line">    <span class="string">&lt;/settings&gt;&quot;</span> <span class="string">&gt;</span> <span class="string">/root/.m2/settings.xml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">jar_name:</span> <span class="string">fileservice-0.0.1-SNAPSHOT.jar</span></span><br><span class="line">  <span class="attr">java_path:</span> <span class="string">/usr/local/jdk/jdk1.8.0_321/bin</span></span><br><span class="line">  <span class="attr">TAG:</span> <span class="string">file-service:v1.0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">file-service</span></span><br><span class="line">  <span class="attr">PORT:</span> <span class="number">8900</span></span><br><span class="line">  <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5.0-jdk-8</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">fileservice</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">m2-repo</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fileservice/target/$jar_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span> <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$TAG</span> <span class="string">.</span> <span class="comment"># 构件镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$CONTAINER_NAME</span> <span class="string">||</span> <span class="literal">true</span> <span class="comment"># 删除容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">--net=host</span> <span class="string">$TAG</span> <span class="comment"># 运行容器</span></span><br><span class="line">  <span class="attr">only:</span> <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:  <a href="http://www.pymjl.com/articles/67">pymjl大佬的- gitlab持续集成&#x2F;持续部署</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gitlab持续集成-x2F-持续部署&quot;&gt;&lt;a href=&quot;#Gitlab持续集成-x2F-持续部署&quot; class=&quot;headerlink&quot; title=&quot;Gitlab持续集成&amp;#x2F;持续部署&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.pymjl.co</summary>
      
    
    
    
    <category term="DevOps" scheme="https://devildyw.github.io/categories/DevOps/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>应用上下文工具类</title>
    <link href="https://devildyw.github.io/2022/07/03/%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://devildyw.github.io/2022/07/03/%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-07-03T06:39:42.000Z</published>
    <updated>2022-07-03T06:44:54.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用上下文工具类-ApplicationContextUtil"><a href="#应用上下文工具类-ApplicationContextUtil" class="headerlink" title="应用上下文工具类(ApplicationContextUtil)"></a>应用上下文工具类(ApplicationContextUtil)</h2><p>该类可以帮助我们获取得到Spring容器中的Bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.shirospringboot.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-07-03-14:24</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该工具类主要是用于那些没有被Spring容器管理的类来使用Spring管理的Bean的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        ApplicationContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name,以及Clazz返回指定的Bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实现了<code>ApplicationContextAware</code>接口，实现<code>void setApplicationContext(ApplicationContext applicationContext) throws BeansException;</code>方法</p><p><code>setApplicationContext</code>方法会在初始化对象的的时候调用，这时Spring会将<code>ApplicationContext</code>（即Spring的<code>IOC</code>容器）注入该对象，通过该方法接收。</p><p>接收到之后我们就可以通过这个容器对象按需取出里面的Bean了。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>当我们正在使用的类并没有被带上加入如<code>@Component</code>、<code>@Service</code>等注解时，我们的类的生命周期是不受Spring容器管理的，这时我们的类中配置的各种以便于Spring注入的注解是不会生效的。所以这时我们需要一个可以帮助我们从Spring容器中手动获取Bean的工具类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;应用上下文工具类-ApplicationContextUtil&quot;&gt;&lt;a href=&quot;#应用上下文工具类-ApplicationContextUtil&quot; class=&quot;headerlink&quot; title=&quot;应用上下文工具类(ApplicationContextUti</summary>
      
    
    
    
    <category term="spring框架" scheme="https://devildyw.github.io/categories/spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>HelloDocker!</title>
    <link href="https://devildyw.github.io/2022/07/02/Hello%20Docker!/"/>
    <id>https://devildyw.github.io/2022/07/02/Hello%20Docker!/</id>
    <published>2022-07-02T15:30:35.000Z</published>
    <updated>2022-07-02T15:34:41.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hello-Docker"><a href="#Hello-Docker" class="headerlink" title="Hello Docker !"></a>Hello Docker !</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox官方镜像，启动容器并执行输出&quot;Hello Docker&quot;</span></span><br><span class="line"><span class="comment">#拉取busybox官方最新镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -it busybox <span class="built_in">echo</span> <span class="string">&quot;Hello Docker&quot;</span></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox:1.27镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker pull busybox:1.27</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建并启动一个容器，容器名为firstContainer，具备busybox的运行环境。并输出hello world</span></span><br><span class="line"><span class="comment">#拉取busybox最新镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --name firstContainer busybox <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以ubuntu镜像为基础，创建并在后台启动了一个名为firstContainer的容器（-d看不懂没关系，下一关会介绍的）</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull ubutun可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker run -itd --name firstContainer ubuntu /bin/bash</span><br><span class="line"><span class="comment">#将firstContainer容器停止！</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker stop firstContainer</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="进入一个容器"><a href="#进入一个容器" class="headerlink" title="进入一个容器"></a>进入一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于ubuntu镜像创建并在后台启动一个名为container2的容器</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull ubutun可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker run -itd --name container2 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#由于测试环境不允许从终端输入，所以请使用docker exec完成任务</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">exec</span> container2 <span class="built_in">touch</span> 1.txt</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意如果想在右侧使用命令行模拟操作，请先输入</span></span><br><span class="line"><span class="comment">#service docker start</span></span><br><span class="line"><span class="comment">#否则将不能执行docker命令</span></span><br><span class="line"><span class="comment">#拉取ubutun ，busybox最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment">#创建两个容器</span></span><br><span class="line">docker run -itd ubuntu /bin/bash</span><br><span class="line">docker run busybox <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">#删除所有容器</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="基于Commit定制镜像"><a href="#基于Commit定制镜像" class="headerlink" title="基于Commit定制镜像"></a>基于Commit定制镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox镜像创建一个容器，在容器中创建一个hello.txt的文件。</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line">docker run --name container1 busybox <span class="built_in">touch</span> hello.txt</span><br><span class="line"><span class="comment">#将对容器container1做出的修改提交为一个新镜像，镜像名为busybox:v1</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker commit container1 busybox:v1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="基于save保存镜像与基于load加载镜像"><a href="#基于save保存镜像与基于load加载镜像" class="headerlink" title="基于save保存镜像与基于load加载镜像"></a>基于save保存镜像与基于load加载镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先拉取一个busybox镜像</span></span><br><span class="line">docker pull busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.将busybox:latest镜像保存到tar包</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker save busybox:latest &gt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除busybox:latest镜像</span></span><br><span class="line">docker rmi busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.从tar包加载busybox:latest镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker load &lt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox为镜像创建一个容器，容器名为busyboxContainer</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line">docker run --name busyboxContainer busybox <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#1.然后将busyboxContainer导出为容器快照：busybox.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">export</span> busyboxContainer &gt; busybox.tar</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.最后使用该容器快照导入镜像，镜像名为busybox:v1.0。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="built_in">cat</span> busybox.tar | docker import - busybox:v1.0</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以busybox为基础镜像创建一个容器，容器名为container3</span></span><br><span class="line"><span class="comment">#拉取busybox 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line">docker run --name container3 busybox:latest <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#然后将busybox:latest镜像删除</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker rmi -f busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="构建私有Registry"><a href="#构建私有Registry" class="headerlink" title="构建私有Registry"></a>构建私有Registry</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建一个私人仓库</span></span><br><span class="line">docker pull registry:2</span><br><span class="line">docker run -d -p 5000:5000 --restart=always --name myregistry registry:2</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取busybox镜像</span></span><br><span class="line">docker pull busybox</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.使用docker tag给busybox加上一个标签localhost:5000/my-busybox:latest</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker tag busybox localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.将localhost:5000/my-busybox:latest镜像推送到私人仓库</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker push localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除本地镜像</span></span><br><span class="line">docker rmi localhost:5000/my-busybox:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.从私人仓库拉取localhost:5000/my-busybox:latest镜像</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker pull localhost:5000/my-busybox:latest</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除私人仓库并将私人仓库中的镜像也删除掉</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf myregistry</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir1</span><br><span class="line"><span class="built_in">cd</span> newdir1</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在基础镜像的基础上，创建一个hello.txt文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#使用Dockerfile创建一个新镜像，镜像名为busybox:v1</span></span><br><span class="line">docker build -t busybox:v1 .</span><br></pre></td></tr></table></figure><h3 id="docker-build、COPY和ADD"><a href="#docker-build、COPY和ADD" class="headerlink" title="docker build、COPY和ADD"></a>docker build、COPY和ADD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir2</span><br><span class="line"><span class="built_in">cd</span> newdir2</span><br><span class="line"><span class="comment">#创建一个文件夹dir1，将其压缩，然后删除dir1</span></span><br><span class="line"><span class="built_in">mkdir</span> dir1 &amp;&amp; tar -cvf dir1.tar dir1 &amp;&amp; <span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#并将上下文目录下的dir1.tar“解压提取后”，拷贝到busybox:v3的/</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;RUN mkdir dir1&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ADD ./dir1.tar /&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为busybox:v3的镜像</span></span><br><span class="line">docker build -t busybox:v3 .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="CMD和ENTRYPOINT指令"><a href="#CMD和ENTRYPOINT指令" class="headerlink" title="CMD和ENTRYPOINT指令"></a>CMD和ENTRYPOINT指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir3</span><br><span class="line"><span class="built_in">cd</span> newdir3</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#默认情况下，将启动命令设置为df -Th。要求df命令不能被覆盖，但-Th能够被覆盖。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ENTRYPOINT [&quot;df&quot;]&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;CMD [&quot;-Th&quot;]&#x27;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为mydisk:latest的镜像</span></span><br><span class="line">docker build -t mydisk:latest .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="ENV、EXPOSE、WORKDIR、ARG指令"><a href="#ENV、EXPOSE、WORKDIR、ARG指令" class="headerlink" title="ENV、EXPOSE、WORKDIR、ARG指令"></a>ENV、EXPOSE、WORKDIR、ARG指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空文件夹，并进入其中</span></span><br><span class="line"><span class="built_in">mkdir</span> newdir4</span><br><span class="line"><span class="built_in">cd</span> newdir4</span><br><span class="line"><span class="comment">#创建一个Dockerfile文件</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile</span><br><span class="line"><span class="comment">#假设我的Dockerfile文件为</span></span><br><span class="line"><span class="comment">#FROM ubuntu</span></span><br><span class="line"><span class="comment">#RUN mkdir dir1</span></span><br><span class="line"><span class="comment">#可以这么写：</span></span><br><span class="line"><span class="comment"># echo &#x27;FROM ubuntu&#x27; &gt; Dockerfile</span></span><br><span class="line"><span class="comment"># echo &#x27;RUN mkdir dir1&#x27;&gt;&gt; Dockerfile</span></span><br><span class="line"><span class="comment">#输入Dockerfile文件内容</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以busybox为基础镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;FROM busybox&#x27;</span> &gt; Dockerfile</span><br><span class="line"><span class="comment">#声明暴露3000端口</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;EXPOSE 3000&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#将变量var1=test设置为环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ENV var1=test&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#设置工作目录为/tmp</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;WORKDIR /tmp&#x27;</span>&gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#在工作目录下创建一个1.txt文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;RUN touch 1.txt&quot;</span> &gt;&gt; Dockerfile</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#文件内容完毕，在当前文件夹中执行</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line"><span class="comment">#以该Dockerfile构建一个名为testimage:v1的镜像</span></span><br><span class="line">docker build -t testimage:v1 .</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名为vo1的数据卷，并将该数据卷挂载到container1容器的/dir1目录。</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker volume create vo1</span><br><span class="line">docker run -itd --name container1 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="挂载和共享数据卷"><a href="#挂载和共享数据卷" class="headerlink" title="挂载和共享数据卷"></a>挂载和共享数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建一个名为container1的容器，并将本地主机的/dir1目录挂载到容器中的/codir1中。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -d --name container1 -v /dir1:/codir1 ubuntu </span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#2.创建一个名为container2的容器，与container1共享数据卷。</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run -d --name container2 --volumes-from container1 ubuntu</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看数据卷的信息"><a href="#查看数据卷的信息" class="headerlink" title="查看数据卷的信息"></a>查看数据卷的信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个容器，并创建一个随机名字的数据卷挂载到容器的/data目录</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu &amp;&gt; /dev/null </span><br><span class="line">docker <span class="built_in">rm</span> container1 -f &amp;&gt;/dev/null</span><br><span class="line">docker run -v /data --name container1 ubuntu</span><br><span class="line"><span class="comment">#输出容器container1创建的数据卷的名字</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker inspect --<span class="built_in">type</span> container --format=<span class="string">&#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;.Name&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> container1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个名为container1的容器，创建一个数据卷挂载到容器的/data目录</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"></span><br><span class="line">docker run -v vo4:/data --name container1 ubuntu</span><br><span class="line"><span class="comment">#删除container1对应的数据卷</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker <span class="built_in">rm</span> -f -v container1</span><br><span class="line">docker volume <span class="built_in">rm</span> vo4</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="备份、恢复数据卷"><a href="#备份、恢复数据卷" class="headerlink" title="备份、恢复数据卷"></a>备份、恢复数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"><span class="comment"># 创建一个vo1的数据卷，并在数据卷中添加1.txt文件</span></span><br><span class="line">docker run --name vocontainer1 -v vo1:/dir1 ubuntu <span class="built_in">touch</span> /dir1/1.txt</span><br><span class="line"><span class="comment">#1.将vo1数据卷的数据备份到宿主机的/newback中,将容器的/backup路径挂载上去，并将容器内/dir1文件夹打包至/backup/backup.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer1 -v /newback:/backup ubuntu tar -cvf /backup/backup.tar /dir1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#删除所有的容器以及它使用的数据卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf $(docker ps -aq)</span><br><span class="line">docker volume <span class="built_in">rm</span> vo1</span><br><span class="line"><span class="comment">#在次创建一个vo1的数据卷</span></span><br><span class="line">docker run -itd --name vocontainer2 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#2.将保存在宿主机中备份文件的数据恢复到vocontainer2的/中</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer2 -v /newback:/backup ubuntu tar -xvf /backup/backup.tar -C /</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure><h3 id="备份、恢复数据卷-1"><a href="#备份、恢复数据卷-1" class="headerlink" title="备份、恢复数据卷"></a>备份、恢复数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#拉取ubutun 最新镜像，实际生产中，docker pull 这一步可以省略，docker run的时候会自己去拉取。</span></span><br><span class="line">docker pull ubuntu</span><br><span class="line"><span class="comment"># 创建一个vo1的数据卷，并在数据卷中添加1.txt文件</span></span><br><span class="line">docker run --name vocontainer1 -v vo1:/dir1 ubuntu <span class="built_in">touch</span> /dir1/1.txt</span><br><span class="line"><span class="comment">#1.将vo1数据卷的数据备份到宿主机的/newback中,将容器的/backup路径挂载上去，并将容器内/dir1文件夹打包至/backup/backup.tar</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer1 -v /newback:/backup ubuntu tar -cvf /backup/backup.tar /dir1</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br><span class="line"><span class="comment">#删除所有的容器以及它使用的数据卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -vf $(docker ps -aq)</span><br><span class="line">docker volume <span class="built_in">rm</span> vo1</span><br><span class="line"><span class="comment">#在次创建一个vo1的数据卷</span></span><br><span class="line">docker run -itd --name vocontainer2 -v vo1:/dir1 ubuntu /bin/bash</span><br><span class="line"><span class="comment">#2.将保存在宿主机中备份文件的数据恢复到vocontainer2的/中</span></span><br><span class="line"><span class="comment">#********** Begin *********#</span></span><br><span class="line">docker run --volumes-from vocontainer2 -v /newback:/backup ubuntu tar -xvf /backup/backup.tar -C /</span><br><span class="line"><span class="comment">#********** End **********#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hello-Docker&quot;&gt;&lt;a href=&quot;#Hello-Docker&quot; class=&quot;headerlink&quot; title=&quot;Hello Docker !&quot;&gt;&lt;/a&gt;Hello Docker !&lt;/h3&gt;&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    <category term="DevOps" scheme="https://devildyw.github.io/categories/DevOps/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>跑步教程</title>
    <link href="https://devildyw.github.io/2022/07/02/%E8%B7%91%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <id>https://devildyw.github.io/2022/07/02/%E8%B7%91%E6%AD%A5%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-02T15:27:56.000Z</published>
    <updated>2022-07-02T15:29:40.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超详细的新手8周跑步入门训练计划（从走跑开始）"><a href="#超详细的新手8周跑步入门训练计划（从走跑开始）" class="headerlink" title="超详细的新手8周跑步入门训练计划（从走跑开始）"></a><a href="http://www.paobushijie.com/paobujihua/6543-8-zhou-rumen-xunlian">超详细的新手8周跑步入门训练计划（从走跑开始）</a></h1><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/jiayongjie_01.jpg" alt="贾永婕-铁人三项辣妈-女性影星跑步爱好者"></p><h2 id="新手八周跑步训练计划"><a href="#新手八周跑步训练计划" class="headerlink" title="新手八周跑步训练计划~"></a>新手八周跑步训练计划~</h2><p>以缓慢放松的步速完成 30 分钟的跑程<br>开始以步行为主，<br>渐变以跑步为主，<br>简单且循序渐进</p><p><strong>开始的 2 英里是最困难的 2 英里，但如果你达到了这个目标的话，其他的一起都会变得更容易。你只需要安排好的时间，耐心并且按部就班就能轻松达到目标了。</strong></p><p>第一周<br>周一 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周六 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 10 次<br>周日 休息</p><p><strong>训练提示：为了给你的训练增加能量，你可以再出门前的两个小时吃点水果或者巧克力，然后再出门前喝适量（约 240g）的运动饮料，这样既能保证你有充足的水分，也能补充钠和钾。</strong></p><p>第二周<br>周一 慢跑和步行：慢跑 2 分钟，步行 1 分钟，重复 10 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 2 分钟，重复 7 次，慢跑 2 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 4 分钟，步行 1 分钟，重复 6 次<br>周六 慢跑和步行：慢跑 4 分钟，步行 1 分钟，重复 6 次<br>周日 休息<br><strong>训练提示：开始训练前可先慢走 2~3 分钟热身，训练结束后再慢走 2-3 分钟放松。不要再跑步前舒展关节，而应该在训练后或晚上看电视的时候进行舒展。</strong></p><p>第三周<br>周一 慢跑和步行：慢跑 5 分钟，步行 1 分钟，重复 5 次<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 1 分钟，步行 1 分钟，重复 4 次，慢跑 2分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 6 分钟，步行 1 分钟，重复 4 次，慢跑 2 分钟<br>周六 慢跑和步行：慢跑 6 分钟，步行 1 分钟，重复 4 次，慢跑 2 分钟<br>周日 休息<br><strong>训练提示：跑步过程中双臂一定要保持放松。跑步时手肘弯曲 90 度，在腰间前后摆臂。手指弯曲成放松的拳头，不要让手在上身中部胡乱地摇摆。</strong></p><p>第四周<br>周一 慢跑和步行：慢跑 8 分钟，步行 1 分钟，重复 3 次，慢跑 3 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 9 分钟，步行 1 分钟，重复 3 次<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 10 分钟，步行 1 分钟，重复 2 次，慢跑 8 分钟<br>周六 慢跑和步行：慢跑 11 分钟，步行 1 分钟，重复 2 次，慢跑 6 分钟<br>周日 休息<br><strong>训练提示：尽可能在清晨或者傍晚的时候跑步。</strong></p><p>第五周<br>周一 慢跑和步行：慢跑 12 分钟，步行 1 分钟，重复 2 次，慢跑 4 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 13 分钟，步行 1 分钟，重复 2 次，慢跑 4 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 14 分钟，步行 1 分钟，重复 2 次<br>周六 慢跑和步行：慢跑 15 分钟，步行 1 分钟，慢跑 14 分钟<br>周日 休息<br><strong>训练提示：有时你可以跳过行走和跑步的训练，做一些交替运动，如骑车30~40 分钟，上健身房或者参加一些举重训练课程。跑步训练期间的间歇能让你更快地恢复精力，同时还能锻炼到新的肌肉。</strong></p><p>第六周<br>周一 慢跑和步行：慢跑 16 分钟，步行 1 分钟，慢跑 13 分钟<br>周二 步行：轻松步行 30 分钟<br>周三 慢跑和步行：慢跑 17 分钟，步行 1 分钟，慢跑 12 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 18 分钟，步行 1 分钟，慢跑 11 分钟<br>周六 慢跑和步行：慢跑 19 分钟，步行 1 分钟，慢跑 10 分钟<br>周日 休息<br><strong>训练提示：跑步是锻炼骨骼的好方法，所以你有必要补充充足的钙质——每天 1000 毫克。如果你在 50 岁以上，则每天需要 1500 毫克。低脂牛奶、低脂酸奶和深绿色叶片蔬菜都是钙质的重要来源。</strong></p><p>第七周<br>周一 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周二 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周三 慢跑和步行：慢跑 22 分钟，步行 1 分钟，慢跑 7 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 24 分钟，步行 1 分钟，慢跑 5 分钟<br>周六 慢跑和步行：慢跑 26 分钟，步行 1 分钟，慢跑 3 分钟<br>周日 休息<br><strong>训练提示：新手跑者通常会觉得胫骨、肋骨或者膝盖酸痛，如果你在训练后能及时进行冰敷，这些痛感很快就会消失，你还可以把豆子装进袋子冷藏后敷在膝盖上 15 分钟。如果疼痛还持续的话，就需要停止几天的训练。</strong></p><p>第八周<br>周一 慢跑和步行：慢跑 27 分钟，步行 1 分钟，慢跑 2 分钟<br>周二 慢跑和步行：慢跑 20 分钟，步行 1 分钟，慢跑 9 分钟<br>周三 慢跑和步行：慢跑 28 分钟，步行 1 分钟，慢跑 7 分钟<br>周四 步行：轻松步行 30 分钟<br>周五 慢跑和步行：慢跑 29 分钟，步行 1 分钟<br>周六 慢跑和步行：慢跑 30 分钟<br>周日 休息<br><strong>训练提示：要想呼吸新鲜的空气让肺部健康的话，尽量不要到繁忙的街道或者在交通高峰时跑步。找一个车辆比较少的地方，这样废气就可以很快驱散。最好就是找一些绿化带或者公园等。作为一个新手跑者你很快就能够成功了，但锻炼是永远没有止境的，让我们为生活而奔跑喝彩吧！</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/ouyangjing_01.jpg" alt="欧阳靖-跑步书籍作家-女性影星跑步爱好者"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、如果超过 40 岁或者超重 20 斤的话，一定要先咨询医生的意见才可以开始训练计划。但除非这会对身体构成什么危险，一般医生都会鼓励你进行这种走和跑结合的锻炼。<br>2、计划好你的时间。只有你安排出时间才会有锻炼的时间。将运动的计划列入你的行程表中。<br>3、做好出现坏天气的准备。每个人都会遇上不好的天气，但坏天气很快就会过去，而且每一次的训练都会比上一次的要好，所以一定要坚持、坚持、再坚持！<br>4、不要操之过急。欲速则不达，还可能会引起受伤和失落等。所以一定要耐心，循序渐进。你的目标是坚持跑 30 分钟不用停下来，而不是要打破世界纪录。</p><h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><p><a href="http://www.paobushijie.com/running-trainning">跑步训练</a> ： <a href="http://www.paobushijie.com/running-trainning">http://www.paobushijie.com/running-trainning</a><br><a href="http://www.paobushijie.com/running-workouts">跑步体能训练</a> ： <a href="http://www.paobushijie.com/running-workouts">http://www.paobushijie.com/running-workouts</a></p><p><a href="http://www.paobushijie.com/paobuzishi">跑步姿势</a> <a href="http://www.paobushijie.com/paobuzishi">http://www.paobushijie.com/paobuzishi</a><br><a href="http://www.paobushijie.com/running-science">科学跑步</a> <a href="http://www.paobushijie.com/running-science">http://www.paobushijie.com/running-science</a><br><a href="http://www.paobushijie.com/running-technology">跑步技术</a> <a href="http://www.paobushijie.com/running-technology">http://www.paobushijie.com/running-technology</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;超详细的新手8周跑步入门训练计划（从走跑开始）&quot;&gt;&lt;a href=&quot;#超详细的新手8周跑步入门训练计划（从走跑开始）&quot; class=&quot;headerlink&quot; title=&quot;超详细的新手8周跑步入门训练计划（从走跑开始）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://w</summary>
      
    
    
    
    <category term="生活" scheme="https://devildyw.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="锻炼/减肥" scheme="https://devildyw.github.io/tags/%E9%94%BB%E7%82%BC-%E5%87%8F%E8%82%A5/"/>
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="https://devildyw.github.io/2022/06/24/Shiro/"/>
    <id>https://devildyw.github.io/2022/06/24/Shiro/</id>
    <published>2022-06-24T12:14:25.000Z</published>
    <updated>2022-07-02T12:02:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>Apache Shiro</strong>是一个Java的一个安全(权限)框架。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等。</li></ul><h2 id="Shiro的功能"><a href="#Shiro的功能" class="headerlink" title="Shiro的功能"></a>Shiro的功能</h2><p>基本的功能点如下图所示：</p><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroFeatures.png" alt="img"></p><p>Shiro 把 Shiro 开发团队称为“应用程序的四大基石”——身份验证，授权，会话管理和加密作为其目标。</p><ul><li><p><strong>Authentication</strong>：有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。</p></li><li><p><strong>Authorization</strong>：访问控制的过程，也就是绝对“谁”去访问“什么”。</p></li><li><p><strong>Session</strong> <strong>Management</strong>：管理用户特定的会话，即使在非 Web 或 EJB 应用程序。</p></li><li><p><strong>Cryptography</strong>：通过使用加密算法保持数据安全同时易于使用。</p></li></ul><p>也提供了额外的功能来支持和加强在不同环境下所关注的方面，尤其是以下这些：</p><ul><li><p>Web Support：Shiro 的 web 支持的 API 能够轻松地帮助保护 Web 应用程序。</p></li><li><p>Caching：缓存是 Apache Shiro 中的第一层公民，来确保安全操作快速而又高效。</p></li><li><p>Concurrency：Apache Shiro 利用它的并发特性来支持多线程应用程序。</p></li><li><p>Testing：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。</p></li><li><p>“Run As”：一个允许用户假设为另一个用户身份（如果允许）的功能，有时候在管理脚本很有用。</p></li><li><p>“Remember Me”：在会话中记住用户的身份，所以他们只需要在强制时候登录。</p></li></ul><h2 id="Shiro架构"><a href="#Shiro架构" class="headerlink" title="Shiro架构"></a>Shiro架构</h2><p>从外部来看，即从应用程序的角度来观察如何使用Shiro完成工作：</p><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroBasicArchitecture.png" alt="img"></p><ul><li><strong>Subject</strong>：在我们的教程中已经提到，Subject 实质上是一个当前执行用户的特定的安全“视图”。鉴于”User” 一词通常意味着一个人，而一个 Subject 可以是一个人，但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。</li></ul><p>所有 Subject 实例都被绑定到（且这是必须的）一个 SecurityManager 上。当你与一个 Subject 交互时，那些交互作用转化为与 SecurityManager 交互的特定 subject 的交互作用。</p><ul><li><strong>SecurityManager</strong>：SecurityManager 是 Shiro 架构的心脏，并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。然而，一旦 SecurityManager 和它的内置对象图已经配置给一个应用程序，那么它单独留下来，且应用程序开发人员几乎使用他们所有的时间来处理 Subject API。</li></ul><p>我们稍后会更详细地讨论 SecurityManager，但重要的是要认识到，当你正与一个 Subject 进行交互时，实质上是幕后的 SecurityManager 处理所有繁重的 Subject 安全操作。这反映在上面的基本流程图。</p><ul><li><strong>Realms</strong>：Realms 担当 Shiro 和你的应用程序的安全数据之间的“桥梁”或“连接器”。当它实际上与安全相关的数据如用来执行身份验证（登录）及授权（访问控制）的用户帐户交互时，Shiro 从一个或多个为应用程序配置的 Realm 中寻找许多这样的东西。</li></ul><p>在这个意义上说，Realm 本质上是一个特定安全的 DAO：它封装了数据源的连接详细信息，使 Shiro 所需的相关的数据可用。当配置 Shiro 时，你必须指定至少一个 Realm 用来进行身份验证和&#x2F;或授权。SecurityManager 可能配置多个 Realms，但至少有一个是必须的。</p><p>Shiro 提供了立即可用的 Realms 来连接一些安全数据源（即目录），如LDAP，关系数据库（JDBC），文本配置源，像 INI 及属性文件，以及更多。你可以插入你自己的 Realm 实现来代表自定义的数据源，如果默认地Realm 不符合你的需求。</p><p>像其他内置组件一样，Shiro SecurityManager 控制Realms 是如何被用来获取安全和身份数据来代表 Subject 实例的。</p><h3 id="内部架构"><a href="#内部架构" class="headerlink" title="内部架构"></a>内部架构</h3><p><img src="https://www.docs4dev.com/images/apache-shiro/1.5.3/ShiroArchitecture.png" alt="img"></p><ul><li><strong>Subject</strong>(org.apache.shiro.subject.Subject)</li></ul><p>​        当前与软件进行交互的实体（用户，第三方服务，cron job，等等）的安全特定“视图”。</p><ul><li><strong>SecurityManager</strong>(org.apache.shiro.mgt.SecurityManager)</li></ul><p>​        如上所述，SecurityManager 是 Shiro 架构的心脏。它基本上是一个“保护伞”对象，协调其管理的组件以确保它们能够一起顺利的工作。它还管理每个应用程序用户的 Shiro 的视图，因此它知道如何执行每个用户的安全操作。</p><ul><li><strong>Authenticator</strong>(org.apache.shiro.authc.Authenticator)</li></ul><p>​        Authenticator 是一个对执行及对用户的身份验证（登录）尝试负责的组件。当一个用户尝试登录时，该逻辑被 Authenticator 执行。Authenticator 知道如何与一个或多个 Realm 协调来存储相关的用户&#x2F;帐户信息。从这些Realm 中获得的数据被用来验证用户的身份来保证用户确实是他们所说的他们是谁。</p><ul><li><strong>Authentication</strong> <strong>Strategy</strong>(org.apache.shiro.authc.pam.AuthenticationStrategy)</li></ul><p>​        如果不止一个 Realm 被配置，则 AuthenticationStrategy 将会协调这些 Realm 来决定身份认证尝试成功或失败下的条件（例如，如果一个 Realm 成功，而其他的均失败，是否该尝试成功？ 是否所有的 Realm 必须成功？或只有第一个成功即可？）。</p><ul><li><strong>Authorizer</strong>(org.apache.shiro.authz.Authorizer)</li></ul><p>​        Authorizer 是负责在应用程序中决定用户的访问控制的组件。它是一种最终判定用户是否被允许做某事的机制。与 Authenticator 相似，Authorizer 也知道如何协调多个后台数据源来访问角色恶化权限信息。Authorizer 使用 该信息来准确地决定用户是否被允许执行给定的动作。</p><ul><li><strong>SessionManager</strong>(org.apache.shiro.session.SessionManager)</li></ul><p>​        SessionManager 知道如何去创建及管理用户 Session 生命周期来为所有环境下的用户提供一个强健的 Session 体验。这在安全框架界是一个独有的特色——Shiro 拥有能够在任何环境下本地化管理用户 Session 的能力， 即使没有可用的 Web&#x2F;Servlet 或 EJB 容器，它将会使用它内置的企业级会话管理来提供同样的编程体验。SessionDAO 的存在允许任何数据源能够在持久会话中使用。</p><ul><li><strong>SessionDAO</strong>(org.apache.shiro.session.mgt.eis.SessionDAO)</li></ul><p>​        SesssionDAO 代表 SessionManager 执行 Session 持久化（CRUD）操作。这允许任何数据存储被插入到会话管理的基础之中。</p><ul><li><strong>CacheManager</strong>(org.apahce.shiro.cache.CacheManager)</li></ul><p>​        CacheManager 创建并管理其他 Shiro 组件使用的 Cache 实例生命周期。因为 Shiro 能够访问许多后台数据源， 由于身份验证，授权和会话管理，缓存在框架中一直是一流的架构功能，用来在同时使用这些数据源时提高 性能。任何现代开源和&#x2F;或企业的缓存产品能够被插入到 Shiro 来提供一个快速及高效的用户体验。</p><ul><li><strong>Cryptography</strong>(org.apache.shiro.crypto.*)</li></ul><p>​        Cryptography 是对企业安全框架的一个很自然的补充。Shiro 的crypto 包包含量易于使用和理解的cryptographic Ciphers，Hasher（又名 digests）以及不同的编码器实现的代表。所有在这个包中的类都被精心地设计以易于使用和易于理解。任何使用 Java 的本地密码支持的人都知道它可以是一个难以驯服的具有挑战性的动物。Shiro 的 cryptoAPI 简化了复杂的 Java 机制，并使加密对于普通人也易于使用。</p><ul><li><strong>Realms</strong>(org.apache.shiro.realm.Realm)</li></ul><p>​        如上所述，Realms 在 Shiro 和你的应用程序的安全数据之间担当“桥梁”或“连接器”。当它实际上与安全相关的数据如用来执行身份验证（登录）及授权（访问控制）的用户帐户交互时，Shiro 从一个或多个为应用程序配置的Realm 中寻找许多这样的东西。你可以按你的需要配置多个 Realm（通常一个数据源一个 Realm），且 Shiro 将为身份验证和授权对它们进行必要的协调。</p><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><p>自定义<code>Realm</code>需要继承<code>AuthorizingRealm</code> 并且重写它的两个方法<code>AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)</code>和<code>AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//通过我们写的方法将数据库关于该用户的信息全部查出</span></span><br><span class="line">        List&lt;String&gt; roles = userService.queryUserRoleByUsername(principal);</span><br><span class="line">        List&lt;String&gt; permissions = userService.queryUserPermissionByUsername(principal);</span><br><span class="line"><span class="comment">//这里添加用户的角色权限信息</span></span><br><span class="line">        authorizationInfo.addRoles(roles);</span><br><span class="line">        authorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过我们配置的数据源查询用户密码</span></span><br><span class="line">        <span class="comment">//这里主要查询用户的验证信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userService.queryUserPasswordByUsername(principal);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密码肯定不能用明文存入数据库，所以我们要告诉后续的验证程序我们用的时什么加密算法。</p><p><code>AuthorizingRealm</code>提供了一个方法让我们指定Shiro框架采用什么加密算法对传入的token中的密码信息进行加密后与数据库中的密文密码进行验证。</p><p>指定的方式有三种</p><ol><li><p>自定Realm的构造方法中指定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用AuthorizingRealm提供的方法</span></span><br><span class="line">        setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略下方重写方法了</span></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们在ShiroConfig中会手动创建Bean在加入到IOC容器中所以在构造方法中调用<code>setCredentialsMatcher</code>是可行的。</p></li><li><p>在ShiroConfig中 创建了自定义Realm后在调用<code>setCredentialsMatcher</code>方法指定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">       userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> userRealm;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>本身就是继承了<code>AuthorizingRealm</code>，所以父类的方法也都拥有。</p></li><li><p>自定手动在自定义Realm的内部编写一个方法 然后在其上添加注解<code>@PostConstruct</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 密码匹配器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initCredentialsMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">HashedCredentialsMatcher</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">       <span class="comment">//设置提交的AuthenticationToken的凭据在与存储在系统中的凭据进行比较之前将被散列的次数。 根据用户注册是密码加密的次数的设置相映</span></span><br><span class="line">       md5.setHashIterations();</span><br><span class="line">       setCredentialsMatcher(md5);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>@PostConstruct</code></p><p>Java中该注解的说明：@PostConstruct该注解被用来修饰一个非静态的void（）方法。被@PostConstruct修饰的方法会在服务器加载<code>Servlet</code>的时候运行，并且只会被服务器执行一次。<code>@PostConstruct</code>在构造函数之后执行，<code>init（）</code>方法之前执行。</p></li></ol><hr><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a><code>Subject</code></h3><table><thead><tr><th>Subject 登录相关方法</th><th>描述</th></tr></thead><tbody><tr><td>isAuthenticated()</td><td>返回true 表示已经登录，否则返回false。</td></tr></tbody></table><table><thead><tr><th>Subject 角色相关方法</th><th>描述</th></tr></thead><tbody><tr><td>hasRole(String roleName)</td><td>返回true 如果Subject 被分配了指定的角色，否则返回false。</td></tr><tr><td>hasRoles(List<String> roleNames)</td><td>返回true 如果Subject 被分配了所有指定的角色，否则返回false。</td></tr><tr><td>hasAllRoles(Collection<String>roleNames)</td><td>返回一个与方法参数中目录一致的hasRole 结果的集合。有性能的提高如果许多角色需要执行检查（例如，当自定义一个复杂的视图）。</td></tr><tr><td>checkRole(String roleName)</td><td>安静地返回，如果Subject 被分配了指定的角色，不然的话就抛出AuthorizationException。</td></tr><tr><td>checkRoles(Collection<String>roleNames)</td><td>安静地返回，如果Subject 被分配了所有的指定的角色，不然的话就抛出AuthorizationException。</td></tr><tr><td>checkRoles(String… roleNames)</td><td>与上面的checkRoles 方法的效果相同，但允许Java5 的var-args 类型的参数</td></tr></tbody></table><table><thead><tr><th>Subject 资源相关方法</th><th>描述</th></tr></thead><tbody><tr><td>isPermitted(Permission p)</td><td>返回true 如果该Subject 被允许执行某动作或访问被权限实例指定的资源，否则返回false</td></tr><tr><td>isPermitted(List<Permission> perms)</td><td>返回一个与方法参数中目录一致的isPermitted 结果的集合。</td></tr><tr><td>isPermittedAll(Collection<Permission>perms)</td><td>返回true 如果该Subject 被允许所有指定的权限，否则返回false有性能的提高如果需要执行许多检查（例如，当自定义一个复杂的视图）</td></tr><tr><td>isPermitted(String perm)</td><td>返回true 如果该Subject 被允许执行某动作或访问被字符串权限指定的资源，否则返回false。</td></tr><tr><td>isPermitted(String…perms)</td><td>返回一个与方法参数中目录一致的isPermitted 结果的数组。有性能的提高如果许多字符串权限检查需要被执行（例如，当自定义一个复杂的视图）。</td></tr><tr><td>isPermittedAll(String…perms)</td><td>返回true 如果该Subject 被允许所有指定的字符串权限，否则返回false。</td></tr><tr><td>checkPermission(Permission p)</td><td>安静地返回，如果Subject 被允许执行某动作或访问被特定的权限实例指定的资源，不然的话就抛出AuthorizationException 异常。</td></tr><tr><td>checkPermission(String perm)</td><td>安静地返回，如果Subject 被允许执行某动作或访问被特定的字符串权限指定的资源，不然的话就抛出AuthorizationException 异常。</td></tr><tr><td>checkPermissions(Collection<Permission> perms)</td><td>安静地返回，如果Subject 被允许所有的权限，不然的话就抛出AuthorizationException 异常。有性能的提高如果需要执行许多检查（例如，当自定义一个复杂的视图）</td></tr><tr><td>checkPermissions(String… perms)</td><td>和上面的checkPermissions 方法效果相同，但是使用的是基于字符串的权限。</td></tr></tbody></table><hr><h2 id="Web项目下Shiro内置的过滤器"><a href="#Web项目下Shiro内置的过滤器" class="headerlink" title="Web项目下Shiro内置的过滤器"></a>Web项目下Shiro内置的过滤器</h2><p>拦截器对应的不同功能。</p><table><thead><tr><th>过滤器</th><th>过滤器类</th><th>说明</th><th>默认</th></tr></thead><tbody><tr><td><strong>authc</strong></td><td><strong>FormAuthenticationFilter</strong></td><td><strong>基于表单的过滤器；如“&#x2F;&#x3D;authc”，如果没有登录会跳到相应的登录页面登录</strong></td><td><strong>无</strong></td></tr><tr><td><strong>logout</strong></td><td><strong>LogoutFilter</strong></td><td><strong>退出过滤器，主要属性：redirectUrl：退出成功后重定向的地址，如“&#x2F;logout&#x3D;logout”</strong></td><td><strong>&#x2F;</strong></td></tr><tr><td><strong>anon</strong></td><td><strong>AnonymousFilter</strong></td><td><strong>匿名过滤器，即不需要登录即可访问；一般用于静态资源过滤；示例“&#x2F;static&#x2F;&#x3D;anon”</strong></td><td><strong>无</strong></td></tr></tbody></table><table><thead><tr><th><strong>过滤器</strong></th><th><strong>过滤器类</strong></th><th><strong>说明</strong></th><th><strong>默认</strong></th></tr></thead><tbody><tr><td><strong>roles</strong></td><td><strong>RolesAuthorizationFilter</strong></td><td><strong>角色授权拦截器，验证用户是否拥有所有角色；主要属性： loginUrl：登录页面地址（&#x2F;login.jsp）；unauthorizedUrl：未授权后重定向的地址；示例“&#x2F;admin&#x2F;&#x3D;roles[admin]”</strong></td><td><strong>无</strong></td></tr><tr><td><strong>perms</strong></td><td><strong>PermissionsAuthorizationFilter</strong></td><td><strong>权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例“&#x2F;user&#x2F;&#x3D;perms[“user:create”]”</strong></td><td><strong>无</strong></td></tr><tr><td><strong>port</strong></td><td><strong>PortFilter</strong></td><td><strong>端口拦截器，主要属性：port（80）：可以通过的端口；示例“&#x2F;test&#x3D; port[80]”，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径&#x2F;参数等都一样</strong></td><td><strong>无</strong></td></tr><tr><td><strong>rest</strong></td><td><strong>HttpMethodPermissionFilter</strong></td><td><strong>rest风格拦截器，自动根据请求方法构建权限字符串（GET&#x3D;read, POST&#x3D;create,PUT&#x3D;update,DELETE&#x3D;delete,HEAD&#x3D;read,TRACE&#x3D;read,OPTIONS&#x3D;read, MKCOL&#x3D;create）构建权限字符串；示例“&#x2F;users&#x3D;rest[user]”，会自动拼出“user:read,user:create,user:update,user:delete”权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</strong></td><td><strong>无</strong></td></tr><tr><td><strong>ssl</strong></td><td><strong>SslFilter</strong></td><td><strong>SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口（443）；其他和port拦截器一样；</strong></td><td><strong>无</strong></td></tr></tbody></table><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>自定义过滤器需要继承<code>AuthorizationFilter</code>并重写它的<code>isAccessAllowed</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RolesOrAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取subject 底层调用的同样是SecurityUtils.getSubject()</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> getSubject(request, response);</span><br><span class="line">        String[] rolesArray = (String[]) mappedValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rolesArray.length==<span class="number">0</span>||rolesArray==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//对于角色没有要求直接返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; roles = CollectionUtils.asSet(rolesArray);</span><br><span class="line">        <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">            <span class="comment">//满足一个身份就返回true</span></span><br><span class="line">            <span class="keyword">if</span> (subject.hasRole(role))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加自己的过滤器使其生效"><a href="#添加自己的过滤器使其生效" class="headerlink" title="添加自己的过滤器使其生效"></a>添加自己的过滤器使其生效</h3><p><code>ShiroConfig.java</code> 中添加如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使自定义的过滤器生效 这里添加我们刚刚自定义的过滤器</span></span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters());</span><br><span class="line">       </span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 自定义过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里的key 就是后面用于指定过滤器的字段</span></span><br><span class="line">        map.put(<span class="string">&quot;role-or&quot;</span>,<span class="keyword">new</span> <span class="title class_">RolesOrAuthorizationFilter</span>());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略其他配置</span></span><br><span class="line">    .... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro基础五张表"><a href="#Shiro基础五张表" class="headerlink" title="Shiro基础五张表"></a>Shiro基础五张表</h2><p>Shiro最为重要的5张表分别为t_user（用户表）、t_role（角色表）、t_permissions （权限表）、t_user_role（用户角色对应表）、t_role_permissions（角色权限对应表）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/2021062816011333.png" alt="在这里插入图片描述"></p><h2 id="快速开始（集成SpringBoot-Mybatis-plus）"><a href="#快速开始（集成SpringBoot-Mybatis-plus）" class="headerlink" title="快速开始（集成SpringBoot+Mybatis-plus）"></a>快速开始（集成SpringBoot+Mybatis-plus）</h2><p>整合思路</p><p><strong>这里我使用的是<code>Shiro-Spring来整合</code>后面我会使用Shiro官方推出的与SpringBoot整合的jar包进行整合</strong>.</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20210529132728453.png" alt="在这里插入图片描述"></p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>Shiro最为重要的5张表分别为t_user（用户表）、t_role（角色表）、t_permissions （权限表）、t_user_role（用户角色对应表）、t_role_permissions（角色权限对应表）。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : 阿丁</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50736</span></span><br><span class="line"><span class="comment"> Source Host           : 124.222.35.20:3319</span></span><br><span class="line"><span class="comment"> Source Schema         : shiro</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50736</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 24/06/2022 15:51:46</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permission`  (</span><br><span class="line">  `p_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;权限编号&#x27;</span>,</span><br><span class="line">  `p_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`p_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`  (</span><br><span class="line">  `r_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  `r_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `r_state` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色说明&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`r_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role_permission</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role_permission`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_permission`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624154218271.png" alt="image-20220624154218271"></p><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><p><code>pom.xml</code>添加相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Shiro-SpringBoot-Demo01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://yourip:3306/shiro?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:org/dyw/shiro/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.dyw.shiro.entity</span></span><br></pre></td></tr></table></figure><p><code>因为Shiro-Spring</code>对于SpringBoot没有特殊的适配所以application.yml中无需对shiro进行文本配置。但是我们可以再Spring.xml中配置或是使用配置类的方式进行配置</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>这里我们只做演示，所以权限的指定直接在数据库中添加，这里只建用户表（因为无论如何它的信息是要从数据库中获取并且用来验证的）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service类"><a href="#Service类" class="headerlink" title="Service类"></a>Service类</h3><p><code>UserService.java</code> 作用就是从数据库中查询用户相关的验证&#x2F;鉴权信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查找用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">queryUserPasswordByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">queryUserPermissionByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">queryUserRoleByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>UserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserPasswordByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername,username).last(<span class="string">&quot;limit 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(queryWrapper).getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">queryUserPermissionByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectUserPermissionById(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">queryUserRoleByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectRoleById(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT permission.p_name FROM ((`user` inner JOIN user_role on `user`.id = user_role.uid) INNER JOIN role_permission on user_role.rid = role_permission.rid) INNER JOIN permission on role_permission.pid = permission.p_id where user.username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectUserPermissionById</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select role.r_name  from (user inner join user_role on user.id = user_role.uid) inner join role on user_role.rid = role.r_id where user.username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleById</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LoginService.java </code> 用于登录</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">login</span><span class="params">(LoginDTO loginDTO)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>LoginServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">login</span><span class="params">(LoginDTO loginDTO)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> loginDTO.getUsername();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> loginDTO.getPassword();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Realm-1"><a href="#自定义Realm-1" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p>作用就是获取安全数据。</p><p>自定义<code>Realm</code>需要继承<code>AuthorizingRealm</code> 并且重写它的两个方法<code>AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)</code>和<code>AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException</code></p><p>其中的<code>doGetAuthenticationInfo</code>方法shi就是<code>Authenticator</code>交给Realm做验证操作的方法，通过方法名字我们也可得知，我们自定义的重写它主要是将数据库中关于该用户的信息查出做一些简单验证，然后将密码用户名和Realm名封装交给后续的处理做验证。</p><p><code>doGetAuthorizationInfo</code>方法主要是用来获取用户的权限信息的，通过方法名同样可知，我们自定义的重写它主要是将数据库中关于该用户的权限信息和角色信息查出然后进行打包再返回交给后续程序处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//通过我们写的方法将数据库关于该用户的信息全部查出</span></span><br><span class="line">        List&lt;String&gt; roles = userService.queryUserRoleByUsername(principal);</span><br><span class="line">        List&lt;String&gt; permissions = userService.queryUserPermissionByUsername(principal);</span><br><span class="line"></span><br><span class="line">        authorizationInfo.addRoles(roles);</span><br><span class="line">        authorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过我们配置的数据源查询用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userService.queryUserPasswordByUsername(principal);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(principal,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h3><p><strong>这部分非常重要</strong></p><ol><li><p>将我们刚刚自定义的Realm手动配置加入Spring容器管理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">        <span class="comment">//这里指定了加密算法为MD5</span></span><br><span class="line">        userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们创建UserRealm对象的时候指定了密码匹配器，到时后框架会将前端传入的密码进行指定算法的加密然后与数据库中查出的密码进行对比。</p></li><li><p>创建<code>DefaultWebSecurityManager</code>对象将我们刚刚创建UserRealm注入并且将其添加到securityManager中，然后将<code>DefaultWebSecurityManager</code>以<code>securityManager</code>的实例名称加入IOC容器中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultWebSecurityManager </code>有着许多默认的配置能够满足我们的一般情况下的需求，但是当需要更为灵活的配置时，它也是支持自定义修改的，我们只需要实现它组件的接口或是继承类重写它的方法，再将自定义的组件加入<code>DefaultWebSecurityManager中即可</code>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624162519708.png" alt="image-20220624162519708"></p><p>这里我们就重写了Realm实现了一个自定义的Realm，并且将其加入了其中。</p><p>到这里我们对于SecurityManager就已经结束了，我们的Security会自动地注入到SecurityUtils中。</p></li><li><p>ShiroFilterFactoryBean 创建Shiro的过滤器工厂，在这里面我们可以指定一些restAPI与权限的对应关系，以及其他的配置；</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220624163304667.png" alt="image-20220624163304667"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            添加Shiro内置过滤器，常用的有如下过滤器：</span></span><br><span class="line"><span class="comment">            anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc： 必须认证才可以访问</span></span><br><span class="line"><span class="comment">            user： 如果使用了记住我功能就可以直接访问</span></span><br><span class="line"><span class="comment">            perms: 拥有某个资源权限才可以访问</span></span><br><span class="line"><span class="comment">            role： 拥有某个角色权限才可以访问</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    filterMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[insert]&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>拦截器对应的不同功能。</p><table><thead><tr><th>Filter Name</th><th>功能</th></tr></thead><tbody><tr><td><strong>anno</strong></td><td><strong>不需要授权、登录就可以访问。eg:&#x2F;index</strong></td></tr><tr><td><strong>authc</strong></td><td><strong>需要登录授权才能访问。eg：&#x2F;用户中心</strong></td></tr><tr><td><strong>authcBasic</strong></td><td><strong>Basic HTTP身份验证拦截器</strong></td></tr><tr><td><strong>logout</strong></td><td><strong>退出拦截器。退出成功后，会 redirect到设置的&#x2F;URI</strong></td></tr><tr><td><strong>noSessionCreation</strong></td><td><strong>不创建会话连接器</strong></td></tr><tr><td><strong>perms</strong></td><td><strong>授权拦截器:perm[‘user:create’]</strong></td></tr><tr><td><strong>port</strong></td><td><strong>端口拦截器.eg:port[80]</strong></td></tr><tr><td><strong>rest</strong></td><td><strong>rest风格拦截器</strong></td></tr><tr><td><strong>roles</strong></td><td><strong>角色拦截器。eg：role[administrator]</strong></td></tr><tr><td><strong>ssl</strong></td><td><strong>ssl拦截器。通过https协议才能通过</strong></td></tr><tr><td><strong>user</strong></td><td><strong>用户拦截器。eg：登录后（authc），第二次没登陆但是有记住我(remmbner)都可以访问。</strong></td></tr></tbody></table><p>完整的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                添加Shiro内置过滤器，常用的有如下过滤器：</span></span><br><span class="line"><span class="comment">                anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">                authc： 必须认证才可以访问</span></span><br><span class="line"><span class="comment">                user： 如果使用了记住我功能就可以直接访问</span></span><br><span class="line"><span class="comment">                perms: 拥有某个资源权限才可以访问</span></span><br><span class="line"><span class="comment">                role： 拥有某个角色权限才可以访问</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[insert]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 DefaultWebSecurityManager( 步骤二</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 realm 对象( 步骤一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">        userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里就整合完毕了Controller可以自己根据自己想法定义，restfulAPI的过滤操作可以添加到该类中。</p><h3 id="启用Shiro注解进行鉴权"><a href="#启用Shiro注解进行鉴权" class="headerlink" title="启用Shiro注解进行鉴权"></a>启用Shiro注解进行鉴权</h3><p><strong>如果导入的是<code>shiro-spring-boot-web-starter</code>则无需进行如下配置</strong></p><p>针对**<code>shiro-spring</code>**要使用Shiro注解进行鉴权需要在ShiroConfig中加上添加如下的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 保证实现了Shiro内部lifecycle函数的bean执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title function_">getLifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> AOP式方法级权限检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAdvisorAutoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 配合DefaultAdvisorAutoProxyCreator事项注解权限校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">getAuthorizationAttributeSourceAdvisor</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">aasa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    aasa.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上之后可以使用注解了</p><p>以下为常用注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@RequiresAuthentication</td><td>表明当前用户需是经过认证的用户</td></tr><tr><td>@ RequiresGuest</td><td>表明该用户需为”guest”用户</td></tr><tr><td>@RequiresPermissions</td><td>当前用户需拥有指定权限</td></tr><tr><td>@RequiresRoles</td><td>当前用户需拥有指定角色</td></tr><tr><td>@ RequiresUser</td><td>当前用户需为已认证用户或已记住用户</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro整合Spring常用注解"><a href="#Shiro整合Spring常用注解" class="headerlink" title="Shiro整合Spring常用注解"></a>Shiro整合Spring常用注解</h2><p>以下为常用注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><strong>@RequiresAuthentication</strong></td><td><strong>表明当前用户需是经过认证的用户</strong></td></tr><tr><td><strong>@ RequiresGuest</strong></td><td><strong>表明该用户需为”guest”用户</strong></td></tr><tr><td><strong>@RequiresPermissions</strong></td><td><strong>当前用户需拥有指定权限</strong></td></tr><tr><td><strong>@RequiresRoles</strong></td><td><strong>当前用户需拥有指定角色</strong></td></tr><tr><td><strong>@ RequiresUser</strong></td><td><strong>当前用户需为已认证用户或已记住用户</strong></td></tr></tbody></table><h2 id="Realm采用Redis作为缓存"><a href="#Realm采用Redis作为缓存" class="headerlink" title="Realm采用Redis作为缓存"></a>Realm采用Redis作为缓存</h2><h3 id="Spring容器工具类"><a href="#Spring容器工具类" class="headerlink" title="Spring容器工具类"></a>Spring容器工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>&#123;</span><br><span class="line">    <span class="comment">//放置在获取bean的时候提示空指针，将其定义为静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//类初始化完成之后调用setApplicationContext()方法进行操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        ApplicationContextUtils.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">geteContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line">        <span class="comment">//在这一步的时候一定要注意，此时可调用这个方法的时候</span></span><br><span class="line">        <span class="comment">//context可能为空，会提示空指针异常，需要将其定义成静态的，这样类加载的时候</span></span><br><span class="line">        <span class="comment">//context就已经存在了</span></span><br><span class="line">        <span class="keyword">return</span> context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过这个工具类我们可以获取到容器中的Bean 下面我们会用到</strong></p><p>在认证和授权的时候，程序需要频繁的访问数据库，这样对于数据库的压力可想而知，那我们怎么处理呢？</p><p>我们可以使用Redis作为缓存来减轻数据库的压力。</p><p>Redis的配置不多做介绍</p><ol><li>导入<code>spring-boot-starter-data-redis</code></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>RedisConfig</code>Redis配置类配置</li></ol><p>​    这个类里我们实现了设置缓存、获取缓存、移除缓存、情况缓存等方法。<br>其中我们开启缓存后，用户登录成功就会将缓存放入到redis中，使用退出功能，就会清楚当前登录的缓存信息，授权信息也是一样，只要使用退出功能就会清空当前的缓存信息。但是这里并没有设计过期时间的处理。所以真实场景下，我们还需要考虑过期时间的设置。这里显然我们用到了RedisTemplate模板，这个模板我们一般也是自己定义，不过也可以直接使用SpringBoot默认提供的。这里我们采用自己定义RedisTemplate的方式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> StringRedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        <span class="type">StringRedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">JdkSerializationRedisSerializer</span> <span class="variable">jdkSerializationRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializationRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);              <span class="comment">//键值序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);          <span class="comment">//绑定hash的序列化方式</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jdkSerializationRedisSerializer);</span><br><span class="line"><span class="comment">//redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//redisson配置类</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定编码，默认编码为org.redisson.codec.JsonJacksonCodec</span></span><br><span class="line">        <span class="comment">//config.setCodec(new org.redisson.client.codec.StringCodec());</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://124.222.35.20:6666&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;dyw20020304&quot;</span>)</span><br><span class="line">                .setConnectionPoolSize(<span class="number">50</span>)</span><br><span class="line">                .setIdleConnectionTimeout(<span class="number">10000</span>)</span><br><span class="line">                .setConnectTimeout(<span class="number">3000</span>)</span><br><span class="line">                .setTimeout(<span class="number">3000</span>)</span><br><span class="line">                .setDatabase(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>提供自定义缓存管理器 <code>RedisCacheManager</code></li></ol><p>​    只要加入了缓存管理器，配置了缓存管理类，系统就会默认在查询完认证和授权后将信息放入到缓存中且下次需要认证和授权时，都是优先去查询缓存中的内容，查询不到，才会去查询数据库，这里也验证了这一点，与之前的画的加入缓存后的授权信息的获取图是一样的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheManager</span> <span class="keyword">implements</span> <span class="title class_">CacheManager</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; Cache&lt;K, V&gt; <span class="title function_">getCache</span><span class="params">(String s)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入到了自定义缓存管理器,传入参数cacheName：&quot;</span>+ s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCache</span>&lt;K,V&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设计自己的缓存管理类 实现shiro的Cache&lt;K,V&gt;接口</li></ol><p>​    所有的缓存管理类的实例都应该是Cache的实现类。所以我们自己定义redis的缓存管理类应该也必须去实现这个Cache类。实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span>&lt;k,V&gt; <span class="keyword">implements</span> <span class="title class_">Cache</span>&lt;k,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cacheName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisCache</span> <span class="params">(String cacheName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheName = cacheName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取redis操作对象</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(k k)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(cacheName+<span class="string">&quot;:获取缓存方法，传入参数：&quot;</span> + k+<span class="string">&quot;,此时的redisTemplate:&quot;</span>+getRedisTemplate());</span><br><span class="line">        <span class="keyword">return</span> (V) getRedisTemplate().opsForHash().get(cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(k k, V v)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入缓存方法，传入参数 K:&quot;</span> + k+<span class="string">&quot;,V:&quot;</span>+v);</span><br><span class="line">        <span class="comment">//放入redis中的值，一定要是序列化的对象</span></span><br><span class="line">        getRedisTemplate().opsForHash().put(cacheName.toString(),k.toString(),v);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(k k)</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了remove方法,传入参数：&quot;</span>+k.toString());</span><br><span class="line">        getRedisTemplate().opsForHash().delete(cacheName,k.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了clear方法&quot;</span>);</span><br><span class="line">        getRedisTemplate().opsForHash().delete(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().size(cacheName).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;k&gt; <span class="title function_">keys</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().keys(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().values(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5. </p><p>​    开启Realm的缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">UserRealm</span> <span class="variable">userRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">       userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">       <span class="comment">//开启缓存</span></span><br><span class="line">       userRealm.setAuthenticationCachingEnabled(<span class="literal">true</span>);</span><br><span class="line">       userRealm.setAuthorizationCacheName(<span class="string">&quot;authenticationCache&quot;</span>); <span class="comment">//设置缓存名称--认证</span></span><br><span class="line">       userRealm.setAuthenticationCacheName(<span class="string">&quot;authorizationCache&quot;</span>); <span class="comment">//设置缓存名称--授权</span></span><br><span class="line">       userRealm.setCacheManager(<span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>());<span class="comment">//设置为我们刚刚自定义的RedisCacheManager</span></span><br><span class="line">       <span class="keyword">return</span> userRealm;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>经过验证发现,在用户登录过后访问需要权限的资源后,确实不再走数据库,而是从Redis缓存中查找信息。</p><h2 id="Shiro共享Session"><a href="#Shiro共享Session" class="headerlink" title="Shiro共享Session"></a>Shiro共享Session</h2><h3 id="会话的问题"><a href="#会话的问题" class="headerlink" title="会话的问题"></a>会话的问题</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1581846589128.png" alt="1581846589128"></p><h3 id="分布式会话实现思路"><a href="#分布式会话实现思路" class="headerlink" title="分布式会话实现思路"></a>分布式会话实现思路</h3><p>所有服务器的session信息都存储到了同一个Redis集群中，即所有的服务都将 Session 的信息存储到 Redis 集群中，无论是对 Session 的注销、更新都会同步到集群中，达到了 Session 共享的目的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/1581846769926.png" alt="1581846769926"></p><p>​        Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。</p><p>​        在实际工作中我们建议使用外部的缓存设备(包括Redis)来共享 Session，避免单个服务器节点挂掉而影响服务，共享数据都会放到外部缓存容器中</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><p>编写RedisSessionDao继承AbstractSessionDAO，重写了会话的创建、读取、修改等操作，全部缓存与redis中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisSessionDAO</span> <span class="keyword">extends</span> <span class="title class_">AbstractSessionDAO</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Serializable <span class="title function_">doCreate</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="type">Serializable</span> <span class="variable">sessionId</span> <span class="operator">=</span> generateSessionId(session);</span><br><span class="line">        assignSessionId(session,sessionId);</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(session.getId().toString(),session,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Session <span class="title function_">doReadSession</span><span class="params">(Serializable sessionId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">return</span> <span class="variable">sessionId</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : (Session) redisTemplate.opsForValue().get(sessionId.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException &#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="literal">null</span>&amp;&amp;session.getId()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            session.setTimeout(<span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.opsForValue().set(session.getId().toString(),session,<span class="number">60</span>,TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="literal">null</span>&amp;session.getId()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            redisTemplate.opsForValue().getOperations().delete(session.getId().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Session&gt; <span class="title function_">getActiveSessions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以根据需求做更多灵活性的改动。</p></li><li><p>ShiroConfig将RedisSessionDao注入SessionManager中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> DefaultWebSessionManager <span class="title function_">defaultWebSessionManager</span><span class="params">(RedisSessionDAO redisSessionDAO)</span> &#123;</span><br><span class="line">       <span class="type">DefaultWebSessionManager</span> <span class="variable">defaultWebSessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">       defaultWebSessionManager.setGlobalSessionTimeout(<span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line">       defaultWebSessionManager.setDeleteInvalidSessions(<span class="literal">true</span>);</span><br><span class="line">       defaultWebSessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">       defaultWebSessionManager.setSessionValidationSchedulerEnabled(<span class="literal">true</span>);</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 修改Cookie中的SessionId的key，默认为JSESSIONID，自定义名称</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       defaultWebSessionManager.setSessionIdCookie(<span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> defaultWebSessionManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>将SessionManager注入SecurityManager中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm, RedisSessionDAO redisSessionDao)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 取消Cookie中的RememberMe参数</span></span><br><span class="line">    securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">    securityManager.setSessionManager(defaultWebSessionManager(redisSessionDao));</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>做完上述操作在进行访问我们可以看到我们的session已经存入了redis中</p></li></ol><h2 id="限制密码重试次数"><a href="#限制密码重试次数" class="headerlink" title="限制密码重试次数"></a>限制密码重试次数</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>保证原子性：</p><p>​        单系统：AtomicLong计数</p><p>​        集群系统：使用Redis提供的RAtomicLong计数</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、获取系统中是否已有登录次数缓存,缓存对象结构预期为：&quot;用户名--登录次数&quot;。</span><br><span class="line"></span><br><span class="line">2、如果之前没有登录缓存，则创建一个登录次数缓存。</span><br><span class="line"></span><br><span class="line">3、如果缓存次数已经超过限制，则驳回本次登录请求。</span><br><span class="line"></span><br><span class="line">4、将缓存记录的登录次数加1,设置指定时间内有效</span><br><span class="line"></span><br><span class="line">5、验证用户本次输入的帐号密码，如果登录登录成功，则清除掉登录次数的缓存</span><br></pre></td></tr></table></figure><p>计数缓存的部分主要是在登录验证密码的时候。所以我们需要自定义一个密码比较器。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ol><li>自定义密码比较器RetryLimitCredentialsMatcher继承HashedCredentialsMatcher重写doCredentialsMatch方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryLimitCredentialsMatcher</span> <span class="keyword">extends</span> <span class="title class_">HashedCredentialsMatcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">RETRY_LIMIT_NUM</span> <span class="operator">=</span> <span class="number">4L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetryLimitCredentialsMatcher</span><span class="params">(String hashAlgorithmName)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(hashAlgorithmName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义密码比较器&quot;</span>);</span><br><span class="line">        <span class="comment">//获得用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//获得缓存</span></span><br><span class="line">        log.info(loginName);</span><br><span class="line">        <span class="type">RedisAtomicLong</span> <span class="variable">atomicLong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisAtomicLong</span>(loginName, getRedisTemplate().getConnectionFactory());</span><br><span class="line">        <span class="type">long</span> <span class="variable">retryFlag</span> <span class="operator">=</span> atomicLong.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数</span></span><br><span class="line">        <span class="keyword">if</span> (retryFlag&gt;RETRY_LIMIT_NUM)&#123;</span><br><span class="line">            <span class="comment">//超过次数设计10分钟后重试</span></span><br><span class="line">            atomicLong.expire(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">            log.error(<span class="string">&quot;密码错误5次，请10分钟以后再试&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExcessiveAttemptsException</span>(<span class="string">&quot;密码错误5次，请10分钟以后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有超过</span></span><br><span class="line">        <span class="comment">//累加次数</span></span><br><span class="line">        atomicLong.incrementAndGet();</span><br><span class="line">        atomicLong.expire(<span class="number">10</span>,TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//密码校验</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="built_in">super</span>.doCredentialsMatch(token, info);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,atomicLong.get());</span><br><span class="line">        <span class="comment">//如果登录成功 清除缓存</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            atomicLong.expire(<span class="number">0</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写完成后记得将我们一开始设置的Shiro自带的密码比较器更换为我们自定义的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userRealm.setCredentialsMatcher(<span class="keyword">new</span> <span class="title class_">RetryLimitCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="在线并发登录人数控制"><a href="#在线并发登录人数控制" class="headerlink" title="在线并发登录人数控制"></a>在线并发登录人数控制</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在实际开发中，我们可能会遇到这样的需求，一个账号只允许同时一个在线，当账号在其他地方登陆的时候，会踢出前面登陆的账号，那我们怎么实现</p><ul><li>自定义过滤器:继承AccessControlFilter</li><li>使用redis队列控制账号在线数目</li></ul><p>实现步骤：</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、只针对登录用户处理，首先判断是否登录</span><br><span class="line">2、使用RedissionClien创建队列</span><br><span class="line">3、判断当前sessionId是否存在于此用户的队列=key:登录名 value：多个sessionId</span><br><span class="line">4、不存在则放入队列尾端==&gt;存入sessionId</span><br><span class="line">5、判断当前队列大小是否超过限定此账号的可在线人数</span><br><span class="line">6、超过：</span><br><span class="line">*从队列头部拿到用户sessionId</span><br><span class="line">*从sessionManger根据sessionId拿到session</span><br><span class="line">*从sessionDao中移除session会话</span><br><span class="line">7、未超过：放过操作</span><br></pre></td></tr></table></figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p><code>AccessControlFilter：</code>控制对资源的访问的任何过滤器的超类，如果用户未通过身份验证，则可以将用户重定向到登录页面。这个超类提供了方法，借助它可以在用户超出登录最大在线人数后将其的session删除并且重定向到登录页面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KickedOutAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title class_">AccessControlFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DefaultWebSessionManager sessionManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisSessionDAO redisSessionDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> getSubject(request, response);</span><br><span class="line">        <span class="keyword">if</span> (!subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果没有登录，直接进行之后的流程</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存放session对象进入队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> (String) subject.getSession().getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">LoginName</span> <span class="operator">=</span> (String) subject.getPrincipal();</span><br><span class="line">        RDeque&lt;String&gt; queue = redissonClient.getDeque(<span class="string">&quot;KickedOutAuthorizationFilter:&quot;</span>+LoginName);</span><br><span class="line">        <span class="comment">//判断sessionId是否存在于此用户的队列中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> queue.contains(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            queue.addLast(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果此时队列大于1，则开始踢人</span></span><br><span class="line">        <span class="keyword">if</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            sessionId = queue.getFirst();</span><br><span class="line">            queue.removeFirst();</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                session = sessionManager.getSession(<span class="keyword">new</span> <span class="title class_">DefaultSessionKey</span>(sessionId));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (UnknownSessionException ex)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;session已经失效&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (ExpiredSessionException expiredSessionException)&#123;</span><br><span class="line">                log.info(<span class="string">&quot;session已经过期&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (session!=<span class="literal">null</span>)&#123;</span><br><span class="line">                redisSessionDAO.delete(session);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改ShiroConfig将我们自定义的过滤器添加进ShiroFilterFactoryBean中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> KickedOutAuthorizationFilter kickedOutAuthorizationFilter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> 自定义过滤器定义</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;kickedOut&quot;</span>,kickedOutAuthorizationFilter);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截所有需要登录的路径</li></ol></li><li><p>测试有效</p></li></ol><h2 id="SpringBoot-Shiro-Jwt整合"><a href="#SpringBoot-Shiro-Jwt整合" class="headerlink" title="SpringBoot+Shiro+Jwt整合"></a>SpringBoot+Shiro+Jwt整合</h2><h3 id="问题追踪"><a href="#问题追踪" class="headerlink" title="问题追踪"></a>问题追踪</h3><p>​    前面我们实现分布式的会话缓存，但是我们发现此功能的实现是基于浏览的cookie机制，也就是说用户禁用cookie后，我们的系统会就会产生会话不同的问题</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​    我们的前端可能是web、Android、ios等应用，同时我们每一个接口都提供了无状态的应答方式，这里我们提供了基于JWT的token生成方案</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、用户登陆之后，获得此时会话的sessionId,使用JWT根据sessionId颁发签名并设置过期时间(与session过期时间相同)返回token</span><br><span class="line"></span><br><span class="line">2、将token保存到客户端本地，并且每次发送请求时都在header上携带JwtToken</span><br><span class="line"></span><br><span class="line">3、ShiroSessionManager继承DefaultWebSessionManager，重写getSessionId方法，从header上检测是否携带JwtToken，如果携带，则进行解码JwtToken，使用JwtToken中的jti作为SessionId。</span><br><span class="line"></span><br><span class="line">4、重写shiro的默认过滤器，使其支持jwtToken有效期校验、及对JSON的返回支持</span><br><span class="line">JwtAuthcFilter:实现是否需要登录的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br><span class="line">JwtPermsFilter:实现是否有对应资源的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br><span class="line">JwtRolesFilter:实现是否有对应角色的过滤，拒绝时如果header上携带JwtToken,则返回对应json</span><br></pre></td></tr></table></figure><h3 id="JWT概述"><a href="#JWT概述" class="headerlink" title="JWT概述"></a>JWT概述</h3><p>JWT（JSON WEB TOKEN）：JSON网络令牌，JWT是一个轻便的安全跨平台传输格式，定义了一个紧凑的自包含的方式在不同实体之间安全传输信息（JSON格式）。它是在Web环境下两个实体之间传输数据的一项标准。实际上传输的就是一个字符串。</p><ul><li><p>广义上：JWT是一个标准的名称；</p></li><li><p>狭义上：JWT指的就是用来传递的那个token字符串</p></li></ul><p>JWT由三部分构成：header（头部）、payload（载荷）和signature（签名）。</p><ol><li><p>Header</p><p>存储两个变量</p><ol><li>秘钥（可以用来比对）</li><li>算法（也就是下面将Header和payload加密成Signature）</li></ol></li><li><p>payload</p><p>存储很多东西，基础信息有如下几个</p><ol><li>签发人，也就是这个“令牌”归属于哪个用户。一般是<code>userId</code> </li><li>创建时间，也就是这个令牌是什么时候创建的</li><li>失效时间，也就是这个令牌什么时候失效(session的失效时间)</li><li>唯一标识，一般可以使用算法生成一个唯一标识（jti&#x3D;&#x3D;&gt;sessionId）</li></ol></li><li><p>Signature</p><p>这个是上面两个经过Header中的算法加密生成的，用于比对信息，防止篡改Header和payload</p></li></ol><p>然后将这三个部分的信息经过加密生成一个<code>JwtToken</code>的字符串，发送给客户端，客户端保存在本地。当客户端发起请求的时候携带这个到服务端(可以是在<code>cookie</code>，可以是在<code>header</code>)，在服务端进行验证，我们需要解密对于的payload的内容</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>首先导入Jwt的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Jwt的工具类用于签发令牌,验证令牌等。</p><p>这个可以根据实际项目情况进行自定义更改（例如JWT密钥的指定）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt加密密钥 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_SECRET</span> <span class="operator">=</span> <span class="string">&quot;aPbOBbnH4gnZBzIYEY7mxWNu49kYljNPMeva9Fjrwwqzw0bFlO0kPXZTCGaVcw0j&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 签发令牌</span></span><br><span class="line"><span class="comment">     *      jwt字符串包括三个部分</span></span><br><span class="line"><span class="comment">     *        1. header</span></span><br><span class="line"><span class="comment">     *            -当前字符串的类型，一般都是“JWT”</span></span><br><span class="line"><span class="comment">     *            -哪种算法加密，“HS256”或者其他的加密算法</span></span><br><span class="line"><span class="comment">     *            所以一般都是固定的，没有什么变化</span></span><br><span class="line"><span class="comment">     *        2. payload</span></span><br><span class="line"><span class="comment">     *            一般有四个最常见的标准字段（下面有）</span></span><br><span class="line"><span class="comment">     *            iat：签发时间，也就是这个jwt什么时候生成的</span></span><br><span class="line"><span class="comment">     *            jti：JWT的唯一标识</span></span><br><span class="line"><span class="comment">     *            iss：签发人，一般都是username或者userId</span></span><br><span class="line"><span class="comment">     *            exp：过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iss 签发人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis 有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id jwt中存储的用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> jws</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">IssuedToken</span><span class="params">(String iss, <span class="type">long</span> ttlMillis,String sessionId, Integer id)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">null</span>) &#123;</span><br><span class="line">            claims.put(<span class="string">&quot;userId&quot;</span>,id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line"></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setId(sessionId)<span class="comment">//2. 这个是JWT的唯一标识，一般设置成唯一的，这个方法可以生成唯一标识,此时存储的为sessionId,登录成功后回写</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis))<span class="comment">//1. 这个地方就是以毫秒为单位，换算当前系统时间生成的iat</span></span><br><span class="line">                .setSubject(iss)<span class="comment">//3. 签发人，也就是JWT是给谁的（逻辑上一般都是username或者userId）</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);<span class="comment">//这个地方是生成jwt使用的算法和秘钥</span></span><br><span class="line">        <span class="keyword">if</span> (ttlMillis &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);<span class="comment">//4. 过期时间，这个也是使用毫秒生成的，使用当前时间+前面传入的持续时间生成</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 解析令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">decodeToken</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到 DefaultJwtParser</span></span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                <span class="comment">// 设置签名的秘钥</span></span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                <span class="comment">// 设置需要解析的 jwt</span></span><br><span class="line">                .parseClaimsJws(jwtToken)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> JWT_SECRET;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承<code>DefaultWebSessionManager</code>重写<code>getSessionId</code>方法 </p><p><code>getSessionId()</code>方法就是Shiro用于获取SessionId的方法，默认是从cookie中获取，但是我们采用JWT了，就得从Jwt中获取所以我们对该方法进行了修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroSessionManager</span> <span class="keyword">extends</span> <span class="title class_">DefaultWebSessionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFERENCED_SESSION_ID_SOURCE</span> <span class="operator">=</span> <span class="string">&quot;Stateless request&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShiroSessionManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法主要是让我们自定义获取sessionId的方法 在将sessionId返回让后续的流程去获取session 然后鉴权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Serializable <span class="title function_">getSessionId</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            <span class="comment">//如果没有携带id参数则按照父类的方式在cookie进行获取</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getSessionId(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果请求头中有 authToken 则其值为jwtToken，然后解析出会话id sessionId</span></span><br><span class="line">                                                  request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE,REFERENCED_SESSION_ID_SOURCE);</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">decode</span> <span class="operator">=</span> JwtTokenUtil.decodeToken(jwtToken);</span><br><span class="line">            <span class="comment">//获取我们创建jwt时填入的sessionId</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String) decode.get(<span class="string">&quot;jti&quot;</span>);</span><br><span class="line">            log.info(id); request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID,id);</span><br><span class="line">            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID,Boolean.TRUE);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：我们这里获取到了sessionId后 Shiro框架会将SessionId传入SessionDAO中去获取Session 再通过Session中存储的用户登录权限信息进行鉴权</strong>。</p></li><li><p>自定义重写三类Shiro过滤器</p><p>之所以要重写是为了更好的适配前后端分离的项目，因为Shiro默认过滤器没有通过是会返回一个页面的，但是前后端分离的项目不需要你去返回页面了，所以我们需要重写我们要使用的过滤器使其返回前后端规定好的对象返回。</p><p>重写<code>authc</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthcFilter</span> <span class="keyword">extends</span> <span class="title class_">FormAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 是否允许访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：走jwt校验</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtTokenUtil.decodeToken(jwtToken);</span><br><span class="line">            <span class="keyword">if</span> (!claims.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.isAccessAllowed(request, response, mappedValue);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有携带token：走原始校验</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.isAccessAllowed(request, response, mappedValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有登录&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写<code>perms</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtPermsFilter</span> <span class="keyword">extends</span> <span class="title class_">PermissionsAuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有权限&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写<code>roles</code>过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtRolesFilter</span> <span class="keyword">extends</span> <span class="title class_">RolesAuthorizationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 访问拒绝时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//判断当前请求头中是否带有jwtToken的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> WebUtils.toHttp(request).getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有：返回json的应答</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(jwtToken))&#123;</span><br><span class="line">            Result&lt;String&gt; result = ResultUtil.fail(<span class="string">&quot;没有角色&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSONObject.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有：走原始方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将新增配置添加进ShiroConfig配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 会话管理器</span></span><br><span class="line"><span class="comment"> * 将刚刚创建好的会话管理器添加进配置类中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;sessionManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ShiroSessionManager <span class="title function_">shiroSessionManager</span><span class="params">(RedisSessionDAO redisSessionDAO)</span>&#123;</span><br><span class="line">    <span class="type">ShiroSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroSessionManager</span>();</span><br><span class="line">    sessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">    sessionManager.setSessionValidationSchedulerEnabled(<span class="literal">false</span>);</span><br><span class="line">    sessionManager.setSessionIdCookieEnabled(<span class="literal">true</span>);</span><br><span class="line">    sessionManager.setSessionIdCookie(simpleCookie());</span><br><span class="line">    <span class="comment">//设置超时</span></span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">3600</span>*<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建cookie对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(name=&quot;sessionIdCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SimpleCookie <span class="title function_">simpleCookie</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">SimpleCookie</span> <span class="variable">simpleCookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>();</span><br><span class="line">   simpleCookie.setName(<span class="string">&quot;ShiroSession&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 自定义过滤器定义</span></span><br><span class="line"><span class="comment"> * 将我们重写三个过滤器添加进来 为了后面添加进过滤器工厂做准备</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Filter&gt; <span class="title function_">filters</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Filter&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Filter&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;jwt-authc&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtAuthcFilter</span>());</span><br><span class="line">    map.put(<span class="string">&quot;jwt-perms&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtPermsFilter</span>());</span><br><span class="line">    map.put(<span class="string">&quot;jwt-roles&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtRolesFilter</span>());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将自定义的会话管理器添加进securityManager中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm, RedisSessionDAO redisSessionDAO)</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">    securityManager.setSessionManager(shiroSessionManager(redisSessionDAO)); <span class="comment">//这里添加自定义会话管理器</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将刚刚三个自定义的过滤器添加进过滤器工厂中。</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filters()); <span class="comment">//将刚刚三个自定义的过滤器添加进过滤器工厂中。</span></span><br><span class="line">        </span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果要使用刚刚三个自定义的过滤器进行过滤器拦截的话 就需要使用那个三个自定义的关键词来配置过滤。</p></li><li><p><code>LoginService</code>中的<code>Login</code>方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">loginForJwt</span><span class="params">(LoginDTO loginDTO)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(loginDTO.getUsername(), loginDTO.getPassword());</span><br><span class="line">            <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">shiroSessionId</span> <span class="operator">=</span> (String) subject.getSession().getId();</span><br><span class="line">            <span class="comment">//登录后颁发的令牌</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            userLambdaQueryWrapper.eq(User::getUsername,loginDTO.getUsername());</span><br><span class="line">            <span class="type">User</span> <span class="variable">shiroUser</span> <span class="operator">=</span> userMapper.selectOne(userLambdaQueryWrapper);</span><br><span class="line">            jwtToken = JwtTokenUtil.IssuedToken(<span class="string">&quot;system&quot;</span>, subject.getSession().getTimeout(),shiroSessionId,shiroUser.getId());</span><br><span class="line">            map.put(<span class="string">&quot;jwtToken&quot;</span>,jwtToken );</span><br><span class="line">            log.info(<span class="string">&quot;jwtToken:&#123;&#125;&quot;</span>,map.toString());</span><br><span class="line">            <span class="comment">//创建缓存</span></span><br><span class="line"><span class="comment">//            this.loadAuthorityToCache();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.fail(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.succeed(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主旨就是使用Shiro的login方法进行登录，登录如果没有抛出异常则说明登录成功，登录成功后将sessionId封装成JWS返回到前端，</p><p>后续的前端通过在请求头部添加token的方式将token发送到后端，后端通过自定义的会话管理器（<code>ShiroSessionManager</code>）的<code>getSessionId</code>的方法解码<code>token</code>获得其中的<code>sessionId</code>， 再由后续的<code>SessionDAO</code>通过<code>SessionId</code>获得<code>Session</code>进行登录鉴权。</p></li></ol><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="盐序列化"><a href="#盐序列化" class="headerlink" title="盐序列化"></a>盐序列化</h3><p>当我们的密码有加密盐的时候若想使用<code>Redis</code>作为<code>Realm</code>的缓存,需要重写实现<code>ByteSource</code>接口，因为<code>Redis</code>存储信息的时候需要对信息进行序列化后才能进行存储，但是<code>ByteSource</code>的实现类<code>SimpleByteSource</code>并没有实现序列化(即没有实现<code>Serializable</code>接口)，同时由于<code>SimpleByteSource</code>没有无参构造导致无法反序列化。</p><p>重写后的<code>MyByteSource</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ： Donald</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ： 2020/10/18 17:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>： 自定义salt的实现 主要巍峨salt的序列化</span></span><br><span class="line"><span class="comment"> * 采用redis缓存shiro的认证信息，并且要对这些信息进行序列化后再存储，但是序列化的时候，SimpleByteSource类没有实现Serializable接口，导致序列化失败</span></span><br><span class="line"><span class="comment"> * SimpleByteSource没有默认构造方法，导致反序列化的时候失败</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyByteSource</span> <span class="keyword">implements</span> <span class="title class_">ByteSource</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*这里将final去掉了,去掉后要在后面用getter和setter赋、取值*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] bytes;</span><br><span class="line">    <span class="keyword">private</span> String cachedHex;</span><br><span class="line">    <span class="keyword">private</span> String cachedBase64;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*添加了一个无参构造方法*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = CodecSupport.toBytes(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(ByteSource source)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = source.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = (<span class="keyword">new</span> <span class="title class_">MyByteSource</span>.BytesHelper()).getBytes(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyByteSource</span><span class="params">(InputStream stream)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = (<span class="keyword">new</span> <span class="title class_">MyByteSource</span>.BytesHelper()).getBytes(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCompatible</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> <span class="type">byte</span>[] || o <span class="keyword">instanceof</span> <span class="type">char</span>[] || o <span class="keyword">instanceof</span> String || o <span class="keyword">instanceof</span> ByteSource || o <span class="keyword">instanceof</span> File || o <span class="keyword">instanceof</span> InputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*这里加了getter和setter*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes == <span class="literal">null</span> || <span class="built_in">this</span>.bytes.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toHex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.cachedHex == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedHex = Hex.encodeToString(<span class="built_in">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cachedHex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toBase64</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.cachedBase64 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedBase64 = Base64.encodeToString(<span class="built_in">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cachedBase64;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toBase64();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.bytes != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.bytes.length != <span class="number">0</span> ? Arrays.hashCode(<span class="built_in">this</span>.bytes) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ByteSource) &#123;</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">bs</span> <span class="operator">=</span> (ByteSource)o;</span><br><span class="line">            <span class="keyword">return</span> Arrays.equals(<span class="built_in">this</span>.getBytes(), bs.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BytesHelper</span> <span class="keyword">extends</span> <span class="title class_">CodecSupport</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">BytesHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getBytes(File file) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toBytes(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getBytes(InputStream stream) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.toBytes(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*取代原先加盐的工具类*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Util</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ByteSource <span class="title function_">bytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyByteSource</span>(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ByteSource <span class="title function_">bytes</span><span class="params">(String arg0)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyByteSource</span>(arg0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<code>UserRealm</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username, user.getPassword(), MyByteSource.Util.bytes(user.getSalt()), <span class="built_in">this</span>.getName());</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><code>AccessControlFilter</code>过滤器中有两个方法 分别为<code>isAccessAllowed</code>和<code>onAccessDenied</code></p><blockquote><p>isAccessAllowed：表示是否允许访问；mappedValue就是[urls]配置中拦截器参数部分，如果允许访问返回true，否则false；</p><p>onAccessDenied：表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可。</p></blockquote><hr><h2 id="分布式网关"><a href="#分布式网关" class="headerlink" title="分布式网关"></a>分布式网关</h2><p><strong>未完待续。。。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shiro&quot;&gt;&lt;a href=&quot;#Shiro&quot; class=&quot;headerlink&quot; title=&quot;Shiro&quot;&gt;&lt;/a&gt;Shiro&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简</summary>
      
    
    
    
    <category term="安全框架" scheme="https://devildyw.github.io/categories/%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Java" scheme="https://devildyw.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--创建型模式之建造者设计模式</title>
    <link href="https://devildyw.github.io/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-20T11:25:48.000Z</published>
    <updated>2022-06-20T11:38:31.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之建造者设计模式"><a href="#设计模式–创建型模式之建造者设计模式" class="headerlink" title="设计模式–创建型模式之建造者设计模式"></a>设计模式–创建型模式之建造者设计模式</h1><p>​    事实上，在平时编写代码时，我们通常都会忽略对象的复杂性，优先考虑使用工厂模式创建对象，而不是建造者模式。因为工厂模式和建造者模式的作用都是创建一个产品对象，相对于建造者模式来说，工厂模式没有抽象建造者和指挥者，所以结构更加简洁直接，因此更常使用。</p><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id17">1.1. 模式动机</a></h2><p>​    无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id18">1.2. 模式定义</a></h2><p>造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id19">1.3. 模式结构</a></h2><p>建造者模式包含如下角色：</p><ul><li><code>Builder</code>：抽象建造者</li><li><code>ConcreteBuilder</code>：具体建造者</li><li><code>Director</code>：指挥者</li><li><code>Product</code>：产品角色</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/Builder.jpg" alt="../_images/Builder.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id20">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_Builder.jpg" alt="../_images/seq_Builder.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id21">1.5. 代码分析</a></h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p><code>Computer</code>产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cpu 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ram 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * usb接口数量 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 屏幕 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 既然是必选的参数 那么每次构造该类的实例都应该有这两参数 其他的参数可选就靠set方法构建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu cpu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ram ran</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRam</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Builder</code>抽象建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置usb接口数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置键盘</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置屏幕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回构建好的产品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Computer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">getComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>LenovoComputerComputerBuilder</code>具体建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LenovoComputerComputerBuilder</span> <span class="keyword">extends</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LenovoComputerComputerBuilder</span><span class="params">(String cpu, String ram)</span>&#123;</span><br><span class="line">        computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setUsbCount(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setKeyboard(<span class="string">&quot;Lenovo键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setDisplay(<span class="string">&quot;Lenovo显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MacComputerComputerBuilder</code>具体建造者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacComputerComputerBuilder</span> <span class="keyword">extends</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MacComputerComputerBuilder</span><span class="params">(String cpu, String ram)</span>&#123;</span><br><span class="line">        computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setUsbCount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setKeyboard(<span class="string">&quot;Mac键盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setDisplay(<span class="string">&quot;Mac显示器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ComputerDirector</code>指导者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerDirector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeComputer</span><span class="params">(ComputerBuilder builder)</span>&#123;</span><br><span class="line">        builder.setDisplay();</span><br><span class="line">        builder.setKeyboard();</span><br><span class="line">        builder.setUsbCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code>演示类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================Mac电脑================&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 首先创建指导者 他来指导生产电脑</span></span><br><span class="line">        <span class="type">ComputerDirector</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerDirector</span>();</span><br><span class="line">        <span class="comment">//2. 创建具体建造类</span></span><br><span class="line">        <span class="type">ComputerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacComputerComputerBuilder</span>(<span class="string">&quot;M1处理器&quot;</span>, <span class="string">&quot;三星125&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 调用指导者的方法生成产品</span></span><br><span class="line">        director.makeComputer(builder);</span><br><span class="line">        <span class="comment">//4. 产品构造完毕 取出产品</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> builder.getComputer();</span><br><span class="line">        <span class="comment">//5. 检验结果</span></span><br><span class="line">        System.out.println(computer);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================Lenovo电脑================&quot;</span>);</span><br><span class="line">        <span class="comment">//步骤同上</span></span><br><span class="line">        builder = <span class="keyword">new</span> <span class="title class_">LenovoComputerComputerBuilder</span>(<span class="string">&quot;I9处理器&quot;</span>, <span class="string">&quot;海力士222&quot;</span>);</span><br><span class="line">        director.makeComputer(builder);</span><br><span class="line">        computer = builder.getComputer();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220620193503069.png" alt="image-20220620193503069"></p><hr><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>​    一般情况下，我们更习惯使用静态内部类的方式实现建造者模式，即一个产品类内部自动带有一个具体建造者，由它负责该产品的组装创建，不再需要 Builder 和 Director。这样做可以使产品表示与创建之间的联系更加紧密，结构更加紧凑，同时使得建造者模式更加简洁。</p><p><code>Computer</code>产品类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cpu 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ram 属于必须构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * usb接口数量 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 屏幕 属于可选构件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 既然是必选的参数 那么每次构造该类的实例都应该有这两参数 其他的参数可选就靠set方法构建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu cpu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ram ran</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 静态内部类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(String cpu, String ram)</span> &#123;</span><br><span class="line">            computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu,ram);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">            computer.setUsbCount(usbCount);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setKeyBoard</span><span class="params">(String keyBoard)</span> &#123;</span><br><span class="line">            computer.setKeyboard(keyBoard);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setDisPlay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">            computer.setDisplay(display);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> computer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRam</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUsbCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = usbCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisplay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&quot;</span> + usbCount +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Client</code>演示类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//静态内部类好处就是可以链式调用 并且在继承了传统模式的优点下 免去了Director和Builder两个角色 使得代码更简洁更直观</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.Builder(<span class="string">&quot;I9&quot;</span>, <span class="string">&quot;三星&quot;</span>)</span><br><span class="line">                .setUsbCount(<span class="number">2</span>)</span><br><span class="line">                .setKeyBoard(<span class="string">&quot;罗技&quot;</span>)</span><br><span class="line">                .setDisPlay(<span class="string">&quot;三星24寸&quot;</span>)</span><br><span class="line">                .builder();</span><br><span class="line">        <span class="comment">//检验</span></span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220620193825197.png" alt="image-20220620193825197"></p><h2 id="1-6-模式分析"><a href="#1-6-模式分析" class="headerlink" title="1.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id22">1.6. 模式分析</a></h2><p>抽象建造者类中定义了产品的创建方法和返回方法;</p><p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id23">1.7. 实例</a></h2><p>实例：KFC套餐</p><p>建造者模式可以用于描述KFC如何创建套餐：套餐是一个复杂对象，它一般包含主食（如汉堡、鸡肉卷等）和饮料（如果汁、 可乐等）等组成部分，不同的套餐有不同的组成部分，而KFC的服务员可以根据顾客的要求，一步一步装配这些组成部分，构造一份完整的套餐，然后返回给顾客。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/KFCBuilder.jpg" alt="../_images/KFCBuilder.jpg"></p><h2 id="1-8-优点"><a href="#1-8-优点" class="headerlink" title="1.8. 优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id24">1.8. 优点</a></h2><ul><li>在建造者模式中， <strong>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</strong></li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， <strong>用户使用不同的具体建造者即可得到不同的产品对象</strong> 。</li><li><strong>可以更加精细地控制产品的创建过程</strong> 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li><strong>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</strong></li></ul><h2 id="1-9-缺点"><a href="#1-9-缺点" class="headerlink" title="1.9. 缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id25">1.9. 缺点</a></h2><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id26">1.10. 适用环境</a></h2><p>在以下情况下可以使用建造者模式：</p><ul><li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id27">1.11. 模式应用</a></h2><p>在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。</p><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id28">1.12. 模式扩展</a></h2><p>建造者模式的简化:</p><ul><li>省略抽象建造者角色：如果系统中只需要一个具体建造者的话，可以省略掉抽象建造者。</li><li>省略指挥者角色：在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略掉，那么还可以省略指挥者角色，让</li></ul><p>Builder角色扮演指挥者与建造者双重角色。</p><p>建造者模式与抽象工厂模式的比较:</p><ul><li>与抽象工厂模式相比， <strong>建造者模式返回一个组装好的完整产品</strong> ，而 <strong>抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</strong></li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 <strong>汽车配件生产工厂</strong> ，生产一个产品族的产品，那么建造者模式就是一个 <strong>汽车组装工厂</strong> ，通过对部件的组装可以返回一辆完整的汽车。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html#id29">1.13. 总结</a></h2><ul><li>建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。</li><li>建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li><li>在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li><li>建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li><li>建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之建造者设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之建造者设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之建造者设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之建造者设计模式&lt;/h1&gt;&lt;p&gt;​    事</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--创建型模式之抽象工厂设计模式</title>
    <link href="https://devildyw.github.io/2022/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-19T08:49:01.000Z</published>
    <updated>2022-06-19T08:59:26.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之抽象工厂设计模式"><a href="#设计模式–创建型模式之抽象工厂设计模式" class="headerlink" title="设计模式–创建型模式之抽象工厂设计模式"></a>设计模式–创建型模式之抽象工厂设计模式</h1><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id18">1.1. 模式动机</a></h2><ul><li><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p><blockquote><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><ul><li><strong>产品等级结构</strong> ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li><li><strong>产品族</strong> ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul></blockquote></li><li><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p></li><li><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p></li><li><p>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</p></li></ul><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id19">1.2. 模式定义</a></h2><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id20">1.3. 模式结构</a></h2><p>抽象工厂模式包含如下角色：</p><ul><li><code>AbstractFactory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li><li><code>AbstractProduct</code>：抽象产品</li><li><code>Product</code>：具体产品</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/AbatractFactory.jpg" alt="../_images/AbatractFactory.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id21">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_AbatractFactory.jpg" alt="../_images/seq_AbatractFactory.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id22">1.5. 代码分析</a></h2><p><code>Phone</code>抽象产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 打电话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 发送短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Phone</code>具体产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Router</code>抽象产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 打开wifi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法 设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router</code>具体产品</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiRouter</span> <span class="keyword">extends</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiRouter</span> <span class="keyword">extends</span> <span class="title class_">Router</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openWifi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器打开wifi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器设置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><code>ProductFactory</code>抽象工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抽象方法 获取手机</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Phone</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抽象方法 获取路由器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Router</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Router <span class="title function_">getRouter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HuaweiFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaweiFactory</span> <span class="keyword">extends</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Huawei手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaweiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Huawei路由器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaweiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XiaomiFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiFactory</span> <span class="keyword">extends</span> <span class="title class_">ProductFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Xiaomi手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Router <span class="title function_">getRouter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产Xiaomi路由器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaomiRouter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>Client</code>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============小米系列=============&quot;</span>);</span><br><span class="line">        <span class="type">ProductFactory</span> <span class="variable">productFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaomiFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> productFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">        <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> productFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============华为系列=============&quot;</span>);</span><br><span class="line">        productFactory = <span class="keyword">new</span> <span class="title class_">HuaweiFactory</span>();</span><br><span class="line">        phone = productFactory.getPhone();</span><br><span class="line">        phone.callUp();</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">        router = productFactory.getRouter();</span><br><span class="line">        router.openWifi();</span><br><span class="line">        router.setting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220619165656769.png" alt="image-20220619165656769"></p><h2 id="1-6-模式分析"><a href="#1-6-模式分析" class="headerlink" title="1.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id23">1.6. 模式分析</a></h2><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id24">1.7. 实例</a></h2><h2 id="1-8-优点"><a href="#1-8-优点" class="headerlink" title="1.8. 优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id25">1.8. 优点</a></h2><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li><li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><h2 id="1-9-缺点"><a href="#1-9-缺点" class="headerlink" title="1.9. 缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id26">1.9. 缺点</a></h2><ul><li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id27">1.10. 适用环境</a></h2><p>在以下情况下可以使用抽象工厂模式：</p><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li><li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id28">1.11. 模式应用</a></h2><p>在很多软件系统中需要更换界面主题，要求界面中的按钮、文本框、背景色等一起发生改变时，可以使用抽象工厂模式进行设计。</p><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id29">1.12. 模式扩展</a></h2><h3 id="“开闭原则”的倾斜性"><a href="#“开闭原则”的倾斜性" class="headerlink" title="“开闭原则”的倾斜性"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id30">“开闭原则”的倾斜性</a></h3><ul><li><ul><li><p>“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><p>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。</p></li></ul></li><li><p>抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。</p></li></ul><h3 id="工厂模式的退化"><a href="#工厂模式的退化" class="headerlink" title="工厂模式的退化"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id31">工厂模式的退化</a></h3><ul><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html#id32">1.13. 总结</a></h2><ul><li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li><li>抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li><li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。</li><li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li><li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之抽象工厂设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之抽象工厂设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之抽象工厂设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之抽象工厂设计模式&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--工厂方法设计模式</title>
    <link href="https://devildyw.github.io/2022/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-11T13:57:45.000Z</published>
    <updated>2022-06-19T09:00:33.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–创建型模式之工厂方法设计模式"><a href="#设计模式–创建型模式之工厂方法设计模式" class="headerlink" title="设计模式–创建型模式之工厂方法设计模式"></a>设计模式–创建型模式之工厂方法设计模式</h1><h2 id="1-1-模式动机"><a href="#1-1-模式动机" class="headerlink" title="1.1. 模式动机"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id16">1.1. 模式动机</a></h2><p>现在对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的工厂子类去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在抽象按钮工厂类中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合“开闭原则”。</p><h2 id="1-2-模式定义"><a href="#1-2-模式定义" class="headerlink" title="1.2. 模式定义"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id17">1.2. 模式定义</a></h2><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><h2 id="1-3-模式结构"><a href="#1-3-模式结构" class="headerlink" title="1.3. 模式结构"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id18">1.3. 模式结构</a></h2><p>工厂方法模式包含如下角色：</p><ul><li><code>Product</code>：抽象产品</li><li><code>ConcreteProduct</code>：具体产品</li><li><code>Factory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/FactoryMethod.jpg" alt="../_images/FactoryMethod.jpg"></p><h2 id="1-4-时序图"><a href="#1-4-时序图" class="headerlink" title="1.4. 时序图"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id19">1.4. 时序图</a></h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_FactoryMethod.jpg" alt="../_images/seq_FactoryMethod.jpg"></p><h2 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5. 代码分析"></a><a href="https://github.com/Devildyw/design-patterns/tree/master/DesignPatterns-Java/FactoryMethodPattern">1.5. 代码分析</a></h2><p><strong>注释也可以仔细看看哦</strong></p><p>抽象产品类<code>Vehicles.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-20:13</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类为工厂方法设计模式中的抽象产品角色&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;基类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicles</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交通工具的核心方法 &quot;运行&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体产品类<code>Bike.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-20:13</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类角色为工厂方法设计模式中的具体产品角色&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;自行车继承自交通工具抽象类实现了抽象方法&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bike</span> <span class="keyword">extends</span> <span class="title class_">Vehicles</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bike is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂类<code>VehiclesFactory.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-11-21:52</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;工厂方法设计模式 该类为抽象工厂角色&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     这里创建了一个抽象的工厂类 是为了让具体工厂的子类来实现这个特定的方法 以便于生产产品</span></span><br><span class="line"><span class="comment"> *     之所以这样便于生产产品是相较于简单工厂设计模式的，简单工厂设计模式生产产品是将生产过程耦合在了一起</span></span><br><span class="line"><span class="comment"> *     这样在产品不多的时候或是产品种类确定不会经常改变时较为好用，但是我们实际生产中很难确定自己的产品种类就一定不变</span></span><br><span class="line"><span class="comment"> *     所以我们可以使用工厂方法设计模式，他不在原来的类上进行修改，而是给出了一个抽象类 新添加的产品需要创建一个具体工厂类</span></span><br><span class="line"><span class="comment"> *     实现具体的抽象方法以便于创建具体的产品。符合开闭原则的同时也避免了简单工厂设计模式的高耦合性。</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">VehiclesFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 具体工厂继承该类并且实现该抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Vehicles</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Vehicles <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体工厂类<code>BikeFactory.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Bike;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-12-0:44</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;工厂方法设计模式 该类为具体工厂角色&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BikeFactory</span> <span class="keyword">extends</span> <span class="title class_">VehiclesFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Vehicles <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在生成bike...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示类<code>Main.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyw.factoryMethodPattern.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.factory.BikeFactory;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.factory.VehiclesFactory;</span><br><span class="line"><span class="keyword">import</span> com.dyw.factoryMethodPattern.product.Vehicles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-12-0:48</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;该类用于向读者展示工厂方法是否有效&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;这里仅仅只是展示了一个产品的工厂生产 通过这一个例子 读者足以理解本片想要表达的含义&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这里我想要一辆自行车</span></span><br><span class="line">        <span class="comment">//首先创建一个工厂类 让他帮我们创建类</span></span><br><span class="line">        <span class="type">VehiclesFactory</span> <span class="variable">bikeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BikeFactory</span>();</span><br><span class="line">        <span class="comment">//工厂类调用特定方法生产产品</span></span><br><span class="line">        <span class="type">Vehicles</span> <span class="variable">product</span> <span class="operator">=</span> bikeFactory.createProduct();</span><br><span class="line">        <span class="comment">//执行产品特有的方法</span></span><br><span class="line">        product.work();</span><br><span class="line">        <span class="comment">//检验结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/image-20220612010908971.png" alt="image-20220612010908971"></p><h2 id="2-6-模式分析"><a href="#2-6-模式分析" class="headerlink" title="2.6. 模式分析"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id21">2.6. 模式分析</a></h2><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</p><h2 id="1-7-实例"><a href="#1-7-实例" class="headerlink" title="1.7. 实例"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id22">1.7. 实例</a></h2><p>日志记录器</p><p>某系统日志记录器要求支持多种日志记录方式，如文件记录、数据库记录等，且用户可以根据要求动态选择日志记录方式， 现使用工厂方法模式设计该系统。</p><p>结构图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/loger.jpg" alt="../_images/loger.jpg"></p><p>时序图：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/seq_loger.jpg" alt="../_images/seq_loger.jpg"></p><h2 id="1-8-工厂方法模式的优点"><a href="#1-8-工厂方法模式的优点" class="headerlink" title="1.8. 工厂方法模式的优点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id23">1.8. 工厂方法模式的优点</a></h2><ul><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h2 id="1-9-工厂方法模式的缺点"><a href="#1-9-工厂方法模式的缺点" class="headerlink" title="1.9. 工厂方法模式的缺点"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id24">1.9. 工厂方法模式的缺点</a></h2><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul><h2 id="1-10-适用环境"><a href="#1-10-适用环境" class="headerlink" title="1.10. 适用环境"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id25">1.10. 适用环境</a></h2><p>在以下情况下可以使用工厂方法模式：</p><ul><li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li><li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li><li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul><h2 id="1-11-模式应用"><a href="#1-11-模式应用" class="headerlink" title="1.11. 模式应用"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id26">1.11. 模式应用</a></h2><p><code>JDBC</code>中的工厂方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn=DriverManager.getConnection(<span class="string">&quot;jdbc:microsoft:sqlserver://loc</span></span><br><span class="line"><span class="string">alhost:1433; DatabaseName=DB;user=sa;password=&quot;</span>);</span><br><span class="line">Statement statement=conn.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(<span class="string">&quot;select * from UserInfo&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-12-模式扩展"><a href="#1-12-模式扩展" class="headerlink" title="1.12. 模式扩展"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id27">1.12. 模式扩展</a></h2><ul><li>使用多个工厂方法：在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。</li><li>产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中，然后根据客户对产品的请求，对集合进行查询。如果有满足要求的产品对象，就直接将该产品返回客户端；如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。</li><li>多态性的丧失和模式的退化：如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意，发生退化，此时就不再是工厂方法模式了。一般来说，工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成简单工厂模式。</li></ul><h2 id="1-13-总结"><a href="#1-13-总结" class="headerlink" title="1.13. 总结"></a><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/factory_method.html#id28">1.13. 总结</a></h2><ul><li>工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li><li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li><li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li><li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li><li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–创建型模式之工厂方法设计模式&quot;&gt;&lt;a href=&quot;#设计模式–创建型模式之工厂方法设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–创建型模式之工厂方法设计模式&quot;&gt;&lt;/a&gt;设计模式–创建型模式之工厂方法设计模式&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://devildyw.github.io/2022/05/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://devildyw.github.io/2022/05/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-05-21T12:59:28.000Z</published>
    <updated>2022-05-21T13:04:40.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布隆过滤器-BloomFilter"><a href="#布隆过滤器-BloomFilter" class="headerlink" title="布隆过滤器(BloomFilter)"></a>布隆过滤器(BloomFilter)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    我们经常会将一部分数据放在redis等缓存中，比如产品信息。这样有查询请求进来，我们就可以根据产品id直接去缓存中取得数据，如果没有再去读取数据库，再将数据放入缓存，再返回数据，大大减少了访问数据库的次数，这是提升性能最普遍的方式。</p><p>​    但是如果现在有大量的请求进来，而且都在请求一个不存在的id，就会导致大量的请求去访问数据库，而数据库对于不存在的id是需要遍历整个表之后返回一个null的，这样大量的请求访问数据库，很大可能导致数据库宕机，</p><p>这时我们急需一个解决方案，在无效id访问缓存的之前就判断该id不存在。布隆过滤器就是一个很好的选择。</p><hr><h2 id="背景及意义"><a href="#背景及意义" class="headerlink" title="背景及意义"></a>背景及意义</h2><p>​    <strong>布隆过滤器</strong>（英语：Bloom Filter）是 1970 年由一个叫做布隆的老哥提出的。它底层实际上是一个很长的bit数组和一系列随机映射函数。主要用于判断一个元素是否在一个集合中。</p><p>​    通常我们会遇到很多要判断一个元素是否在某个集合中的业务场景(比如缓存场景)，一般想到的是将集合中所有元素保存起来，然后通过比较确定。链表、树、散列表（又叫哈希表，Hash table）等等数据结构都是这种思路。但是随着集合中元素的增加，我们需要的存储空间也会呈现线性增长，最终达到瓶颈。同时检索速度也越来越慢，这个时候，布隆过滤器（Bloom Filter）就应运而生。</p><hr><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>布隆过滤器的数据结构如图所示</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/20200714114525436.png" alt="在这里插入图片描述"></p><p>可以发现最底层是一个bit数组，通过一系列hash算法将元素映射到bit数组上。下面我们来介绍一下布隆过滤器（<code>Bloom Filter</code>）的算法。</p><hr><p><strong>当一个元素加入到布隆过滤器中的时候，会进行如下操作。</strong></p><blockquote><ul><li>使用布隆过滤器中的hash函数对元素值进行计算，得到元素的hash值（有几个hash函数获得几个hash值）。</li><li>根据得到的hash值，在bit数组中把对应下标的值由0置为1.</li></ul></blockquote><p><strong>当我们需要判断一个元素是否存在于布隆过滤器中时，会进行如下操作。</strong></p><blockquote><ul><li>对给定元素再次进行相同的hash计算；</li><li>得到值之后判断bit数组中的每个元素是否都为1，如果值为1，那么说明整个值在布隆过滤器中，如果存在一个值不为1，说明该元素不在过滤器中。</li></ul></blockquote><p>如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p><p><strong>因为hash冲突的缘故，不同元素通过hash计算可能会得到相同的hash值；所以布隆过滤器计算得到一个元素是否存在时，可能会出现误判，但是如果布隆过滤器判断一个元素不存在，那么该元素一定不存在。</strong></p><p>对于布隆过滤器的误判的情况，可以通过增加bit数组的大小或者调整hash函数来减小概率。</p><p><strong>综上，我们可以得出：布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p><hr><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><ol><li>增加和查询元素的时间复杂度为：O(K), (K为哈希函数的个数，一般比较小)，与数据量大小无关</li><li>哈希函数相互之间没有关系，方便硬件并行运算</li><li>布隆过滤器不需要存储元素本身，在某些对保密要求比较严格的场合有很大优势</li><li>在能够承受一定的误判时，布隆过滤器比其他数据结构有这很大的空间优势</li><li>数据量很大时，布隆过滤器可以表示全集，其他数据结构不能</li><li>使用同一组散列函数的布隆过滤器可以进行交、并、差运算</li></ol></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><ol><li>有误判率，即存在假阳性(False Position)，即不能准确判断元素是否在集合中(补救方法：再建立一个白<br>名单，存储可能会误判的数据)</li><li>不能获取元素本身</li><li>一般情况下不能从布隆过滤器中删除元素</li><li>如果采用计数方式删除，可能会存在计数回绕问题</li></ol></blockquote><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，5亿以上！）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤、黑名单功能等等。</li><li>去重：比如爬给定网址的时候对已经爬取过的 URL 去重。</li><li>钓鱼网站识别</li><li>秒杀系统：查看用户是否重复购买</li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><code>Bloom-Filter.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dyw.bloomFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-05-21-20:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bit数组的默认大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">2</span> &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过这个数组可以创建6个不同的hash函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] SEEDS = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">46</span>,<span class="number">91</span>,<span class="number">134</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bit数组。数组中的元素只能是 0 或者 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BitSet bits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放包含 hash 函数的类的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpleHash[] func = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>[SEEDS.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造 指定bit数组大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化多个不同的Hash函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; SEEDS.length; i++) &#123;</span><br><span class="line">            func[i] = <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(size, SEEDS[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到位数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (SimpleHash f : func) &#123;</span><br><span class="line">            bits.set(f.hash(value), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断指定元素是否存在于位数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (SimpleHash f : func) &#123;</span><br><span class="line">            ret = ret &amp;&amp; bits.get(f.hash(value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类。用于 hash 操作！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleHash</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> cap;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> seed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimpleHash</span><span class="params">(<span class="type">int</span> cap, <span class="type">int</span> seed)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cap = cap;</span><br><span class="line">            <span class="built_in">this</span>.seed = seed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算 hash 值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            <span class="type">int</span> h;</span><br><span class="line">            <span class="keyword">return</span> (value == <span class="literal">null</span>) ? <span class="number">0</span> : Math.abs(seed * (cap - <span class="number">1</span>) &amp; ((h = value.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="End"><a href="#End" class="headerlink" title="-End-"></a>-End-</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;布隆过滤器-BloomFilter&quot;&gt;&lt;a href=&quot;#布隆过滤器-BloomFilter&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器(BloomFilter)&quot;&gt;&lt;/a&gt;布隆过滤器(BloomFilter)&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://devildyw.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="https://devildyw.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Cache</title>
    <link href="https://devildyw.github.io/2022/05/18/Cache/"/>
    <id>https://devildyw.github.io/2022/05/18/Cache/</id>
    <published>2022-05-18T09:23:15.000Z</published>
    <updated>2022-05-18T09:23:15.843Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
