<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devil的个人博客</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="https://devildyw.github.io/atom.xml" rel="self"/>
  
  <link href="https://devildyw.github.io/"/>
  <updated>2022-10-20T07:46:54.121Z</updated>
  <id>https://devildyw.github.io/</id>
  
  <author>
    <name>Devil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC之RequestContextHolder</title>
    <link href="https://devildyw.github.io/2022/10/19/SpringMVC%E4%B9%8BRequestContextHolder/"/>
    <id>https://devildyw.github.io/2022/10/19/SpringMVC%E4%B9%8BRequestContextHolder/</id>
    <published>2022-10-19T15:56:05.000Z</published>
    <updated>2022-10-20T07:46:54.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC-之-RequestContextHolder"><a href="#SpringMVC-之-RequestContextHolder" class="headerlink" title="SpringMVC 之 RequestContextHolder"></a>SpringMVC 之 RequestContextHolder</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在业务编写中，常常会出现将 <code>request</code> 和 <code>response</code> 传来传去的场景，正常来说在 <code>service</code> 层是没有 <code>request</code> 的，然而直接从 <code>Controller</code> 传过来的话方法太粗暴了，而 <code>SpringMVC</code> 提供的 <code>RequestContextHolder</code> <strong>可以在一个请求线程的中获取到 <code>Request</code> 并将其存储在底层的 <code>ThreadLocal</code> 中</strong>，避免了 <code>Request</code> 从头传到尾的情况。一般项目中，会对这个类进行再次封装，便于获取请求的相关信息，常见的比如用户信息。</p><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><p><code>RequestContextHolder</code> 基于 <code>ThreadLocal</code> 实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RequestContextHolder</span>  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">jsfPresent</span> <span class="operator">=</span></span><br><span class="line">         ClassUtils.isPresent(<span class="string">&quot;javax.faces.context.FacesContext&quot;</span>, RequestContextHolder.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>&lt;&gt;(<span class="string">&quot;Request attributes&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//用于子线程的</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder =</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">NamedInheritableThreadLocal</span>&lt;&gt;(<span class="string">&quot;Request context&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>SpringMVC</code>  源码入手，在 <code>FrameworkServlet#processRequest</code> 中，会在进入处理请求前，将 Request 封装为 <code>RequestAttributes</code>，放到 <code>RequestContextHolder</code> 中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">   <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">   <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">   <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">   <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">   <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">   asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">   initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initContextHolders</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> LocaleContext localeContext, <span class="meta">@Nullable</span> RequestAttributes requestAttributes)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (localeContext != <span class="literal">null</span>) &#123;</span><br><span class="line">LocaleContextHolder.setLocaleContext(localeContext, <span class="built_in">this</span>.threadContextInheritable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">RequestContextHolder.setRequestAttributes(requestAttributes, <span class="built_in">this</span>.threadContextInheritable);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RequestContextHolder</code> 会根据 <code>threadContextInheritable</code> 选择将 <code>RequestAttributes</code> 放入 <code>inheritableRequestAttributesHolder</code> 或者 <code>inheritableRequestAttributesHolder</code> 中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setRequestAttributes</span><span class="params">(<span class="meta">@Nullable</span> RequestAttributes attributes, <span class="type">boolean</span> inheritable)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (attributes == <span class="literal">null</span>) &#123;</span><br><span class="line">      resetRequestAttributes();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (inheritable) &#123;</span><br><span class="line">         inheritableRequestAttributesHolder.set(attributes);</span><br><span class="line">         requestAttributesHolder.remove();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         requestAttributesHolder.set(attributes);</span><br><span class="line">         inheritableRequestAttributesHolder.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取出 <code>RequestAttributes</code> 时会先从 <code>requestAttributes</code> 中取，取不到再到 <code>inheritableRequestAttributesHolder</code> 中取。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title function_">getRequestAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">RequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> requestAttributesHolder.get();</span><br><span class="line">   <span class="keyword">if</span> (attributes == <span class="literal">null</span>) &#123;</span><br><span class="line">      attributes = inheritableRequestAttributesHolder.get();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> attributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inheritableRequestAttributesHolder-与-requestAttributesHolder"><a href="#inheritableRequestAttributesHolder-与-requestAttributesHolder" class="headerlink" title="inheritableRequestAttributesHolder 与 requestAttributesHolder"></a><code>inheritableRequestAttributesHolder</code> 与 <code>requestAttributesHolder</code></h2><p><code>RequestContextHolder</code> 底层由 <code>ThreadLocal</code> 实现。</p><p>通过源码剖析我们可以看到，在 <code>RequestContextHolder</code> 中有两个 <code>ThreadLocal</code> 变量，分别为 <code>inheritableRequestAttributesHolder</code> 与 <code>requestAttributesHolder</code> 。这两个变量有什么区别吗？</p><p><code>RequestContextHolder</code> 默认从 <code>requestAttributesHolder</code> 存取，但是在<strong>多线程的情况下，子线程无法访问父线程中的数据</strong>，即 <code>RequestContextHolder#getRequestAttributes</code> 返回 null，此时就需要用到 <code>inheritableRequestAttributesHolder</code>。<code>inheritableRequestAttributesHolder</code> 是 <code>NamedInheritableThreadLocal</code> 类型，<code>NamedInheritableThreadLocal</code> 继承于 <code>InheritableThreadLocal</code>，<code>InheritableThreadLocal</code> <strong>实现了子线程从父线程继承数据</strong>，这样在<strong>子线程也可以访问父线程中 <code>InheritableThreadLocal</code> 的数据。</strong></p><blockquote><p><a href="https://devildyw.github.io/2022/02/28/ThreadLocal/">ThreadLocal | Devil的个人博客 (devildyw.github.io)</a></p></blockquote><p>要使用 <code>inheritableRequestAttributesHolder</code> 替代 <code>requestAttributesHolder</code> ，关键在于 <code>FrameworkServlet</code> 中的 <code>threadContextInheritable</code>，该值为 false，即默认使用 <code>requestAttributesHolder</code>，将其设置为 true，则会使用 <code>inheritableRequestAttributesHolder</code>。通常 <code>requestAttributesHolder</code> 已经够用了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">threadContextInheritable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">RequestContextHolder.setRequestAttributes(requestAttributes, <span class="built_in">this</span>.threadContextInheritable);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setRequestAttributes</span><span class="params">(<span class="meta">@Nullable</span> RequestAttributes attributes, <span class="type">boolean</span> inheritable)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (attributes == <span class="literal">null</span>) &#123;</span><br><span class="line">resetRequestAttributes();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (inheritable) &#123;</span><br><span class="line">inheritableRequestAttributesHolder.set(attributes);</span><br><span class="line">requestAttributesHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">requestAttributesHolder.set(attributes);</span><br><span class="line">inheritableRequestAttributesHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InheritableThreadLocal</code> 解决了父线程向子线程传递数据的问题，但<strong>传递数据发生在创建 Thread 阶段</strong>，如果<strong>使用了线程池，线程被复用，子线程的数据仍然是创建时传递的数据，而不是执行任务时父线程的数据</strong>。这种情况下，就需要重写 <code>RequestContextHolder</code>，使用 <code>TransmittableThreadLocal</code> 代替 <code>ThreadLocal</code>。<code>TransmittableThreadLocal</code> 用于解决使用线程池时，父线程向子线程传递数据的问题，详见 <a href="https://blog.csdn.net/qq_26012495/article/details/104379137">解决ThreadLocal在开启子线程时，父线程向子线程值传递问题，源码分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringMVC-之-RequestContextHolder&quot;&gt;&lt;a href=&quot;#SpringMVC-之-RequestContextHolder&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC 之 RequestContextHo</summary>
      
    
    
    
    <category term="Spring框架" scheme="https://devildyw.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="并发编程" scheme="https://devildyw.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ARP</title>
    <link href="https://devildyw.github.io/2022/10/18/ARP/"/>
    <id>https://devildyw.github.io/2022/10/18/ARP/</id>
    <published>2022-10-18T13:27:16.000Z</published>
    <updated>2022-10-18T13:51:11.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARP（地址解析协议）"><a href="#ARP（地址解析协议）" class="headerlink" title="ARP（地址解析协议）"></a>ARP（地址解析协议）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>计算机通信方式通过广播的方式。所有上层的数据包到最后都要封装到以太网头，然后通过以太网协议发送。在谈及以太网协议的时候，我们已经了解到，通信基于 MAC 地址的广播方式实现的，计算机在发送数据包时，获取自身的 <code>MAC</code> 地址是 容 易 的 ， 获 取 目 标 主 机 的 <code>MAC</code> 地 址 ， 需 要 通 过 <code>ARP</code>（ Address Resolution Protocol，地址解析协议）来实现。</p><h2 id="协议原理"><a href="#协议原理" class="headerlink" title="协议原理"></a>协议原理</h2><p><code>ARP</code> 用于实现从 <code>IP</code> 地址到MAC地址的映射，即询问目标<code>IP</code> 地址对应的MAC地址，以广播的方式发送数据包，获取目标主机的MAC地址。我们通过一个案例来说明其具体通信原理，假设主机 <code>IP</code> 地址都已知。</p><ul><li>主机A的 <code>IP</code> 地址为 <code>10.1.20.64</code>，MAC地址为 <code>00：08：ca：xx：xx：xx</code>；</li><li>主机B的 <code>IP</code> 地址为 <code>10.1.20.109</code> ，MAC地址为 <code>44：6d：57：xx：xx：xx</code>。</li></ul><p>当 主 机 A 要 与 主 机 B 通 信 时 ， <code>ARP</code> 可 以 将 主 机 B 的 <code>IP</code> 地 址（<code>10.1.20.109</code>）解析成主机B的MAC地址，以下为工作流程。</p><p>第一步：通过 <strong><code>IP</code> 地址和子网掩码计算出自己所处的子网</strong>，得出如下表所示的结果。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182132568.png" alt="image-20221018213209515"></p><p>第二步：分析主机A和B是否处于同一网络，<strong>如果不是同一网络</strong>，那么下表中目标 <code>IP</code> 地址为<code>10.1.20.109</code>（访问路由器的路由表），<strong>通过 <code>ARP</code> 获取的是网关的 <code>MAC</code> 地址</strong>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182132043.png" alt="image-20221018213236999"></p><p>第三步：根据主机A上的路由表内容，确定用于访问主机B的转发 <code>IP</code> 地址是 <code>10.1.20.109</code>。然后主机A在自己的本地 <code>ARP</code> <strong>缓存中</strong>检查主机B的匹配 <code>MAC</code> 地址。</p><p>第四步：如果主机A在 <code>ARP</code> 缓存中没有找到映射，它将询问 <code>10.1.20.64</code> 的硬件地址，从而将 <code>ARP</code> 请求帧广播到本地网络上的所有主机。源主机A的 <code>IP</code> 地址和 <code>MAC</code> 地址都包括在 <code>ARP</code> 请求中。本地网络上的每台主机都接收到 <code>ARP</code> 请求并且检查是否与自己的 <code>IP</code> 地址匹配。<strong>如果主机发现请求的 <code>IP</code> 地址与自己的 <code>IP</code> 地址不匹配，它将丢弃 <code>ARP</code> 请求。</strong></p><p>第五步：主机B确定 <code>ARP</code> 请求中的 <code>IP</code> 地址与自己的 <code>IP</code> 地址<strong>匹配</strong>，<strong>将主机A的 <code>IP</code> 地址和 <code>MAC</code> 地址映射添加到本地 <code>ARP</code> 缓存中。</strong></p><p>第六步：<strong>主机 B 将包含其 <code>MAC</code> 地址的 <code>ARP</code> 回复消息直接发送回主机 A。</strong></p><p>第七步：当主机 A 接收到从主机 B 发来的 <code>ARP</code> 回复消息时，会用主机 B 的 <code>IP</code> 地址和 <code>MAC</code> 地址映射<strong>更新 <code>ARP</code> 缓存</strong>。本机缓存是有<strong>生存期</strong>的，生存期结束后，将再次<strong>重复</strong>上面的过程。主机 B 的 <code>MAC</code> 地址一旦确定，主机 A 就能向主机 B 发送 <code>IP</code> 地址了。</p><hr><p>​                                                                                                                                                                        ——— 摘自《Netty 4 核心原理与手写 RPC 框架实战》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ARP（地址解析协议）&quot;&gt;&lt;a href=&quot;#ARP（地址解析协议）&quot; class=&quot;headerlink&quot; title=&quot;ARP（地址解析协议）&quot;&gt;&lt;/a&gt;ARP（地址解析协议）&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://devildyw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机网络" scheme="https://devildyw.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://devildyw.github.io/2022/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://devildyw.github.io/2022/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2022-10-18T11:01:50.000Z</published>
    <updated>2022-10-22T11:57:08.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="TCP-x2F-IP-网络模型"><a href="#TCP-x2F-IP-网络模型" class="headerlink" title="TCP&#x2F;IP 网络模型"></a>TCP&#x2F;IP 网络模型</h3><p>计算机与计算机之间要有统一的连接标准才能够完成相互通信，这个标准被称为互联网协议，而网络就是物理链接介质+互联网协议。按照功能不同，人们将互联网协议从不同维度分为 <code>OSI</code> 七层、<code>TCP/IP</code> 五层或 <code>TCP/IP</code> 四层，如下图所示</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182110569.png" alt="image-20221018211041494"></p><p>这个网络协议是分层的，每一层都有各自的作用和职责。</p><p>在 <code>TCP/IP</code> 五层模型中每层运行的常见设备如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182111820.png" alt="image-20221018211134767"></p><p>在 <code>TCP/IP</code> 四层模型中数据传输过程中每一层的封装格式：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182029355.png" alt="img"></p><blockquote><p>网络接口层的传输单位是帧（frame），<code>IP</code> 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区别，可以统称位<strong>数据包</strong>。</p></blockquote><p>我们主要学习前三层，所以这里以 <code>TCP/IP</code> <strong>四层模型</strong>来介绍。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层位于 <code>TCP/IP</code> 模型的最上层，也是用户能直接接触到的，如电脑或手机上使用的应用软件都是在应用层上实现。</p><p>当两个不同设备的应用需要进行通信的时候，应用就把应用数据传输给下一层，也就是<strong>传输层</strong>。</p><p>所以，<strong>应用层只需要专注于为用户提供应用功能，而不用去关心数据是怎么传输的，数据传输是由下层次的协议负责。</strong>就类似于我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不需要关心快递是如何被运输的。</p><p><strong>应用层是工作在操作系统中的用户态，传输层以及下则工作在内核态。</strong></p><p>常见的应用层协议：<code>HTTP</code>、<code>FTP</code>、<code>Telnet</code>、<code>DNS</code>、<code>SMTP</code>等。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>应用层的数据包会传给传输层，<strong>传输层（<em>Transport Layer</em>）</strong>是为应用层提供网络支持的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210181922823.png" alt="img"></p><p>在传输层中有两个传输协议，分别是 <code>TCP</code> 和 <code>UDP</code></p><p><code>TCP</code> 全称叫传输控制协议（<em>Transmission Control Protocol</em>），大部分应用使用的正是 TCP 传输协议，比如 HTTP 应用层协议。<code>TCP</code> 相较于 <code>UDP</code> 多了很多特性，比如<strong>流量控制、超时重传、拥塞控制</strong>等，这些特性的目的都是为了保证数据传输时的<strong>可靠性</strong>。</p><p><code>UDP</code> 相对来说就很简单，<code>UDP</code> 只负责发送数据包，<strong>不保证数据包是否能抵达对方</strong>，但它<strong>实时性</strong>相对更好，<strong>传输效率也更高</strong>（不用花费额外的时间去建立连接）。<code>UDP</code> 也可以实现可靠传输，把 <code>TCP</code> 的特性在应用层上实现就可以，但要是实现一个可以商用的可靠 <code>UDP </code> 传输协议，并不是一件简单的事。</p><p>应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的<strong>数据包大小超过 <code>MSS</code><strong>（TCP 最大报文段长度），就</strong>需要将数据包分块</strong>，这样即使中途有一个分块丢失或损坏了，只需要重新发送这个分块，而不用发送整个数据包。在 TCP 协议中，我们把每个数据分块称为一个 <strong><code>TCP</code> 报文段</strong>（<em>TCP Segment</em>）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210181932485.png" alt="img"></p><p>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用进程在接收或者传输数据，因此需要用一个标识来区分不同的应用进程，这个标识就是<strong>端口号</strong>（0~65535）</p><blockquote><p>80 端口通常是 Web 服务器用的，22端口通常是远程登录服务器用的。而对于浏览器（客户端）中的每个标签页都是一个独立的进程，操作系统会为这些进程分配临时的端口号。</p></blockquote><p><strong>由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用进程的。</strong></p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>传输层事实上也不负责将数据从一个设备传输到另一个设备。</p><p>实际场景中的网络环节是错综复杂的，中间有着各种各样的线路和分岔路口，如果一个设备的数据传输给另一个设备，就需要在各种各样的路径和节点之间进行选择，而传输层的设计理念是简单、高效、专注，如果传输层还负责这一块功能就有点违背设计原则了。</p><p>也就是说，传输层专注于为应用层服务，让其作为应用间数据传输的媒介，帮助实现应用到应用之间的通信，而实际的传输功能功能就交给了下层，也就是<strong>网络层</strong>（<em>Internet Layer</em>）。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210181950303.png" alt="img"></p><p>网络层中最常（但不只有）使用的是 <code>IP</code> 协议（<em>Internet Protocol</em>），<code>IP</code> 协议会将传输层的报文做为数据部分，再加上 <code>IP</code> 包头组装成 <code>IP</code> 报文，如果 <code>IP</code> 报文大小超过了 <code>MTU</code>（以太网中一般为 1500 字节）就会<strong>再次进行分片</strong>，得到一个即将发送到网络的 <code>IP</code> 报文。 </p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210181954507.png" alt="img"></p><p>网络层负责将数据从一个设备传输到另一个设备，世界上有这么多的设备，网络层是如何找到目标设备的呢？因此，<strong>网络层需要有区分设备的标识</strong>。</p><p>我们通常<strong>使用 <code>IP</code> 地址作为设备的标识</strong>，对于 <code>IPv4</code> 协议，<code>IP</code> 地址供 32 位，分成了四段（如：192.168.100.1），每段是 8 位。只有一个单纯的 <code>IP</code> 地址虽然做到了区分设备，但是寻址起来就特别麻烦了，那么多的设备，一个一个去匹配显然不科学。</p><p>实际上 <code>IP</code> 地址由两部分组成：<strong>网络部分（用来标识子网）和主机部分（用来标识主机）</strong>。</p><ul><li><strong>一个是网络号，负责标识该 <code>IP</code> 是属于那个 「子网」的；</strong></li><li><strong>一个是主机号，负责标识同一 「子网」下的不同主机；</strong></li></ul><blockquote><p>注意：单纯的 <code>IP</code> 地址段只是标识了 <code>IP</code> 地址的种类，从网络部分或主机部分都无法辨识一个 <code>IP</code> 地址所处的子网。例如，并不能确定172.16.10.1与172.16.10.2处于同一子网。因此，就需要子网掩码</p></blockquote><blockquote><p>什么是子网？</p><p>为了确定网络区域，分开主机和路由器的每个接口，从而产生了若干个分离的网络岛，接口端连接了这些独立网络的端点。这些独立的网络岛叫做<strong>子网(subnet)。子网之间用路由器互联。</strong></p><p>什么是子网掩码？</p><p>所谓“子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于<code>IP</code>地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。</p></blockquote><p>配合子网掩码可以计算出 <code>IP</code> 地址的网络号和主机号。</p><blockquote><p>举例：</p><p>比如 10.100.122.0&#x2F;24，后面的 <code>/24</code>标识就是 <code>255.255.255.0</code> 子网掩码，255.255.255.0 二进制是「11111111-11111111-11111111-00000000」，可以看出有 24 个 1，为了简化子网掩码的表示，用 <code>/24</code> 代替 <code>255.255.255.0</code>。</p></blockquote><p>使用子网掩码和 <code>IP</code> 地址计算出网络地址和主机地址。</p><p>网络号 &#x3D; <code>IP</code> 地址和子网掩码进行<strong>按位与运算</strong>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182009553.jpeg"></p><p>主机号 &#x3D; 子网掩码取反后与 <code>IP</code> 地址进行<strong>按位与运算</strong>。</p><hr><p>寻址过程：先匹配到相同的网络号（表示要找到同一个子网），才会去找对应的主机。</p><blockquote><p>上述寻址过程可以理解为我们要找到一个人，我们首先要找到这个人所在的小区（网络号），找到这个小区后，我们才去找对应的人。</p></blockquote><p>除了寻址能力，<code>IP</code> 协议还有另一个重要的能力就是<strong>路由</strong>。实际场景中，两台设备并不是用同一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网络的路径，因此当数据包到达一个网络节点，就需要通过路由算法决定下一步走那条路径。</p><p>路由器寻址工作中，就是要找到目标地址的子网，找到后进而把数据包转发给对应的网络内。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182017678.jpeg" alt="IP地址的网络号"></p><p>所以，**<code>IP</code> 协议的寻址作用是告诉我们去往下一个目的地该朝那个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘。**</p><h4 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h4><p>生成了 <code>IP</code> 报文后，接下来要交给<strong>网络接口层</strong>（<em>Link Layer</em>）在 <code>IP</code> 头部前面加上 MAC 头部，并封装成数据帧（Data frame）发送到网络上。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210182023613.png" alt="img"></p><p><code>IP</code> 头部中的接收方 <code>IP</code> 地址表示网络包的目的地，通过这个地址我们就可以判断要将包发到哪里，但在以太网的世界中，这个思路是行不通的。</p><blockquote><p>什么是以太网呢？</p><p>电脑上的以太网接口，<code>Wi-Fi</code>接口，以太网交换机、路由器上的千兆，万兆以太网口，还有网线，它们都是以太网的组成部分。以太网就是一种在「局域网」内，把附近的设备连接起来，使它们之间可以进行通讯的技术。</p><p>使用以太网进行数据传输，基于 MAC 地址的广播方式实现数据传输，只能在局域网内广播。</p></blockquote><p>以太网在判断网络包目的地时和 <code>IP</code> 的方式不同，因此必须采用相匹配的方式才能在以太网中将包发往目的地，而 MAC 头部就是干这个用的，所以，在以太网进行通讯要用到 MAC 地址。</p><blockquote><p>MAC 头部中包含的源地址和目标地址的由来： Ethernet（以太网协议） 规定接入Internet的设备必须配有网卡，发送端和接收端的地址便是指网卡的地址，即MAC地址。</p><p>MAC 地址：每块网卡出厂时都被印上一个世界<strong>唯一的</strong> MAC 地址，它是一个长度为48位的二进制数，通常用12位十六进制数表示（前6位是厂商编号，后6位是流水线号）。</p></blockquote><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息，我们可以通过 <code>ARP</code> 协议获取对方的 MAC 地址。<a href="https://devildyw.github.io/2022/10/18/ARP/">ARP | Devil的个人博客 (devildyw.github.io)</a></p><p>所以说，网络接口层主要为网络层提供<strong>「链路级别」</strong>传输的服务，负责在以太网、<code>WiFi</code> 这样的底层网络上发送原始数据包，<strong>工作在网卡这个层次，使用 MAC 地址来标识网络上的设备</strong>。</p><h3 id="输入网址到网页显示，期间的过程"><a href="#输入网址到网页显示，期间的过程" class="headerlink" title="输入网址到网页显示，期间的过程"></a>输入网址到网页显示，期间的过程</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221845503.jpeg" alt="简单的网络模型"></p><h4 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1. HTTP"></a>1. HTTP</h4><blockquote><p>浏览器做的第一步工作是解析 URL</p></blockquote><p>浏览器首先对 <code>URL</code> 进行解析，从而生成发送给 <code>Web</code> 服务器的请求</p><p>一条 <code>URL</code> 中各个元素代表什么</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221847708.jpeg" alt="URL 解析"></p><p>由上可知，<code>URL</code> 实际上是请求服务器里面的文件资源（前后端分离过后，这里的服务器指的是前端服务器）。</p><p>对 <code>URL</code> 进行解析之后，浏览器确定了 Web 服务器和文件名，接下来就是根据这些信息来生成 HTTP 请求报文了。</p><p>HTTP 报文分为请求报文和响应报文。（下图很详细的展示了 HTTP 报文的结构）</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221851674.png" alt="HTTP 的消息格式"></p><h4 id="2-真实地址查询-–-DNS"><a href="#2-真实地址查询-–-DNS" class="headerlink" title="2. 真实地址查询 – DNS"></a>2. 真实地址查询 – DNS</h4><p>通过浏览器对于 <code>URL</code> 的解析并生成 HTTP 请求报文后，需要委托下层协议将报文发送给 <code>Web</code> 服务器。</p><p>但是往往解析出来的服务器地址是一个<strong>域名地址</strong>，我们必须借助 DNS 服务器查询出域名对应的真实 IP 地址这样操作系统才能在发送报文时，知道目的地。</p><p>DNS（域名解析协议）服务器：记录了域名与 IP 之间的映射关系。</p><p>DNS 中的域名都是用<strong>句点</strong>来分隔的，比如 <code>www.server.com</code> ，这里的句点代表了不同层次之间的<strong>界限</strong>。</p><blockquote><p><strong>在域名中，越靠右的位置表示其层次越高。</strong></p><p>实际上域名最后还有一个点，比如 <code>www.server.com.</code>，这个最后的一个点代表根域名。</p><p>也就是，<code>.</code> 根域是在最顶层，它的下一层就是 <code>.com</code> 顶级域，再下面是 <code>server.com</code>。</p></blockquote><p>域名的层次关系类似一个树状结构：</p><ul><li>根 DNS 服务器（.）</li><li>顶级域 DNS 服务器（.com）</li><li>权威 DNS 服务器 (server.com)</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221904760.png" alt="DNS 树状结构"></p><p>根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。</p><p>所以，任何 DNS 服务器都可以找到并访问根域 DNS 服务器了。</p><p>因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。</p><blockquote><p>域名解析的工作流程</p><ol><li>客户端首先会发出一个 DNS 请求，问 <a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP&#x2F;IP 设置中填写的 DNS 服务器地址）。</li><li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 <a href="http://www.server.com,则它直接返回/">www.server.com，则它直接返回</a> IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 <a href="http://www.server.com/">www.server.com</a> 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li><li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<a href="http://www.server.com/">www.server.com</a> 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</li><li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 <a href="http://www.server.com/">www.server.com</a> 的 IP 地址吗？”</li><li>顶级域名服务器说：“我给你负责 <a href="http://www.server.com/">www.server.com</a> 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</li><li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<a href="http://www.server.com对应的IP是啥呀？”">www.server.com对应的IP是啥呀？”</a> server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li><li>权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。</li><li>本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li></ol><p>至此，我们完成了 DNS 的解析过程。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221913505.png" alt="域名解析的工作流程"></p></blockquote><p>实际上并不是每次解析域名都需要这么多的步骤，由于缓存的存在，能够帮助我们省去一大部分的解析花费的时间。</p><blockquote><p>实际情况是：浏览器会先看自身有没有对这个域名的缓存，如果有，就直接返回，如果没有，就去问操作系统，操作系统也会去看自己的缓存，如果有，就直接返回，如果没有，再去 hosts 文件看，也没有，才会去问「本地 DNS 服务器」。</p></blockquote><h4 id="3-协议栈"><a href="#3-协议栈" class="headerlink" title="3. 协议栈"></a>3. 协议栈</h4><p>通过 DNS 获取到 IP 后，就可以把 HTTP 的传输工作交给操作系统中的<strong>协议栈</strong>。</p><p><strong>协议栈的内部分为几个部分，分别承担不同的工作。上下关系是有一定的规则的，上面的部分会向下面的部分委托工作，下面的部分收到委托的工作并执行。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221917105.jpeg" alt="img"></p><p><strong>应用程序</strong>通过调用 Socket 库，来委托协议栈工作。协议栈的上半部分有两块，分别是负责收发数据的 <strong>TCP</strong> 和 <strong>UDP</strong> 协议，这两个传输协议会接受来自应用层的委托执行收发数据的操作。</p><p>协议栈的下半部分是用 IP 协议控制网络包收发操作，在互联网上传数据时，数据会被切分成一块块的网络包，而将网络包发送给对方的操作就是 IP 负责的。</p><p>此外 IP 中还包括 <code>ICMP</code> 协议和 <code>ARP</code> 协议。</p><ul><li><code>ICMP</code> ：<strong>用于告知网络包传送过程中产生的错误以及各种控制信息。</strong></li><li><code>ARP</code> ：<strong>用于根据 IP 地址查询相应的以太网 MAC 地址。</strong></li></ul><p><strong>IP 下面的网卡驱动程序负责控制网卡硬件，而最下面的网卡则负责完成实际的收发操作，也就是对网线中的信号执行发送和接收操作。</strong></p><h4 id="4-可靠传输-–-TCP"><a href="#4-可靠传输-–-TCP" class="headerlink" title="4. 可靠传输 – TCP"></a>4. 可靠传输 – TCP</h4><p>HTTP 是居于 TCP 协议传输的。</p><p>TCP 报文头部格式：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221925401.jpeg" alt="TCP 包头格式"></p><p><strong>源端口号和目标端口号</strong>：用于指定发送的目的端口和用于接收方回传时指定端口。</p><p><strong>序号</strong>：为了解决包乱序的问题。</p><p><strong>确认号</strong>：确认发出去的包对方是否收到。为了解决丢包问题。</p><p><strong>状态位</strong>：例如 <code>SYN</code> 是发起一个连接，<code>ACK</code> 是回复，<code>RST</code> 是重新连接，<code>FIN</code> 是结束连接等。TCP 是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。</p><p><strong>窗口大小</strong>：TCP 要做<strong>流量控制</strong>，通信双方各声明一个窗口（缓存大小），标识自己当前的处理能力。</p><p><strong>拥塞控制</strong>：控制发送包的速度（TCP 独有）。</p><hr><h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><p>在使用 TCP 传输数据之前，首先需要建立 TCP 连接，TCP 连接的建立，通常称为<strong>三次握手</strong>。</p><p><strong>这个所谓的「连接」，只是双方计算机里维护一个状态机，在连接建立的过程中，双方的状态变化时序图就像这样。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221939191.png" alt="TCP 三次握手"></p><blockquote><ul><li>一开始，客户端和服务端都处于 <code>CLOSED</code> 状态。先是服务端主动监听某个端口，处于 <code>LISTEN</code> 状态。</li><li>然后客户端主动发起连接 <code>SYN</code>，之后处于 <code>SYN-SENT</code> 状态。</li><li>服务端收到发起的连接，返回 <code>SYN</code>，并且 <code>ACK</code> 客户端的 <code>SYN</code>，之后处于 <code>SYN-RCVD</code> 状态。</li><li>客户端收到服务端发送的 <code>SYN</code> 和 <code>ACK</code> 之后，发送对 <code>SYN</code> 确认的 <code>ACK</code>，之后处于 <code>ESTABLISHED</code> 状态，因为它一发一收成功了。</li><li>服务端收到 <code>ACK</code> 的 <code>ACK</code> 之后，处于 <code>ESTABLISHED</code> 状态，因为它也一发一收了。</li></ul><p>所以三次握手目的是<strong>保证双方都有发送和接收的能力</strong>。</p></blockquote><hr><h5 id="TCP-分割数据"><a href="#TCP-分割数据" class="headerlink" title="TCP 分割数据"></a>TCP 分割数据</h5><p>如果 HTTP 请求消息比较长，超过了 <code>MSS</code> 的长度，这时 TCP 就需要把 HTTP 的数据拆解成一块块的数据发送，而不是一次性发送所有数据。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221945380.png" alt="MTU 与 MSS"></p><ul><li><code>MTU</code>：<strong>一个网络包的最大长度，以太网中一般为 <code>1500</code> 字节。</strong></li><li><code>MSS</code>：<strong>除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。</strong></li></ul><p><strong>数据会被以 <code>MSS</code> 的长度为单位进行拆分</strong>，拆分出来的每一块数据都会被放进单独的网络包中。也就是在每个被拆分的数据加上 TCP 头信息，然后交给 IP 模块来发送数据。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221948354.jpeg" alt="数据包分割"></p><hr><h4 id="TCP-报文生成"><a href="#TCP-报文生成" class="headerlink" title="TCP 报文生成"></a>TCP 报文生成</h4><p>TCP 协议里面会有两个端口，一个是客户端（浏览器）监听的端口（通常是随机生成的），一个是 Web 服务器监听的端口（HTTP 默认端口号是 <code>80</code>， HTTPS 默认端口号是 <code>443</code>）。</p><p>在双方建立了连接后，TCP 报文中的<strong>数据部分就是存放 HTTP 头部 + 数据</strong>，组装好 TCP 报文之后，就需交给下面的网络层处理。</p><p>报文段的报文如下图所示：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221951430.png" alt="TCP 层报文"></p><h4 id="5-远程定位-–-IP"><a href="#5-远程定位-–-IP" class="headerlink" title="5. 远程定位 – IP"></a>5. 远程定位 – IP</h4><h4 id="6-两点传输-–-MAC"><a href="#6-两点传输-–-MAC" class="headerlink" title="6. 两点传输 – MAC"></a>6. 两点传输 – MAC</h4><p>生成了 IP 头部之后，接下来网络包还需要在 IP 头部的前面加上 <strong>MAC 头部</strong>。</p><blockquote><p>MAC 包头格式</p></blockquote><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221954427.jpeg" alt="MAC 包头格式"></p><p>在 MAC 包头里需要<strong>发送方 MAC 地址</strong>和<strong>接收方目标 MAC 地址</strong>，用于<strong>两点之间的传输</strong>。</p><p>一般在 TCP&#x2F;IP 通信里，MAC 包头的<strong>协议类型</strong>只使用：</p><ul><li><code>0800</code> ： IP 协议</li><li><code>0806</code> ： ARP 协议</li></ul><blockquote><p>MAC 发送方和接收方如何确认?</p></blockquote><p><strong>发送方</strong>的 MAC 地址获取就比较简单了，MAC 地址是在网卡生产时写入到 ROM 里的，只要将这个值读取出来写入到 MAC 头部就可以了。</p><p><strong>接收方</strong>的 MAC 地址就有点复杂了，只要告诉以太网对方的 MAC 的地址，以太网就会帮我们把包发送过去，那么很显然这里应该填写对方的 MAC 地址。</p><p>所以先得搞清楚应该把包发给谁，这个只要查一下<strong>路由表</strong>就知道了。在路由表中找到相匹配的条目，然后把包发给 <code>Gateway</code> 列中的 IP 地址就可以了。</p><blockquote><p>既然知道要发给谁，按如何获取对方的 MAC 地址呢？</p></blockquote><p>不知道对方 MAC 地址？不知道就喊呗。</p><p>此时就需要 <code>ARP</code> 协议帮我们找到路由器的 MAC 地址。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221954425.png" alt="ARP 广播"></p><p>ARP 协议会在以太网中以<strong>广播</strong>的形式，对以太网所有的设备喊出：“这个 IP 地址是谁的？请把你的 MAC 地址告诉我”。</p><p>然后就会有人回答：“这个 IP 地址是我的，我的 MAC 地址是 XXXX”。</p><p>如果对方和自己处于同一个子网中，那么通过上面的操作就可以得到对方的 MAC 地址。然后，我们将这个 MAC 地址写入 MAC 头部，MAC 头部就完成了。</p><blockquote><p>好像每次都要广播获取，这不是很麻烦吗？</p></blockquote><p>放心，在后续操作系统会把本次查询结果放到一块叫做 <strong>ARP 缓存</strong>的内存空间留着以后用，不过缓存的时间就几分钟。</p><p>也就是说，在发包时：</p><ul><li>先查询 ARP 缓存，如果其中已经保存了对方的 MAC 地址，就不需要发送 ARP 查询，直接使用 ARP 缓存中的地址。</li><li>而当 ARP 缓存中不存在对方 MAC 地址时，则发送 ARP 广播查询。</li></ul><blockquote><p>查看 ARP 缓存内容</p></blockquote><p>在 Linux 系统中，我们可以使用 <code>arp -a</code> 命令来查看 ARP 缓存的内容。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221954422.png" alt="ARP 缓存内容"></p><blockquote><p>MAC 报文生成</p></blockquote><p>至此，网络包的报文如下图。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221954539.jpeg" alt="MAC 层报文"></p><h4 id="7-出口-–-网卡"><a href="#7-出口-–-网卡" class="headerlink" title="7. 出口 – 网卡"></a>7. 出口 – 网卡</h4><p>网络包只是存放在内存中的一串二进制数字信息，没有办法直接发送给对方。因此，我们需要将<strong>数字信息转换为电信号</strong>，才能在网线上传输，也就是说，这才是真正的数据发送过程。</p><p>负责执行这一操作的是<strong>网卡</strong>，要控制网卡还需要靠<strong>网卡驱动程序</strong>。</p><p>网卡驱动获取网络包之后，会将其<strong>复制</strong>到网卡内的缓存区中，接着会在其<strong>开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列</strong>。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221954016.png" alt="数据包"></p><ul><li>起始帧分界符是一个用来表示包起始位置的标记</li><li>末尾的 <code>FCS</code>（帧校验序列）用来检查包传输过程是否有损坏</li></ul><p>最后网卡会将包转为电信号，通过网线发送出去。</p><h4 id="8-交换机"><a href="#8-交换机" class="headerlink" title="8. 交换机"></a>8. 交换机</h4><p>下面来看一下包是如何通过交换机的。交换机的设计是将网络包<strong>原样</strong>转发到目的地。交换机工作在 MAC 层，也称为<strong>二层网络设备</strong>。</p><blockquote><p>交换机的包接收操作</p></blockquote><p>首先，电信号到达网线接口，交换机里的模块进行接收，接下来交换机里的模块将电信号转换为数字信号。</p><p>然后通过包末尾的 <code>FCS</code> 校验错误，如果没问题则放到缓冲区。这部分操作基本和计算机的网卡相同，但交换机的工作方式和网卡不同。</p><p>计算机的网卡本身具有 MAC 地址，并通过核对收到的包的接收方 MAC 地址判断是不是发给自己的，如果不是发给自己的则丢弃；相对地，交换机的端口不核对接收方 MAC 地址，而是直接接收所有的包并存放到缓冲区中。因此，和网卡不同，<strong>交换机的端口不具有 MAC 地址</strong>。</p><p>将包存入缓冲区后，接下来需要查询一下这个包的接收方 MAC 地址是否已经在 MAC 地址表中有记录了。</p><p>交换机的 MAC 地址表主要包含两个信息：</p><ul><li>一个是设备的 MAC 地址，</li><li>另一个是该设备连接在交换机的哪个端口上。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221955195.jpeg" alt="交换机的 MAC 地址表"></p><p>举个例子，如果收到的包的接收方 MAC 地址为 <code>00-02-B3-1C-9C-F9</code>，则与图中表中的第 3 行匹配，根据端口列的信息，可知这个地址位于 <code>3</code> 号端口上，然后就可以通过交换电路将包发送到相应的端口了。</p><p>所以，<strong>交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口</strong>。</p><blockquote><p>当 MAC 地址表找不到指定的 MAC 地址会怎么样？</p></blockquote><p>地址表中找不到指定的 MAC 地址。这可能是因为具有该地址的设备还没有向交换机发送过包，或者这个设备一段时间没有工作导致地址被从地址表中删除了。</p><p>这种情况下，交换机无法判断应该把包转发到哪个端口，只能将包转发到除了源端口之外的所有端口上，无论该设备连接在哪个端口上都能收到这个包。</p><p>这样做不会产生什么问题，因为以太网的设计本来就是将包发送到整个网络的，然后<strong>只有相应的接收者才接收包，而其他设备则会忽略这个包</strong>。</p><p>有人会说：“这样做会发送多余的包，会不会造成网络拥塞呢？”</p><p>其实完全不用过于担心，因为发送了包之后目标设备会作出响应，只要返回了响应包，交换机就可以将它的地址写入 MAC 地址表，下次也就不需要把包发到所有端口了。</p><p>局域网中每秒可以传输上千个包，多出一两个包并无大碍。</p><p>此外，如果接收方 MAC 地址是一个<strong>广播地址</strong>，那么交换机会将包发送到除源端口之外的所有端口。</p><p>以下两个属于广播地址：</p><ul><li>MAC 地址中的 <code>FF:FF:FF:FF:FF:FF</code></li><li>IP 地址中的 <code>255.255.255.255</code></li></ul><h4 id="9-路由器"><a href="#9-路由器" class="headerlink" title="9. 路由器"></a>9. 路由器</h4><blockquote><p>路由器与交换机的区别</p></blockquote><p>网络包经过交换机之后，现在到达了<strong>路由器</strong>，并在此被转发到下一个路由器或目标设备。</p><p>这一步转发的工作原理和交换机类似，也是通过查表判断包转发的目标。</p><p>不过在具体的操作过程上，路由器和交换机是有区别的。</p><ul><li>因为<strong>路由器</strong>是基于 IP 设计的，俗称<strong>三层</strong>网络设备，路由器的各个端口都具有 MAC 地址和 IP 地址；</li><li>而<strong>交换机</strong>是基于以太网设计的，俗称<strong>二层</strong>网络设备，交换机的端口不具有 MAC 地址。</li></ul><blockquote><p>路由器基本原理</p></blockquote><p>路由器的端口具有 MAC 地址，因此它就能够成为以太网的发送方和接收方；同时还具有 IP 地址，从这个意义上来说，它和计算机的网卡是一样的。</p><p>当转发包时，首先路由器端口会接收发给自己的以太网包，然后<strong>路由表</strong>查询转发目标，再由相应的端口作为发送方将以太网包发送出去。</p><blockquote><p>路由器的包接收操作</p></blockquote><p>首先，电信号到达网线接口部分，路由器中的模块会将电信号转成数字信号，然后通过包末尾的 <code>FCS</code> 进行错误校验。</p><p>如果没问题则检查 MAC 头部中的<strong>接收方 MAC 地址</strong>，看看是不是发给自己的包，如果是就放到接收缓冲区中，否则就丢弃这个包。</p><p>总的来说，路由器的端口都具有 MAC 地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃。</p><blockquote><p>查询路由表确定输出端口</p></blockquote><p>完成包接收操作之后，路由器就会<strong>去掉</strong>包开头的 MAC 头部。</p><p><strong>MAC 头部的作用就是将包送达路由器</strong>，其中的接收方 MAC 地址就是路由器端口的 MAC 地址。因此，当包到达路由器之后，MAC 头部的任务就完成了，于是 MAC 头部就会<strong>被丢弃</strong>。</p><p>接下来，路由器会根据 MAC 头部后方的 <code>IP</code> 头部中的内容进行包的转发操作。</p><p>转发操作分为几个阶段，首先是查询<strong>路由表</strong>判断转发目标。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210221955952.png" alt="路由器转发"></p><p>具体的工作流程根据上图，举个例子。</p><p>假设地址为 <code>10.10.1.101</code> 的计算机要向地址为 <code>192.168.1.100</code> 的服务器发送一个包，这个包先到达图中的路由器。</p><p>判断转发目标的第一步，就是根据包的接收方 IP 地址查询路由表中的目标地址栏，以找到相匹配的记录。</p><p>路由匹配和前面讲的一样，每个条目的子网掩码和 <code>192.168.1.100</code> IP 做 <strong>&amp; 与运算</strong>后，得到的结果与对应条目的目标地址进行匹配，如果匹配就会作为候选转发目标，如果不匹配就继续与下个条目进行路由匹配。</p><p>如第二条目的子网掩码 <code>255.255.255.0</code> 与 <code>192.168.1.100</code> IP 做 <strong>&amp; 与运算</strong>后，得到结果是 <code>192.168.1.0</code> ，这与第二条目的目标地址 <code>192.168.1.0</code> 匹配，该第二条目记录就会被作为转发目标。</p><p>实在找不到匹配路由时，就会选择<strong>默认路由</strong>，路由表中子网掩码为 <code>0.0.0.0</code> 的记录表示「默认路由」。</p><blockquote><p>路由器的发送操作</p></blockquote><p>接下来就会进入包的<strong>发送操作</strong>。</p><p>首先，我们需要根据<strong>路由表的网关列</strong>判断对方的地址。</p><ul><li>如果网关是一个 IP 地址，则这个IP 地址就是我们要转发到的目标地址，<strong>还未抵达终点</strong>，还需继续需要路由器转发。</li><li>如果网关为空，则 IP 头部中的接收方 IP 地址就是要转发到的目标地址，也是就终于找到 IP 包头里的目标地址了，说明<strong>已抵达终点</strong>。</li></ul><p>知道对方的 IP 地址之后，接下来需要通过 <code>ARP</code> 协议根据 IP 地址查询 MAC 地址，并将查询的结果作为接收方 MAC 地址。</p><p>路由器也有 ARP 缓存，因此首先会在 ARP 缓存中查询，如果找不到则发送 ARP 查询请求。</p><p>接下来是发送方 MAC 地址字段，这里填写输出端口的 MAC 地址。还有一个以太类型字段，填写 <code>0800</code> （十六进制）表示 IP 协议。</p><p>网络包完成后，接下来会将其转换成电信号并通过端口发送出去。这一步的工作过程和计算机也是相同的。</p><p>发送出去的网络包会通过<strong>交换机</strong>到达下一个路由器。由于接收方 MAC 地址就是下一个路由器的地址，所以交换机会根据这一地址将包传输到下一个路由器。</p><p>接下来，下一个路由器会将包转发给再下一个路由器，经过层层转发之后，网络包就到达了最终的目的地。</p><p>不知你发现了没有，在网络包传输的过程中，<strong>源 IP 和目标 IP 始终是不会变的，一直变化的是 MAC 地址</strong>，因为需要 MAC 地址在以太网内进行<strong>两个设备</strong>之间的包传输。</p><hr><p>至此我们的请求就顺利传输到 <code>Web</code> 服务器了，服务器响应请求按相同的步骤将资源传输到客户端（HTTP 响应报文）。</p><h2 id="HTTP-篇"><a href="#HTTP-篇" class="headerlink" title="HTTP 篇"></a>HTTP 篇</h2><h2 id="TCP-篇"><a href="#TCP-篇" class="headerlink" title="TCP 篇"></a>TCP 篇</h2><h2 id="IP-篇"><a href="#IP-篇" class="headerlink" title="IP 篇"></a>IP 篇</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://devildyw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机网络" scheme="https://devildyw.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://devildyw.github.io/2022/10/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://devildyw.github.io/2022/10/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-10-18T11:01:33.000Z</published>
    <updated>2022-10-24T16:40:44.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h2><p>该部分主要接收一些计算机中的硬件知识。</p><h3 id="CPU-是如何执行程序的？"><a href="#CPU-是如何执行程序的？" class="headerlink" title="CPU 是如何执行程序的？"></a>CPU 是如何执行程序的？</h3><h4 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h4><p>冯诺依曼模型定义了计算机基本结构的 5 个部分，分别是<strong>运算器、控制器、存储器、输入设备、输出设备</strong>。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Von_Neumann_architecture.svg" alt="img"></p><p>运算器、控制器是在中央处理器里的，存储器就是我们常见的内存，输入输出设备则是计算机外接的设备，比如键盘、鼠标就是常见的输入设备，显示器、音响就是常见的输出设备。</p><p>存储单元和输入&#x2F;输出设备要与中央处理器打交道的话，离不开<strong>总线</strong>。它们的关系如下。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210202022116.png"></p><p>下面，我们分别介绍内存、中央处理器、总线、输入输出设备。</p><hr><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>我们程序在<strong>运行时</strong>的程序和数据都是存储在内存，存储的区域是<strong>线性</strong>的。</p><p>在计算机数据存储中，存储数据的基本单位是<strong>字节（byte）</strong>，1 字节等于 8 位（bit）。每一个字节都对应一个内存地址</p><blockquote><p>内存的地址都是从 0 开始编号的，然后自增排列，最后一个地址为内存总字节数 -1，这种结构好似我们程序里的数组，所以<strong>内存里读写任何一个数据的速度都是一样的</strong>。</p></blockquote><h5 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h5><p>中央处理就是我们常说的 CPU，32 位和 64 位 CPU 最主要的区别在于一次能计算出多少字节数据：</p><ul><li>32 位 CPU 一次可以计算 4 个字节（32 位）；</li><li>64 位 CPU 一次可以计算 8 个字节（64 位）；</li></ul><blockquote><p>这里的 32 位和 64 位，通常称为 CPU 的位宽。</p><p>之所以 CPU 要这样设计，是为了能计算更大的数组，如果是 8 位的 CPU，那么一次只能计算 1 个字节 <code>0~255</code> 范围内的数值，这样就无法一次完成计算 <code>1000*500</code>，于是为了能一次计算大数的运算，CPU 需要支持多个 byte 一起计算，所以 CPU 位宽越大，可以计算的数值就越大，比如说 32 位 CPU 能计算的最大整数是 <code>4294967295</code></p></blockquote><p>CPU 内部还有一些组件，常见的有<strong>寄存器</strong>、<strong>控制单元和逻辑运算单元</strong>等。其中<strong>控制单元负责控制 CPU 工作</strong>，逻辑运算单元<strong>负责计算</strong>，而寄存器可以分为多种类，每种寄存器的功能又不尽相同。</p><p>CPU 中的寄存器主要作用是存储计算时的数据，因为内存离 CPU 太远了，而寄存器就在 CPU 里，还紧挨着控制单元和逻辑运算单元，自然计算时速度会比内存快很多。</p><blockquote><p>常见的寄存器种类：</p><ul><li><strong>通用寄存器</strong>：用来存储需要进行运算的数据，比如需要进行加和运算的两个数据。</li><li><strong>程序计数器</strong>：用来存储 CPU 要执行的下一条指令「所在的内存地址」，注意不是存储了下一条要执行的指令，此时指令还在存储中，<strong>程序计数器只是存储了下一条执行的地址</strong>。</li><li><strong>指令寄存器</strong>：用来存放程序计数器指向的指令，也就是指令本身，指令被执行完成之前，指令都存储在这里。</li></ul></blockquote><h5 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h5><p>总线用于 CPU 和内存以及其他设备之间的通信，总线分为 3 中：</p><ul><li><strong>地址总线</strong>：用于指定 CPU 将要操作的内存地址；</li><li><strong>数据总线</strong>：用于读写内存的数据；</li><li><strong>控制总线</strong>：用于发送和接收信号，比如中断、设备复位等信号，CPU 收到信号后自然进行响应，这时也需要控制总线；</li></ul><p>CPU 要读写内存数据时，需要经过下面三个总线：</p><ol><li>通过「地址总线」来指定内存的地址；</li><li>通过「控制总线」控制是读或写命令；</li><li>通过「数据总线」来传输数据；</li></ol><h5 id="输入-x2F-输出设备"><a href="#输入-x2F-输出设备" class="headerlink" title="输入&#x2F;输出设备"></a>输入&#x2F;输出设备</h5><p>输出设备向计算机输入数据，计算机经过处理计算后，把数据输出给输出设备。期间如果输入设备是键盘，按下按键时是需要和 CPU 进行交互的，这时就需要用到控制总线了。</p><hr><h3 id="线路位宽与-CPU-位宽"><a href="#线路位宽与-CPU-位宽" class="headerlink" title="线路位宽与 CPU 位宽"></a>线路位宽与 CPU 位宽</h3><p><strong>线路位宽</strong></p><p><strong>操作系统位宽一般就是指线路位宽。程序在执行时，需要通过地址总线去内存中找到对应数据或指令的地址。线路位宽就是指地址总线有多少根。</strong></p><p>数据是如何通过线路传输的呢？其实是通过操作电压，低电压表示 0，高压电压则表示 1。</p><p>如果构造了高低高这样的信号，其实就是 101 二进制数据，十进制则表示 5，如果只有一条线路，就意味着每次只能传递 1 bit 的数据，即 0 或 1，那么传输 101 这个数据，就需要 3 次才能传输完成，这样的效率非常低。</p><p>这样一位一位传输的方式，称为串行，下一个 bit 必须等待上一个 bit 传输完成才能进行传输。当然，想一次多传一些数据，增加线路即可，这时数据就可以并行传输。</p><p>为了避免低效率的串行传输的方式，线路的位宽最好一次就能访问到所有的内存地址。</p><p>CPU 要想操作的内存地址就需要地址总线：</p><ul><li>如果地址总线只有 1 条，那每次只能表示 「0 或 1」这两种地址，所以 CPU 能操作的内存地址最大数量为 2（2^1）个（注意，不要理解成同时能操作 2 个内存地址）；</li><li>如果地址总线有 2 条，那么能表示 00、01、10、11 这四种地址，所以 CPU 能操作的内存地址最大数量为 4（2^2）个。</li></ul><p>那么，想要 CPU 操作 <code>4G</code> 大的内存，那么就需要 32 条地址总线，因为 <code>2 ^ 32 = 4G</code>。</p><p><strong>CPU 位宽</strong></p><p>CPU 的位宽最好不要小于线路位宽，比如 32 位 CPU 控制 40 位宽的地址总线和数据总线的话，工作起来就会非常复杂且麻烦，所以 32 位的 CPU 最好和 32 位宽的线路搭配，因为 32 位 CPU 一次最多只能操作 32 位宽的地址总线和数据总线。</p><p>如果用 32 位 CPU 去加和两个 64 位大小的数字，就需要把这 2 个 64 位的数字分成 2 个低位 32 位数字和 2 个高位 32 位数字来计算，先加个两个低位的 32 位数字，算出进位，然后加和两个高位的 32 位数字，最后再加上进位，就能算出结果了，可以发现 32 位 CPU 并不能一次性计算出加和两个 64 位数字的结果。</p><p>对于 64 位 CPU 就可以一次性算出加和两个 64 位数字的结果，因为 64 位 CPU 可以一次读入 64 位的数字，并且 64 位 CPU 内部的逻辑运算单元也支持 64 位数字的计算。</p><p>但是并不代表 64 位 CPU 性能比 32 位 CPU 高很多，很少应用需要算超过 32 位的数字，所以<strong>如果计算的数额不超过 32 位数字的情况下，32 位和 64 位 CPU 之间没什么区别的，只有当计算超过 32 位数字的情况下，64 位的优势才能体现出来</strong>。</p><p>另外，32 位 CPU 最大只能操作 <code>4GB</code> 内存，就算你装了 8 GB 内存条，也没用。而 64 位 CPU 寻址范围则很大，理论最大的寻址空间为 <code>2^64</code>。</p><h4 id="程序执行的基本过程"><a href="#程序执行的基本过程" class="headerlink" title="程序执行的基本过程"></a>程序执行的基本过程</h4><p>下面我们看看程序是如何在冯诺依曼模型上执行的。</p><p><strong>程序实际上就是一条一条的指令的集合</strong>，所以程序的执行过程其实就是把每一条指令一步一步地执行起来，负责执行指令的就是 CPU 了。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210202149351.png" alt="img"></p><p>CPU 执行程序的过程如下：</p><ul><li>第一步：CPU 读取「程序计数器」的值，这个值是指令的<strong>内存地址</strong>，然后 CPU 的<strong>「控制单元」</strong>操作<strong>「地址总线」</strong>指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过<strong>「数据总线」</strong>将指令数据传给 CPU，CPU 收到内存传来的数据后，将这个指令数据存入到<strong>「指令寄存器」</strong>。</li><li>第二步，CPU 分析<strong>「指令寄存器」</strong>中的指令，确定指令的类型和参数，如果是计算类型的指令，就把指令交给<strong>「逻辑运算单元」</strong>运算；如果是存储类型的指令，则交由<strong>「控制单元」</strong>执行；</li><li>第三步，CPU 执行完指令后，<strong>「程序计数器」</strong>的值<strong>自增</strong>，表示<strong>指向下一条指令</strong>。这个自增的大小，由 <strong>CPU 的位宽</strong>决定，比如 32 位的 CPU，指令是 4 个字节，需要 4 个内存地址存放，因此<strong>「程序计数器」</strong>的值会自增 4；</li></ul><blockquote><p>流程可以简单地描述为：一个程序执行的时候，CPU 会根据程序计数器里面的内存地址，把内存里面需要执行的指令读取到指令寄存器里面执行，然后根据指令长度增长，程序计数器自增指向下一条执行的指令的内存地址，开始顺序读取下一条指令。</p></blockquote><p>CPU 从程序计数器读取指令、到执行、再到下一条指令，这个过程会不断循环，直到程序执行结束，这个不断循环的过程被称为 <strong>CPU 的指令周期</strong>。</p><h4 id="a-x3D-1-2-执行具体过程"><a href="#a-x3D-1-2-执行具体过程" class="headerlink" title="a &#x3D; 1 + 2 执行具体过程"></a>a &#x3D; 1 + 2 执行具体过程</h4><p>知道了基本的程序执行过程后，接下来用 <code>a = 1 + 2</code> 的作为例子，进一步分析该程序在冯诺伊曼模型的执行过程。</p><p>CPU 是不认识 <code>a = 1 + 2</code> 这个字符串，这些字符串只是方便我们程序员认识，要想这段程序能跑起来，还需要把整个程序翻译成<strong>汇编语言</strong>的程序，这个过程称为编译成汇编代码。</p><p><strong>针对汇编代码，我们还需要用汇编器翻译成机器码</strong>，这些机器码由 0 和 1 组成的机器语言，这一条条机器码，就是一条条的<strong>计算机指令</strong>，这个才是 CPU 能够真正认识的东西。</p><p>下面来看看 <code>a = 1 + 2</code> 在 32 位 CPU 的执行过程。</p><p>程序编译过程中，编译器通过分析代码，发现 1 和 2 是数据，于是程序运行时，内存会有个专门的区域来存放这些数据，这个区域就是<strong>「数据段」</strong>。如下图，数据 1 和 2 的区域位置：</p><ul><li>数据 1 被存放到 <code>0x100</code> 位置；</li><li>数据 2 被存放到 <code>0x104</code> 位置；</li></ul><p>注意，<strong>数据和指令是分开区域存放的，存放指令区域的地方称为「正文段」。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210202207577.png" alt="img"></p><p>编译器会把 <code>a = 1 + 2</code> 翻译成 4 条指令，存放到正文段中。如图，这 4 条指令被存放到了 <code>0x200</code> ~ <code>0x20c</code> 的区域中：</p><ul><li><code>0x200</code> 的内容是 <code>load</code> 指令将 <code>0x100</code> 地址中的数据 1 装入到寄存器 <code>R0</code>；</li><li><code>0x204</code> 的内容是 <code>load</code> 指令将 <code>0x104</code> 地址中的数据 2 装入到寄存器 <code>R1</code>；</li><li><code>0x208</code> 的内容是 <code>add</code> 指令将寄存器 <code>R0</code> 和 <code>R1</code> 的数据相加，并把结果存放到寄存器 <code>R2</code>；</li><li><code>0x20c</code> 的内容是 <code>store</code> 指令将寄存器 <code>R2</code> 中的数据存回数据段中的 <code>0x108</code> 地址中，这个地址也就是变量 <code>a</code> 内存中的地址；</li></ul><p>编译完成后，具体执行程序的时候，程序计数器会被设置为 <code>0x200</code> 地址，然后依次执行这 4 条指令。</p><p>上面的例子中，由于是在 32 位 CPU 执行的，因此一条指令是占 32 位大小，所以你会发现每条指令间隔 4 个字节。（单字长指令 &#x3D; 机器字长 &#x3D; <strong>计算机能直接处理的二进制数据的位数。机器字长通常与主存单元的位数一致</strong>。）</p><p>而数据的大小是根据你在程序中指定的变量类型，比如 <code>int</code> 类型的数据则占 4 个字节，<code>char</code> 类型的数据则占 1 个字节。</p><h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>计算机是由这种外部硬件设备组成的，比如内存、CPU、硬盘等，如果每个应用都要和这些硬件对接通信协议，那这样太累了，所以这个中间人就由内核来充当，<strong>让内核作为应用连接硬件设备的桥梁</strong>，应用程序只需要关心与内核的交互，不用关心硬件的细节。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210250021743.png" alt="内核"></p><h4 id="内核的能力"><a href="#内核的能力" class="headerlink" title="内核的能力"></a>内核的能力</h4><p>现代的操作系统，内核一般会提供 4 个基本能力：</p><ul><li>管理进程、线程，决定那个进程、线程使用 CPU，也就是<strong>进程调度</strong>的能力；</li><li>内存管理，决定内存的分配与回收，也就是<strong>内存管理</strong>的能力；</li><li>管理硬件设备，为进程与硬件设备之间提供通信能力，也就是<strong>硬件通信</strong>能力。</li><li><strong>提供系统调用</strong>，如果应用程序要运行更高权限的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。</li></ul><h4 id="内核怎样工作"><a href="#内核怎样工作" class="headerlink" title="内核怎样工作"></a>内核怎样工作</h4><p>内核具有很高的权限，可以控制 CPU、内存等硬件，而用户层面的应用程序具有操作系统的权限很小，因此多少操作系统，会把内存分为<strong>内核空间和用户空间</strong></p><ul><li>内核空间：这个内存空间<strong>只有</strong>内核程序可以访问；</li><li>用户空间：这个内存空间<strong>专门</strong>给应用程序使用；</li></ul><blockquote><p>用户空间的代码只能访问一个局部的内存空间，而内核空间的代码可以访问<strong>所有内存空间</strong>。因此当程序使用用户空间时，常指该程序在<strong>用户态</strong>执行，而当程序使用内核空间时，程序则在<strong>内核态</strong>执行。</p></blockquote><p>应用程序需要进入内核空间，就需要通过系统调用，下面来看看系统调用的过程：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210250035284.png" alt="img"></p><blockquote><p>内核程序执行在内核态，用户程序执行在内核态。<strong>当应用程序使用系统调用，会产生一个中断</strong>。发生中断后，CPU 会中断当前在执行的应用程序，转而跳转到中断处理程序，也就是开始执行内核程序。<strong>内核处理完后，主动出发中断</strong>，把 CPU 执行权限交回给应用程序，回到用户态继续工作。</p></blockquote><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;h2 id=&quot;硬件结构&quot;&gt;&lt;a href=&quot;#硬件结构&quot; class=&quot;headerlink&quot; title=&quot;硬件结构&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://devildyw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="操作系统" scheme="https://devildyw.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>《Netty4核心原理与手写RPC框架实战》</title>
    <link href="https://devildyw.github.io/2022/10/06/%E3%80%8ANetty4%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98%E3%80%8B/"/>
    <id>https://devildyw.github.io/2022/10/06/%E3%80%8ANetty4%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6%E5%AE%9E%E6%88%98%E3%80%8B/</id>
    <published>2022-10-06T11:30:52.000Z</published>
    <updated>2022-10-11T13:16:12.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Netty4核心原理与手写RPC框架实战》读书笔记"><a href="#《Netty4核心原理与手写RPC框架实战》读书笔记" class="headerlink" title="《Netty4核心原理与手写RPC框架实战》读书笔记"></a>《Netty4核心原理与手写RPC框架实战》读书笔记</h1><h2 id="Java-I-x2F-O-演进之路"><a href="#Java-I-x2F-O-演进之路" class="headerlink" title="Java I&#x2F;O 演进之路"></a>Java I&#x2F;O 演进之路</h2><h3 id="什么是-I-x2F-O"><a href="#什么是-I-x2F-O" class="headerlink" title="什么是 I&#x2F;O"></a>什么是 I&#x2F;O</h3><p>在操作系统之中我们都知道在 UNIX 世界里一切皆文件，而文件呢就是一串二进制流而已，其实不管是 Socket，还是 FIFO、管道、终端。对计算机来说一切都是文件，一切都是流。<strong>在信息交换的过程中，计算机都是对这些流进行数据的收发操作，简称 I&#x2F;O 操作（Input and Output）。</strong> </p><h3 id="I-x2F-O-交互流程"><a href="#I-x2F-O-交互流程" class="headerlink" title="I&#x2F;O 交互流程"></a>I&#x2F;O 交互流程</h3><p>通过用户进程中的一次完整的 I&#x2F;O 交互流程分为两阶段，首先是经过内核空间，也就是由操作系统处理；紧接着就是到用户空间，也就是交由应用程序。具体流程如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210061940952.png" alt="image-20221006194022868"></p><p>I&#x2F;O 有内存 I&#x2F;O、网络 I&#x2F;O 和磁盘 I&#x2F;O 三种，通常我们说的 I&#x2F;O 指的是后两者。如下图所示是 I&#x2F;O 通信过程的调度示意。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210061943276.png" alt="image-20221006194305227"></p><h2 id="五种-I-x2F-O-通信模型"><a href="#五种-I-x2F-O-通信模型" class="headerlink" title="五种 I&#x2F;O 通信模型"></a>五种 I&#x2F;O 通信模型</h2><p>在网络环境下，通俗地讲，将 I&#x2F;O 分为两步：<strong>第一步是等待；第二步是数据搬迁。</strong></p><p>如果想要提高 I&#x2F;O 效率，需要将<strong>等待时间降低</strong>。因此发展出来五种 I&#x2F;O 模型，分别是：<strong>阻塞 I&#x2F;O 模型、非阻塞 I&#x2F;O 模型、多路复用 I&#x2F;O 模型、信号驱动 I&#x2F;O 模型、异步 I&#x2F;O 模型。其中前四种被称为同步 I&#x2F;O</strong>，下面对每一种 I&#x2F;O 模型进行详细分析。</p><h3 id="阻塞-I-x2F-O-模型"><a href="#阻塞-I-x2F-O-模型" class="headerlink" title="阻塞 I&#x2F;O 模型"></a>阻塞 I&#x2F;O 模型</h3><p>阻塞 I&#x2F;O 模型的通信过程示意如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062050240.png" alt="image-20221006205039163"></p><p>我们第一次接触的到的网络编程都是从 <code>listen()</code>、<code>send()</code>、<code>recv()</code> 等接口开始的，这些接口都是阻塞型的。都属于阻塞 I&#x2F;O 模型</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062051489.png" alt="image-20221006205154439"></p><h3 id="非阻塞-I-x2F-O-模型"><a href="#非阻塞-I-x2F-O-模型" class="headerlink" title="非阻塞 I&#x2F;O 模型"></a>非阻塞 I&#x2F;O 模型</h3><p>示意图如下。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062052703.png" alt="image-20221006205243625"></p><p>当用户进程发出 read 操作时，如果内核中的数据还没有准备好，那么它并不会阻塞用户进程，而是立刻返回一个 error。从用户进程的角度讲，他发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果，用户进程判断结果是一个 error 时，他就知道数据还没有准备好。于是它可以再次发送 read 操作，一旦内核中的数据准备好了，并且再次收到了用户进程的系统调用，那么它会马上将数据拷贝到用户内存，然后返回，非阻塞接口相比于阻塞接口的显著差异在于，在被调用之后立即返回。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210062059124.png" alt="image-20221006205945061"></p><blockquote><p>非阻塞模式套接字与阻塞模式相比，不容易使用，使用非阻塞模式套接字，要编写更多的代码，但是，非阻塞模式套接字在控制建立多个链接、时间不定时，具有明显优势。</p></blockquote><h3 id="多路复用-I-x2F-O-模型"><a href="#多路复用-I-x2F-O-模型" class="headerlink" title="多路复用 I&#x2F;O 模型"></a>多路复用 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081837376.png" alt="image-20221008183741246"></p><p>多个进程的 I&#x2F;O 可以注册到一个复用器（Selector）上，当用户进程调用该 Selector，Selector 会监听注册进来的所有 I&#x2F;O，如果Selector 监听的所有 I&#x2F;O 在内核缓冲区都没有可读数据，select 调用进程会被阻塞，而当任一 I&#x2F;O 在内核缓冲区中有可读数据时，select 调用进程就会返回，而后 select 调用进程可以自己或通知另外的进程（注册进程）再次发起读取 I&#x2F;O，读取内核中准备好的数据，多个进程注册 I&#x2F;O 后，只有一个 select 调用进程被阻塞。</p><blockquote><p>其实多路复用 I&#x2F;O 模型和阻塞 I&#x2F;O 模型并没有太大的不同，事实上由于这里要使用两个系统调用而比阻塞 I&#x2F;O 模型的性能还要差些。</p><p>多路复用 I&#x2F;O 不一定比使用多线程加阻塞 I&#x2F;O 的模式更优，甚至性能更佳，多路复用的优势在于可以处理更多的连接，而不是单个连接处理更快。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081847520.png" alt="image-20221008184759480"></p><h3 id="信号驱动-I-x2F-O-模型"><a href="#信号驱动-I-x2F-O-模型" class="headerlink" title="信号驱动 I&#x2F;O 模型"></a>信号驱动 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081848507.png" alt="image-20221008184819467"></p><p>信号驱动 I&#x2F;O 是指进程预先告知内核，向内核注册一个信号处理函数，然后用户进程返回<strong>不阻塞</strong>，当内核<strong>数据就绪时会发送一个信号给进程</strong>，用户进程便在信号处理函数中调用 I&#x2F;O 读取数据，从上图可以看出，<strong>实际上 I&#x2F;O 内核拷贝到用户进程的过程还是阻塞的，信号驱动 I&#x2F;O 并没有实现真正的异步，因为通知到进程后，依然由进程来完成 I&#x2F;O 操作。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081853074.png" alt="image-20221008185312018"></p><h3 id="异步-I-x2F-O-模型"><a href="#异步-I-x2F-O-模型" class="headerlink" title="异步 I&#x2F;O 模型"></a>异步 I&#x2F;O 模型</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081853986.png" alt="image-20221008185359939"></p><p>用户进程发起 aio_read 操作后，给内核传递与 read 相同的描述符、缓冲区指针、缓冲区大小三个参数及文件偏移，告诉内核当整个操作完成时，如何通知我们立刻就可以开始去做其他的事；而另一方面，从内核的角度，当他收到一个 aio_read 之后，首先他会立刻返回，所以不会对用户进程产生任何阻塞，内核会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，内核会给用户进程发送一个信号，告诉它 aio_read 操作完成。</p><blockquote><p>异步 I&#x2F;O 的工作机制是：告知内核启动某个操作，并让内核在整个操作完成后通知我们，这种模型与信号驱动 I&#x2F;O 模型的区别在于，<strong>信号驱动 I&#x2F;O 模型是由内核通知我们何时可以启动一个 I&#x2F;O 操作，这个 I&#x2F;O 操作由用户自定义的信号函数来实现，而异步 I&#x2F;O 模型由内核告知我们 I&#x2F;O 操作何时完成。</strong></p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081924965.png" alt="image-20221008192424929"></p><h3 id="各-I-x2F-O-模型的对比与总结"><a href="#各-I-x2F-O-模型的对比与总结" class="headerlink" title="各 I&#x2F;O 模型的对比与总结"></a>各 I&#x2F;O 模型的对比与总结</h3><p>前四种 I&#x2F;O 模型都是同步 I&#x2F;O 操作，它们的区别在于第一阶段，而第二阶段是一样的：数据（准备好后）从内核拷贝到应用缓冲区期间（用户空间），进程阻塞于 <code>recvfrom</code> 调用。</p><blockquote><p>recvfrom 会将数据从内核（Kernel）拷贝到用户内存中，这个时候进程就被阻塞了。在这段时间内，进程是被阻塞的。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081929728.png" alt="image.png"></p><p>由上图可以看出，阻塞程度：阻塞 I&#x2F;O &gt; 非阻塞 I&#x2F;O &gt; 多路复用 I&#x2F;O &gt; 信号驱动 I&#x2F;O &gt; 异步 I&#x2F;O，效率是由低到高的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081930764.png" alt="image-20221008193056732"></p><p>Java BIO 和 NIO 之间的主要差异。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081952389.png" alt="image-20221008195234349"></p><h2 id="易混淆概念解释"><a href="#易混淆概念解释" class="headerlink" title="易混淆概念解释"></a>易混淆概念解释</h2><ul><li>同步与异步：主要看请求发起方对消息结果的获取是主动发起还是被动通知的。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081934838.png" alt="image-20221008193426801"></p><ul><li>阻塞与非阻塞：调用一个函数后，在等待这个函数返回结果之前，当前的线程是处于挂起状态还是运行状态。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210081936694.png" alt="image-20221008193611650"></p><ul><li>同步阻塞：请求方主动发起的，一直等待应答结果（用户线程阻塞挂起）；</li><li>异步非阻塞：请求方主动发起，但是可以去做其他的事情，但是需要不断轮询查看发起的请求是否有结果；</li><li>异步阻塞：请求方发起请求，一直阻塞等待答应结果（实际不应用）；</li><li>异步非阻塞：请求方发起请求，可以去干自己的事，服务会主动通知该请求已完成。</li></ul><h2 id="NIO-介绍"><a href="#NIO-介绍" class="headerlink" title="NIO 介绍"></a>NIO 介绍</h2><h3 id="缓冲区（Buffer）"><a href="#缓冲区（Buffer）" class="headerlink" title="缓冲区（Buffer）"></a>缓冲区（Buffer）</h3><p>在谈到缓冲区，<strong>我们说缓冲区对象本质上是一个数组，但它其实是一个特殊的数组，缓冲区对象内置了一些机制，能够追踪和记录缓冲区的状态变化情况</strong>，如果我们使用 <code>get()</code> 方法从缓冲区获取数据或者使用 <code>put()</code> 方法把数据写入缓冲区，都会引起缓冲区状态的变化。</p><blockquote><p>缓冲区三个重要属性：</p><ul><li>position：指定下一个将要被写入或者读取的元素索引，它的值由 get()&#x2F;put() 方法自动更新，在新创建一个 Buffer 对象时，position 被初始化为 0。</li><li>limit：指定还有多少数据需要取出（在从缓冲区写入通道时），或者还有多少空间可以放入数据（在从通道读入缓冲区时）。</li><li>capacity：指定了可以存储在缓冲区的最大数据容量，实际上，它指定了底层数据的大小，或者至少时指定了准许我们使用的底层数组的容量。‘</li></ul><p>注：0&lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</p></blockquote><p>在 NIO 中，所有的缓冲区类型都继承与抽象类 Buffer，最常用的就是 ByteBuffer，对于 Java 中的基本类型，基本都有一个具体 Buffer 类型与之相对应。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210082019274.png" alt="image-20221008201920235"></p><ul><li><p><strong>缓存区的分配</strong>：可以通过调用静态方法 <code>allocate()</code> 来指定缓冲区的容量，其实调用 allocate 方法相当于<strong>创建了一个指定大小的数组，并把它包装为缓冲区对象</strong>。我们也可以<strong>自己创建一个数组通过调用静态方法 <code>wrap()</code> 来将其包装为缓冲区对象。</strong> </p></li><li><p><strong>缓冲区分片</strong>：根据现有的缓冲区对象创建一个子缓冲区，<strong>即在现有缓冲区上切出一片作为一个新的缓冲区，但现有的缓冲区与创建的子缓冲区在底层数面上是数据共享的（子缓冲区相当于现有缓冲区的一个视图窗口）。</strong>可以通过调用缓冲区对象的 <code>slice()</code> 创建。</p></li><li><p><strong>只读缓冲区</strong>：通过调用缓冲区对象的 <code>asReadOnlyBuffer()</code> 方法，将任何<strong>常规缓冲区转换为只读缓冲区</strong>，这个方法返回一个与原缓冲区<strong>完全相同</strong>的缓冲区，并与原缓冲区<strong>共享数据</strong>，只不过它是只读的。如果<strong>原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化</strong>。<strong>注意：尝试修改只读缓冲区的内容，则会报 ReadOnlyBufferException 异常；只可以 常规–&gt; 只读 不可以 只读 –&gt; 可写</strong></p></li><li><p><strong>直接缓冲区</strong>：直接缓冲区是为了加快 I&#x2F;O 速度，使用一种特殊方式为其分配内存的缓冲区。<strong>该缓冲区会在每一次调用底层操作系统的本机 I&#x2F;O 操作之前（或之后），尝试避免将缓冲区内容拷贝到一个中间缓冲区拷贝数据。</strong>通过调用静态方法 <code>allocateDirect()</code> 方法</p></li><li><p><strong>内存映射</strong>：比常规的基于流或者基于通道的 I&#x2F;O 快得多。 <strong>内存映射文件 I&#x2F;O 通过使文件的数据表现为内存数组的内容来完成</strong>。一般来说，<strong>只有文件中实际读取或写入的部分才会映射到内存中</strong>。</p></li></ul><h3 id="选择器（Selector）"><a href="#选择器（Selector）" class="headerlink" title="选择器（Selector）"></a>选择器（Selector）</h3><p>NIO 中非阻塞 I&#x2F;O 采用了基于 Reactor 模式的工作方式， I&#x2F;O 调用不会被阻塞，而是注册感兴趣的特定 I&#x2F;O 事件，如可读数据到达、新的套接字连接等，在发生特定事件时，系统再通知我们。NIO 中实现非阻塞 I&#x2F;O 的核心对象是 Selector，Selector 是注册各种 I&#x2F;O 事件的地方，而且当那些事情发生时，就是 Selector 告诉我们所发生的事件。</p><h3 id="通道（Channel）"><a href="#通道（Channel）" class="headerlink" title="通道（Channel）"></a>通道（Channel）</h3><p>通道是一个对象，通过它可以读取和写入数据，当然所有数据都通过 Buffer 对象来处理。我们永远不会将字节直接写入通道，而是将数据写入包含一个或者多个字节的缓冲区。同样也不会直接从通道中读取字节，而是通过数据从通道读入缓冲区，再从缓冲区获取这个字节。</p><p><img src="https://pic2.zhimg.com/80/v2-537ed6de4ca2cfeefd0dd11654519b65_720w.webp" alt="img"></p><h3 id="反应堆"><a href="#反应堆" class="headerlink" title="反应堆"></a>反应堆</h3><p>阻塞 I&#x2F;O 的通信模型如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091808348.png" alt="image-20221009180839283"></p><p>每个客户端连接成功后，服务端都会启动一个线程区处理该客户端请求。</p><p><strong>阻塞 I&#x2F;O 通信模型缺点</strong></p><ol><li>当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些 CPU 时间。</li><li>阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。</li></ol><p>在这种情况下非阻塞 I&#x2F;O 就有了它的应用前景。</p><p><strong>Java NIO 工作原理。</strong></p><ol><li><strong>有一个专门的线程来处理所有 I&#x2F;O 事件，并负责分发。</strong></li><li><strong>事件驱动机制</strong>：事件到的时候出发，而不是同步地去监视事件。</li><li><strong>线程通信</strong>：线程之间通过 wait、notify 等方式通信。保证每次上下文切换都是<strong>有意义的</strong>，<strong>减少无谓的线程切换</strong>。</li></ol><blockquote><p> Java NIO 反应堆工作原理图。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091814247.png" alt="image-20221009181444168"></p><p>（注：每个线程的处理流程大概都是读取数据、解码、计算处理、编码和发送响应。）</p></blockquote><h3 id="Netty-与-NIO"><a href="#Netty-与-NIO" class="headerlink" title="Netty 与 NIO"></a>Netty 与 NIO</h3><h4 id="Netty-支持的功能与特性"><a href="#Netty-支持的功能与特性" class="headerlink" title="Netty 支持的功能与特性"></a>Netty 支持的功能与特性</h4><p>根据定义，Netty 是一个异步的、事件驱动的、用来做高性能高可靠的网络应用的框架。优点如下：</p><ol><li>框架设计优雅，底层模型随意切换，适应不同的网络协议要求。</li><li>提供了很多的协议、安全、编解码的支持。</li><li>解决了很多 NIO 不易用的问题。</li><li>社区更为活跃。</li></ol><p>Netty 支持的功能与特性如下图所示。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210091819746.png" alt="image-20221009181932653"></p><ol><li>底层核心有：Zero-Copy-Capable Buffer，非常易用的零拷贝 Buffer；统一的 API；标准可扩展的事件模型。</li><li>传输方面支持的有：管道通信；HTTP 隧道；TCP 与 UDP。</li><li>协议方面的支持有：基于原始文本和二进制的协议；解压缩；大文件传输；流媒体传输；ProtoBuf 编解码；安全认证；HTTP 和 WebSocket。</li></ol><h4 id="Netty-采用-NIO-而非-AIO-的理由"><a href="#Netty-采用-NIO-而非-AIO-的理由" class="headerlink" title="Netty 采用 NIO 而非 AIO 的理由"></a>Netty 采用 NIO 而非 AIO 的理由</h4><blockquote><ol><li>Netty 不看重 Windows 上的使用，在 Linux 系统上，AIO 的底层实现仍使用 <code>epoll</code>，没有很好地实现 AIO，因此在性能上没有明显又是，且被 JDK 封装了一层，不容易深度优化。</li><li>Netty 整体架构采用 Reactor 模型，而 AIO 采用 Proactor 模型，混在一起会非常混乱，把 AIO 也改造成 Reactor 模型，看起来是把 Epoll 绕了个弯又绕回来。</li><li>AIO 还有个缺点是接受数据需要预先分配缓存， 而 NIO 是需要接收时才分配，所以对连接数量非常大但流量小的情况，AIO 会浪费很多内存。</li><li>Linux上 AIO 不够成熟，处理回调结果的速度跟不上处理需求。</li></ol></blockquote><h2 id="Nettty-高性能之道"><a href="#Nettty-高性能之道" class="headerlink" title="Nettty 高性能之道"></a>Nettty 高性能之道</h2><h3 id="传统-RPC-调用性能差的三大问题"><a href="#传统-RPC-调用性能差的三大问题" class="headerlink" title="传统 RPC 调用性能差的三大问题"></a>传统 RPC 调用性能差的三大问题</h3><h4 id="1-网络传输方式存在弊端"><a href="#1-网络传输方式存在弊端" class="headerlink" title="1. 网络传输方式存在弊端"></a>1. 网络传输方式存在弊端</h4><p>传统的 RPC 框架或者居于 RMI 等方式的远程服务（过程）调用都是采用 BIO，当客户端的并发压力或者网络时延 增大的时候，BIO 会因频繁的 “wait” 导致 I&#x2F;O 线程经常出席那阻塞的情况，由于线程本省无法高效地工作，I&#x2F;O 处理能力自然就会下降。</p><p><strong>采用 BIO 通信模型的服务端</strong>，通常由一个独立的 Acceptor 线程负责监听客户端的连接，接收到客户端连接之后为客户端创建一个新的线程处理请求消息，处理完成之后，返回应答消息给客户端，线程销毁，这就是典型的一请求一应答模型。<strong>这样的架构设计，最大的问题就是无法进行弹性伸缩。当用户访问量剧增时，并发量自然上升，而服务端的线程个数和并发访问数成线性正比，由于线程是 JVM 非常宝贵的系统资源，所以随着并发量的持续增加、线程数急剧膨胀，系统的性能也急剧下降，可能会发生句柄和线程堆栈溢出等问题，最终可能导致服务器宕机。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210101942644.png" alt="image-20221010194225522"></p><h4 id="2-序列化方式存在弊端"><a href="#2-序列化方式存在弊端" class="headerlink" title="2. 序列化方式存在弊端"></a>2. 序列化方式存在弊端</h4><p>Java 序列化存在如下几个较为典型的问题：</p><ul><li>无法跨语言使用</li><li>比起第三方序列化框架，序列化后的字节流占用的空间太大（传输带宽占用太大）。</li><li>序列化性能较差，序列化时会占用较多的 CPU 资源。</li></ul><h4 id="3-线程模型存在弊端"><a href="#3-线程模型存在弊端" class="headerlink" title="3. 线程模型存在弊端"></a>3. 线程模型存在弊端</h4><p>由于传统的 RPC 框架均采用 BIO 模型，这使得每个 TCP 链家都需要分配 1 个线程，而线程资源是 JVM 非常宝贵的系统资源，当 I&#x2F;O 读写阻塞时无法及时释放时，会导致系统性能急剧下降，甚至会导致虚拟机无法创建新的线程。</p><h3 id="Netty-高性能的三个主题"><a href="#Netty-高性能的三个主题" class="headerlink" title="Netty 高性能的三个主题"></a>Netty 高性能的三个主题</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210101949866.png" alt="image-20221010194940812"></p><h4 id="I-x2F-O-传输模型"><a href="#I-x2F-O-传输模型" class="headerlink" title="I&#x2F;O 传输模型"></a>I&#x2F;O 传输模型</h4><p>用什么样的通道将数据发送给对方，是 BIO、NIO 还是 AIO，I&#x2F;O 传输模型在很大程度上决定了框架的性能。</p><h4 id="数据协议"><a href="#数据协议" class="headerlink" title="数据协议"></a>数据协议</h4><p>采用什么样的通信协议，是 HTTP 还是内部私有协议。协议的选择不同，性能模型也就不同。一般来说内部私有协议比公有协议的性能更高。</p><h4 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h4><p>线程模型涉及如何读取数据包，读取之后的编解码在哪个线程中进行，编解码后的消息如何派发等方面。线程模型设计得不同，对性能也会产生非常大得影响。</p><h3 id="异步非阻塞通信"><a href="#异步非阻塞通信" class="headerlink" title="异步非阻塞通信"></a>异步非阻塞通信</h3><p>与 Socket 类和ServerSocket 类相对应，NIO 也提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现。这两种新增的 Channel 都支持阻塞和非阻塞两种 I&#x2F;O 模式。</p><ol><li><p>服务端得通行步骤</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102002142.png" alt="image-20221010200208068"></p></li><li><p>客户端通信步骤：</p></li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102002287.png" alt="image-20221010200238215"></p><p>通过上面的序列图，我们大概能够了解到 Netty 的 I&#x2F;O 线程 NioEventLoop 聚合了 Selector，可以同时并发处理成百上千个客户端 Channel，而且它的<strong>读写操作都是非阻塞的</strong>，这可以大幅提升 I&#x2F;O 线程的运行效率，<strong>避免由于频繁 I&#x2F;O 阻塞导致的线程挂起</strong>。另外，由于 Netty 采用的是<strong>异步通信模式</strong>，<strong>单个 I&#x2F;O 线程也可以并发处理多个用户端连接和读写操作</strong>，所以从根本上解决了传统 BIO 的但连接单线程模型的弊端，使整个系统的性能、弹性伸缩性能和可靠性都得到了极大的提升。</p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>在<strong>操作系统</strong>的层面上<strong>零拷贝</strong>是指<strong>避免</strong>在<strong>用户态</strong>(User-space) 与<strong>内核态</strong>(Kernel-space)之间<strong>来回拷贝</strong>数据的技术。Netty 中零拷贝与操作系统层面上的零拷贝是完全不一样的，<strong>Netty 的零拷贝完全是在用户态（java层面）的，更多的是数据操作的优化。</strong></p><p>Netty 的零拷贝主要体现在如下五个方面。</p><ol><li>Netty 接收和发送 ByteBuffer 采用 DirectBuffer，使用堆外直接内存进行 Socket 读写，不需要进行字节缓冲区的二次拷贝。<strong>如果使用传统的堆存（Heap Buffer）进行 Socket 的读写。那么 JVM 会将推存拷贝一份到直接内存中，然后才写入 Socket。</strong>相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。</li><li>Netty 提供了多种组合 Buffer 对象，可以聚合多个 ByteBuffer 对象，用户可以像操作一个 Buffer 那样方面地对组合 Buffer 进行操作，避免了传统的通过内存拷贝的方式将几个小 Buffer 合并成一个大 Buffer 的繁琐操作。</li><li>Netty 中文件传输采用 <code>transferTo()</code> 方法，它可以直接将文件缓冲区的数据发送到目标 <code>Channel</code>，避免了传统通过循环 <code>write()</code> 方式导致的内存拷贝问题。</li><li>通过 wrap 操作，我们可以将 <code>byte[]</code> 数组、ByteBuf、ByteBuffer 等包装成要给 Netty ByteBuf 对象，进而避免了拷贝技术。</li><li>ByteBuf 支持 slice 操作，可以将 ByteBuf分解为多个共享同一个存储区域的 ByteBuf，避免内存的拷贝。</li></ol><blockquote><p>对于很多操作系统，它接收文件缓冲区的内容直接发送给目标 Channel，而不需要从内核拷贝到应用程序内存，这种更加高效的传输实现了文件传输的零拷贝</p></blockquote><blockquote><p>这一块的详细文章推荐：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&mid=2247483933&idx=1&sn=d9776b9efe054b30523adbe60cb7524a&scene=21#wechat_redirect">NIO效率高的原理之零拷贝与直接内存映射</a></p></blockquote><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>随着技术的发展，对象的分配和回收已经是一个非常轻量级的工作了。但是对于缓冲区来说还是有些特殊，尤其是对于堆外直接内存的分配和回收，是一种耗时的操作。<strong>为了尽量重复例用缓冲区内存</strong>，Netty 设计了一套<strong>基于内存池的缓冲区重用机制</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.devildyw.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.PooledByteBufAllocator;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Netty 内存池技术测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-10-10-20:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolBufferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] CONTENT = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">1800000</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">poolBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------采用内存池分配器创建直接缓冲区----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">            poolBuffer = PooledByteBufAllocator.DEFAULT.directBuffer(<span class="number">1024</span>);</span><br><span class="line">            poolBuffer.writeBytes(CONTENT);</span><br><span class="line">            poolBuffer.release();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;内存池分配缓冲区耗时&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------采用非 堆内存分配器创建直接缓冲区----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">            buffer = Unpooled.directBuffer();</span><br><span class="line">            buffer.writeBytes(CONTENT);</span><br><span class="line">            buffer.release();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;非内存池分配缓冲区耗时&quot;</span>+(endTime-startTime2)+<span class="string">&quot;ms.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102105891.png" alt="image-20221010210500830"></p><h3 id="高效的-Reactor-线程模型"><a href="#高效的-Reactor-线程模型" class="headerlink" title="高效的 Reactor 线程模型"></a>高效的 Reactor 线程模型</h3><ol><li>Reactor 单线程模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102107177.png" alt="image-20221010210701111"></p><p><code>Acceptor</code> 负责接收客户端的 TCP 连接请求消息，链路建立成功之后，通过 <code>Dispatcher</code> 将对应的 <code>ByteBuffer</code> 派发到指定的 <code>Handler</code> 上进行消息解码，用户 <code>Handler</code> 通过 NIO 线程将消息发送给客户端。</p><p>对于并发量较小的业务场景，可以使用单线程模型。但单线程模型不适合高负载、高并发的场景。</p><ol start="2"><li>Reactor 多线程模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102113881.png" alt="image-20221010211346809"></p><ul><li>有一个专门的 NIO 线程 Acceptor 用于监听服务端、接收服务端的 TCP 连接请求。</li><li>网络 I&#x2F;O 读、写等操作只有一个 NIO 线程池负责，可以采用标准的 JDK 线程池来实现，它包含一个任务队列和多个可用的线程，由这些 NIO 线程负责消息的读取、节码、编码和发送。</li><li>一个 NIO 线程可用同时处理多条请求链路，但是一条链路只对应一个 NIO 线程，防止发生并发串行。</li></ul><ol start="3"><li>主从 Reactor 多线成模型</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102117819.png" alt="image-20221010211724752"></p><ul><li>服务端用于接收客户端连接的不再是单个 NIO 线程，而是分配了一个独立的 NIO 线程池。Acceptor 接收到客户端 TCP 连接请求并处理完成后（可能包含接入认证等），将新创建的 SocketChannel 注册到 I&#x2F;O 线程池（Sub Reactor 子线程池）的某个 I&#x2F;O 线程上，由它负责 SocketChannel 的读写和编解码工作。</li><li>Acceptor 线程仅仅用于客户端的登录、握手和安全认证，一旦链路建立成功，就将链路注册到后端 Sub Reactor 子线程池的 I&#x2F;O 线程上，再由 I&#x2F;O 线程负责后续的 I&#x2F;O 操作。</li></ul><p>利用主从Reactor多线程模型可以解决一个服务端监听线程无法有效处理所有客户端连接的性能不足的问题。因此，在Netty的官方Demo中，推荐使用该线程模型。</p><h3 id="无锁化的串行设计理念"><a href="#无锁化的串行设计理念" class="headerlink" title="无锁化的串行设计理念"></a>无锁化的串行设计理念</h3><p>为了尽可能避免锁竞争带来的性能损耗，<strong>可用通过串行化设计来避免多线程竞争和同步锁，即消息的处理尽可能在同一个线程内完成，不进行线程的切换。（减少上下文切换）</strong></p><p><strong>为了尽可能提升性能，Netty 采用了无锁化串行设计，在 I&#x2F;O 线程内部进行串行操作，避免多线程竞争导致的性能下降。</strong>表面上看似乎串行化设计对 CPU 利用率不高，并发程度不够。<strong>但是通过调整 NIO 线程池的线程参数，可用同时启动多个串行的线程并行运行，这种局部无锁化的串行线程设计相比一个队列——多个工作线程的模型更优。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102137205.png" alt="image.png"></p><h3 id="高效的并发编程"><a href="#高效的并发编程" class="headerlink" title="高效的并发编程"></a>高效的并发编程</h3><p>Netty 的高效并发编程主要体现在如下几点。</p><ol><li><strong>volatile 关键字的大量且正确的使用。</strong></li><li><strong>CAS 和原子类的广泛使用。</strong></li><li><strong>线程安全容器的使用</strong></li><li><strong>通过读写锁提升并发性能。</strong></li></ol><h3 id="对高性能序列化框架的支持"><a href="#对高性能序列化框架的支持" class="headerlink" title="对高性能序列化框架的支持"></a>对高性能序列化框架的支持</h3><p>Netty默认提供了对Google Protobuf的支持，用户也可以通过<strong>扩展Netty的编解码接口接入其他高性能的序列化框架进行编解码</strong>，例如Thrift的压缩二进制编解码框架。</p><h3 id="灵活的-TCP-参数配置能力"><a href="#灵活的-TCP-参数配置能力" class="headerlink" title="灵活的 TCP 参数配置能力"></a>灵活的 TCP 参数配置能力</h3><p>合理设置 TCP 参数在某些场景下对性能的提升具有显著的效果，例如 <code>SO_RCVBUF</code> 和 <code>SO_SNDBUF</code>：通常建议值为 128KB 或者 256KB。如果设置不当，对性能的影响也是非常大的。</p><p>对性能影响比较大的几个配置项。</p><ol><li><code>SO_RCVBUF</code> 和 <code>SO_SNDBUF</code>：通常建议值为128KB或者256KB。</li><li><code>SO_TCPNODELAY</code>：<code>Nagle</code> 算法通过将缓冲区内的小封包自动相连，组成较大的封包，阻止大量小封包的发阻塞网络，从而提高网络应用效率。但是对于延时敏感的应用场景需要关闭该优化算法。</li></ol><blockquote><p><code>Nagle</code> 算法是以其发明人 John Nagle 的名字命名的，<strong>它用于将小的碎片数据连接成更大的保温来最小化所发送的报文数量。如果需要发送一些较小的保温，则需要禁用该算法</strong>。Netty <strong>默认禁用该算法</strong>，从而使得传输的<strong>延时最小化</strong>。</p></blockquote><ol start="3"><li>软中断：如果 Linux 内核版本支持 RPS（2.6.35 版本以上），开启 RPS 可以实现软中断，提升网络吞吐量。RPS 会<strong>根据数据包的源地址、目的地址，已经源端口和目标端口进行计算得到一个 hash 值，然后根据这个 hash 值来选择软中断 CPU 的运行</strong>。从<strong>上层来看，也就是将每个连接和 CPU 绑定，通过这个 Hash 值在多个 CPU 上均衡软中断，提升网络并行处理性能。</strong></li></ol><blockquote><p>Netty 在启动辅助类中可以灵活地配置 TCP 参数，满足不同的用户场景。相关配置如下表所示。（此表还有不详尽之处，大概了解，用作以后备）</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102149808.png" alt="image-20221010214936680"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102149175.png" alt="image-20221010214957049"></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202210102151047.png" alt="image-20221010215112965"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《Netty4核心原理与手写RPC框架实战》读书笔记&quot;&gt;&lt;a href=&quot;#《Netty4核心原理与手写RPC框架实战》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《Netty4核心原理与手写RPC框架实战》读书笔记&quot;&gt;&lt;/a&gt;《Netty4核</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://devildyw.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Netty" scheme="https://devildyw.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Sentinel</title>
    <link href="https://devildyw.github.io/2022/09/25/Spring%20Cloud-Sentinel/"/>
    <id>https://devildyw.github.io/2022/09/25/Spring%20Cloud-Sentinel/</id>
    <published>2022-09-25T14:12:24.000Z</published>
    <updated>2022-09-25T14:16:12.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Sentinel"><a href="#Spring-Cloud-Sentinel" class="headerlink" title="Spring Cloud-Sentinel"></a>Spring Cloud-Sentinel</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Sentinel&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Sentinel&quot;&gt;&lt;/a&gt;Spring Cloud-Sentinel&lt;/</summary>
      
    
    
    
    <category term="服务降级" scheme="https://devildyw.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之策略模式</title>
    <link href="https://devildyw.github.io/2022/09/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-06T04:52:09.000Z</published>
    <updated>2022-09-06T05:07:06.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之策略模式"><a href="#设计模式–行为型模式之策略模式" class="headerlink" title="设计模式–行为型模式之策略模式"></a>设计模式–行为型模式之策略模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>策略模式</strong>是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256882.png" alt="策略设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。</p><p>用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的最快路线。</p><p>程序的首个版本只能规划公路路线。 驾车旅行的人们对此非常满意。 但很显然， 并非所有人都会在度假时开车。 因此你在下次更新时添加了规划步行路线的功能。 此后， 你又添加了规划公共交通路线的功能。</p><p>而这只是个开始。 不久后， 你又要为骑行者规划路线。 又过了一段时间， 你又要为游览城市中的所有景点规划路线。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256885.png" alt="导游代码将变得非常臃肿"></p><p>导游代码将变得非常臃肿。</p><p>尽管从商业角度来看， 这款应用非常成功， 但其技术部分却让你非常头疼： 每次添加新的路线规划算法后， 导游应用中主要类的体积就会增加一倍。 终于在某个时候， 你觉得自己没法继续维护这堆代码了。</p><p>无论是修复简单缺陷还是微调街道权重， 对某个算法进行任何修改都会影响整个类， 从而增加在已有正常运行代码中引入错误的风险。</p><p>此外， 团队合作将变得低效。 如果你在应用成功发布后招募了团队成员， 他们会抱怨在合并冲突的工作上花费了太多时间。 在实现新功能的过程中， 你的团队需要修改同一个巨大的类， 这样他们所编写的代码相互之间就可能会出现冲突。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>策略模式建议找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为<em>策略</em>的独立类中。</p><p>名为<em>上下文</em>的原始类必须包含一个成员变量来存储对于每种策略的引用。 上下文并不执行任务， 而是将工作委派给已连接的策略对象。</p><p>上下文不负责选择符合任务需要的算法——客户端会将所需策略传递给上下文。 实际上， 上下文并不十分了解策略， 它会通过同样的通用接口与所有策略进行交互， 而该接口只需暴露一个方法来触发所选策略中封装的算法即可。</p><p>因此， 上下文可独立于具体策略。 这样你就可在不修改上下文代码或其他策略的情况下添加新算法或修改已有算法了。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256878.png" alt="路线规划策略"></p><p>路线规划策略。</p><p>在导游应用中， 每个路线规划算法都可被抽取到只有一个 <code>build­Route</code>生成路线方法的独立类中。 该方法接收起点和终点作为参数， 并返回路线中途点的集合。</p><p>即使传递给每个路径规划类的参数一模一样， 其所创建的路线也可能完全不同。 主要导游类的主要工作是在地图上渲染一系列中途点， 不会在意如何选择算法。 该类中还有一个用于切换当前路径规划策略的方法， 因此客户端 （例如用户界面中的按钮） 可用其他策略替换当前选择的路径规划行为。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256868.png" alt="各种出行策略"></p><p>各种前往机场的出行策略</p><p>假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。</p><h2 id="策略模式结构"><a href="#策略模式结构" class="headerlink" title="策略模式结构"></a>策略模式结构</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061256520.png" alt="策略设计模式的结构"></p><ol><li><strong>上下文</strong> （Con­text） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li><li><strong>策略</strong> （Strat­e­gy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li><li><strong>具体策略</strong> （Con­crete Strate­gies） 实现了上下文所用算法的各种不同变体。</li><li>当上下文需要运行算法时， 它会在其已连接的策略对象上调用执行方法。 上下文不清楚其所涉及的策略类型与算法的执行方式。</li><li><strong>客户端</strong> （Client） 会创建一个特定策略对象并将其传递给上下文。 上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li></ol><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在本例中， 上下文使用了多个<strong>策略</strong>来执行不同的计算操作。</p><p>一个人想去一个目的地，他现在有四种策略可以选择，分别是 <strong>飞机</strong>、<strong>开车</strong>、<strong>骑车</strong>和<strong>坐公交</strong>。</p><p><code>Strategy 抽象策略类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略类接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行策略的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Context 上下文</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上下文环境</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        strategy.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ConcreteStrategies 具体策略类</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 乘坐飞机的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlaneStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择乘坐飞机,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 骑自行车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BikeStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择骑自行车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 乘坐公交车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择乘坐公交车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体策略类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 开车的策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;选择开车,已为您规划好路线!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client 客户端</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-06-12:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建上下文</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建策略</span></span><br><span class="line">        <span class="type">BusStrategy</span> <span class="variable">busStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusStrategy</span>();</span><br><span class="line">        <span class="type">BikeStrategy</span> <span class="variable">bikeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BikeStrategy</span>();</span><br><span class="line">        <span class="type">AirPlaneStrategy</span> <span class="variable">airPlaneStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirPlaneStrategy</span>();</span><br><span class="line">        <span class="type">CarStrategy</span> <span class="variable">carStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarStrategy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开车</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(busStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//骑车</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(bikeStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//飞机</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(airPlaneStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//公交</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        context.setStrategy(busStrategy);</span><br><span class="line">        context.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209061303618.png" alt="image-20220906130353573"></p><p><strong>将环境和策略耦合松散，防止随着策略的增加代码主体越来越臃肿。</strong></p><h2 id="策略模式适合应用场景"><a href="#策略模式适合应用场景" class="headerlink" title="策略模式适合应用场景"></a>策略模式适合应用场景</h2><p> <strong>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。</strong></p><p> 策略模式让你能够将对象关联至可以不同方式执行特定子任务的不同子对象， 从而以间接方式在运行时更改对象行为。</p><p> 当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。</p><p> 策略模式让你能将不同行为抽取到一个独立类层次结构中， 并将原始类组合成同一个， 从而减少重复代码。</p><p> 如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。</p><p> 策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。</p><p> 当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</p><p> 策略模式将所有继承自同样接口的算法抽取到独立类中， 因此不再需要条件语句。 原始对象并不实现所有算法的变体， 而是将执行工作委派给其中的一个独立算法对象。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><strong>从上下文类中找出修改频率较高的算法 （也可能是用于在运行时选择某个算法变体的复杂条件运算符）。</strong></li><li><strong>声明该算法所有变体的通用策略接口。</strong></li><li><strong>将算法逐一抽取到各自的类中， 它们都必须实现策略接口。</strong></li><li><strong>在上下文类中添加一个成员变量用于保存对于策略对象的引用。 然后提供设置器以修改该成员变量。 上下文仅可通过策略接口同策略对象进行交互， 如有需要还可定义一个接口来让策略访问其数据。</strong></li><li><strong>客户端必须将上下文类与相应策略进行关联， 使上下文可以预期的方式完成其主要工作。</strong></li></ol><h2 id="策略模式优缺点"><a href="#策略模式优缺点" class="headerlink" title="策略模式优缺点"></a>策略模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li><em>开闭原则</em>。 你无需对上下文进行修改就能够引入新的策略。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>看上去很像， 因为两者都能通过某些行为来参数化对象。 但是， 它们的意图有非常大的不同。<ul><li>你可以使用<em>命令</em>来将任何操作转换为对象。 操作的参数将成为对象的成员变量。 你可以通过转换来延迟操作的执行、 将操作放入队列、 保存历史命令或者向远程服务发送命令等。</li><li>另一方面， <em>策略</em>通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法。</li></ul></li><li><a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a>可让你更改对象的外表， <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>则让你能够改变其本质。</li><li><a href="https://refactoringguru.cn/design-patterns/template-method">模板方法模式</a>基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 <em>模板方法</em>在类层次上运作， 因此它是静态的。 <em>策略</em>在对象层次上运作， 因此允许在运行时切换行为。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之策略模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之策略模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之策略模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之状态模式</title>
    <link href="https://devildyw.github.io/2022/09/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-05T05:55:10.000Z</published>
    <updated>2022-09-05T06:14:03.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之状态模式"><a href="#设计模式–行为型模式之状态模式" class="headerlink" title="设计模式–行为型模式之状态模式"></a>设计模式–行为型模式之状态模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>状态模式</strong>是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。</p><p><img src="https://refactoringguru.cn/images/patterns/content/state/state-zh.png" alt="状态设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>状态模式与<strong>有限状态机</strong> 的概念紧密相关。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/problem1.png" alt="有限状态机"></p><p>有限状态机。</p><p>其主要思想是程序在任意时刻仅可处于几种<em>有限</em>的<em>状态</em>中。 在任何一个特定状态中， 程序的行为都不相同， 且可瞬间从一个状态切换到另一个状态。 不过， 根据当前状态， 程序可能会切换到另外一种状态， 也可能会保持当前状态不变。 这些数量有限且预先定义的状态切换规则被称为<em>转移</em>。</p><p>你还可将该方法应用在对象上。 假如你有一个 <code>文档</code> <code>Doc­u­ment</code> 类。 文档可能会处于 <code>草稿</code>Draft 、  <code>审阅中 </code> <code>Mod­er­a­tion</code> 和 <code>已发布</code> <code>Pub­lished</code> 三种状态中的一种。 文档的 <code>pub­lish</code>发布方法在不同状态下的行为略有不同：</p><ul><li>处于 <code>草稿</code>状态时， 它会将文档转移到审阅中状态。</li><li>处于 <code>审阅中</code>状态时， 如果当前用户是管理员， 它会公开发布文档。</li><li>处于 <code>已发布</code>状态时， 它不会进行任何操作。</li></ul><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/problem2-zh.png" alt="文档对象的全部状态"></p><p>文档对象的全部状态和转移。</p><p>状态机通常由众多条件运算符 （ <code>if</code>或 <code>switch</code> ） 实现， 可根据对象的当前状态选择相应的行为。  “状态” 通常只是对象中的一组成员变量值。 即使你之前从未听说过有限状态机， 你也很可能已经实现过状态模式。 下面的代码应该能帮助你回忆起来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Document is</span><br><span class="line">    field state: string</span><br><span class="line">    // ……</span><br><span class="line">    method publish() is</span><br><span class="line">        switch (state)</span><br><span class="line">            &quot;draft&quot;:</span><br><span class="line">                state = &quot;moderation&quot;</span><br><span class="line">                break</span><br><span class="line">            &quot;moderation&quot;:</span><br><span class="line">                if (currentUser.role == &quot;admin&quot;)</span><br><span class="line">                    state = &quot;published&quot;</span><br><span class="line">                break</span><br><span class="line">            &quot;published&quot;:</span><br><span class="line">                // 什么也不做。</span><br><span class="line">                break</span><br><span class="line">    // ……</span><br></pre></td></tr></table></figure><p>当我们逐步在 <code>文档</code>类中添加更多状态和依赖于状态的行为后， 基于条件语句的状态机就会暴露其最大的弱点。 为了能根据当前状态选择完成相应行为的方法， 绝大部分方法中会包含复杂的条件语句。 修改其转换逻辑可能会涉及到修改所有方法中的状态条件语句， 导致代码的维护工作非常艰难。</p><p>这个问题会随着项目进行变得越发严重。 我们很难在设计阶段预测到所有可能的状态和转换。 随着时间推移， 最初仅包含有限条件语句的简洁状态机可能会变成臃肿的一团乱麻。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>状态模式建议为对象的所有可能状态新建一个类， 然后将所有状态的对应行为抽取到这些类中。</p><p>原始对象被称为<em>上下文</em> （<code>con­text</code>）， 它并不会自行实现所有行为， 而是会保存一个指向表示当前状态的状态对象的引用， 且将所有与状态相关的工作委派给该对象。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/solution-zh.png" alt="文档将工作委派给一个状态对象"></p><p>文档将工作委派给一个状态对象。</p><p>如需将上下文转换为另外一种状态， 则需将当前活动的状态对象替换为另外一个代表新状态的对象。 采用这种方式是有前提的： 所有状态类都必须遵循同样的接口， 而且上下文必须仅通过接口与这些对象进行交互。</p><p>这个结构可能看上去与<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>模式相似， 但有一个关键性的不同——在状态模式中， 特定状态知道其他所有状态的存在， 且能触发从一个状态到另一个状态的转换； 策略则几乎完全不知道其他策略的存在。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p>智能手机的按键和开关会根据设备当前状态完成不同行为：</p><ul><li>当手机处于解锁状态时， 按下按键将执行各种功能。</li><li>当手机处于锁定状态时， 按下任何按键都将解锁屏幕。</li><li>当手机电量不足时， 按下任何按键都将显示充电页面。</li></ul><h2 id="状态模式结构"><a href="#状态模式结构" class="headerlink" title="状态模式结构"></a>状态模式结构</h2><p><img src="https://refactoringguru.cn/images/patterns/diagrams/state/structure-zh.png" alt="状态设计模式的结构"></p><ol><li><p><strong>上下文</strong> （<code>Con­text</code>） 保存了对于一个具体状态对象的引用， 并会将所有与该状态相关的工作委派给它。 上下文通过状态接口与状态对象交互， 且会提供一个设置器用于传递新的状态对象。</p></li><li><p><strong>状态</strong> （<code>State</code>） 接口会声明特定于状态的方法。 这些方法应能被其他所有具体状态所理解， 因为你不希望某些状态所拥有的方法永远不会被调用。</p></li><li><p><strong>具体状态</strong> （<code>Con­crete States</code>） 会自行实现特定于状态的方法。 为了避免多个状态中包含相似代码， 你可以提供一个封装有部分通用行为的中间抽象类。</p><p>状态对象可存储对于上下文对象的反向引用。 状态可以通过该引用从上下文处获取所需信息， 并且能触发状态转移。</p></li><li><p>上下文和具体状态都可以设置上下文的下个状态， 并可通过替换连接到上下文的状态对象来完成实际的状态转换。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>酒店中的房间有如下几个状态，<strong>已预定</strong>、<strong>以入住</strong>、<strong>以空闲</strong>。</p><p>由上可以分析出，房间是作为一个上下文对象，他有着三个状态，根据不同的操作可以更换当前房间的状态对象，以此改变房间对于用户互动做出的反应。</p><p><code>State</code> 抽象状态类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象状态类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HomeContnext</code> 状态上下文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态上下文</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 房间对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改状态!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="comment">//不同状态响应的处理</span></span><br><span class="line">        state.handle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ConcreteState</code> 具体状态类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 已预定状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookedState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间已预定！别人不能再定！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 以入住状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckInState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间已入住！请勿打扰！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房间空闲！！！欢迎入住！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Client</code> 客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-05-13:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取房间对象</span></span><br><span class="line">        <span class="type">HomeContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HomeContext</span>();</span><br><span class="line">        <span class="comment">//设置房间状态</span></span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">FreeState</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">BookedState</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        ctx.setState(<span class="keyword">new</span> <span class="title class_">CheckInState</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209051411049.png" alt="image-20220905141146000"></p><h2 id="状态模式适合应用场景"><a href="#状态模式适合应用场景" class="headerlink" title="状态模式适合应用场景"></a>状态模式适合应用场景</h2><p> <strong>如果对象需要根据自身当前状态进行不同行为， 同时状态的数量非常多且与状态相关的代码会频繁变更的话， 可使用状态模式。</strong></p><p> 模式建议你将所有特定于状态的代码抽取到一组独立的类中。 这样一来， 你可以在独立于其他状态的情况下添加新状态或修改已有状态， 从而减少维护成本。</p><p> <strong>如果某个类需要根据成员变量的当前值改变自身行为， 从而需要使用大量的条件语句时， 可使用该模式。</strong></p><p> 状态模式会将这些条件语句的分支抽取到相应状态类的方法中。 同时， 你还可以清除主要类中与特定状态相关的临时成员变量和帮手方法代码。</p><p> <strong>当相似状态和基于条件的状态机转换中存在许多重复代码时， 可使用状态模式。</strong></p><p> <strong>状态模式让你能够生成状态类层次结构， 通过将公用代码抽取到抽象基类中来减少重复。</strong></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>确定哪些类是上下文。 它可能是包含依赖于状态的代码的已有类； 如果特定于状态的代码分散在多个类中， 那么它可能是一个新的类。</p></li><li><p>声明状态接口。 虽然你可能会需要完全复制上下文中声明的所有方法， 但最好是仅把关注点放在那些可能包含特定于状态的行为的方法上。</p></li><li><p>为每个实际状态创建一个继承于状态接口的类。 然后检查上下文中的方法并将与特定状态相关的所有代码抽取到新建的类中。</p><p>在将代码移动到状态类的过程中， 你可能会发现它依赖于上下文中的一些私有成员。 你可以采用以下几种变通方式：</p><ul><li>将这些成员变量或方法设为公有。</li><li>将需要抽取的上下文行为更改为上下文中的公有方法， 然后在状态类中调用。 这种方式简陋却便捷， 你可以稍后再对其进行修补。</li><li>将状态类嵌套在上下文类中。 这种方式需要你所使用的编程语言支持嵌套类。</li></ul></li><li><p>在上下文类中添加一个状态接口类型的引用成员变量， 以及一个用于修改该成员变量值的公有设置器。</p></li><li><p>再次检查上下文中的方法， 将空的条件语句替换为相应的状态对象方法。</p></li><li><p>为切换上下文状态， 你需要创建某个状态类实例并将其传递给上下文。 你可以在上下文、 各种状态或客户端中完成这项工作。 无论在何处完成这项工作， 该类都将依赖于其所实例化的具体类。</p></li></ol><h2 id="状态模式优缺点"><a href="#状态模式优缺点" class="headerlink" title="状态模式优缺点"></a>状态模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong><em>单一职责原则</em>。 将与特定状态相关的代码放在单独的类中。</strong></li><li><strong><em>开闭原则</em>。 无需修改已有状态类和上下文就能引入新状态。</strong></li><li><strong>通过消除臃肿的状态机条件语句简化上下文代码。</strong></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><strong>如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。</strong></li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之状态模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之状态模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之状态模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之状态模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之观察者模式</title>
    <link href="https://devildyw.github.io/2022/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-04T04:31:24.000Z</published>
    <updated>2022-09-04T05:40:19.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之观察者模式"><a href="#设计模式–行为型模式之观察者模式" class="headerlink" title="设计模式–行为型模式之观察者模式"></a>设计模式–行为型模式之观察者模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256185.png" alt="观察者设计模式"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你有两种类型的对象：  <code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 <code>iPhone</code> 手机）， 而该产品很快将会在商店里出售。</p><p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256484.png" alt="访问商店或发送垃圾邮件"></p><p>前往商店和发送垃圾邮件</p><p>另一方面， 每次新产品到货时， 商店可以向所有顾客发送邮件 （可能会被视为垃圾邮件）。 这样， 部分顾客就无需反复前往商店了， 但也可能会惹恼对新产品没有兴趣的其他顾客。</p><p>我们似乎遇到了一个矛盾： 要么让顾客浪费时间检查产品是否到货， 要么让商店浪费资源去通知没有需求的顾客。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>拥有一些值得关注的状态的对象通常被称为<em>目标</em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为<em>发布者</em> （<code>pub­lish­er</code>）。 所有希望关注发布者状态变化的其他对象被称为<em>订阅者</em> （<code>sub­scribers</code>）。</p><p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括 1） 一个用于存储订阅者对象引用的列表成员变量； 2） 几个用于添加或删除该列表中订阅者的公有方法。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256688.png" alt="订阅机制"></p><p>订阅机制允许对象订阅事件通知。</p><p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p><p><strong>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</strong></p><p>因此， <strong>所有订阅者都必须实现同样的接口</strong>， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256693.png" alt="通知方法"></p><p>发布者调用订阅者对象中的特定通知方法来通知订阅者。</p><p>如果你的应用中有多个不同类型的发布者， 且<strong>希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有发布者遵循同样的接口</strong>。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256088.png" alt="杂志和报纸订阅"></p><p>杂志和报纸订阅。</p><p>如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。</p><p>出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</p><h2 id="观察者模式结构"><a href="#观察者模式结构" class="headerlink" title="观察者模式结构"></a>观察者模式结构</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041256695.png" alt="观察者设计模式的结构"></p><ol><li><strong>发布者</strong> （<code>Pub­lish­er</code>） 会向其他对象发送值得关注的事件。 事件会在发布者自身状态改变或执行特定行为后发生。 发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅构架。</li><li>当新事件发生时， 发送者会遍历订阅列表并调用每个订阅者对象的通知方法。 该方法是在订阅者接口中声明的。</li><li><strong>订阅者（观察者）</strong> （<code>Sub­scriber</code>） 接口声明了通知接口。 在绝大多数情况下， 该接口仅包含一个 <code>update</code>更新方法。 该方法可以拥有多个参数， 使发布者能在更新时传递事件的详细信息。</li><li><strong>具体订阅者</strong> （<code>Con­crete Sub­scribers</code>） 可以执行一些操作来回应发布者的通知。 所有具体订阅者类都实现了同样的接口， 因此发布者不需要与具体类相耦合。</li><li>订阅者通常需要一些上下文信息来正确地处理更新。 因此， 发布者通常会将一些上下文数据作为通知方法的参数进行传递。 发布者也可将自身作为参数进行传递， 使订阅者直接获取所需的数据。</li><li><strong>客户端</strong> （Client） 会分别创建发布者和订阅者对象， 然后为订阅者注册发布者更新。</li></ol><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><p>再此示例中，目标对象就是所谓的发布者，而观察者就是一个一个的观察目标对象内值是否发生改变的订阅者。</p><p><strong><code>Subject</code></strong> 抽象发布者&#x2F;目标对象  一旦发生了改变就会通知订阅者们。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//存储订阅者</span></span><br><span class="line">    List&lt;Observer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册订阅者方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(T obs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除订阅者方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(T obs)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有的观察者更新状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Observer</code></strong> 观察者&#x2F;订阅者  一旦目标对象发生改变，订阅者会被通知</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 定义观察者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Subject subject)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>ConcreteSubject</code></strong> 具体目标&#x2F;具体发布者 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象（主体对象 topic）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&lt;Observer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="comment">//主题对象（目标对象）值发生了变化，请通知所有的观察者</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">        list.add(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer obs)</span> &#123;</span><br><span class="line">        list.remove(obs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">            <span class="comment">//更新每一个观察者中的信息</span></span><br><span class="line">            observer.update(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>ConcreteObserver</code></strong> 具体观察者&#x2F;订阅者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 观察者 实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverA</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myState需要跟目标对象的state值保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyState</span><span class="params">(<span class="type">int</span> myState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myState = myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新为和目标对象的值一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        myState = ((ConcreteSubject)subject).getState();</span><br><span class="line">        <span class="comment">//一但发送了改变 就会将改变后值打印到控制台</span></span><br><span class="line">        System.out.println(myState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>Client</code></strong> 客户端 调用代码 测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这三个观察者添加到subject对象的观察者队伍中</span></span><br><span class="line">        subject.registerObserver(obs1);</span><br><span class="line">        subject.registerObserver(obs2);</span><br><span class="line">        subject.registerObserver(obs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变subject的状态</span></span><br><span class="line">        subject.setState(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line"><span class="comment">//        System.out.println(obs1.);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次改变subject的状态</span></span><br><span class="line">        subject.setState(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041306526.png" alt="image-20220904130656485"></p><p>可以发现目标对象的值发生修改后，所有订阅者都被通知了并且做出了响应的打印操作。</p><hr><h3 id="Java内置观察者模式实现"><a href="#Java内置观察者模式实现" class="headerlink" title="Java内置观察者模式实现"></a>Java内置观察者模式实现</h3><p>在 <code>java.util</code> 包中包含由基本的 <code>Observer</code> 接口和 <code>Observable</code> 抽象类，功能上和 <code>Observer</code> 接口和 <code>Subject</code> 接口类似。不过在使用上，内置的就方便许多了，因为i许多功能比如说<strong>注册</strong>、<strong>删除</strong>、<strong>通知</strong>观察者的哪些功能已经内置好了。</p><p><code>ConcreteSubject</code> 具体观察者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 目标对象</span></span><br><span class="line"><span class="comment"> * 继承 Observable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> s)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = s; <span class="comment">//目标对象的状态发生了改变</span></span><br><span class="line">        setChanged(); <span class="comment">//表示目标对象已经做了更改</span></span><br><span class="line">        notifyObservers(state); <span class="comment">//通知所有的观察者(订阅者)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察者只需要继承Observable父类。发送消息的方式执行如下代码即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setChanged(); <span class="comment">//表示目标对象已经做了更改</span></span><br><span class="line">notifyObservers(state); <span class="comment">//通知所有的观察者(订阅者) 值发生了改变</span></span><br></pre></td></tr></table></figure><p><code>void setChange()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    changed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void notifyObservers(Object arg)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a temporary array buffer, used as a snapshot of the state of</span></span><br><span class="line"><span class="comment">     * current Observers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123; <span class="comment">//获取锁 进入同步锁代码块 从主存中获取最新值</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (!changed) <span class="comment">// 获取到最新得changed 如果不为true就直接返回 否则执行如下代码</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        arrLocal = obs.toArray(); <span class="comment">//获取所有得订阅者</span></span><br><span class="line">        clearChanged(); <span class="comment">//清除修改标志</span></span><br><span class="line">    &#125; <span class="comment">//退出同步代码块 将值写入主存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//再调用订阅者得update方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        ((Observer)arrLocal[i]).update(<span class="built_in">this</span>, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ObserverA</code> 具体观察者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式: 观察者(消息订阅者)</span></span><br><span class="line"><span class="comment"> * 实现Observer接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverA</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myState需要跟目标对象的state值保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyState</span><span class="params">(<span class="type">int</span> myState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myState = myState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        myState = ((ConcreteSubject) o).getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code> 客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-04-13:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">        <span class="type">ObserverA</span> <span class="variable">obs3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这三个观察者添加到subject对象的观察者队伍中</span></span><br><span class="line">        subject.addObserver(obs1);</span><br><span class="line">        subject.addObserver(obs2);</span><br><span class="line">        subject.addObserver(obs3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变subject的状态</span></span><br><span class="line">        subject.set(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次改变subject的状态</span></span><br><span class="line">        subject.set(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除一个订阅者</span></span><br><span class="line">        subject.deleteObserver(obs2);</span><br><span class="line">        subject.set(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//我们查看观察者的状态是不是也发生了改变</span></span><br><span class="line">        System.out.println(obs1.getMyState());</span><br><span class="line">        System.out.println(obs2.getMyState());</span><br><span class="line">        System.out.println(obs3.getMyState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察者也就是订阅者只需要实现Observer接口并重写相关update方法即可，在目标实现中我们发现触发的时候执行的就是观察者的update方法。</p><p>执行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209041339351.png" alt="image-20220904133910295"></p><p>这样就实现了官方提供观察者模式，其实这里的Observable和Observer和我们前面自定义的Subject和Observer差不多，只是考虑更全面罢了。</p><h2 id="观察者模式适合应用场景"><a href="#观察者模式适合应用场景" class="headerlink" title="观察者模式适合应用场景"></a>观察者模式适合应用场景</h2><p> 当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。</p><p> 当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入自定义代码， 这样当用户按下按钮时就会触发这些代码。</p><p>观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许客户端通过自定义订阅类注入自定义代码。</p><p> 当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。</p><p> 订阅列表是动态的， 因此订阅者可随时加入或离开该列表。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>仔细检查你的业务逻辑， 试着将其拆分为两个部分： 独立于其他代码的核心功能将作为发布者； 其他代码则将转化为一组订阅类。</p></li><li><p>声明订阅者接口。 该接口至少应声明一个 <code>update</code>方法。</p></li><li><p>声明发布者接口并定义一些接口来在列表中添加和删除订阅对象。 记住发布者必须仅通过订阅者接口与它们进行交互。</p></li><li><p>确定存放实际订阅列表的位置并实现订阅方法。 通常所有类型的发布者代码看上去都一样， 因此将列表放置在直接扩展自发布者接口的抽象类中是显而易见的。 具体发布者会扩展该类从而继承所有的订阅行为。</p><p>但是， 如果你需要在现有的类层次结构中应用该模式， 则可以考虑使用组合的方式： 将订阅逻辑放入一个独立的对象， 然后让所有实际订阅者使用该对象。</p></li><li><p>创建具体发布者类。 每次发布者发生了重要事件时都必须通知所有的订阅者。</p></li><li><p>在具体订阅者类中实现通知更新的方法。 绝大部分订阅者需要一些与事件相关的上下文数据。 这些数据可作为通知方法的参数来传递。</p><p>但还有另一种选择。 订阅者接收到通知后直接从通知中获取所有数据。 在这种情况下， 发布者必须通过更新方法将自身传递出去。 另一种不太灵活的方式是通过构造函数将发布者与订阅者永久性地连接起来。</p></li><li><p>客户端必须生成所需的全部订阅者， 并在相应的发布者处完成注册工作。</p></li></ol><h2 id="观察者模式优缺点"><a href="#观察者模式优缺点" class="headerlink" title="观察者模式优缺点"></a>观察者模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong><em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</strong></li><li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。</li><li>观察者模式支持广播通信。</li><li>你可以在运行时建立对象之间的联系。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>订阅者的通知顺序是随机的这一点是不支持的。</li><li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化（可以自己定义，该缺点可以被解决）。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a>、 <a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>、 <a href="https://refactoringguru.cn/design-patterns/mediator">中介者模式</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者模式</a>用于处理请求发送者和接收者之间的不同连接方式：</p><ul><li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li><li><em>命令</em>在发送者和请求者之间建立单向连接。</li><li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li><li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li></ul></li><li><p><a href="https://refactoringguru.cn/design-patterns/mediator">中介者</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者</a>之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</p><p><em>中介者</em>的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 <em>观察者</em>的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p><p>有一种流行的中介者模式实现方式依赖于<em>观察者</em>。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当<em>中介者</em>以这种方式实现时， 它可能看上去与<em>观察者</em>非常相似。</p><p>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和<em>观察者</em>并不相同， 但这仍是一种中介者模式。</p><p>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之观察者模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之观察者模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之观察者模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之中介者模式</title>
    <link href="https://devildyw.github.io/2022/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-03T04:13:53.000Z</published>
    <updated>2022-09-03T04:33:13.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之中介者模式"><a href="#设计模式–行为型模式之中介者模式" class="headerlink" title="设计模式–行为型模式之中介者模式"></a>设计模式–行为型模式之中介者模式</h1><blockquote><p>定义一个对象来封装一系列对象的交互。中介者模式使各对象之间不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间地交互</p></blockquote><h2 id="场景介绍："><a href="#场景介绍：" class="headerlink" title="场景介绍："></a>场景介绍：</h2><p><strong>房产中介</strong></p><ol><li>假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218895.png" alt="img"></p><ol><li>实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218868.png" alt="img"></p><ol><li>这就是一个典型的“中介者模式”，总经理起到一个中介、协调的作用</li></ol><p><strong>实现核心</strong></p><p>  如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象称为”同事对象”，我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为星型结构。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031218017.png" alt="img"></p><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><ul><li>在用户与用户直接聊天的设计方案中，用户对象之间存在很强的关联性，将导致系统出现如下问题：</li><li>系统结构复杂：对象之间存在大量的相互关联和调用，若有一个对象发生变化，则需要跟踪和该对象关联的其他所有对象，并进行适当处理。</li><li>对象可重用性差：由于一个对象和其他对象具有很强的关联，若没有其他对象的支持，一个对象很难被另一个系统或模块重用，这些对象表现出来更像一个不可分割的整体，职责较为混乱。</li><li>系统扩展性低：增加一个新的对象需要在原有相关对象上增加引用，增加新的引用关系也需要调整原有对象，系统耦合度很高，对象操作很不灵活，扩展性差。</li><li>在面向对象的软件设计与开发过程中，根据“单一职责原则”，我们应该尽量将对象细化，使其只负责或呈现单一的职责。</li><li>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式，这就是中介者模式的模式动机。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>中介者模式包含如下角色：</p><ul><li><strong>Mediator: 抽象中介者</strong> 定义一个接口，该接口用于与各同事对象之间的通信；</li><li><strong>ConcreteMediator: 具体中介者</strong> 是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li><li><strong>Colleague: 抽象同事类</strong> 定义各同事的公有方法；</li><li><strong>ConcreteColleague: 具体同事类</strong> 是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li></ul><p><strong>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219661.jpeg" alt="../_images/Mediator.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219678.jpeg" alt="../_images/seq_Mediator.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象中介者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:51</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 同事</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String dname, Department d)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(String dname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体中介者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">President</span> <span class="keyword">implements</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Department&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Department&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String dname, Department d)</span> &#123;</span><br><span class="line">        map.put(dname,d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        map.get(dname).selfAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象同事类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同事类的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span>; <span class="comment">//做本部门的事情</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span>; <span class="comment">//向总经理发出申请</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体同事类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 财务部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Financial</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Financial</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        <span class="comment">//注册到中介者的管理列表中</span></span><br><span class="line">        mediator.register(<span class="string">&quot;financial&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供资金支持！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开发部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Development</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Development</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        mediator.register(<span class="string">&quot;development&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汇报工作！没钱了，需要资金支持！&quot;</span>);</span><br><span class="line">        <span class="comment">//中介者做协同处理 并不用我们单独去调用指定对象完成操作 而是借助了中介者</span></span><br><span class="line">        mediator.command(<span class="string">&quot;financial&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;专心科研，开发项目！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 市场部 同事类的具体实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-11:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Market</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Market</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        mediator.register(<span class="string">&quot;market&quot;</span>,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汇报工作！项目承接的进度，需要资金支持！&quot;</span>);</span><br><span class="line"><span class="comment">//中介者做协同处理 并不用我们单独去调用指定对象完成操作 而是借助了中介者</span></span><br><span class="line">        mediator.command(<span class="string">&quot;financial&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑去接项目！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-03-12:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取中介者对象</span></span><br><span class="line">        <span class="type">Mediator</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">President</span>();</span><br><span class="line">        <span class="comment">//获取同事对象，实例化的时候会在中介者对象中注册</span></span><br><span class="line">        <span class="type">Market</span> <span class="variable">market</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Market</span>(m);</span><br><span class="line">        <span class="type">Development</span> <span class="variable">development</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Development</span>(m);</span><br><span class="line">        <span class="type">Financial</span> <span class="variable">financial</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Financial</span>(m);</span><br><span class="line"></span><br><span class="line">        market.selfAction();</span><br><span class="line">        market.outAction();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过中介者的加入，将同事类之间的耦合关系松散，当同事之间有调用关系时，并不是通过添加引用直接调用，而是通过中介者完成协调。将这样的调用关系全部交给中介者。</strong></p><p><strong>执行结果：</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031226123.png" alt="image-20220903122604085"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>中介者模式可以使对象之间的关系数量急剧减少。</p><p>中介者承担两方面的职责：</p><ul><li>中转作用（结构性）：<strong>通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</strong></li><li>协调作用（行为性）：<strong>中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</strong></li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219419.jpeg" alt="../_images/Mediator_eg.jpg"></p><p>时序图</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209031219158.jpeg" alt="../_images/seq_Mediator_eg.jpg"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>实例：虚拟聊天室</p><p>某论坛系统欲增加一个虚拟聊天室，允许论坛会员通过该聊天室进行信息交流，普通会员(CommonMember)可以给其他会员发送文本信息，钻石会员(DiamondMember)既可以给其他会员发送文本信息，还可以发送图片信息。该聊天室可以对不雅字符进行过滤，如“日”等字符；还可以对发送的图片大小进行控制。用中介者模式设计该虚拟聊天室。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>中介者模式的优点</p><ul><li>简化了对象之间的交互。</li><li>将各同事解耦。</li><li>减少子类生成。</li><li>可以简化各同事类的设计和实现。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>中介者模式的缺点</p><ul><li>在具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用中介者模式：</p><ul><li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li><li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li><li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p><strong>MVC架构中控制器</strong></p><p>Controller 作为一种中介者，它负责控制视图对象View和模型对象Model之间的交互。如在Struts中，Action就可以作为JSP页面与业务对象之间的中介者。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>中介者模式与迪米特法则</p><ul><li>在中介者模式中，<strong>通过创造出一个中介者对象，将系统中有关的对象所引用的其他对象数目减少到最少</strong>，使得一个对象与其同事之间的相互作用被这个对象与中介者对象之间的相互作用所取代。因此，<strong>中介者模式就是迪米特法则的一个典型应用。</strong></li></ul><p>中介者模式与GUI开发</p><ul><li>中介者模式可以方便地应用于图形界面(GUI)开发中，在比较复杂的界面中可能存在多个界面组件之间的交互关系。</li><li>对于这些复杂的交互关系，有时候我们可以引入一个中介者类，将这些交互的组件作为具体的同事类，将它们之间的引用和控制关系交由中介者负责，在一定程度上简化系统的交互，这也是中介者模式的常见应用之一。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</li><li>中介者模式包含四个角色：抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；抽象同事类定义各同事的公有方法；具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li><li>通过引入中介者对象，可以将系统的网状结构变成以中介者为中心的星形结构，中介者承担了中转作用和协调作用。中介者类是中介者模式的核心，它对整个系统进行控制和协调，简化了对象之间的交互，还可以对对象间的交互进行进一步的控制。</li><li>中介者模式的主要优点在于简化了对象之间的交互，将各同事解耦，还可以减少子类生成，对于复杂的对象之间的交互，通过引入中介者，可以简化各同事类的设计和实现；中介者模式主要缺点在于具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li><li>中介者模式适用情况包括：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解；一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象；想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之中介者模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之中介者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之中介者模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之中介者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;定</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--行为型模式之命令模式</title>
    <link href="https://devildyw.github.io/2022/09/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/09/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-01T13:34:46.000Z</published>
    <updated>2022-09-02T05:12:34.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–行为型模式之命令模式"><a href="#设计模式–行为型模式之命令模式" class="headerlink" title="设计模式–行为型模式之命令模式"></a>设计模式–行为型模式之命令模式</h1><blockquote><p>将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作</p></blockquote><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。</p><p>命令模式可以对发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。这就是命令模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>命令模式包含如下角色：</p><ul><li><strong>Command: 抽象命令类</strong> 抽象命令类中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作；</li><li><strong>ConcreteCommand: 具体命令类</strong> 抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li><li><strong>Invoker: 调用者</strong> 请求的发送者，又称为请求者，它通过命令对象来执行请求；</li><li><strong>Receiver: 接收者</strong> 接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li><li><strong>Client:客户类</strong></li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255066.jpeg" alt="../_images/Command.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255813.jpeg" alt="../_images/seq_Command.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象命令类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:53</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 抽象命令角色</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 对子类的规范约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体命令类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:56</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 具体命令对象</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 将会调用命令接收的方法 只是将一条一条的命令封装成了对象(请求) 命令始终是命令 真正执行的是接收命令的并执行的角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.turnOFF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.turnOFF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:59</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 命令调用者 负责调用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 客户端通过将具体的命令对象创建后  传入该对象即可调用对应的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-22:57</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 命令接收者</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 正则执行命令的角色 命令对象内部会调用该对象的方法完成真正的命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnON</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行开灯操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOFF</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行关灯操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Devil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-09-01-23:04</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户发送请求的客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//配置客户端</span></span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        <span class="comment">//创建请求</span></span><br><span class="line">        <span class="type">LightOnCommand</span> <span class="variable">lightOnCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOnCommand</span>(receiver);</span><br><span class="line">        <span class="type">LightOffCommand</span> <span class="variable">lightOffCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOffCommand</span>(receiver);</span><br><span class="line">        <span class="comment">//发送请求 并执行</span></span><br><span class="line">        invoker.execute(lightOnCommand);</span><br><span class="line">        invoker.execute(lightOffCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021307264.png" alt="image-20220902130729225"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p><strong>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。</strong></p><ul><li>每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。</li><li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li><li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li><li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>实例一：电视机遥控器</p><ul><li>电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。显然，电视机遥控器就是一个典型的命令模式应用实例。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255802.jpeg" alt="../_images/Command_eg.jpg"></p><p>时序图:</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202209021255789.jpeg" alt="../_images/seq_Command_eg.jpg"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>命令模式的优点</p><ul><li>降低系统的耦合度。</li><li>新的命令可以很容易地加入到系统中。</li><li>可以比较容易地设计一个命令队列和宏命令（组合命令）。</li><li>可以方便地实现对请求的Undo和Redo。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>命令模式的缺点</p><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用命令模式：</p><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li><li>系统需要将一组操作组合在一起，即支持宏命令</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>很多系统都提供了宏命令功能，如UNIX平台下的Shell编程，可以将多条命令封装在一个命令对象中，只需要一条简单的命令即可执行一个命令序列，这也是命令模式的应用实例之一。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>宏命令又称为组合命令，它是命令模式和组合模式联用的产物。</p><p>-宏命令也是一个具体命令，不过它包含了对其他命令对象的引用，在调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员对象可以是简单命令，还可以继续是宏命令。执行一个宏命令将执行多个具体命令，从而实现对命令的批处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在命令模式中，将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li><li>命令模式包含四个角色：抽象命令类中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作；具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li><li>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li><li>命令模式的主要优点在于降低系统的耦合度，增加新的命令很方便，而且可以比较容易地设计一个命令队列和宏命令，并方便地实现对请求的撤销和恢复；其主要缺点在于可能会导致某些系统有过多的具体命令类。</li><li>命令模式适用情况包括：需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互；需要在不同的时间指定请求、将请求排队和执行请求；需要支持命令的撤销操作和恢复操作，需要将一组操作组合在一起，即支持宏命令。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–行为型模式之命令模式&quot;&gt;&lt;a href=&quot;#设计模式–行为型模式之命令模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–行为型模式之命令模式&quot;&gt;&lt;/a&gt;设计模式–行为型模式之命令模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将一个请求</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之代理模式</title>
    <link href="https://devildyw.github.io/2022/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-30T03:57:19.000Z</published>
    <updated>2022-08-30T04:17:10.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之代理模式"><a href="#设计模式–结构型模式之代理模式" class="headerlink" title="设计模式–结构型模式之代理模式"></a>设计模式–结构型模式之代理模式</h1><blockquote><p>给某一个对象提供一个代理或占位符，并且代理对象来控制对原对象的访问</p></blockquote><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>在某些情况下，一个客户不想或者不能直接引用一个对 象，此时可以通过一个称之为“代理”的第三者来实现 间接引用。代理对象可以在客户端和目标对象之间起到 <strong>中介</strong>的作用，<strong>并且可以通过代理对象去掉客户不能看到 的内容和服务或者添加客户需要的额外服务。</strong></p><p>通过引入一个新的对象（如小图片和远程代理 对象）来实现对真实对象的操作或者将新的对 象作为真实对象的一个替身，这种实现机制即 为代理模式，通过引入代理对象来间接访问一 个对象，这就是代理模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>代理模式包含如下角色：</p><ul><li><strong>Subject: 抽象主题角色</strong> 声明了真实主题和代理主题的共同接口；</li><li><strong>Proxy: 代理主题角色</strong> 内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象，<strong>控制和限制被代理角色的实现，并且拥有自己的处理方法（预处理和善后）</strong>；</li><li><strong>RealSubject: 真实主题角色</strong> 定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301159203.jpeg" alt="../_images/Proxy.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301159540.jpeg" alt="../_images/seq_Proxy.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>抽象主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Star</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">&quot;: 经纪人接了一部电影,我负责拍就好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理主题角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理对象  代理角色持有被代理角色的引用</span></span><br><span class="line">    <span class="keyword">private</span> Subject star;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Agent</span><span class="params">(Subject star)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为代理角色添加了额外的服务 这里是接戏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">movie</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">&quot;: 剧本很好，这部电影接下了&quot;</span>);</span><br><span class="line">        star.movie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端Client：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">star</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Agent</span>(star);</span><br><span class="line">        </span><br><span class="line">        proxy.movie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208301205678.png" alt="image-20220830120554645"></p><p>代理角色持有被代理角色的引用，<strong>要访问被代理角色必须通过代理</strong>，负责被代理角色本职之外的职能，并且具有准入和过滤的功能。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>代理模式的优点</p><ul><li><strong>代理模式能够协调调用者和被调用者，在一定程度上降低了系 统的耦合度。</strong></li><li><strong>远程代理使得客户端可以访问在远程机器上的对象，远程机器 可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</strong></li><li><strong>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系 统资源的消耗，对系统进行优化并提高运行速度。</strong></li><li><strong>保护代理可以控制对真实对象的使用权限。</strong></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>代理模式的缺点</p><ul><li><strong>由于在客户端和真实主题之间增加了代理对象，因此 有些类型的代理模式可能会造成请求的处理速度变慢。</strong></li><li><strong>实现代理模式需要额外的工作，有些代理模式的实现 非常复杂。</strong></li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>根据代理模式的使用目的，常见的代理模式有以下几种类型：</p><ul><li>远程(Remote)代理：为一个位于不同的地址空间的对象提供一个本地 的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在 另一台主机中，远程代理又叫做大使(Ambassador)。</li><li>虚拟(Virtual)代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li><li>Copy-on-Write代理：它是虚拟代理的一种，把复制（克隆）操作延迟 到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个 开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。</li><li>保护(Protect or Access)代理：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li><li>缓冲(Cache)代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>防火墙(Firewall)代理：保护目标不让恶意用户接近。</li><li>同步化(Synchronization)代理：使几个用户能够同时使用一个对象而没有冲突。</li><li>智能引用(Smart Reference)代理：当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>EJB、Web Service等分布式技术都是代理模式的应用。在EJB中使用了RMI机制，远程服务器中的企业级Bean在本地有一个桩代理，客户端通过桩来调用远程对象中定义的方法，而无须直接与远程对象交互。在EJB的使用中需要提供一个公共的接口，客户端针对该接口进行编程，无须知道桩以及远程EJB的实现细节。</p><p><strong>在调用某个接口前后做日志处理，这时使用代理也可以满足对修改关闭，对扩展开发的原则。（用动态代理做更方便，更轻便）</strong></p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>几种常用的代理模式</p><ul><li>图片代理：一个很常见的代理模式的应用实例就是对大图浏览的控制。</li><li>用户通过浏览器访问网页时先不加载真实的大图，而是通过代理对象的方法来进行处理，在代理对象的方法中，先使用一个线程向客户端浏览器加载一个小图片，然后在后台使用另一个线程来调用大图片的加载方法将大图片加载到客户端。当需要浏览大图片时，再将大图片在新网页中显示。如果用户在浏览大图时加载工作还没有完成，可以再启动一个线程来显示相应的提示信息。通过代理技术结合多线程编程将真实图片的加载放到后台来操作，不影响前台图片的浏览。</li><li>远程代理：远程代理可以将网络的细节隐藏起来，使得客户端不必考虑网络的存在。客户完全可以认为被代理的远程业务对象是局域的而不是远程的，而远程代理对象承担了大部分的网络通信工作。</li><li>虚拟代理：当一个对象的加载十分耗费资源的时候，虚拟代理的优势就非常明显地体现出来了。虚拟代理模式是一种内存节省技术，那些占用大量内存或处理复杂的对象将推迟到使用它的时候才创建。</li></ul><p>-在应用程序启动的时候，可以用代理对象代替真实对象初始化，节省了内存的占用，并大大加速了系统的启动时间。</p><p><strong>动态代理</strong></p><ul><li>动态代理是一种较为高级的代理模式，它的典型应用就是Spring AOP。</li><li>在传统的代理模式中，客户端通过Proxy调用RealSubject类的request()方法，同时还在代理类中封装了其他方法(如preRequest()和postRequest())，可以处理一些其他问题。</li><li>如果按照这种方法使用代理模式，那么真实主题角色必须是事先已经存在的，并将其作为代理对象的内部成员属性。如果一个真实主题角色必须对应一个代理主题角色，这将导致系统中的类个数急剧增加，因此需要想办法减少系统中类的个数，此外，如何在事先不知道真实主题角色的情况下使用代理主题角色，这都是动态代理需要解决的问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在代理模式中，要求给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。 - 代理模式包含三个角色：抽象主题角色声明了真实主题和代理主题的共同接口；代理主题角色内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象；真实主题角色定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。 - 代理模式的优点在于能够协调调用者和被调用者，在一定程度上降低了系统的耦合度；其缺点在于由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，并且实现代理模式需要额外的工作，有些代理模式的实现非常复杂。远程代理为一个位于不同的地址空间的对象提供一个本地的代表对象，它使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。- 如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建，这个小对象称为虚拟代理。虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。 - 保护代理可以控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</p><blockquote><p>后续会学习 Java的动态代理。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之代理模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之代理模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给某一个对</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之享元模式</title>
    <link href="https://devildyw.github.io/2022/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-29T04:07:31.000Z</published>
    <updated>2022-08-29T05:26:12.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之享元模式"><a href="#设计模式–结构型模式之享元模式" class="headerlink" title="设计模式–结构型模式之享元模式"></a>设计模式–结构型模式之享元模式</h1><blockquote><p>运用共享技术有效地支持大量细粒度对象的复用</p></blockquote><blockquote><p>spring的常量池、数据库连接池、缓冲池等等这些都是享元模式的应用</p><p>比如：我们每次创建字符串对象时，如果每次都创建一个新的字符串对象的话，内存开销会很大，所以如果第一次创建了字符串对象“七夕“，下次再创建相同的字符串”七夕“时，只是把它的引用指向”七夕“，这样就实现了”七夕“字符串再内存中的共享。</p></blockquote><p><strong>享元拆开来讲，享，即共享，元，可以理解为元数据，内存当中的数据，对象。看来是共享对象喽</strong></p><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>面向对象技术可以很好地解决一些灵活性或可扩展性问题，但在很多情况下需要在系统中增加类和对象的个数。当对象数量太多时，将导致运行代价过高，带来性能下降等问题。</p><ul><li>享元模式正是为解决这一类问题而诞生的。享元模式通过共享技术实现相同或相似对象的重用。</li><li>在享元模式中可以共享的相同内容称为内部状态(IntrinsicState)，而那些需要外部环境来设置的不能共享的内容称为外部状态(Extrinsic State)，由于区分了内部状态和外部状态，因此可以通过设置不同的外部状态使得相同的对象可以具有一些不同的特征，而相同的内部状态是可以共享的。</li><li>在享元模式中通常会出现工厂模式，需要创建一个享元工厂来负责维护一个享元池(Flyweight Pool)用于存储具有相同内部状态的享元对象。</li><li>在享元模式中共享的是享元对象的内部状态，外部状态需要通过环境来设置。在实际使用中，能够共享的内部状态是有限的，因此享元对象一般都设计为较小的对象，它所包含的内部状态较少，这种对象也称为细粒度对象。享元模式的目的就是使用共享技术来实现大量细粒度对象的复用。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>享元模式(Flyweight Pattern)：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>享元模式包含如下角色：</p><ul><li><strong>Flyweight: 抽象享元类</strong> 定义了享元对象需要实现的公共操作方法。在该方法中会使用一个状态作为输入参数，也叫外部状态。</li><li><strong>ConcreteFlyweight: 具体享元类</strong> 能够复用享元工厂内部状态并实现享元类公共操作的具体实现类。</li><li><strong>UnsharedConcreteFlyweight: 非共享具体享元类</strong> 不复用享元工厂内部状态，但实现享元类的具体实现类。</li><li><strong>FlyweightFactory: 享元工厂类</strong> 管理一个享元对象类的缓存池</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291310426.jpeg" alt="../_images/Flyweight.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291310753.jpeg" alt="../_images/seq_Flyweight.jpg"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p><p>对于相同颜色不同坐标的圆，我们可以将原有颜色的圆复用，这样可以减少很多内存空间，如果不进行复用而是每个坐标每个颜色圆都创建新的对象，那么该示例中就会出现20个新增对象。</p><p><strong>抽象享元类</strong> 创建一个Shape接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体享元类</strong> 创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//x坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//y坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">int</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle: Draw()[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, x=&quot;</span> + x +</span><br><span class="line">                <span class="string">&quot;, y=&quot;</span> + y +</span><br><span class="line">                <span class="string">&quot;, radius=&quot;</span> + radius +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>享元工厂类</strong> 创建一个工厂，生成基于给定信息的实体类的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个缓存池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color 颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Shape</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getCircle</span><span class="params">(String color)</span>&#123;</span><br><span class="line">        <span class="comment">//从缓存池中获取 防止每次都生成新的对象导致内存中对象数量太多(节约内存空间)</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) circleMap.get(color);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓冲池中没有 才去创建新的对象 并且将创建好的对象加入缓存池中</span></span><br><span class="line">        <span class="keyword">if</span> (circle == <span class="literal">null</span>)&#123;</span><br><span class="line">            circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(color);</span><br><span class="line">            circleMap.put(color,circle);</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating circle of color : &quot;</span> + color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong> 使用该工厂，通过传递颜色信息来获取实体类的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String colors[] = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;White&quot;</span>, <span class="string">&quot;Black&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) ShapeFactory.getCircle(getRandomColor());</span><br><span class="line">            circle.setX(getRandomX());</span><br><span class="line">            circle.setY(getRandomY());</span><br><span class="line">            circle.setRadius(<span class="number">100</span>);</span><br><span class="line">            circle.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colors[(<span class="type">int</span>) (Math.random() * colors.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机x坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机y坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208291319413.png" alt="image-20220829131943337"></p><p>可以发现我们花了20个不同坐标不同颜色的圆，但实际上只创建了5个对象。</p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>享元模式是一个考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。</p><p>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</p><p><strong>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。</strong></p><ul><li><strong>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享（例如该示例中的圆的颜色）。</strong></li><li><strong>外部状态是随环境改变而改变的、不可以共享的状态（例如该示例中圆的坐标）。</strong>享元对象的外部状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>spring的常量池、数据库连接池、缓冲池等；英雄联盟中，一台服务器要连接多个客户端（多个玩家），如果每个玩家进去地图都要创建对象，那对象将无数啊。。。。。所以这里要使用享元模式，将地图对象减少到几个实例。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>享元模式的优点</p><ul><li>享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li><li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>享元模式的缺点</p><ul><li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li><li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用享元模式：</p><ul><li>一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>享元模式在编辑器软件中大量使用，如在一个文档中多次出现相同的图片，则只需要创建一个图片对象，通过在应用程序中设置该图片出现的位置，可以实现该图片在不同地方多次重复显示。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>单纯享元模式和复合享元模式</p><ul><li>单纯享元模式：在单纯享元模式中，所有的享元对象都是可以共享的，即所有抽象享元类的子类都可共享，不存在非共享具体享元类。</li><li>复合享元模式：将一些单纯享元使用组合模式加以组合，可以形成复合享元对象，这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</li></ul><p>享元模式与其他模式的联用</p><ul><li>在享元模式的享元工厂类中通常提供一个静态的工厂方法用于返回享元对象，使用简单工厂模式来生成享元对象。</li><li>在一个系统中，通常只有唯一一个享元工厂，因此享元工厂类可以使用单例模式进行设计。</li><li>享元模式可以结合组合模式形成复合享元模式，统一对享元对象设置外部状态。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li><li>享元模式包含四个角色：抽象享元类声明一个接口，通过它可以接受并作用于外部状态；具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li><li>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态和外部状态。其中内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享；外部状态是随环境改变而改变的、不可以共享的状态。</li><li>享元模式主要优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；其缺点是使得系统更加复杂，并且需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li><li>享元模式适用情况包括：一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费；对象的大部分状态都可以外部化，可以将这些外部状态传入对象中；多次重复使用享元对象。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之享元模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之享元模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之享元模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之享元模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;运用共享技</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之外观模式</title>
    <link href="https://devildyw.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-28T03:59:27.000Z</published>
    <updated>2022-08-28T05:33:39.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之外观模式"><a href="#设计模式–结构型模式之外观模式" class="headerlink" title="设计模式–结构型模式之外观模式"></a>设计模式–结构型模式之外观模式</h1><blockquote><p>为子系统的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p></blockquote><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>外观模式包含如下角色：</p><ul><li><strong>Facade: 外观角色</strong>  客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li><li><strong>SubSystem:子系统角色</strong> 在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281326965.jpeg" alt="../_images/Facade.jpg"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281325570.jpeg" alt="../_images/seq_Facade.jpg"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。 -外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。 - 外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。 -外观模式的目的在于降低系统的复杂程度。 -外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设一台电脑，它包含了 CPU（处理器），Memory（内存） ，Disk（硬盘）这几个部件，若想要启动电脑，则先后必须启动 CPU、Memory、Disk。关闭也是如此。</p><p>但是实际上我们在电脑开&#x2F;关机时根本不需要去操作这些组件，因为电脑已经帮我们都处理好了，并隐藏了这些东西。</p><p>这些组件好比子系统角色，而电脑就是一个外观角色。</p><h3 id="SubSystem-子系统角色"><a href="#SubSystem-子系统角色" class="headerlink" title="SubSystem 子系统角色"></a>SubSystem 子系统角色</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Facade-外观角色"><a href="#Facade-外观角色" class="headerlink" title="Facade 外观角色"></a>Facade 外观角色</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = <span class="keyword">new</span> <span class="title class_">CPU</span>();</span><br><span class="line">        <span class="built_in">this</span>.memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        <span class="built_in">this</span>.disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机时 computer的startup方法 帮助我们调用了各个组件的开机方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start the computer!&quot;</span>);</span><br><span class="line">        cpu.startup();</span><br><span class="line">        memory.startup();</span><br><span class="line">        disk.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;start computer finished!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关机时 computer的shutdown方法 帮助我们调用了各个组件的关机方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin to close the computer!&quot;</span>);</span><br><span class="line">        cpu.shutdown();</span><br><span class="line">        memory.shutdown();</span><br><span class="line">        disk.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;computer closed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208281331933.png" alt="image-20220828133152882"></p><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>外观模式的优点</p><ul><li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li><li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li><li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>外观模式的缺点</p><ul><li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用外观模式：</p><ul><li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li><li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li><li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li></ul><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><ul><li><p>一个系统有多个外观类</p><p>在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。</p></li><li><p>不要试图通过外观类为子系统增加新行为</p><p>不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。</p></li><li><p>外观模式与迪米特法则</p><p>外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的“第三者”，降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。</p></li><li><p>抽象外观类的引入</p><p>外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li><li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li><li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li><li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之外观模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之外观模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之外观模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之外观模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为子系统的</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之装饰模式</title>
    <link href="https://devildyw.github.io/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-27T03:26:46.000Z</published>
    <updated>2022-08-27T04:52:05.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之装饰模式"><a href="#设计模式–结构型模式之装饰模式" class="headerlink" title="设计模式–结构型模式之装饰模式"></a>设计模式–结构型模式之装饰模式</h1><blockquote><p>动态地给一个对象增加一些额外的职责，就扩展功能而言，装饰模式提供了一种比使用子类更加灵活的替代方案</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>有时我们希望给某个对象而不是整个类添加一些功能，虽然使用继承是添加功能的一种方式，但是不够灵活，而且会导致子类增加了无用功能，耦合性太强。一种较为灵活的方式是将对象嵌入另一个对象中，通过该对象添加功能，称这个嵌入的对象为装饰。这个装饰与被装饰的对象接口一致，它将请求转发给被装饰对象，并在转发的前后进行额外操作。 装饰模式就是<strong>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。</strong></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>装饰模式包含如下角色：</p><ul><li><strong>Component: 抽象构件</strong> 定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li><li><strong>ConcreteComponent: 具体构件（也可称为被装饰者）</strong> 具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li><li><strong>Decorator: 抽象装饰类</strong>   抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li><li><strong>ConcreteDecorator: 具体装饰类（装饰者）</strong> 具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li></ul><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul><li>模式名称：<strong>DECORATOR</strong>（装饰）</li><li>类型：对象结构型模式</li><li>意图：动态地给一个对象添加一些额外的职责。就增加功能来说， Decorator模式相比生成子类更为灵活。</li><li>适用性：<ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li></ul></li><li>效果：</li><li>优点：<ul><li>比继承更灵活。</li><li>避免在层次结构高层的类有太多的特征。</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”</li></ul></li><li>缺点：<ul><li>多层装饰比较复杂，加大学习与理解的难度</li><li>较与继承更加容易出错，排错也比较困难。</li></ul></li></ul><h2 id="下面通过一个例子，来深入理解装饰模式"><a href="#下面通过一个例子，来深入理解装饰模式" class="headerlink" title="下面通过一个例子，来深入理解装饰模式"></a>下面通过一个例子，来深入理解装饰模式</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">有一家咖啡店，生意很火爆，想要更新订单系统，来满足目前的饮料供应需求。原先的设计如下：</span><br><span class="line">有一个饮料的抽象类，所有的饮品都继承此类。类中包含了变量 description(描述)，和方法 getDescription()获取描述信息，以及抽象方法cost()花费。子类要实现cost方法。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225090.webp" alt="image.png"></p><p>在原先饮品种类少的情况还可以，如果说为了提高市场竞争力和消费升级，要增加多种饮品，并按照加入的不同调味品收取不同的费用。要是还按照之前的方式创建子类实现cost，就会造成子类过多，并且如果某一种调味料价格有变动，需要修改的类就很多，不利于维护。</p><p>这时可能会说直接在饮料类中添加调味料变量，设置和获取是否有某种调味料的方法就好了，将饮料类中cost方法提供实现，用于判断调味料的价钱，子类只需 计算自己的价值，配置有哪种调料，并加上父类的就行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饮料类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> milkCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> soyCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> mochaCost;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> whipCost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasMilk;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasSoy;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasMocha;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasWhip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasMilk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasMilk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasMilk</span><span class="params">(<span class="type">boolean</span> hasMilk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasMilk = hasMilk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasSoy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasSoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasSoy</span><span class="params">(<span class="type">boolean</span> hasSoy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasSoy = hasSoy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasMocha</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasMocha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasMocha</span><span class="params">(<span class="type">boolean</span> hasMocha)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasMocha = hasMocha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasWhip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasWhip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasWhip</span><span class="params">(<span class="type">boolean</span> hasWhip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasWhip = hasWhip;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">condimentCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(hasMilk)&#123;</span><br><span class="line">            condimentCost+=milkCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasMocha)&#123;</span><br><span class="line">            condimentCost+=mochaCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasSoy)&#123;</span><br><span class="line">            condimentCost+=soyCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hasWhip)&#123;</span><br><span class="line">            condimentCost+= whipCost;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> condimentCost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoast</span><span class="params">()</span> &#123;</span><br><span class="line">        setDescription(<span class="string">&quot;Most Excellent Dark Roast&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.3</span> + <span class="built_in">super</span>.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式存在几个问题：</p><ol><li>调料价格变东需要修改现有代码</li><li>添加或删除新的调料，需要变动相应的变量和方法，以及 cost的计算。</li><li>如果有新的饮料不适合原有调料加入，子类依然有这些没用的调料。</li><li>如果想要双倍调料还需要修改cost并且添加变量。 由此看出这种方式明显违反了设计原则中的 开闭原则：对扩展开放，对修改关闭。在例子中，变化的是每种饮料的价格，价格需要根据调味品发生改变。那就先以饮料作为对象，用调味品对象装饰。</li></ol><p>装饰模式类图结构</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225028.webp" alt="image.png"></p><p>从中可以看出：</p><ol><li>装饰者和被装饰着有相同的父类</li><li>可以使用一个或多个装饰类装饰对象</li><li>装饰对象可以替代被装饰类对象。</li><li>装饰对象可以在被装饰者的行为执行前后进行操作。</li></ol><p>根据装饰者模式进行调整</p><ol><li>先将饮料作为被封装者</li></ol><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225061.webp" alt="image.png"></p><p>2.用摩卡装饰饮料</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225111.webp" alt="image.png"></p><p>3.再将被摩卡装饰的对象作为被装饰者，使用 奶泡进行装饰</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225312.webp" alt="image.png"></p><p>下面来看下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">装饰和被装饰的父类 </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被装饰者类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DarkRoast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2.3</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者的父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CondimentDecorator</span> <span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Beverage <span class="title function_">getBeverage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mocha</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mocha</span><span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getBeverage().getDescription()+<span class="string">&quot; Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeverage().cost()+<span class="number">.20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Whip</span> <span class="keyword">extends</span> <span class="title class_">CondimentDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Whip</span><span class="params">(Beverage beverage)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getBeverage().getDescription()+<span class="string">&quot; Whip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeverage().cost()+<span class="number">.10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用情况</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明了具体构建</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">beverage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DarkRoast</span>();</span><br><span class="line">        System.out.println(beverage.getDescription()+<span class="string">&quot; $ &quot;</span>+beverage.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对其进行装饰</span></span><br><span class="line">        <span class="type">Mocha</span> <span class="variable">mocha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mocha</span>(beverage);</span><br><span class="line">        System.out.println(mocha.getDescription()+<span class="string">&quot; $ &quot;</span>+mocha.cost());</span><br><span class="line"></span><br><span class="line">        <span class="type">Whip</span> <span class="variable">whip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Whip</span>(beverage);</span><br><span class="line">        System.out.println(whip.getDescription()+<span class="string">&quot; $ &quot;</span>+ whip.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271250750.png" alt="image-20220827124904754"></p><h2 id="Java-I-x2F-O的装饰模式"><a href="#Java-I-x2F-O的装饰模式" class="headerlink" title="Java I&#x2F;O的装饰模式"></a>Java I&#x2F;O的装饰模式</h2><p>java.io包内的类看起来比较多，其实就是利用了装饰模式</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208271225042.webp" alt="image.png"></p><p>其中：<code>InputStream</code>是装饰类和被装饰类的父类；<code>FileInputStream</code>，<code>StringBufferInputStream</code>，<code>ByteArrayInputStream</code>是被装饰类， <code>FilterInputStream</code>是装饰类的父类，<code>BufferedInputStream</code>，<code>LineNumberInputStream</code>，<code>DataInputStream</code>是装饰类。</p><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><p>在以下情况下可以使用装饰模式：</p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。</li><li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类定义不能继承（如final类）.</li></ul><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>装饰模式的简化-需要注意的问题:</p><ul><li>一个装饰类的接口必须与被装饰类的接口保持相同，对于客户端来说无论是装饰之前的对象还是装饰之后的对象都可以一致对待。</li><li>尽量保持具体构件类Component作为一个“轻”类，也就是说不要把太多的逻辑和状态放在具体构件类中，可以通过装饰类</li></ul><p>对其进行扩展。 - 如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之装饰模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之装饰模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之装饰模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之装饰模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;动态地给一</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型模式之桥接模式</title>
    <link href="https://devildyw.github.io/2022/08/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-26T08:15:05.000Z</published>
    <updated>2022-08-27T04:38:11.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型模式之桥接模式"><a href="#设计模式–结构型模式之桥接模式" class="headerlink" title="设计模式–结构型模式之桥接模式"></a>设计模式–结构型模式之桥接模式</h1><blockquote><p>将抽象部分与它的实现部分解耦，使得两个都能够独立变化</p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote><p>推荐一读的概述</p></blockquote><p>毛笔和蜡笔是两种很常见的文具，它们都归属于画笔。假设需要大、中、小 3 种型号的画笔，能够绘制 12 种不同的颜色，如果使用蜡笔，需要准备 3 × 12 &#x3D; 36 支，但是如果使用毛笔，只需要提供 3 种型号的毛笔，外加一个包含 12 种颜色的调色板，涉及的对象个数仅为 3 + 12 &#x3D; 15，远小于 36 ，却能够实现 36 支蜡笔同样的功能。如果增加一种新型号的画笔，并且也需要具有 12 种颜色，对应的蜡笔需要增加 12 支，而毛笔只需要增加 1 支。</p><p>不难得知，在蜡笔中，颜色和型号两个不同的变化维度耦合在一起，无论是对颜色进行扩展还是对型号进行扩展势必会影响另一个维度；但在毛笔中，颜色和型号实现了分离，增加新的颜色或者型号对另一方没有任何影响。如果使用软件工程中的术语，可以认为在蜡笔中颜色和型号之间存在较强的耦合性，而毛笔很好地将二者解耦，使用起来更加的灵活，扩展也更为方便。在软件开发中有一种设计模式可以用来处理与画笔类似的具有多变化维度的情况，这就是<strong>桥接模式</strong>。</p><p>在桥接模式中将两个独立变化的维度设计为两个独立的继承等级结构，而不是将二者耦合在一起形成多层继承结构。桥接模式在抽象层建立起一个抽象关联，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p><blockquote><p><strong>桥接模式</strong>：将抽象部分与它的实现部分解耦，使得两者都能够独立变化。</p></blockquote><p>桥接模式是一种对象结构型模式，它又被称为柄体（Handle and Body）模式或接口（Interface）模式。桥接模式用一种巧妙地方式处理多层继承存在的问题，用抽象关系取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效地控制了系统中类的个数。</p><h2 id="2-结构与实现"><a href="#2-结构与实现" class="headerlink" title="2 结构与实现"></a>2 结构与实现</h2><h3 id="2-1-桥接模式结构"><a href="#2-1-桥接模式结构" class="headerlink" title="2.1 桥接模式结构"></a>2.1 桥接模式结构</h3><p>桥接模式包含以下 4 个角色：</p><ol><li>**Abstraction(抽象类)**：其中定义了一个实现类接口类型的对象并可以维护该对象，它与 Implementor 之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</li><li><strong>RefinedAbstraction(扩充抽象类)<strong>：它扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，</strong>在扩充抽象类中可以调用在实现类接口中定义的业务方法；</strong></li><li>**Implementor(实现类接口)**：实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li><li>**ConcreteImplementor(具体实现类)**：具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li></ol><h3 id="2-2-桥接模式举例"><a href="#2-2-桥接模式举例" class="headerlink" title="2.2 桥接模式举例"></a>2.2 桥接模式举例</h3><h4 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h4><p>某软件公司要开发一个跨平台图像浏览系统，要求该系统能够显示 BMP、JPG、GIF、PNG 等多种格式的文件，并且能够在 Windows、Linux、UNIX 等多个操作系统上运行。系统首先将各种格式的文件解析为像素矩阵（Matrix），然后将像素矩阵显示在屏幕上，在不同的操作系统中可以调用不同的绘制函数来绘制像素矩阵。系统需要具有较好的扩展性，以便在将来支持新的文件格式和操作系统。请使用桥接模式。</p><h4 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261617013.png" alt="image-20220826161740971"></p><h4 id="三、项目-UML"><a href="#三、项目-UML" class="headerlink" title="三、项目 UML"></a>三、项目 UML</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261615858.webp" alt="UML"></p><h4 id="四、抽象类"><a href="#四、抽象类" class="headerlink" title="四、抽象类"></a>四、抽象类</h4><h5 id="Image-抽象类"><a href="#Image-抽象类" class="headerlink" title="Image 抽象类"></a>Image 抽象类</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title class_">OSImpl</span> osImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入实现类接口对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Image</span>(<span class="title class_">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">osImpl</span> = osImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">void</span> <span class="title function_">parseFile</span>(<span class="title class_">String</span> fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="五、扩充抽象类"><a href="#五、扩充抽象类" class="headerlink" title="五、扩充抽象类"></a>五、扩充抽象类</h4><h5 id="BMPImage-扩充抽象类"><a href="#BMPImage-扩充抽象类" class="headerlink" title="BMPImage 扩充抽象类"></a>BMPImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BMPImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">BMPImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为BMP.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JPGImage-扩充抽象类"><a href="#JPGImage-扩充抽象类" class="headerlink" title="JPGImage 扩充抽象类"></a>JPGImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JPGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    public <span class="type">JPGImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为JPG.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="GIFImage-扩充抽象类"><a href="#GIFImage-扩充抽象类" class="headerlink" title="GIFImage 扩充抽象类"></a>GIFImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GIFImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    public <span class="type">GIFImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为GIF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PNGImage-扩充抽象类"><a href="#PNGImage-扩充抽象类" class="headerlink" title="PNGImage 扩充抽象类"></a>PNGImage 扩充抽象类</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PNGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">PNGImage</span>(<span class="type">OSImpl</span> osImpl) &#123;</span><br><span class="line">        <span class="keyword">super</span>(osImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void parseFile(<span class="type">String</span> fileName) &#123;</span><br><span class="line">        <span class="comment">//模拟解析BMP文件并获取一个像素矩阵对象 m</span></span><br><span class="line">        <span class="type">Matrix</span> matrix = <span class="keyword">new</span> <span class="type">Matrix</span>();</span><br><span class="line">        osImpl.doPaint(matrix);</span><br><span class="line">        <span class="type">System</span>.out.println(fileName+<span class="string">&quot;, 格式为PNG.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="六、实现类接口"><a href="#六、实现类接口" class="headerlink" title="六、实现类接口"></a>六、实现类接口</h4><h5 id="OSImpl"><a href="#OSImpl" class="headerlink" title="OSImpl"></a>OSImpl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPaint</span><span class="params">(Matrix m)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="七、具体实现类"><a href="#七、具体实现类" class="headerlink" title="七、具体实现类"></a>七、具体实现类</h4><h5 id="WindowsImpl"><a href="#WindowsImpl" class="headerlink" title="WindowsImpl"></a>WindowsImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Windows 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinuxImpl"><a href="#LinuxImpl" class="headerlink" title="LinuxImpl"></a>LinuxImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Linux 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="UnixImpl"><a href="#UnixImpl" class="headerlink" title="UnixImpl"></a>UnixImpl</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnixImpl</span> <span class="keyword">implements</span> <span class="title class_">OSImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">doPaint</span>(<span class="params">Matrix m</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">print</span>(<span class="string">&quot;在 Unix 操作系统中显示图像：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="八、Matrix-辅助类"><a href="#八、Matrix-辅助类" class="headerlink" title="八、Matrix 辅助类"></a>八、Matrix 辅助类</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="九、测试客户类"><a href="#九、测试客户类" class="headerlink" title="九、测试客户类"></a>九、测试客户类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Image image;</span><br><span class="line">        image = <span class="keyword">new</span> <span class="built_in">GIFImage</span>(<span class="keyword">new</span> <span class="built_in">WindowImpl</span>());</span><br><span class="line">        image.<span class="built_in">parseFile</span>(<span class="string">&quot;杜颖淼&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line">        image = <span class="keyword">new</span> <span class="built_in">PNGImage</span>(<span class="keyword">new</span> <span class="built_in">LinuxImpl</span>());</span><br><span class="line">        image.<span class="built_in">parseFile</span>(<span class="string">&quot;这是一个文件&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十、测试结果"><a href="#十、测试结果" class="headerlink" title="十、测试结果"></a>十、测试结果</h4><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208261621578.png" alt="image-20220826162105535"></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>从举例容易看出，客户端面向抽象编程，每个维度都有一个高级抽象类，每个维度的具体选项继承自该高级抽象类。<strong>举例中我们通过 xml 配置文件配置各个维度的选择，选择什么类型的图片？选择什么操作系统？实现了不同维度的的解耦。</strong></p><p>桥接模式十设计 Java 虚拟机和实现 JDBC 等驱动程序的核心模式之一，应用较为广泛。在软件开发中如果一个类或一个系统有多个变化维度都可以尝试使用桥接模式对其进行设计。桥接模式为多维度变化的系统提供了一套完整的解决方案，并且降低了系统的复杂度。</p><h3 id="3-1-桥接模式优点"><a href="#3-1-桥接模式优点" class="headerlink" title="3.1 桥接模式优点"></a>3.1 桥接模式优点</h3><ol><li>分离抽象接口及其实现部分。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓的抽象何实现沿着各自维度的变化，也就是说抽象和实现不在同一个继承层次结构中，而是“子类化”它们，使它们各自具有自己的子类，以便任意组合子类，从而获得多维度组合对象。</li><li>在很多情况下，桥接模式可以取代多层继承方案，多层继承方案违背了单一职责原则，复用性较差，并且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大地减少了子类的个数。</li><li>桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度都不需要修改原有系统，符合开闭原则。</li></ol><h3 id="3-2-桥接模式缺点"><a href="#3-2-桥接模式缺点" class="headerlink" title="3.2 桥接模式缺点"></a>3.2 桥接模式缺点</h3><ol><li>桥接模式的使用会增加系统的理解和设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。</li><li>桥接模式要求正确地识别出系统中地两个独立变化的维度，因此其使用的范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。</li></ol><h3 id="3-3-桥接模式适用环境"><a href="#3-3-桥接模式适用环境" class="headerlink" title="3.3 桥接模式适用环境"></a>3.3 桥接模式适用环境</h3><ol><li>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>抽象部分和实现部分可以用继承的方式独立扩展而互不影响，在程序运行时可以动态地将一个抽象化子类地对象和一个实现化子类地对象进行组合，即系统需要对抽象化角色和实现化角色进行多态耦合。</li><li>一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。</li><li>对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ol><blockquote><p>抽象类和实现类接口都可以对调，因为对于不同规格的毛笔而言，每一种规格都可以有不同的颜色使用；对于不同的颜色而言每一种颜色都有不同规格的毛笔来使用。我们使用时权衡即可。</p></blockquote><h1 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h1><p><a href="https://zhuanlan.zhihu.com/p/58903776">秒懂设计模式之桥接模式（Bridge Pattern） - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型模式之桥接模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型模式之桥接模式&quot;&gt;&lt;/a&gt;设计模式–结构型模式之桥接模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将抽象部分</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式--结构型设计模式之适配器模式</title>
    <link href="https://devildyw.github.io/2022/08/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://devildyw.github.io/2022/08/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-25T07:51:20.000Z</published>
    <updated>2022-08-27T04:37:06.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式–结构型设计模式之适配器模式"><a href="#设计模式–结构型设计模式之适配器模式" class="headerlink" title="设计模式–结构型设计模式之适配器模式"></a>设计模式–结构型设计模式之适配器模式</h1><blockquote><p>将一个类的接口转换成客户希望的另一个接口。该模式让接口不兼容的类可以一起工作</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1）概述"><a href="#1）概述" class="headerlink" title="1）概述"></a>1）概述</h3><p>​        在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。还有像下面这张图一样：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208251751012.webp" alt="在这里插入图片描述"></p><p>​        在软件设计中也可能出现：</p><ol><li><strong>需要开发的具有某种业务功能的组件在现有的组件库中已经存在，但它们与当前系统的接口规范不兼容，如果重新开发这些组件成本又很高，这时用适配器模式能很好地解决这些问题。</strong></li><li>如果想增加现有组件的复用率也可以使用适配器模式。</li></ol><h3 id="2）介绍"><a href="#2）介绍" class="headerlink" title="2）介绍"></a>2）介绍</h3><p>适配器模式（Adapter）的定义如下：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><p>Adapter模式的宗旨：<strong>保留现有类所提供的服务，向客户提供接口，以满足客户的期望</strong>。</p><h3 id="3）角色结构"><a href="#3）角色结构" class="headerlink" title="3）角色结构"></a>3）角色结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><blockquote><p>适配器就是使用现有的组件（适配者）来实现目标接口规范（目标接口）来完成转化的一个类。</p></blockquote><h3 id="4）使用场景"><a href="#4）使用场景" class="headerlink" title="4）使用场景"></a>4）使用场景</h3><p>适配器模式（Adapter）通常适用于以下场景。</p><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。（<del>就是所谓的加一层，一层不行就加两层</del>）😁</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h2 id="二、类适配器"><a href="#二、类适配器" class="headerlink" title="二、类适配器"></a>二、类适配器</h2><p>当客户在接口中定义了他期望的行为时，我们就可以应用适配器模式，提供一个实现该接口的类，并且扩展已有的类，通过创建子类来实现适配。</p><p><code>实现方式</code>：<strong>定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件</strong>。</p><p>我们直接用之前的那个图来做个例子：中国人到了欧洲，的给自己电脑充电，但因为自己电脑是双叉，欧式是三叉，这中间就得需要一个转换器。<strong>对于电脑而言，它只能是双叉的，但是现在只有三叉的插座，想要充电，就必须能让双叉的插头能够插入三叉的插座上，此时我们需要一个适配器，将三叉插座的电传输给双叉的插头。此时的目标是双叉，需要将三叉的电传输到双叉的线上。</strong></p><blockquote><p>可能使用sd卡和tf卡的案例比较好理解，对于同一台电脑而言它只能插入sd卡，但是呢我们现在不想让他插入sd读取数据了，我想让他读取tf卡，但是电脑不能匹配，此时就只能使用tf卡转sd的适配器了，通过读sd的方式读取了tf卡。对于该问题，目标接口就是sd卡，而适配者是tf卡，tf卡不符合现有接口规范（sd卡），需要通过适配器（适配器通过现有组件tf的读写方式实现了sd接口的规范）完成了转化。</p></blockquote><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208251751008.webp" alt="在这里插入图片描述"></p><h3 id="2-1、代码"><a href="#2-1、代码" class="headerlink" title="2.1、代码"></a>2.1、代码</h3><p>适配者（Adaptee）：即图中的欧式三叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line">    <span class="comment">/** 欧式三叉 通电 接通电 插座*/</span></span><br><span class="line">    String <span class="title function_">useEuropesocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧式三叉实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useEuropesocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;使用欧式三叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标（Target）接口：即中国双叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">useChineseSocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国插头的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        String msg=<span class="string">&quot;使用中国双叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器（Adapter）类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义适配器类 中国双叉转为欧洲三叉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseAdapterEurope</span> <span class="keyword">extends</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用转换器转换完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> useEuropesocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑类，对于电脑类而言，它只能使用双叉的充电器，所以客户端希望的目标类就是中国双叉。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">(ChineseSocket chineseSocket)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(chineseSocket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;sd card null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chineseSocket.useChineseSocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ChineseSocket</span> <span class="variable">chineseSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseSocketImpl</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(chineseSocket));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="type">ChineseAdapterEurope</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseAdapterEurope</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(adapter));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">         * ------------</span></span><br><span class="line"><span class="comment">         * 使用转换器转换完成</span></span><br><span class="line"><span class="comment">         * 使用欧式三叉充电</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是简单的演示了适配器的使用。</p><p><code>注</code>:类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h2 id="三、对象适配器"><a href="#三、对象适配器" class="headerlink" title="三、对象适配器"></a>三、对象适配器</h2><p>对象适配器”通过组合除了满足“用户期待接口”还降低了代码间的不良耦合。在工作中推荐使用“对象适配”。</p><p>实现方式：<strong>对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口</strong>。</p><p>题目还是和上面一样的哈。代码其实差异很小</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>适配者（Adaptee）：即图中的欧式三叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line">    <span class="comment">/** 欧式三叉 通电 接通电 插座*/</span></span><br><span class="line">    String <span class="title function_">useEuropesocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧式三叉实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EuropeSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">EuropeSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useEuropesocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;使用欧式三叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标（Target）接口：即中国双叉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">useChineseSocket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国插头的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseSocketImpl</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        String msg=<span class="string">&quot;使用中国双叉充电&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器（Adapter）类： 就是这个适配器内做了一些更改 从继承改为了成员变量的方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseAdapterEurope</span> <span class="keyword">implements</span> <span class="title class_">ChineseSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EuropeSocket europeSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChineseAdapterEurope</span><span class="params">(EuropeSocket europeSocket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.europeSocket = europeSocket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用转换器转换完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> europeSocket.useEuropesocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">useChineseSocket</span><span class="params">(ChineseSocket chineseSocket)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(chineseSocket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;sd card null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chineseSocket.useChineseSocket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ChineseSocket</span> <span class="variable">chineseSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseSocketImpl</span>();</span><br><span class="line">        System.out.println(computer.useChineseSocket(chineseSocket));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="comment">//这里做了更改</span></span><br><span class="line">        EuropeSocket europeSocket=<span class="keyword">new</span> <span class="title class_">EuropeSocketImpl</span>();</span><br><span class="line">        <span class="type">ChineseAdapterEurope</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseAdapterEurope</span>(europeSocket);</span><br><span class="line">        System.out.println(computer.useChineseSocket(adapter));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * 使用中国双叉充电</span></span><br><span class="line"><span class="comment">         * ------------</span></span><br><span class="line"><span class="comment">         * 使用转换器转换完成</span></span><br><span class="line"><span class="comment">         * 使用欧式三叉充电</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是对象适配器啦，</p><p>适合于解决问题常见：</p><ul><li>　需要的东西有，但不能用，且短时间无法改造。即，使得一个功能适合不同的环境。</li><li>　　在开发中，系统的数据、行为都匹配，但接口不符时，可以考虑适配器。</li><li>　　<strong>希望复用一些现存的类，但是接口又与复用环境的要求不一致，应该考虑用适配器模式。</strong>（使用一个已经存在的类，但它的接口（即，方法)，与需要的不相同时）</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>适配器模式（Adapter）可扩展为双向适配器模式，双向适配器类既可以把适配者接口转换成目标接口，也可以把目标接口转换成适配者接口</strong>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>优点</strong>：</p><ul><li>客户端通过适配器可以透明地调用目标接口。</li><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。<strong>提高了类的复用</strong></li><li><strong>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题</strong>。灵活性好</li><li>可以让任何两个没有关联的类一起运行</li><li><strong>在很多业务场景中符合开闭原则</strong></li></ul><p><strong>其缺点是</strong>：</p><ul><li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li><li>增加代码阅读难度，降低代码可读性，过多使用适配器会使系统代码变得凌乱。（如：明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难）</li></ul><p> <strong>核心思想：</strong></p><p>继承或者依赖（引用）适配者对象，然后实现目标的接口。确保原来代码不改变的情况下，增加新的功能。</p><p>因为目标类是需要使用的，而我们现在并不能直接使用目标类（一个已存在的类，但是它不符合现有的接口规范），而需要通过适配器将现有的组件转化为目标类，所以适配器需由现有组件实现目标接口的功能（转化使其符合现有规范）来完成转化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式–结构型设计模式之适配器模式&quot;&gt;&lt;a href=&quot;#设计模式–结构型设计模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式–结构型设计模式之适配器模式&quot;&gt;&lt;/a&gt;设计模式–结构型设计模式之适配器模式&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="设计模式" scheme="https://devildyw.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Developer" scheme="https://devildyw.github.io/tags/Developer/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator</title>
    <link href="https://devildyw.github.io/2022/08/23/Spring%20Boot%20Actuator/"/>
    <id>https://devildyw.github.io/2022/08/23/Spring%20Boot%20Actuator/</id>
    <published>2022-08-23T11:50:23.000Z</published>
    <updated>2022-08-23T14:09:05.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h1><p>在企业级应用中，学习了如何进行SpringBoot应用的功能开发，以及如何写单元测试、集成测试等还是不够的。在实际的软件开发中还需要：<strong>应用程序的监控和管理</strong>。SpringBoot的Actuator模块实现了应用的监控与管理。这样的需求在分布式服务中基本是必须的，项目上线后的监控也是如此</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>生产系统中，往往需要对系统实际运行的情况（例如cpu、io、disk、db、业务功能等指标）进行监控运维。在SpringBoot项目中Actuator模块提供了众多HTTP接口端点（Endpoint），<strong>来提供应用程序运行时的内部状态信息。</strong></p><p>Actuator模块提供了一个监控和管理生产环境的模块，可以使用<strong>http、jmx、ssh、telnet等</strong>来管理和监控应用。包括应用的审计（Auditing）、健康（health）状态信息、数据采集（metrics gathering）统计等监控运维的功能。同时，提供了可以扩展 Actuator端点（Endpoint）自定义监控指标。这些指标都是以<strong>JSON接口数据的方式呈现</strong>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用Spring Boot Actuator需要加入如下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>actuator并没有默认集成在自动配置中（所以需要手动引入），而在作为独立的项目来呈现的。当引入了上面的依赖，默认会引入actuator相关的两个项目：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>spring-boot-actuator</code>为功能实现，<code>spring-boot-actuator-autoconfigure</code>为自动配置。</p><p>需要注意：因<code>SpringBoot Actuator</code>会暴露服务的详细信息，为了保障安全性，建议添加安全控制的相关依赖<code>spring-boot-starter-security</code>，这样在访问应用监控端点时，都需要输入验证信息。所需依赖如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然也可以手动自定义不需要引入<code>security</code></p><p>关于security的使用我们在此不进行展开，可在application文件中配置相应的访问密码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>经过以上步骤的操作，启动SpringBoot项目，actuator便自动集成配置了，可通过：</p><p><a href="http://localhost:8080/actuator">http://localhost:8080/actuator</a> 访问，结果如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;health-path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>默认支持的链接有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/actuator</span><br><span class="line">/actuator/health</span><br><span class="line">/actuator/health/&#123;*path&#125;</span><br></pre></td></tr></table></figure><p>可以在application配置文件中配置开启更多的监控信息：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#/info获取info前缀的配置信息 这一项必不可少</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>management.endpoints.web.exposure.include</code>&#x3D;’*’，代表开启全部监控，也可仅配置需要开启的监控，如： <code>management.endpoints.web.exposure.include</code>&#x3D;beans,trace。</p></li><li><p><code>management.endpoint.health.show-details</code>&#x3D;always，health endpoint开启显示全部细节。默认情况下&#x2F;actuator&#x2F;health是公开的，但不显示细节。</p></li><li><p><code>management.endpoints.web.base-path</code>&#x3D;&#x2F;monitor，启用指定的url地址访问根路径，默认路径为&#x2F;actuator&#x2F;*，开启则访问路径变为&#x2F;monitor&#x2F;*。</p></li><li><p><code>management.endpoint.shutdown.enabled</code>&#x3D;true，启用接口关闭<code>SpringBoot</code>。</p></li></ul><p>监控信息如果需要跨越调用，可通过<code>CORS</code>配置来支持，默认处于禁用状态。设置<code>management.endpoints.web.cors.allowed-origins</code>属性后开启。</p><p>比如允许来自<a href="https://www.choupangxia.com/">https://www.choupangxia.com</a> 域的GET和POST调用：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">https://www.choupangxia.com</span></span><br><span class="line">        <span class="attr">allowed-methods:</span> <span class="string">GET,POST</span></span><br></pre></td></tr></table></figure><h2 id="REST接口"><a href="#REST接口" class="headerlink" title="REST接口"></a>REST接口</h2><p>Spring Boot Actuator提供了非常丰富的监控接口，可以通过这些接口了解应用程序运行时的内部状况。Actuator也支持用户自定义添加端点，可以根据实际应用，定义一些比较关心的指标，在运行期进行监控。</p><table><thead><tr><th>HTTP方法</th><th>路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;auditevents</td><td>显示当前应用程序的审计事件信息</td></tr><tr><td>GET</td><td>&#x2F;beans</td><td>显示一个应用中所有Spring Beans的完整列表</td></tr><tr><td>GET</td><td>&#x2F;conditions</td><td>显示配置类和自动配置类(configuration and auto-configuration classes)的状态及它们被应用或未被应用的原因。</td></tr><tr><td>GET</td><td>&#x2F;configprops</td><td>显示一个所有@ConfigurationProperties的集合列表</td></tr><tr><td>GET</td><td>&#x2F;env</td><td>显示来自Spring的ConfigurableEnvironment的属性。</td></tr><tr><td>GET</td><td>&#x2F;flyway</td><td>显示数据库迁移路径，如果有的话。</td></tr><tr><td>GET</td><td>&#x2F;health</td><td>显示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情）</td></tr><tr><td>GET</td><td>&#x2F;info</td><td>显示任意的应用信息</td></tr><tr><td>GET</td><td>&#x2F;liquibase</td><td>展示任何Liquibase数据库迁移路径，如果有的话</td></tr><tr><td>GET</td><td>&#x2F;metrics</td><td>展示当前应用的metrics信息</td></tr><tr><td>GET</td><td>&#x2F;mappings</td><td>显示一个所有@RequestMapping路径的集合列表</td></tr><tr><td>GET</td><td>&#x2F;scheduledtasks</td><td>显示应用程序中的计划任务</td></tr><tr><td>GET</td><td>&#x2F;sessions</td><td>允许从Spring会话支持的会话存储中检索和删除(retrieval and deletion)用户会话。使用Spring Session对反应性Web应用程序的支持时不可用。</td></tr><tr><td>POST</td><td>&#x2F;shutdown</td><td>允许应用以优雅的方式关闭（默认情况下不启用）</td></tr><tr><td>GET</td><td>&#x2F;threaddump</td><td>执行一个线程dump</td></tr></tbody></table><p>如果使用web应用(Spring MVC, Spring WebFlux, 或者 Jersey)，还可以使用以下接口：</p><table><thead><tr><th>HTTP方法</th><th>路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;heapdump</td><td>返回一个GZip压缩的hprof堆dump文件</td></tr><tr><td>GET</td><td>&#x2F;jolokia</td><td>通过HTTP暴露JMX beans（当Jolokia在类路径上时，WebFlux不可用）</td></tr><tr><td>GET</td><td>&#x2F;logfile</td><td>返回日志文件内容（如果设置了logging.file或logging.path属性的话），支持使用HTTP Range头接收日志文件内容的部分信息</td></tr><tr><td>GET</td><td>&#x2F;prometheus</td><td>以可以被Prometheus服务器抓取的格式显示metrics信息</td></tr></tbody></table><h2 id="接口详解"><a href="#接口详解" class="headerlink" title="接口详解"></a>接口详解</h2><p>health主要用来检查应用的运行状态，这是使用频次最高的监控点。通常使用此接口显示应用实例的运行状态，以及应用不“健康”的原因，比如数据库连接、磁盘空间不够等，如常用的eureka，zookeeper，consul注册中心就是靠该接口检测实例健康状态的。</p><p>默认情况下health的状态是开放的，访问：<a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a> 即可看到应用的状态。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置状态码顺序：<code>setStatusOrder(Status.DOWN,Status.OUT*OF*SERVICE, Status.UP, Status.UNKNOWN</code>)。过滤掉不能识别的状态码。如果无任何状态码，整个<code>SpringBoot</code>应用的状态是UNKNOWN。将所有收集到的状态码排序。返回有序状态码序列中的第一个状态码，作为整个<code>SpringBoot</code>应用的状态。</p><p>Health通过合并几个健康指数检查应用的健康情况。<code>SpringBoot Actuator</code>会自动配置以下内容：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>CassandraHealthIndicator</code></td><td>检查Cassandra数据库是否已启动。</td></tr><tr><td><code>CouchbaseHealthIndicator</code></td><td>检查Couchbase群集是否已启动。</td></tr><tr><td><code>DiskSpaceHealthIndicator</code></td><td>检查磁盘空间不足。</td></tr><tr><td><code>DataSourceHealthIndicator</code></td><td>检查是否可以建立连接DataSource。</td></tr><tr><td><code>ElasticsearchHealthIndicator</code></td><td>检查Elasticsearch集群是否已启动。</td></tr><tr><td><code>InfluxDbHealthIndicator</code></td><td>检查InfluxDB服务器是否已启动。</td></tr><tr><td><code>JmsHealthIndicator</code></td><td>检查JMS代理是否启动。</td></tr><tr><td><code>MailHealthIndicator</code></td><td>检查邮件服务器是否已启动。</td></tr><tr><td><code>MongoHealthIndicator</code></td><td>检查Mongo数据库是否已启动。</td></tr><tr><td><code>Neo4jHealthIndicator</code></td><td>检查Neo4j服务器是否已启动。</td></tr><tr><td><code>RabbitHealthIndicator</code></td><td>检查Rabbit服务器是否已启动。</td></tr><tr><td><code>RedisHealthIndicator</code></td><td>检查Redis服务器是否启动。</td></tr><tr><td><code>SolrHealthIndicator</code></td><td>检查Solr服务器是否已启动。</td></tr></tbody></table><p>可以通过设置 <code>management.health.defaults.enabled</code>属性来全部禁用。</p><h2 id="原生端点"><a href="#原生端点" class="headerlink" title="原生端点"></a>原生端点</h2><p>原生端点分为三大类：</p><ul><li>应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。</li><li>度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。</li><li>操作控制类：提供了对应用的关闭等操作类功能。</li></ul><hr><h3 id="应用配置类"><a href="#应用配置类" class="headerlink" title="应用配置类"></a>应用配置类</h3><p>&#x2F;conditions：该端点用来获取应用的自动化配置报告，其中包括所有自动化配置的候选项。同时还列出了每个候选项自动化配置的各个先决条件是否满足。该端点可以帮助我们方便的找到一些自动化配置为什么没有生效的具体原因。</p><p>该报告内容将自动化配置内容分为两部分：positiveMatches中返回的是条件匹配成功的自动化配置和negativeMatches中返回的是条件匹配不成功的自动化配置。</p><p>部分代码如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contexts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;positiveMatches&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;AuditEventsEndpointAutoConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnAvailableEndpointCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnAvailableEndpoint marked as exposed by a &#x27;management.endpoints.web.exposure&#x27; property&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;BeansEndpointAutoConfiguration&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnAvailableEndpointCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnAvailableEndpoint marked as exposed by a &#x27;management.endpoints.web.exposure&#x27; property&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;BeansEndpointAutoConfiguration#beansEndpoint&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OnBeanCondition&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>&#x2F;info：就是在配置文件中配置的以info开头的信息，如配置为：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-actuator</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;spring-boot-actuator&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>info中配置的参数也可以通过符号*@*包围的属性值来自pom.xml文件中的元素节点。如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">        <span class="attr">artifact:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">@project.name@</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">@project.description@</span></span><br><span class="line">        <span class="attr">ersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;artifact&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring-learn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring-learn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo project for Spring Boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;beans：该端点用来获取应用上下文中创建的所有Bean。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;contexts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;application&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;beans&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;endpointCachingOperationInvokerAdvisor&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aliases&quot;</span>: [],</span><br><span class="line">                    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;singleton&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.class]&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;dependencies&quot;</span>: [<span class="string">&quot;environment&quot;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;defaultServletHandlerMapping&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aliases&quot;</span>: [],</span><br><span class="line">                    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;singleton&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;org.springframework.web.servlet.HandlerMapping&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration<span class="variable">$EnableWebMvcConfiguration</span>.class]&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;dependencies&quot;</span>: []</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;parentId&quot;</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口展现了bean的别名、类型、是否单例、类的地址、依赖等信息。</p><p>&#x2F;configprops：该端点用来获取应用中配置的属性信息报告。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spring.transaction&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面展示了TransactionProperties属性的配置信息。</p><p>&#x2F;mappings：该端点用来返回所有SpringMVC的控制器映射关系报告。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;handler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Actuator web endpoint &#x27;beans&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;predicate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;GET /actuator/beans, produces [application/vnd.spring-boot.actuator.v2+json || application/json]&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;handlerMethod&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.OperationHandler&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;handle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;descriptor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Ljavax/servlet/http/HttpServletRequest;Ljava/util/Map;)Ljava/lang/Object;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;requestMappingConditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;consumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;GET&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/actuator/beans&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;produces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.spring-boot.actuator.v2+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;negated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;negated&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>/env</code>：该端点与<code>/configprops</code>不同，它用来获取应用所有可用的环境属性报告。包括：环境变量、JVM属性、应用的配置配置、命令行中的参数。</p><h3 id="度量指标类"><a href="#度量指标类" class="headerlink" title="度量指标类"></a>度量指标类</h3><p>应用配置类提供的指标为静态报告，而度量指标类端点提供的报告内容则是动态变化的，提供了应用程序在运行过程中的一些快照信息，比如：内存使用情况、HTTP请求统计、外部资源指标等。这些端点对于构建微服务架构中的监控系统非常有帮助。</p><p>&#x2F;metrics：该端点用来返回当前应用的各类重要度量指标，比如：内存信息、线程信息、垃圾回收信息等。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.states&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;http.server.requests&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.files.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.memory.promoted&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.load.average.1m&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.used&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.max.data.size&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.memory.committed&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.cpu.count&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;logback.events&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.sent&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.memory.used&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.daemon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;system.cpu.usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.memory.allocated&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.request.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.request&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.expired&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.live&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.threads.peak&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.received&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.uptime&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.rejected&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.cpu.usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.config.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.classes.loaded&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.classes.unloaded&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.global.error&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.active.current&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.alive.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.gc.live.data.size&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.current&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.files.open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.count&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;jvm.buffer.total.capacity&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.sessions.active.max&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tomcat.threads.busy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;process.start.time&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>从上面的示例中有这些重要的度量值：</p><ul><li>系统信息：包括处理器数量processors、运行时间uptime和instance.uptime、系统平均负载systemload.average。</li><li>mem.*：内存概要信息，包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。</li><li>heap.*：堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li>nonheap.*：非堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getNonHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li>threads.*：线程使用情况，包括线程数、守护线程数（daemon）、线程峰值（peak）等，这些数据均来自java.lang.management.ThreadMXBean。</li><li>classes.*：应用加载和卸载的类统计。这些数据均来自java.lang.management.ClassLoadingMXBean。</li><li>gc.*：垃圾收集器的详细信息，包括垃圾回收次数gc.ps_scavenge.count、垃圾回收消耗时间gc.ps_scavenge.time、标记-清除算法的次数gc.ps_marksweep.count、标记-清除算法的消耗时间gc.ps_marksweep.time。这些数据均来自java.lang.management.GarbageCollectorMXBean。</li><li>httpsessions.*：Tomcat容器的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.active。该度量指标信息仅在引入了嵌入式Tomcat作为应用容器的时候才会提供。</li><li>gauge.*：HTTP请求的性能指标之一，它主要用来反映一个绝对数值。比如上面示例中的gauge.response.hello: 5，它表示上一次hello请求的延迟时间为5毫秒。</li><li>counter.*：HTTP请求的性能指标之一，它主要作为计数器来使用，记录了增加量和减少量。如上示例中counter.status.200.hello: 11，它代表了hello请求返回200状态的次数为11。</li></ul><p>&#x2F;threaddump：会生成当前线程活动的快照。方便我们在日常定位问题的时候查看线程的情况。主要展示了线程名、线程ID、线程的状态、是否等待锁资源等信息。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;threads&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;threadName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reference Handler&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadId&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedCount&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;daemon&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inNative&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadState&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RUNNABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stackTrace&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;classLoaderName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;moduleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.base&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;moduleVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;methodName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;waitForReferencePendingList&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reference.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lineNumber&quot;</span><span class="punctuation">:</span> <span class="number">-2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.ref.Reference&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nativeMethod&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;lockedMonitors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedSynchronizers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.concurrent.locks.ReentrantLock$NonfairSync&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;identityHashCode&quot;</span><span class="punctuation">:</span> <span class="number">2060076420</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockInfo&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;threadName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DestroyJavaVM&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadId&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedTime&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;waitedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockOwnerName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;daemon&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inNative&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;threadState&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RUNNABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;priority&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stackTrace&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedMonitors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockedSynchronizers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lockInfo&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;trace：该端点用来返回基本的HTTP跟踪信息。默认情况下，跟踪信息的存储采用。（2.2版本以后不在默认提供）</p><h3 id="操作控制类"><a href="#操作控制类" class="headerlink" title="操作控制类"></a>操作控制类</h3><p>&#x2F;shutdown：配置文件中配置开启此功能：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>使用 curl 模拟 post 请求此接口：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:8080/actuator/shutdown&quot;</span>复制代码</span><br></pre></td></tr></table></figure><p>显示结果为：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shutting down, bye...&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由此可见shutdown可以关闭Spring Boot项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Boot-Actuator&quot;&gt;&lt;a href=&quot;#Spring-Boot-Actuator&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Actuator&quot;&gt;&lt;/a&gt;Spring Boot Actuator&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="监控" scheme="https://devildyw.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
    <category term="Spring" scheme="https://devildyw.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://devildyw.github.io/2022/08/22/Linux/"/>
    <id>https://devildyw.github.io/2022/08/22/Linux/</id>
    <published>2022-08-22T13:06:31.000Z</published>
    <updated>2022-08-22T13:07:47.722Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/linux/linux-tutorial.html">Linux 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/linux/linux-tutorial.html&quot;&gt;Linux 教程 | 菜鸟教程 (runoob.com)&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Linux" scheme="https://devildyw.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://devildyw.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud-Nacos</title>
    <link href="https://devildyw.github.io/2022/08/12/Spring%20Cloud-Nacos/"/>
    <id>https://devildyw.github.io/2022/08/12/Spring%20Cloud-Nacos/</id>
    <published>2022-08-12T06:02:28.000Z</published>
    <updated>2022-08-23T11:49:34.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Nacos"><a href="#Spring-Cloud-Nacos" class="headerlink" title="Spring Cloud-Nacos"></a>Spring Cloud-Nacos</h1><h2 id="认识Nacos"><a href="#认识Nacos" class="headerlink" title="认识Nacos"></a>认识Nacos</h2><p><code>Nacos</code> 是阿里巴巴的产品，现在是 <code>SpringCloud</code> 中的一个组件。相比 <code>Eureka</code> 功能更加丰富，在国内受欢迎程度较高。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121449674.png" alt="image-20220812144921010"></p><p><code>Nacos /nɑ:kəʊs/</code> 是 Dynamic Naming and Configuration Service的首字母简称，<strong>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</strong></p><p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有猪流类型的“服务”的发现、配置、管理：</p><ul><li><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></p></li><li><p><a href="https://grpc.io/docs/guides/concepts.html#service-definition">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/">Dubbo RPC Service</a></p></li><li><p><a href="https://spring.io/projects/spring-restdocs">Spring Cloud RESTful Service</a></p></li></ul><p><strong>Nacos 的关键特性包括:</strong></p><ul><li><p><strong>服务发现和服务健康监测</strong></p><blockquote><p><strong>Nacos 支持基于 DNS 和基于 RPC 的服务发现。</strong>服务提供者使用 <a href="https://nacos.io/zh-cn/docs/sdk.html">原生SDK</a>、<a href="https://nacos.io/zh-cn/docs/open-api.html">OpenAPI</a>、或一个<a href="https://nacos.io/zh-cn/docs/other-language.html">独立的Agent TODO</a>注册 Service 后，服务消费者可以使用<a href="https://nacos.io/zh-cn/docs/xx">DNS TODO</a> 或<a href="https://nacos.io/zh-cn/docs/open-api.html">HTTP&amp;API</a>查找和发现服务。</p><p><strong>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求</strong>。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p></blockquote></li><li><p><strong>动态配置服务</strong></p><blockquote><p><strong>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</strong></p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的UI (<a href="http://console.nacos.io/nacos/index.html">控制台样例 Demo</a>) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p></blockquote></li><li><p><strong>动态 DNS 服务</strong></p><blockquote><p><strong>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。</strong>动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p><p>Nacos 提供了一些简单的 <a href="https://nacos.io/zh-cn/docs/xx">DNS APIs TODO</a> 帮助您管理服务的关联域名和可用的 IP:PORT 列表.</p></blockquote></li><li><p><strong>服务及其元数据管理</strong></p><blockquote><p><strong>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</strong></p></blockquote></li></ul><blockquote><p>Nacos官方文档：<a href="https://nacos.io/zh-cn/">home (nacos.io)</a></p></blockquote><h2 id="Nacos-地图"><a href="#Nacos-地图" class="headerlink" title="Nacos 地图"></a>Nacos 地图</h2><p>一图看懂 Nacos</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121813662.jpg" alt="nacosMap"></p><h2 id="Nacos生态"><a href="#Nacos生态" class="headerlink" title="Nacos生态"></a>Nacos生态</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121813862.png" alt="nacos_landscape.png"></p><p>如 Nacos 全景图所示，Nacos 无缝支持一些主流的开源生态，例如</p><ul><li><a href="https://nacos.io/en-us/docs/quick-start-spring-cloud.html">Spring Cloud</a></li><li><a href="https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html">Apache Dubbo and Dubbo Mesh</a></li><li><a href="https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html">Kubernetes and CNCF</a>。</li></ul><p>使用 Nacos 简化服务发现、配置管理、服务治理及管理的解决方案，让微服务的发现、管理、共享、组合更加容易。</p><h2 id="Nacos安装-单机"><a href="#Nacos安装-单机" class="headerlink" title="Nacos安装-单机"></a>Nacos安装-单机</h2><h3 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h3><p>有一个能够运行 <strong>docker</strong> 和 <strong>mysql</strong>，可以参考<a href="https://developer.aliyun.com/article/871775?spm=a2c6h.12873639.article-detail.6.b10d6b470PITWC">Docker中运行一个mysql</a></p><h3 id="选择拉取镜像"><a href="#选择拉取镜像" class="headerlink" title="选择拉取镜像"></a>选择拉取镜像</h3><blockquote><p><a href="https://hub.docker.com/r/nacos/nacos-server/tags">https://hub.docker.com/r/nacos/nacos-server/tags</a></p></blockquote><p>这里选择了**<code>2.1.0</code>**版本</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121825334.png" alt="image.png"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server:v2.1.0</span><br></pre></td></tr></table></figure><h3 id="创建nacos数据库"><a href="#创建nacos数据库" class="headerlink" title="创建nacos数据库"></a>创建nacos数据库</h3><blockquote><p>将nacos持久化到mysql数据库中</p><p>新建nacos数据库</p></blockquote><p>从<a href="https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql">Nacos数据库配置</a>下载建表语句。也可以将下列语句粘贴执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><h4 id="获取容器内的配置文件"><a href="#获取容器内的配置文件" class="headerlink" title="获取容器内的配置文件"></a>获取容器内的配置文件</h4><p>先直接部署一个容器</p><blockquote><p>是为了拿到<code>application.properties</code>等配置文件</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=localhost \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0 </span><br></pre></td></tr></table></figure><blockquote><p>参数说明</p><ul><li>MODE&#x3D;standalone 单节点模式（开发阶段单机模式即可）</li><li>SPRING_DATASOURCE_PLATFORM&#x3D;mysql 使用mysql数据库连接方式</li><li>MYSQL_SERVICE_HOST&#x3D;192.168.120.1 指定数据库地址</li><li>MYSQL_SERVICE_PORT 数据库端口</li><li>MYSQL_SERVICE_USER 数据库用户名</li><li>MYSQL_SERVICE_PASSWORD 数据库密码</li><li>MYSQL_SERVICE_DB_NAME 数据库名称</li><li>-p 8848:8848 端口映射</li><li>–name nacos 容器命名</li><li>–restart&#x3D;always 任意时候重启容器，开机就能自动启动容器(需设置docker为开机自启)</li></ul></blockquote><p><strong>Ncaos Docker支持的参数有：</strong></p><p><strong>Common property configuration</strong></p><table><thead><tr><th>属性名称</th><th>描述</th><th>选项</th></tr></thead><tbody><tr><td>MODE</td><td>系统启动方式: 集群&#x2F;单机</td><td>cluster&#x2F;standalone默认 <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>集群地址</td><td>p1:port1空格ip2:port2 空格ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>支持IP还是域名模式</td><td>hostname&#x2F;ip 默认 <strong>ip</strong></td></tr><tr><td>NACOS_SERVER_PORT</td><td>Nacos 运行端口</td><td>默认 <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>多网卡模式下可以指定IP</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>单机模式下支持MYSQL数据库</td><td>mysql &#x2F; 空 默认:空</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>数据库 连接地址</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>数据库端口</td><td>默认 : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>数据库库名</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>数据库用户名</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>数据库用户密码</td><td></td></tr><tr><td>MYSQL_SERVICE_DB_PARAM</td><td>数据库连接参数</td><td>default : <strong>characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false</strong></td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>数据库编号</td><td>默认 :<strong>1</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>默认 :1g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>默认 :1g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>默认 :512m</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>默认 :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>默认 :320m</td></tr><tr><td>NACOS_DEBUG</td><td>是否开启远程DEBUG</td><td>y&#x2F;n 默认 :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>默认 :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>权限系统类型选择,目前只支持nacos类型</td><td>默认 :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>是否开启权限系统</td><td>默认 :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>token 失效时间</td><td>默认 :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>token</td><td>默认 :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>权限缓存开关 ,开启后权限缓存的更新默认有15秒的延迟</td><td>默认 : false</td></tr><tr><td>MEMBER_LIST</td><td>通过环境变量的方式设置集群地址</td><td>例子:192.168.16.101:8847?raft_port&#x3D;8807,192.168.16.101?raft_port&#x3D;8808,192.168.16.101:8849?raft_port&#x3D;8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>是否开启集群嵌入式存储模式</td><td><code>embedded</code> 默认 : none</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>nacos.core.auth.caching.enabled</td><td>default : false</td></tr><tr><td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td><td>nacos.core.auth.enable.userAgentAuthWhite</td><td>default : false</td></tr><tr><td>NACOS_AUTH_IDENTITY_KEY</td><td>nacos.core.auth.server.identity.key</td><td>default : serverIdentity</td></tr><tr><td>NACOS_AUTH_IDENTITY_VALUE</td><td>nacos.core.auth.server.identity.value</td><td>default : security</td></tr><tr><td>NACOS_SECURITY_IGNORE_URLS</td><td>nacos.security.ignore.urls</td><td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/p</code></td></tr></tbody></table><h3 id="宿主机配置文件映射"><a href="#宿主机配置文件映射" class="headerlink" title="宿主机配置文件映射"></a>宿主机配置文件映射</h3><h5 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/conf/application.properties /home/docker/nacos/config/</span><br></pre></td></tr></table></figure><h5 id="拷贝logback日志配置文件"><a href="#拷贝logback日志配置文件" class="headerlink" title="拷贝logback日志配置文件"></a>拷贝logback日志配置文件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/conf/nacos-logback.xml /home/docker/nacos/config/</span><br></pre></td></tr></table></figure><h5 id="修改application-properties的配置"><a href="#修改application-properties的配置" class="headerlink" title="修改application.properties的配置"></a>修改application.properties的配置</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">$&#123;SERVER_SERVLET_CONTEXTPATH:/nacos&#125;</span></span><br><span class="line"><span class="attr">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">$&#123;NACOS_APPLICATION_PORT:8848&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,将SPRING_DATASOURCE_PLATFORM的默认值&quot;&quot;改为mysql</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">$&#123;SPRING_DATASOURCE_PLATFORM:mysql&#125;</span></span><br><span class="line"><span class="attr">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">$&#123;MYSQL_DATABASE_NUM:1&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_HOST的默认值为192.168.120.1,MYSQL_SERVICE_DB_NAME的默认值为nacos</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST:124.222.35.20&#125;:$&#123;MYSQL_SERVICE_PORT:3319&#125;/$&#123;MYSQL_SERVICE_DB_NAME:nacos_config&#125;?$&#123;MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_HOST的默认值为192.168.120.1,MYSQL_SERVICE_DB_NAME的默认值为nacos</span></span><br><span class="line"><span class="attr">db.url.1</span>=<span class="string">jdbc:mysql://$&#123;MYSQL_SERVICE_HOST:124.222.35.20&#125;:$&#123;MYSQL_SERVICE_PORT:3319&#125;/$&#123;MYSQL_SERVICE_DB_NAME:nacos_config&#125;?$&#123;MYSQL_SERVICE_DB_PARAM:characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_USER的默认值为root</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">$&#123;MYSQL_SERVICE_USER:ding&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 修改此行,添加MYSQL_SERVICE_PASSWORD的默认值为root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">$&#123;MYSQL_SERVICE_PASSWORD:dyw20020304&#125;</span></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="attr">nacos.core.auth.system.type</span>=<span class="string">$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.secret.key</span>=<span class="string">$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="attr">nacos.core.auth.caching.enabled</span>=<span class="string">$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="string">$&#123;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.key</span>=<span class="string">$&#123;NACOS_AUTH_IDENTITY_KEY:serverIdentity&#125;</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.value</span>=<span class="string">$&#123;NACOS_AUTH_IDENTITY_VALUE:security&#125;</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D</span></span><br><span class="line"><span class="comment"># default current work dir</span></span><br><span class="line"><span class="attr">server.tomcat.basedir</span>=<span class="string"></span></span><br><span class="line"><span class="comment">## spring security config</span></span><br><span class="line"><span class="comment">### turn off security</span></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">$&#123;NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&#125;</span></span><br></pre></td></tr></table></figure><p>采用添加默认值的方式，这样不会影响指定命令行的参数</p><h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><p>运行之前先删除之前启动的容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop nacos</span><br><span class="line">docker <span class="built_in">rm</span> nacos</span><br></pre></td></tr></table></figure><p>重新运行容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-v /home/docker/nacos/config:/home/nacos/conf \</span><br><span class="line">-v /home/docker/nacos/logs:/home/nacos/logs \</span><br><span class="line">-v /home/docker/nacos/data:/home/nacos/data \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0</span><br></pre></td></tr></table></figure><p>访问：**<code>ip:8848/nacos</code>** 进入 <code>Nacos</code> 图形化控制台</p><p>输入账户密码 默认账户密码都为 nacos</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208121942195.png" alt="image-20220812194232088"></p><p>进入如下界面表示登录成功。</p><h2 id="服务注册-x2F-服务发现"><a href="#服务注册-x2F-服务发现" class="headerlink" title="服务注册&#x2F;服务发现"></a>服务注册&#x2F;服务发现</h2><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>将服务注册到Nacos上，完成服务调用。</p><p>由于 Spring Cloud Commons 定义了Spring Cloud 的一组抽象类和接口，所以Spring Cloud 各类组件的行为都是一致的，例如Spring Cloud 规定了 服务发现接口和 服务注册的接口，Spring Cloud 中的服务治理组件都是实现了这两个接口并衍生的，所以相同类别的组件切换只需要更换依赖和修改配置即可。其他操作与原来一致（例如服务的注册，服务的发现，服务的调用等）</p><p>例如这里我们使用 nacos 代替 eureka 作为注册中心，只需要修改依赖和添加nacos的服务器地址即可，其他行为与原eureka相同，不需要做其他的改变。</p><blockquote><p><strong>Spring Cloud 2021.0.1</strong> 新版本使用 <strong>Spring Cloud Loadbalancer</strong> 做负载均衡，没有默认集成 <strong>Ribbon</strong> 了，在进行服务消费者开发的项目中需要引入 <strong>Loadbalancer</strong> 依赖，这一点需要注意一下。从2021版本开始 Nacos已经不再支持Ribbon了。所以推荐使用Spring Cloud LoadBalaner</p></blockquote><h4 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h4><p>在父工程中添加 <code>spring-cloud-alibaba-dependencies</code>得管理依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Cloud-nacos-provider-payment8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">mybatis-plus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 阿里巴巴--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringCloud-Hello-01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>将<code>Cloud-eureka-consumer-order80</code>工程复制到该父工程的子模块下，改名为<code>Cloud-nacos-consumer-order80</code></p><p>新增pom.xml依赖，并且把原来的eureka的依赖删除或者注释掉。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-nacos-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除掉原来与<code>eureka</code>有关的所有配置，<code>application.yml</code>和代码中的部分</p><p><code>application.yml</code>新增nacos配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br></pre></td></tr></table></figure><hr><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>将<code>Cloud-eureka-provider-payment8001</code> 和 <code>Cloud-eureka-provider-payment8002</code>工程复制到该父工程的子模块下，改名为<code>Cloud-nacos-provider-payment8001</code> 和 <code>Cloud-nacos-provider-payment8002</code></p><p>新增pom.xml依赖，并且把原来的eureka的依赖删除或者注释掉。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整<code>pom.xml</code>依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.devildyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-10-Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-nacos-provider-payment8002<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除掉原来与<code>eureka</code>有关的所有配置，<code>application.yml</code>和代码中的部分</p><p><code>application.yml</code>新增nacos配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动生产者集群和消费者。</p><p>启动完成后可以在Nacos的控制界面中看到，这跟eureka也是一致的。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122314253.png" alt="image-20220812231435085"></p><p>点击详情可以看到服务实例节点的ip、端口等信息。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122315536.png" alt="image-20220812231544441"></p><p>调用<code>get: http://localhost:80/consumer/payment/get/1547503738317369346</code></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208122326542.png" alt="image-20220812232655486"></p><p>调用成功。</p><h2 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h2><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131119550.png" alt="image-20220813111902398"></p><p>一个服务可以包含多个服务集群，集群又可以包含多个服务实例。这就是Nacos的分级存储模型。</p><p><strong>服务跨集群调用问题</strong></p><p>服务调用尽可能选择本地集群的服务，，跨集群调用延迟较高</p><p>本地集群不可访问时，再去访问其他集群。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131121375.png" alt="image-20220813112131302"></p><p>没有设置集群是，会显示DEFAULT</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131126861.png" alt="image-20220813112654815"></p><p>我们可以通过修改<code>application.yml</code>文件来修改配置集群名称</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">ip:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos密码</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">CD</span> <span class="comment">#集群名称</span></span><br></pre></td></tr></table></figure><p>修改后</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131129777.png" alt="image-20220813112952725"></p><p><strong>总结</strong>：</p><ol><li>Nacos服务分级存储模型<ol><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ol></li><li>如何设置实例的集群属性<ol><li>修改<code>application.yml</code>文件，添加集群名称即可。</li></ol></li></ol><h2 id="NacosRule-负载均衡"><a href="#NacosRule-负载均衡" class="headerlink" title="NacosRule 负载均衡"></a>NacosRule 负载均衡</h2><p>Nacos + Ribbon特有的策略</p><blockquote><p>Spring Cloud Nacos 2021 版本开始已经禁止使用Ribbon做负载均衡了，而使用LoadBalancer有没有许多支持的策略，所以这里我们选择老版本的Spring Cloud Nacos 做演示。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者添加如上依赖后，修改<code>application.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud-payment-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure><p>为 <code>cloud-payment-service</code> 服务配置Nacos的集群负载均衡策略。</p><p>修改后消费者就会优先调用同一个集群内的服务提供者。如果同一集群内的服务提供者宕机或者发生网络波动断开了与注册中心的连接，消费者就会向其他集群内的提供者发起调用，并且会在控制台提醒发生了跨集群调用。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131309334.png" alt="image-20220813130918232"></p><p><strong>总结：</strong></p><ol><li>NacosRule负载均衡策略<ol><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其他集群寻找，并且会报警</li><li><strong>确定了可用实例列表后，再采用随机负载均衡挑选实例。</strong></li></ol></li></ol><h3 id="根据权重负载均衡"><a href="#根据权重负载均衡" class="headerlink" title="根据权重负载均衡"></a>根据权重负载均衡</h3><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能由差异，部分实例所在机器性能比较好，另一些较差，我没希望性能好的机器承担更多的用户请求。</li></ul><p>Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131456215.png" alt="image-20220813145655114"></p><p>将权重设置为0.1，测试可以发现8001被访问到的频率大大降低</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131457175.png" alt="image-20220813145757129"></p><p><strong>用途</strong></p><p>除了希望将性能更好的机器承担更多的用户请求外，还有一点；当我们想要将某一服务实例做维护时，可以将该服务实例的权重调为0，慢慢的请求将不会再发送到该实例上，我们就可以将其下线进行维护，等维护完毕，想要上线时，将其的权重调小一点，放部分请求测试服务是否可用后，再将其的权重调为正常值。<strong>在此期间用户时完全没有感知的</strong>。</p><p><strong>总结</strong></p><ol><li>实例的权重控制<ol><li>Nacos控制台可用设置实例的权重值，0~1之间</li><li>统计群内的多个实例，权重越高被访问的频率越高</li><li>权重为0则完全不会被访问</li></ol></li></ol><h2 id="环境隔离-NameSpace"><a href="#环境隔离-NameSpace" class="headerlink" title="环境隔离 - NameSpace"></a>环境隔离 - NameSpace</h2><p>Nacos中服务存储和数据存储的最外层都是一个名为 namespace 的东西，用来做最外层隔离。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131508378.png"></p><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><p>Nacos 数据模型 Key 由三元组唯一确认。</p><ul><li><strong>作为注册中心时，Namespace + Group + Service</strong></li><li><strong>作为配置中心时，Namespace + Group + DataId</strong></li></ul><p>在Nacos控制台可用创建 namespace，用来隔离环境</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131513130.png" alt="image-20220813151321008"></p><p>然后填写一个新的命名空间信息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131514573.png" alt="image-20220813151432517"></p><p>保存后会在控制台看到这个命名空间的id：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131515237.png" alt="image-20220813151506147"></p><p>而我们创建的服务注册到 Nacos 上默认都是在 public 这个命名空间下，想要修改就需要在<code>application.yml</code> 中添加如下配置。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">6f5658db-97ef-45e7-b48c-d3a8309275a3</span> <span class="comment">#namespace的id</span></span><br></pre></td></tr></table></figure><p>配置好后 在dev的命名空间下就可以看到我们配置的服务。</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131518316.png" alt="image-20220813151841255"></p><p>此时访问消费者调用提供者的接口，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131519203.png" alt="image-20220813151944162"></p><p><strong>总结</strong></p><ol><li>Nacos环境隔离<ol><li>每个namespace都有唯一id</li><li>服务设置namespace时要写id而不是名称</li><li>不同namespace下的服务互相不可见</li></ol></li></ol><h2 id="配置分组-Group"><a href="#配置分组-Group" class="headerlink" title="配置分组-Group"></a>配置分组-Group</h2><p>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：<strong>不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置</strong>。</p><h2 id="Nacos-与-Eureka-对比"><a href="#Nacos-与-Eureka-对比" class="headerlink" title="Nacos 与 Eureka 对比"></a>Nacos 与 Eureka 对比</h2><p>nacos注册中心细节分析</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208131522369.png" alt="image-20220813152243270"></p><p>消费者并不是每一次都向注册中心拉取一次服务列表，而是有一个缓存，nacos客户端会对服务列表做一个服务列表缓存，默认每隔30秒刷新一次。这一点与Eureka一致；<strong>但是当发现有服务变更，Nacos会主动推送变更消息到消费者。</strong></p><p>Nacos对于临时实例采用心跳检测（即服务每个一段时间向 Nacos 发起一次心跳），如果超过一段时间后 Nacos 接收不到服务的心跳了，就会把这个临时实例剔除；</p><p>但是对于非临时实例 服务实例不再需要向 Nacos 发送心跳，而是Nacos主动询问节点是否存活。并且服务挂掉了也不会将其直接剔除，而是标记为不健康的实例。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">#修改为非临时实例</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>Nacos 与 Eureka 的共同点<ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ol></li><li>Nacos 与 Eureka 的区别<ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时。</li><li>Nacos 集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式。</li></ol></li></ol><hr><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>前面我们学过 Spring Cloud Config。这里我们学习 Nacos 的配置管理，这也是非常流行的方式。</p><ul><li>配置更改热更新</li></ul><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132156351.png"></p><p>Spring Cloud Alibaba Nacos 即有服务注册&#x2F;发现的功能，又有配置管理的功能。 </p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在Nacos控制台上添加配置</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132159724.png" alt="image-20220813215901633"></p><p>在弹出表单中填写配置信息：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132159829.png" alt="image-20220813215938772"></p><h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><p>配置获取的步骤如下：</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208132203450.png" alt="image-20220813220331379"></p><ol><li>引入Nacos的配置管理客户端依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在resource目录添加一个bootstrap.yml文件，<strong>这个文件是引导文件，优先级高于application.yml</strong>，用来在引导配置管理中心的的信息，来获取配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>配置后可以将Application.yml中的nacos相关配置给删除，但还是按需配置。</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String dateFormat;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateFormat));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>启动后 访问对于接口</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-14</span> <span class="number">11</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">:</span><span class="number">48</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>总结：</strong></p><p>将配置交给Nacos管理的步骤</p><ol><li>在Nacos中添加配置文件。</li><li>在微服务中引入nacos的config依赖。</li><li>在微服务中添加bootstrap.yml，配置nacos地址、当前环境、服务名称、文件后缀名。这些决定了程序启动时去nacos读取那个文件。</li></ol><h3 id="配置自动刷新"><a href="#配置自动刷新" class="headerlink" title="配置自动刷新"></a>配置自动刷新</h3><p>Nacos中的配置文件变更后，微服务无需重启就可以感知。<strong>与Spring Cloud Config 不同的是Nacos配置文件发送变动后会主动推送给订阅者。</strong>不过需要通过下面两种配置实现：</p><p><strong>方式一：</strong></p><p>在 @Value 注入的变量所在类上添加注解 @RefreshScope</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateFormat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateFormat));</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>使用@ConfigurationProperties注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">PatternProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(properties.getDateformat()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Nacos配置更改后，微服务可以实现热更新，方式：</p><ol><li>通过@Value注解注入，结合@RefreshScope来刷新</li><li>通过@ConfigurationProperties注入，自动刷新</li></ol><p>注意事项：</p><ul><li>不是所有的配置都适合放到配置中心，维护起来比较麻烦</li><li>建议将一些关键参数，需要运行时调整的参数放到nacos配置中心，一般都是自定义配置</li></ul><h3 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h3><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>[spring.application.name]-[spring.profiles.active].yaml，例如：userservice-dev.yaml</li><li>[spring.application.name].yaml，例如：userservice.yaml无论profile</li></ul><p>如何变化，[spring.application.name].yaml这个文件一定会加载，因此多环境共享配置可以写入这个文件</p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141332991.png" alt="image-20220814133233859"></p><p>新增配置文件<code>cloud-order-service.yaml</code> </p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141333328.png" alt="image-20220814133314239"></p><p><strong>测试</strong></p><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String envSharedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">PatternProperties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;prop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PatternProperties <span class="title function_">properties</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd  HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;环境共享属性值&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>发现确实访问到了未带有属性的配置文件。</p><p><strong>多环境配置覆盖优先级</strong></p><p><strong>服务名-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141343402.png" alt="image-20220814134350338"></p><p><strong>总结：</strong></p><p>微服务会从nacos读取的配置文件：</p><ol><li>[服务名]-[spring.profile.active].yaml，环境配置</li><li>[服务名].yaml，默认配置，多环境共享</li></ol><p>优先级：</p><ul><li>[服务名]-[环境].yaml &gt;[服务名].yaml &gt; 本地配置</li></ul><h3 id="多服务共享配置"><a href="#多服务共享配置" class="headerlink" title="多服务共享配置"></a>多服务共享配置</h3><p>不同微服务之间可以共享配置文件，通过下面的两种方式来指定：</p><p>首先创建一个用来共享的配置文件。<strong>即除了配置中心独有特质的配置文件外，还想配置中心拉取以创建的共享的配置文件</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141354786.png" alt="image-20220814135415706"></p><p><strong>方式一：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># 多微服务共享配置文件 配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">36.137</span><span class="number">.128</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件名后缀</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># 多微服务共享配置文件 配置</span></span><br><span class="line">        <span class="attr">extension-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;共享配置文件&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>多种配置的覆盖优先级：</strong></p><p><strong>服务名-profile.yaml  &gt;服务名称.yaml  &gt;  extension-config &gt; shared-config &gt;  本地配置</strong></p><p><img src="https://ding-blog.oss-cn-chengdu.aliyuncs.com/images/202208141355287.png" alt="image-20220814135520212"></p><p><strong>总结</strong></p><p>微服务默认读取的配置文件：</p><ol><li>[服务名]-[spring.profile.active].yaml，默认配置</li><li>[服务名].yaml，多环境共享</li></ol><p>不同微服务共享的配置文件：</p><ol><li>通过shared-configs指定</li><li>通过extension-configs指定</li></ol><p>优先级：</p><ul><li>环境配置 &gt;服务名.yaml &gt; extension-config &gt; extension-configs &gt; shared-configs &gt; 本地配置</li></ul><h2 id="Nacos安装-集群"><a href="#Nacos安装-集群" class="headerlink" title="Nacos安装-集群"></a>Nacos安装-集群</h2><p>docker network create nacos-net</p><h2 id="Open-API"><a href="#Open-API" class="headerlink" title="Open-API"></a>Open-API</h2><blockquote><p>Nacos open-API官网地址：<a href="https://nacos.io/zh-cn/docs/open-api.html">https://nacos.io/zh-cn/docs/open-api.html</a></p><p>包含了查询服务实例、注销服务实例等功能。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Nacos&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Nacos&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud-Nacos&quot;&gt;&lt;/a&gt;Spring Cloud-Nacos&lt;/h1&gt;&lt;h2 id=&quot;认</summary>
      
    
    
    
    <category term="注册中心" scheme="https://devildyw.github.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Spring Cloud" scheme="https://devildyw.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
